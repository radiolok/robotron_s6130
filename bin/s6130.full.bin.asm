ROM:0000          ;
ROM:0000          ; +-------------------------------------------------------------------------+
ROM:0000          ; |      This file was generated by The Interactive Disassembler (IDA)      |
ROM:0000          ; |           Copyright (c) 2024 Hex-Rays, <support@hex-rays.com>           |
ROM:0000          ; |                      License info: D4-9944-4EDF-28                      |
ROM:0000          ; |                      <error retrieving user info>                       |
ROM:0000          ; +-------------------------------------------------------------------------+
ROM:0000          ;
ROM:0000          ; Input SHA256 : BAA24F28FA435E55F727DAD7B9E3A6ECD5FE0EAA2338BEE93A8A1F0ED8322960
ROM:0000          ; Input MD5    : 3CB172ED3A37E2A9BA93E9E949CB6D21
ROM:0000          ; Input CRC32  : C2D88A15
ROM:0000
ROM:0000          ; File Name   : C:\Users\radiolok\radiolok@oc.urlnn.ru\Projects\20190290-Robotron\robotron_s6130\bin\s6130.full.bin
ROM:0000          ; Format      : Binary file
ROM:0000          ; Base Address: 0000h Range: 0000h - 3800h Loaded length: 3800h
ROM:0000
ROM:0000          ; Processor       : z80 []
ROM:0000          ; Target assembler: Zilog Macro Assembler
ROM:0000
ROM:0000          ; ===========================================================================
ROM:0000
ROM:0000          ; Segment type: Pure code
ROM:0000                          segment ROM
ROM:0000
ROM:0000          ; =============== S U B R O U T I N E =======================================
ROM:0000
ROM:0000
ROM:0000          Init:
ROM:0000 31 40 40                 ld      sp, 4040h       ; Move o1 <- o2
ROM:0003 FF                       rst     38h             ; Restart at vector <int>
ROM:0003
ROM:0003          ; End of function Init
ROM:0003
ROM:0004 C3 EF 19                 jp      Start           ; Jump (conditional & unconditional)
ROM:0004
ROM:0004          ; ---------------------------------------------------------------------------
ROM:0007 02                       db    2
ROM:0008
ROM:0008          ; =============== S U B R O U T I N E =======================================
ROM:0008
ROM:0008
ROM:0008          sub_8:                                  ; CODE XREF: sub_AD4+1E↓p
ROM:0008                                                  ; sub_B20+F↓p ...
ROM:0008 21 6F 40                 ld      hl, 406Fh       ; Move o1 <- o2
ROM:000B C9                       ret                     ; Return (cond & uncond)
ROM:000B
ROM:000B          ; End of function sub_8
ROM:000B
ROM:000B          ; ---------------------------------------------------------------------------
ROM:000C 3C                       db  3Ch ; <
ROM:000D 24                       db  24h ; $
ROM:000E E7                       db 0E7h
ROM:000F 24                       db  24h ; $
ROM:0010
ROM:0010          ; =============== S U B R O U T I N E =======================================
ROM:0010
ROM:0010          ; HL = HL - DE; Carry if DE < HL
ROM:0010          ; Attributes: thunk
ROM:0010
ROM:0010          j_SubWord_hl_de_:                       ; CODE XREF: sub_6A7+3↓p
ROM:0010                                                  ; sub_CF6+6↓p ...
ROM:0010 C3 EE 13                 jp      SubWord_hl_de_  ; return HL-DE and set Carry flag
ROM:0010
ROM:0010          ; End of function j_SubWord_hl_de_
ROM:0010
ROM:0010          ; ---------------------------------------------------------------------------
ROM:0013 40                       db  40h ; @
ROM:0014 9A                       db  9Ah
ROM:0015 1E                       db  1Eh
ROM:0016 01                       db    1
ROM:0017 00                       db    0
ROM:0018
ROM:0018          ; =============== S U B R O U T I N E =======================================
ROM:0018
ROM:0018          ; KeyboardReadColumn Arguments:
ROM:0018          ; A - if < 10h is 0000xxxx read mask
ROM:0018          ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:0018          ;         A[5:3] - bit index for...
ROM:0018          ;         A[2:0] - bit index for...
ROM:0018          ; Return: A - Value from port, Z flag if A is empty
ROM:0018          ; Attributes: thunk
ROM:0018
ROM:0018          j_KeyboardReadColumn:                   ; CODE XREF: sub_D10+A9↓p
ROM:0018                                                  ; sub_F0B+A↓p ...
ROM:0018 C3 C2 10                 jp      KeyboardReadColumn ; KeyboardReadColumn Arguments:
ROM:0018                                                  ; A - if < 10h is 0000xxxx read mask
ROM:0018                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:0018                                                  ;         A[5:3] - bit index for read
ROM:0018                                                  ;         A[2:0] - bit index for write
ROM:0018                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:0018
ROM:0018          ; End of function j_KeyboardReadColumn
ROM:0018
ROM:0018          ; ---------------------------------------------------------------------------
ROM:001B AC                       db 0ACh
ROM:001C BD                       db 0BDh
ROM:001D 69                       db  69h ; i
ROM:001E 9F                       db  9Fh
ROM:001F 0B                       db  0Bh
ROM:0020
ROM:0020          ; =============== S U B R O U T I N E =======================================
ROM:0020
ROM:0020          ; Attributes: thunk
ROM:0020
ROM:0020          sub_20:                                 ; CODE XREF: sub_1D2D:loc_1D72↓p
ROM:0020                                                  ; ROM:1E02↓p ...
ROM:0020 C3 6C 11                 jp      sub_116C        ; Jump (conditional & unconditional)
ROM:0020
ROM:0020          ; End of function sub_20
ROM:0020
ROM:0020          ; ---------------------------------------------------------------------------
ROM:0023 6F                       db  6Fh ; o
ROM:0024 BF                       db 0BFh
ROM:0025 A8                       db 0A8h
ROM:0026 40                       db  40h ; @
ROM:0027 88                       db  88h
ROM:0028
ROM:0028          ; =============== S U B R O U T I N E =======================================
ROM:0028
ROM:0028          ; Attributes: thunk
ROM:0028
ROM:0028          sub_28:                                 ; CODE XREF: sub_19FC:loc_1A12↓p
ROM:0028                                                  ; sub_2905:loc_20D6↓p ...
ROM:0028 C3 94 10                 jp      sub_1094        ; Jump (conditional & unconditional)
ROM:0028
ROM:0028          ; End of function sub_28
ROM:0028
ROM:0028          ; ---------------------------------------------------------------------------
ROM:002B CE                       db 0CEh
ROM:002C 00                       db    0
ROM:002D 6B                       db  6Bh ; k
ROM:002E 82                       db  82h
ROM:002F 68                       db  68h ; h
ROM:0030
ROM:0030          ; =============== S U B R O U T I N E =======================================
ROM:0030
ROM:0030          ; Attributes: thunk
ROM:0030
ROM:0030          sub_30:                                 ; CODE XREF: sub_19FC+42↓p
ROM:0030                                                  ; sub_2905-865↓p ...
ROM:0030 C3 73 0F                 jp      sub_F73         ; KbColumnChB_send04h
ROM:0030
ROM:0030          ; End of function sub_30
ROM:0030
ROM:0030          ; ---------------------------------------------------------------------------
ROM:0033 79                       db  79h ; y
ROM:0034 12                       db  12h
ROM:0035 11                       db  11h
ROM:0036 0A                       db  0Ah
ROM:0037 11                       db  11h
ROM:0038
ROM:0038          ; =============== S U B R O U T I N E =======================================
ROM:0038
ROM:0038
ROM:0038          Check_debug:                            ; CODE XREF: Init+3↑p
ROM:0038                                                  ; ROM:0106↓p ...
ROM:0038 7F                       ld      a, a            ; Move o1 <- o2
ROM:0039 F5                       push    af              ; Push register pair onto stack
ROM:003A 3A 00 38                 ld      a, (Debug_code) ; Move o1 <- o2
ROM:003D FE 52                    cp      52h ; 'R'       ; if Debug Code is started with R
ROM:003F 28 07                    jr      z, Run_debug    ; Jump relative (conditional & unconditional)
ROM:003F
ROM:0041 ED 57                    ld      a, i            ; Move o1 <- o2
ROM:0043 28 01                    jr      z, loc_46       ; Jump relative (conditional & unconditional)
ROM:0043
ROM:0045 76                       halt                    ; halt if I reg already set
ROM:0045
ROM:0046
ROM:0046          loc_46:                                 ; CODE XREF: Check_debug+B↑j
ROM:0046 F1                       pop     af              ; Pop register pair from stack
ROM:0047 C9                       ret                     ; Return (cond & uncond)
ROM:0047
ROM:0048          ; ---------------------------------------------------------------------------
ROM:0048
ROM:0048          Run_debug:                              ; CODE XREF: Check_debug+7↑j
ROM:0048 F1                       pop     af              ; Pop register pair from stack
ROM:0049 C3 03 38                 jp      Debug_routine   ; Jump (conditional & unconditional)
ROM:0049
ROM:0049          ; End of function Check_debug
ROM:0049
ROM:004C
ROM:004C          ; =============== S U B R O U T I N E =======================================
ROM:004C
ROM:004C          ; Cleanup memory
ROM:004C
ROM:004C          CleanupMemory:
ROM:004C
ROM:004C          ; FUNCTION CHUNK AT ROM:19EF SIZE 0000000D BYTES
ROM:004C
ROM:004C 21 41 40                 ld      hl, 4041h       ; Move o1 <- o2
ROM:004C
ROM:004F
ROM:004F          loc_4F:                                 ; CODE XREF: CleanupMemory+6↓j
ROM:004F 36 00                    ld      (hl), 0         ; Move o1 <- o2
ROM:0051 2C                       inc     l               ; Increment operand
ROM:0052 20 FB                    jr      nz, loc_4F      ; Jump relative (conditional & unconditional)
ROM:0052
ROM:0054 C3 EF 19                 jp      Start           ; Jump (conditional & unconditional)
ROM:0054
ROM:0054          ; End of function CleanupMemory
ROM:0054
ROM:0054          ; ---------------------------------------------------------------------------
ROM:0057 07                       db 7
ROM:0058 8B                       db 8Bh
ROM:0059 08                       db 8
ROM:005A 2A                       db 2Ah
ROM:005B 0A                       db  0Ah
ROM:005C 8C                       db  8Ch
ROM:005D 0A                       db 0Ah
ROM:005E BB                       db 0BBh
ROM:005F 0A                       db 0Ah
ROM:0060 73                       db 73h
ROM:0061 0F                       db  0Fh
ROM:0062 F6                       db 0F6h
ROM:0063 0F                       db  0Fh
ROM:0064 94                       db 94h
ROM:0065 10                       db  10h
ROM:0066          ; ---------------------------------------------------------------------------
ROM:0066
ROM:0066          NMI:
ROM:0066 C3 FD 5F                 jp      NMI_hdlr        ; Jump (conditional & unconditional)
ROM:0066
ROM:0066          ; ---------------------------------------------------------------------------
ROM:0069 90                       db  90h
ROM:006A 44                       db  44h ; D
ROM:006B B2                       db 0B2h
ROM:006C 0B                       db  0Bh
ROM:006D 19                       db  19h
ROM:006E 0B                       db  0Bh
ROM:006F 5D                       db  5Dh ; ]
ROM:0070 0B                       db  0Bh
ROM:0071 CB                       db 0CBh
ROM:0072 0A                       db  0Ah
ROM:0073 07                       db    7
ROM:0074 00                       db    0
ROM:0075 AF                       db 0AFh
ROM:0076 7B                       db  7Bh ; {
ROM:0077 08                       db    8
ROM:0078 F0                       db 0F0h
ROM:0079 D3                       db 0D3h
ROM:007A 10                       db  10h
ROM:007B E2                       db 0E2h
ROM:007C C8                       db 0C8h
ROM:007D 18                       db  18h
ROM:007E 30                       db  30h ; 0
ROM:007F 84                       db  84h
ROM:0080 20                       db  20h
ROM:0081 65                       db  65h ; e
ROM:0082 3A                       db  3Ah ; :
ROM:0083 28                       db  28h ; (
ROM:0084 6C                       db  6Ch ; l
ROM:0085 5D                       db  5Dh ; ]
ROM:0086 30                       db  30h ; 0
ROM:0087 04                       db    4
ROM:0088 BE                       db 0BEh
ROM:0089 89                       db  89h
ROM:008A 93                       db  93h
ROM:008B 16                       db  16h
ROM:008C 3C                       db  3Ch ; <
ROM:008D 29                       db  29h ; )
ROM:008E 63                       db  63h ; c
ROM:008F 46                       db  46h ; F
ROM:0090 CC                       db 0CCh
ROM:0091 66                       db  66h ; f             ; stepper_B_steps
ROM:0091                                                  ; 91h - 98h
ROM:0092 CC                       db 0CCh
ROM:0093 99                       db  99h
ROM:0094 33                       db  33h ; 3
ROM:0095 66                       db  66h ; f
ROM:0096 CC                       db 0CCh
ROM:0097 99                       db  99h
ROM:0098 33                       db  33h ; 3             ; stepper_B_steps_last
ROM:0099 C0                       db 0C0h
ROM:009A 06                       db    6
ROM:009B 3C                       db  3Ch ; <
ROM:009C 00                       db    0
ROM:009D 66                       db  66h ; f
ROM:009E 00                       db    0
ROM:009F 70 00    word_9F:        dw 70h                  ; DATA XREF: sub_12F7+20↓r
ROM:00A1 70                       db  70h ; p
ROM:00A2 03                       db    3
ROM:00A3 E8                       db 0E8h
ROM:00A4 00                       db    0
ROM:00A5 AC                       db 0ACh
ROM:00A6 00                       db    0
ROM:00A7 3E                       db  3Eh ; >
ROM:00A8 01                       db    1
ROM:00A9 46                       db  46h ; F
ROM:00AA 02                       db    2
ROM:00AB 34 06    word_AB:        dw 634h                 ; DATA XREF: sub_B81+C↓r
ROM:00AB                                                  ; SetupTimers_Ch1_Ch3:loc_EDC↓r ...
ROM:00AD 00                       db    0
ROM:00AE 80       byte_AE:        db 80h                  ; DATA XREF: sub_12C7+18↓r
ROM:00AF 03                       db    3
ROM:00B0 32       byte_B0:        db 32h                  ; DATA XREF: sub_12C7+12↓r
ROM:00B1 04       byte_B1:        db 4                    ; DATA XREF: sub_12F7↓r
ROM:00B2 15 00    word_B2:        dw 15h                  ; DATA XREF: sub_34CA+43↓r
ROM:00B2                                                  ; sub_3633+3↓r ...
ROM:00B4 DC 05    word_B4:        dw 5DCh                 ; DATA XREF: sub_3633+2C↓r
ROM:00B6 5C 06    word_B6:        dw 65Ch                 ; DATA XREF: sub_34CA+48↓r
ROM:00B6                                                  ; sub_34CA+78↓r ...
ROM:00B8 71 06    word_B8:        dw 671h                 ; DATA XREF: sub_34CA+57↓r
ROM:00B8                                                  ; sub_3633↓r
ROM:00BA 0C                       db  0Ch
ROM:00BB 03                       db    3
ROM:00BC 8C                       db  8Ch
ROM:00BD 03                       db    3
ROM:00BE AC                       db 0ACh
ROM:00BF 03                       db    3
ROM:00C0 94                       db  94h
ROM:00C1 03                       db    3
ROM:00C2 94                       db  94h
ROM:00C3 02                       db    2
ROM:00C4 04                       db    4
ROM:00C5 03                       db    3
ROM:00C6 18                       db  18h
ROM:00C7 03                       db    3
ROM:00C8 14                       db  14h
ROM:00C9 04                       db    4
ROM:00CA 2C                       db  2Ch ; ,
ROM:00CB 1D                       db  1Dh
ROM:00CC 67                       db  67h ; g
ROM:00CD B0                       db 0B0h
ROM:00CE 04                       db    4
ROM:00CF 30                       db  30h ; 0
ROM:00D0 05                       db    5
ROM:00D1 50                       db  50h ; P
ROM:00D2 05                       db    5
ROM:00D3 38                       db  38h ; 8
ROM:00D4 05                       db    5
ROM:00D5 38                       db  38h ; 8
ROM:00D6 04                       db    4
ROM:00D7 A8                       db 0A8h
ROM:00D8 04                       db    4
ROM:00D9 BC                       db 0BCh
ROM:00DA 04                       db    4
ROM:00DB B8                       db 0B8h
ROM:00DC 05                       db    5
ROM:00DD 2C                       db  2Ch ; ,
ROM:00DE 1D                       db  1Dh
ROM:00DF 67                       db  67h ; g
ROM:00E0 88                       db  88h                 ; Copied to 41B0
ROM:00E0                                                  ; Start
ROM:00E0                                                  ; Row_A 01 Col_A 02: Pressure
ROM:00E1 4A                       db  4Ah ; J
ROM:00E2 18                       db  18h
ROM:00E3 89                       db  89h                 ; Row_A 02 Col A 02: Scripture
ROM:00E4 6F                       db  6Fh ; o
ROM:00E5 18                       db  18h
ROM:00E6 90                       db  90h                 ; Row A 01 Col A 04: Ribbon
ROM:00E7 8D                       db  8Dh
ROM:00E8 18                       db  18h
ROM:00E9 8B                       db  8Bh                 ; Row_A 08 Col A 02: Blocksatz
ROM:00EA F1                       db 0F1h
ROM:00EB 18                       db  18h
ROM:00EC 8C                       db  8Ch                 ; Row 4, Col 1: Uart Receive button
ROM:00ED E6                       db 0E6h
ROM:00EE 18                       db  18h
ROM:00EF 9D                       db  9Dh                 ; Row 5 Col 3: Uart Send button
ROM:00F0 C8                       db 0C8h
ROM:00F1 18                       db  18h
ROM:00F2 00                       db    0                 ; Language
ROM:00F3 A4                       db 0A4h
ROM:00F4 18                       db  18h                 ; Finish
ROM:00F5 BC       MOD_menu:       db 0BCh                 ; Copied to 419D
ROM:00F5                                                  ; Pressure energy symbol
ROM:00F6 03                       db    3                 ; Scripture position symbol
ROM:00F7 B8                       db 0B8h                 ; Ribbon cassette
ROM:00F8 88                       db  88h                 ; Blocksatz
ROM:00F9 BB                       db 0BBh                 ; Receive interface
ROM:00FA BA                       db 0BAh                 ; Send interface
ROM:00FB 94                       db  94h                 ; Language Switching
ROM:00FB                                                  ; End
ROM:00FC 44                       db  44h ; D
ROM:00FD 48                       db  48h ; H
ROM:00FE 4C                       db  4Ch ; L
ROM:00FF 50                       db  50h ; P
ROM:0100 54                       db  54h ; T
ROM:0101 58                       db  58h ; X
ROM:0102 5C                       db  5Ch ; \
ROM:0103 60                       db  60h ; `
ROM:0104 64                       db  64h ; d
ROM:0105 68                       db  68h ; h
ROM:0106          ; ---------------------------------------------------------------------------
ROM:0106 FF                       rst     38h             ; Restart at vector <int>
ROM:0106
ROM:0107 FF                       rst     38h             ; Restart at vector <int>
ROM:0107
ROM:0108 FF                       rst     38h             ; Restart at vector <int>
ROM:0108
ROM:0109 FF                       rst     38h             ; Restart at vector <int>
ROM:0109
ROM:010A FF                       rst     38h             ; Restart at vector <int>
ROM:010A
ROM:010B FF                       rst     38h             ; Restart at vector <int>
ROM:010B
ROM:010C FF                       rst     38h             ; Restart at vector <int>
ROM:010C
ROM:010D FF                       rst     38h             ; Restart at vector <int>
ROM:010D
ROM:010E FF                       rst     38h             ; Restart at vector <int>
ROM:010E
ROM:010F FF                       rst     38h             ; Restart at vector <int>
ROM:010F
ROM:010F          ; ---------------------------------------------------------------------------
ROM:0110 61 00    word_110:       dw 61h                  ; DATA XREF: sub_1B5B:loc_1BC7↓r
ROM:0110                                                  ; sub_1C67+F↓r ...
ROM:0112
ROM:0112          ; =============== S U B R O U T I N E =======================================
ROM:0112
ROM:0112          ; Attributes: thunk
ROM:0112
ROM:0112          sub_112:                                ; CODE XREF: sub_2188+FA6↓p
ROM:0112                                                  ; sub_2188+FC3↓p
ROM:0112 C3 88 31                 jp      sub_3188        ; Jump (conditional & unconditional)
ROM:0112
ROM:0112          ; End of function sub_112
ROM:0112
ROM:0112          ; ---------------------------------------------------------------------------
ROM:0115 4B       Code_page:      db  4Bh ; K
ROM:0116 C2                       db 0C2h
ROM:0117 31                       db  31h ; 1
ROM:0118 10                       db  10h
ROM:0119 11                       db  11h
ROM:011A 12                       db  12h
ROM:011B 13                       db  13h
ROM:011C 14                       db  14h
ROM:011D 80                       db  80h
ROM:011E 1D                       db  1Dh
ROM:011F 17                       db  17h
ROM:0120 1D                       db  1Dh
ROM:0121 19                       db  19h
ROM:0122 1A                       db  1Ah
ROM:0123 1B                       db  1Bh
ROM:0124 DF                       db 0DFh
ROM:0125 1D                       db 1Dh
ROM:0126 CD                       db 0CDh
ROM:0127 56                       db  56h ; V
ROM:0128 20                       db  20h
ROM:0129 21                       db 21h
ROM:012A 22                       db  22h ; "
ROM:012B 49                       db  49h ; I
ROM:012C 3E                       db 3Eh
ROM:012D 25                       db  25h ; %
ROM:012E 8B                       db 8Bh
ROM:012F 8C                       db 8Ch
ROM:0130 28                       db  28h ; (
ROM:0131 29                       db  29h ; )
ROM:0132 3B                       db  3Bh ; ;
ROM:0133 2B                       db  2Bh ; +
ROM:0134 2C                       db  2Ch ; ,
ROM:0135 2D                       db  2Dh ; -
ROM:0136 2E                       db  2Eh ; .
ROM:0137 2F                       db  2Fh ; /
ROM:0138 30                       db  30h ; 0
ROM:0139 31                       db  31h ; 1
ROM:013A 32                       db  32h ; 2
ROM:013B 33                       db  33h ; 3
ROM:013C 34                       db  34h ; 4
ROM:013D 35                       db  35h ; 5
ROM:013E 36                       db  36h ; 6
ROM:013F 37                       db  37h ; 7
ROM:0140 38                       db  38h ; 8
ROM:0141 39                       db  39h ; 9
ROM:0142 3A                       db  3Ah ; :
ROM:0143 03                       db    3
ROM:0144 24                       db  24h ; $
ROM:0145 3D                       db  3Dh ; =
ROM:0146 E8                       db 0E8h
ROM:0147 3F                       db  3Fh ; ?
ROM:0148 C0                       db 0C0h
ROM:0149 41                       db  41h ; A
ROM:014A C2                       db 0C2h
ROM:014B C3                       db 0C3h
ROM:014C C4                       db 0C4h
ROM:014D 45                       db  45h ; E
ROM:014E C6                       db 0C6h
ROM:014F C7                       db 0C7h
ROM:0150 58                       db  58h ; X
ROM:0151 C9                       db 0C9h
ROM:0152 CA                       db 0CAh
ROM:0153 4B                       db  4Bh ; K
ROM:0154 CC                       db 0CCh
ROM:0155 4D                       db  4Dh ; M
ROM:0156 48                       db  48h ; H
ROM:0157 4F                       db  4Fh ; O
ROM:0158 D0                       db 0D0h
ROM:0159 D1                       db 0D1h
ROM:015A 50                       db  50h ; P
ROM:015B 43                       db  43h ; C
ROM:015C 54                       db  54h ; T
ROM:015D D5                       db 0D5h
ROM:015E D6                       db 0D6h
ROM:015F 42                       db  42h ; B
ROM:0160 D8                       db 0D8h
ROM:0161 D9                       db 0D9h
ROM:0162 DA                       db 0DAh
ROM:0163 DB                       db 0DBh
ROM:0164 DC                       db 0DCh
ROM:0165 DD                       db 0DDh
ROM:0166 DE                       db 0DEh
ROM:0167 5F                       db  5Fh ; _
ROM:0168 E0                       db 0E0h
ROM:0169 61                       db  61h ; a
ROM:016A E2                       db 0E2h
ROM:016B E3                       db 0E3h
ROM:016C E4                       db 0E4h
ROM:016D 65                       db  65h ; e
ROM:016E E6                       db 0E6h
ROM:016F E7                       db 0E7h
ROM:0170 78                       db  78h ; x
ROM:0171 E9                       db 0E9h
ROM:0172 EA                       db 0EAh
ROM:0173 EB                       db 0EBh
ROM:0174 EC                       db 0ECh
ROM:0175 ED                       db 0EDh
ROM:0176 EE                       db 0EEh
ROM:0177 6F                       db  6Fh ; o
ROM:0178 6E                       db  6Eh ; n
ROM:0179 F1                       db 0F1h
ROM:017A 70                       db  70h ; p
ROM:017B 63                       db  63h ; c
ROM:017C F4                       db 0F4h
ROM:017D C5                       db 0C5h
ROM:017E F6                       db 0F6h
ROM:017F CB                       db 0CBh
ROM:0180 F8                       db 0F8h
ROM:0181 F9                       db 0F9h
ROM:0182 FA                       db 0FAh
ROM:0183 D2                       db 0D2h
ROM:0184 FC                       db 0FCh
ROM:0185 D3                       db 0D3h
ROM:0186 E5                       db 0E5h
ROM:0187 40                       db  40h ; @
ROM:0188 4B                       db  4Bh ; K
ROM:0189 42                       db  42h ; B
ROM:018A 32                       db  32h ; 2
ROM:018B 7F 7F 7F…                .ascii ''
ROM:01C8 7F 7F 7F…                .ascii ''
ROM:01FB
ROM:01FB          ; =============== S U B R O U T I N E =======================================
ROM:01FB
ROM:01FB
ROM:01FB          INT_Timer_Ch3:
ROM:01FB F5                       push    af              ; Push register pair onto stack
ROM:01FC C5                       push    bc              ; Push register pair onto stack
ROM:01FD D5                       push    de              ; Push register pair onto stack
ROM:01FE E5                       push    hl              ; Push register pair onto stack
ROM:01FF FB                       ei                      ; Enable interrupts
ROM:0200 CD 2C 0F                 call    sub_F2C         ; call (cond & uncond)
ROM:0200
ROM:0203 CD 10 0D                 call    sub_D10         ; call (cond & uncond)
ROM:0203
ROM:0206 CD B8 0C                 call    sub_CB8         ; call (cond & uncond)
ROM:0206
ROM:0209 21 87 40                 ld      hl, 4087h       ; Move o1 <- o2
ROM:020C 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:020D 34                       inc     (hl)            ; Increment operand
ROM:020E AE                       xor     (hl)            ; Exclusive or with accumulator
ROM:020F CB 57                    bit     2, a            ; Test <bit> in operand
ROM:0211 5F                       ld      e, a            ; Move o1 <- o2
ROM:0212 C4 82 10                 call    nz, sub_1082    ; call (cond & uncond)
ROM:0212
ROM:0215 CB 6B                    bit     5, e            ; Test <bit> in operand
ROM:0217 C4 12 11                 call    nz, DisplayRoutine ; call (cond & uncond)
ROM:0217
ROM:021A E1                       pop     hl              ; Pop register pair from stack
ROM:021B D1                       pop     de              ; Pop register pair from stack
ROM:021C C1                       pop     bc              ; Pop register pair from stack
ROM:021D F1                       pop     af              ; Pop register pair from stack
ROM:021D
ROM:021E
ROM:021E          loc_21E:                                ; CODE XREF: INT_USART_Hdlr+2F↓j
ROM:021E FB                       ei                      ; Enable interrupts
ROM:021F ED 4D                    reti                    ; Return from interrupt
ROM:021F
ROM:021F          ; End of function INT_Timer_Ch3
ROM:021F
ROM:021F          ; ---------------------------------------------------------------------------
ROM:0221 03       iter1:          db 3                    ; start load Timres from here - 3 items
ROM:0222 03 A5    SetTimerCh3:    PortDesc <3, 0A5h>      ; Timer_Ch3
ROM:0222                                                  ; Control word
ROM:0222                                                  ; Constant goes next
ROM:0222                                                  ; Prescaler 256
ROM:0222                                                  ; Int enabled
ROM:0224 03 0A                    PortDesc <3, 0Ah>       ; Timer_Ch3
ROM:0224                                                  ; 2.5M/256/10 = 976 Hz
ROM:0226 00 48                    PortDesc <0, 48h>       ; Timer_Ch1
ROM:0226                                                  ; Vector 48h
ROM:0226                                                  ; 4048h ->Ch0
ROM:0228 14       iter2:          db 14h                  ; start load IO from here - 24h items
ROM:0229 06 0F                    PortDesc <6, 0Fh>       ; disp_ctrl_a
ROM:0229                                                  ; Mode: 0 - Output
ROM:022B 07 FF                    PortDesc <7, 0FFh>      ; disp_ctrl_b
ROM:022B                                                  ; Mode: 3
ROM:022D 05 10                    PortDesc <5, 10h>       ; disp_data_b
ROM:022F 07 00                    PortDesc <7, 0>         ; disp_ctrl_b
ROM:022F                                                  ; All outputs
ROM:0231 0A FF                    PortDesc <0Ah, 0FFh>    ; Stepper_Ctrl_A
ROM:0231                                                  ; Mode: 3
ROM:0233 08 89                    PortDesc <8, 89h>       ; Stepper_Data_A
ROM:0235 0A 00                    PortDesc <0Ah, 0>       ; Stepper_Ctrl_A
ROM:0235                                                  ; All outputs
ROM:0237 0B FF                    PortDesc <0Bh, 0FFh>    ; Stepper_Ctrl_B
ROM:0237                                                  ; Mode: 3
ROM:0239 09 66                    PortDesc <9, 66h>       ; Stepper_Data_B
ROM:023B 0B 00                    PortDesc <0Bh, 0>       ; Stepper_Ctrl_B
ROM:023B                                                  ; All outputs
ROM:023D 0E FF                    PortDesc <0Eh, 0FFh>    ; Keyboard_Col_Ctrl_A
ROM:023D                                                  ; mode 3
ROM:023F 0E FF                    PortDesc <0Eh, 0FFh>    ; Keyboard_Col_Ctrl_A
ROM:023F                                                  ; All Inputs
ROM:0241 0F FF                    PortDesc <0Fh, 0FFh>    ; Keyboard_Col_Ctrl_B
ROM:0241                                                  ; mode : 3
ROM:0243 0F FF                    PortDesc <0Fh, 0FFh>    ; Keyboard_Col_Ctrl_B
ROM:0243                                                  ; All Inputs
ROM:0245 12 FF                    PortDesc <12h, 0FFh>    ; Keyboard_Row_Ctrl_A
ROM:0247 10 FF                    PortDesc <10h, 0FFh>    ; Keyboard_Row_Data_A
ROM:0249 12 00                    PortDesc <12h, 0>       ; All Outputs
ROM:024B 13 FF                    PortDesc <13h, 0FFh>    ; Keyboard_Row_Ctrl_B
ROM:024D 11 FF                    PortDesc <11h, 0FFh>    ; Keyboard_Row_Data_B
ROM:024F 13 78                    PortDesc <13h, 78h>     ; Keyboard_Row_Ctrl_B
ROM:024F                                                  ; Outputs:
ROM:024F                                                  ; Bit 7 - Magnetband Out
ROM:024F                                                  ; Bit 2 - ~MIRED
ROM:024F                                                  ; Bit 1 - ~FBS
ROM:024F                                                  ; Bit 0 - ~DHM
ROM:024F                                                  ; Outputs:
ROM:024F                                                  ; Bit 6 - Magnetband In
ROM:024F                                                  ; Bit 5 - Unconnected
ROM:024F                                                  ; Bit 4 - Unconnected
ROM:024F                                                  ; Bit 3 - VCC
ROM:0251
ROM:0251          ; =============== S U B R O U T I N E =======================================
ROM:0251
ROM:0251
ROM:0251          InitTimers:                             ; CODE XREF: SetupTimers_Ch1_Ch3+F↓p
ROM:0251                                                  ; Setup_all+14↓p
ROM:0251 21 21 02                 ld      hl, 221h        ; Move o1 <- o2
ROM:0254 CD 8A 02                 call    IO_WriteFromTable ; ; *228->14
ROM:0254
ROM:0254          ; End of function InitTimers
ROM:0254
ROM:0257
ROM:0257          ; =============== S U B R O U T I N E =======================================
ROM:0257
ROM:0257
ROM:0257          IOnVarInit:                             ; CODE XREF: Setup_all↓p
ROM:0257 21 28 02                 ld      hl, 228h        ; Move o1 <- o2
ROM:025A CD 8A 02                 call    IO_WriteFromTable ; ; *228->14
ROM:025A
ROM:025D 3E 40                    ld      a, 40h ; '@'    ; Move o1 <- o2
ROM:025F ED 47                    ld      i, a            ; register I is set to 40h
ROM:0261 ED 5E                    im      2               ; interrupt mode 2
ROM:0263 3E 00                    ld      a, 0            ; Move o1 <- o2
ROM:0265 32 3C 41                 ld      (_0_byte_413C), a ; Move o1 <- o2
ROM:0268 32 4F 41                 ld      (_0_byte_414F), a ; Move o1 <- o2
ROM:026B 32 46 41                 ld      (_0_byte_4146), a ; Move o1 <- o2
ROM:026E 32 33 41                 ld      (_0_byte_4133), a ; Move o1 <- o2
ROM:0271 21 35 07                 ld      hl, 735h        ; Move o1 <- o2
ROM:0274 22 38 41                 ld      (_735h_word_4138), hl ; Move o1 <- o2
ROM:0277 21 5E 08                 ld      hl, 85Eh        ; Move o1 <- o2
ROM:027A 22 4B 41                 ld      (_85eh_word_414B), hl ; Move o1 <- o2
ROM:027D 21 06 09                 ld      hl, 906h        ; Move o1 <- o2
ROM:0280 22 43 41                 ld      (_906h_word_4143), hl ; Move o1 <- o2
ROM:0283 21 75 09                 ld      hl, 975h        ; Move o1 <- o2
ROM:0286 22 30 41                 ld      (_975h_word_4130), hl ; Move o1 <- o2
ROM:0289 C9                       ret                     ; Return (cond & uncond)
ROM:0289
ROM:0289          ; End of function IOnVarInit
ROM:0289
ROM:028A
ROM:028A          ; =============== S U B R O U T I N E =======================================
ROM:028A
ROM:028A          ; ; *228->14
ROM:028A
ROM:028A          IO_WriteFromTable:                      ; CODE XREF: InitTimers+3↑p
ROM:028A                                                  ; IOnVarInit+3↑p
ROM:028A 46                       ld      b, (hl)         ; Move o1 <- o2
ROM:028A
ROM:028B
ROM:028B          init_port:                              ; CODE XREF: IO_WriteFromTable+7↓j
ROM:028B 23                       inc     hl              ; Increment operand
ROM:028C 4E                       ld      c, (hl)         ; Move o1 <- o2
ROM:028D 23                       inc     hl              ; Increment operand
ROM:028E 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:028F ED 79                    out     (c), a          ; Output to port
ROM:0291 10 F8                    djnz    init_port       ; Decrement reg B and jump relative if zero
ROM:0291
ROM:0293 C9                       ret                     ; Return (cond & uncond)
ROM:0293
ROM:0293          ; End of function IO_WriteFromTable
ROM:0293
ROM:0293          ; ---------------------------------------------------------------------------
ROM:0294 7F                       db  7Fh ; 
ROM:0295 6A 66 71…aJfqCyUwsKamEpi:.ascii 'jfq\x1Ecy~-uws/kam"epi:nrt,gox.{lb_}d`?zv>%h|!\')1'
ROM:02C3 20                       db  20h
ROM:02C4 0E                       db  0Eh
ROM:02C5 08                       db    8
ROM:02C6 01                       db    1
ROM:02C7 02                       db    2
ROM:02C8 0F                       db  0Fh
ROM:02C9 8B                       db  8Bh
ROM:02CA 84                       db  84h
ROM:02CB 85                       db  85h
ROM:02CC 2B 4A 46…aJfqCy2uws3kam4_0:.ascii '+JFQ#CY^2UWS3KAM4EPI5NRT6GOX7[LB8]D@9ZV'
ROM:02F3 1C                       db  1Ch
ROM:02F4 30                       db  30h ; 0
ROM:02F5 48                       db  48h ; H
ROM:02F6 5C                       db  5Ch ; \
ROM:02F7 3D                       db  3Dh ; =
ROM:02F8 26                       db  26h ; &
ROM:02F9 28                       db  28h ; (
ROM:02FA 3B                       db  3Bh ; ;
ROM:02FB 3C                       db  3Ch ; <
ROM:02FC 0E                       db  0Eh
ROM:02FD 08                       db    8
ROM:02FE 01                       db    1
ROM:02FF 02                       db    2
ROM:0300 0F                       db  0Fh
ROM:0301 8B                       db  8Bh
ROM:0302 84                       db  84h
ROM:0303 85                       db  85h
ROM:0304 0A                       db  0Ah
ROM:0305 40                       db  40h ; @
ROM:0306 44                       db  44h ; D
ROM:0307 48                       db  48h ; H
ROM:0308 4C                       db  4Ch ; L
ROM:0309 00                       db    0
ROM:030A 00                       db    0
ROM:030B 00                       db    0
ROM:030C 00                       db    0
ROM:030D 60                       db  60h ; `
ROM:030E 00                       db    0
ROM:030F 2A                       db  2Ah ; *
ROM:0310 1F                       db  1Fh
ROM:0311 24                       db  24h ; $
ROM:0312 1D                       db  1Dh
ROM:0313 00                       db    0
ROM:0314 00                       db    0
ROM:0315 00                       db    0
ROM:0316 00                       db    0
ROM:0317 18                       db  18h
ROM:0318 19                       db  19h
ROM:0319          ; ---------------------------------------------------------------------------
ROM:0319 FF                       rst     38h             ; Restart at vector <int>
ROM:0319
ROM:0319          ; ---------------------------------------------------------------------------
ROM:031A 05                       db    5
ROM:031B 05                       db    5
ROM:031C 40                       db  40h ; @
ROM:031D 40                       db  40h ; @
ROM:031E 40                       db  40h ; @
ROM:031F 40                       db  40h ; @
ROM:0320 40                       db  40h ; @
ROM:0321 5B                       db  5Bh ; [
ROM:0322 40                       db  40h ; @
ROM:0323 40                       db  40h ; @
ROM:0324 80                       db  80h
ROM:0325 00                       db    0
ROM:0326 00                       db    0
ROM:0327 00                       db    0
ROM:0328 BD                       db 0BDh
ROM:0329 5A                       db  5Ah ; Z
ROM:032A FF                       db 0FFh
ROM:032B B5                       db 0B5h
ROM:032C 13                       db  13h
ROM:032D 12                       db  12h
ROM:032E 14                       db  14h
ROM:032F 64                       db  64h ; d
ROM:0330 13                       db  13h
ROM:0331 BE                       db 0BEh
ROM:0332 BE                       db 0BEh
ROM:0333 65                       db  65h ; e
ROM:0334 23                       db  23h ; #
ROM:0335 23                       db  23h ; #
ROM:0336 12                       db  12h
ROM:0337 9C                       db  9Ch
ROM:0338 0A                       db  0Ah
ROM:0339 8C                       db  8Ch
ROM:033A 02                       db    2
ROM:033B 5C                       db  5Ch ; \
ROM:033C 74                       db  74h ; t
ROM:033D 5C                       db  5Ch ; \
ROM:033E 6C                       db  6Ch ; l
ROM:033F AC                       db 0ACh
ROM:0340 6C                       db  6Ch ; l
ROM:0341 6C                       db  6Ch ; l
ROM:0342 6C                       db  6Ch ; l
ROM:0343 6C                       db  6Ch ; l
ROM:0344 74                       db  74h ; t
ROM:0345 6C                       db  6Ch ; l
ROM:0346 0A                       db  0Ah
ROM:0347 64                       db  64h ; d
ROM:0348 53                       db  53h ; S
ROM:0349 54                       db  54h ; T
ROM:034A 74                       db  74h ; t
ROM:034B 64                       db  64h ; d
ROM:034C BF                       db 0BFh
ROM:034D B6                       db 0B6h
ROM:034E BD                       db 0BDh
ROM:034F B6                       db 0B6h
ROM:0350 BE                       db 0BEh
ROM:0351 B5                       db 0B5h
ROM:0352 BE                       db 0BEh
ROM:0353 AD                       db 0ADh
ROM:0354 AE                       db 0AEh
ROM:0355 B6                       db 0B6h
ROM:0356 BE                       db 0BEh
ROM:0357 BE                       db 0BEh
ROM:0358 B5                       db 0B5h
ROM:0359 BF                       db 0BFh
ROM:035A BE                       db 0BEh
ROM:035B 76                       db  76h ; v
ROM:035C 76                       db  76h ; v
ROM:035D BE                       db 0BEh
ROM:035E B5                       db 0B5h
ROM:035F 6E                       db  6Eh ; n
ROM:0360 6D                       db  6Dh ; m
ROM:0361 6E                       db  6Eh ; n
ROM:0362 BF                       db 0BFh
ROM:0363 BD                       db 0BDh
ROM:0364 75                       db  75h ; u
ROM:0365 BF                       db 0BFh
ROM:0366 BD                       db 0BDh
ROM:0367 BF                       db 0BFh
ROM:0368 76                       db  76h ; v
ROM:0369 BF                       db 0BFh
ROM:036A 75                       db  75h ; u
ROM:036B D4                       db 0D4h
ROM:036C BE                       db 0BEh
ROM:036D B5                       db 0B5h
ROM:036E 75                       db  75h ; u
ROM:036F 65                       db  65h ; e
ROM:0370 B5                       db 0B5h
ROM:0371 6C                       db  6Ch ; l
ROM:0372 BD                       db 0BDh
ROM:0373 65                       db  65h ; e
ROM:0374 65                       db  65h ; e
ROM:0375 6D                       db  6Dh ; m
ROM:0376 75                       db  75h ; u
ROM:0377 6D                       db  6Dh ; m
ROM:0378 6C                       db  6Ch ; l
ROM:0379          ; ---------------------------------------------------------------------------
ROM:0379 B6                       or      (hl)            ; Or with accumulator
ROM:037A 6D                       ld      l, l            ; Move o1 <- o2
ROM:037B 64                       ld      h, h            ; Move o1 <- o2
ROM:037C 65                       ld      h, l            ; Move o1 <- o2
ROM:037D AD                       xor     l               ; Exclusive or with accumulator
ROM:037E 75                       ld      (hl), l         ; Move o1 <- o2
ROM:037F 64                       ld      h, h            ; Move o1 <- o2
ROM:0380 64                       ld      h, h            ; Move o1 <- o2
ROM:0381 65                       ld      h, l            ; Move o1 <- o2
ROM:0382 BE                       cp      (hl)            ; Compare with accumulator
ROM:0383 6C                       ld      l, h            ; Move o1 <- o2
ROM:0384 64                       ld      h, h            ; Move o1 <- o2
ROM:0385 76                       halt                    ; Program execution stops
ROM:0386 6C                       ld      l, h            ; Move o1 <- o2
ROM:0387 B6                       or      (hl)            ; Or with accumulator
ROM:0388 6C                       ld      l, h            ; Move o1 <- o2
ROM:0389 B6                       or      (hl)            ; Or with accumulator
ROM:038A 64                       ld      h, h            ; Move o1 <- o2
ROM:038B 7C                       ld      a, h            ; Move o1 <- o2
ROM:038C 0C                       inc     c               ; Increment operand
ROM:038D 0D                       dec     c               ; Decrement operand
ROM:038E 0E 0F                    ld      c, 0Fh          ; Move o1 <- o2
ROM:0390 10 12                    djnz    loc_3A4         ; Decrement reg B and jump relative if zero
ROM:0390
ROM:0392 14                       inc     d               ; Increment operand
ROM:0393 15                       dec     d               ; Decrement operand
ROM:0394 0C                       inc     c               ; Increment operand
ROM:0395 0D                       dec     c               ; Decrement operand
ROM:0396 11 12 13                 ld      de, 1312h       ; Move o1 <- o2
ROM:0399 14                       inc     d               ; Increment operand
ROM:039A 16 19                    ld      d, 19h          ; Move o1 <- o2
ROM:039C 0D                       dec     c               ; Decrement operand
ROM:039D 0E 12                    ld      c, 12h          ; Move o1 <- o2
ROM:039F 14                       inc     d               ; Increment operand
ROM:03A0 15                       dec     d               ; Decrement operand
ROM:03A1 16 18                    ld      d, 18h          ; Move o1 <- o2
ROM:03A3 1D                       dec     e               ; Decrement operand
ROM:03A3
ROM:03A4
ROM:03A4          loc_3A4:                                ; CODE XREF: ROM:0390↑j
ROM:03A4 0B                       dec     bc              ; Decrement operand
ROM:03A5 0B                       dec     bc              ; Decrement operand
ROM:03A6 0B                       dec     bc              ; Decrement operand
ROM:03A7 0B                       dec     bc              ; Decrement operand
ROM:03A8 0B                       dec     bc              ; Decrement operand
ROM:03A9 0B                       dec     bc              ; Decrement operand
ROM:03AA 0B                       dec     bc              ; Decrement operand
ROM:03AB 0C                       inc     c               ; Increment operand
ROM:03AC 05                       dec     b               ; Decrement operand
ROM:03AD 06 07                    ld      b, 7            ; Move o1 <- o2
ROM:03AF 09                       add     hl, bc          ; Add <reg> to A
ROM:03B0 2E 4D                    ld      l, 4Dh ; 'M'    ; Move o1 <- o2
ROM:03B2 4C                       ld      c, h            ; Move o1 <- o2
ROM:03B3 34                       inc     (hl)            ; Increment operand
ROM:03B4 21 1B 25                 ld      hl, 251Bh       ; Move o1 <- o2
ROM:03B7 2D                       dec     l               ; Decrement operand
ROM:03B8 1F                       rra                     ; Rotate right through carry accumulator
ROM:03B9 58                       ld      e, b            ; Move o1 <- o2
ROM:03BA 28 05                    jr      z, loc_3C1      ; Jump relative (conditional & unconditional)
ROM:03BA
ROM:03BC 23                       inc     hl              ; Increment operand
ROM:03BD 27                       daa                     ; Decimal adjust A
ROM:03BE 1D                       dec     e               ; Decrement operand
ROM:03BF 3F                       ccf                     ; Complement carry flag
ROM:03C0 4B                       ld      c, e            ; Move o1 <- o2
ROM:03C0
ROM:03C1
ROM:03C1          loc_3C1:                                ; CODE XREF: ROM:03BA↑j
ROM:03C1 63                       ld      h, e            ; Move o1 <- o2
ROM:03C2 64                       ld      h, h            ; Move o1 <- o2
ROM:03C3 49                       ld      c, c            ; Move o1 <- o2
ROM:03C4 54                       ld      d, h            ; Move o1 <- o2
ROM:03C5 47                       ld      b, a            ; Move o1 <- o2
ROM:03C6 56                       ld      d, (hl)         ; Move o1 <- o2
ROM:03C7 57                       ld      d, a            ; Move o1 <- o2
ROM:03C8 55                       ld      d, l            ; Move o1 <- o2
ROM:03C9 53                       ld      d, e            ; Move o1 <- o2
ROM:03CA 52                       ld      d, d            ; Move o1 <- o2
ROM:03CB 51                       ld      d, c            ; Move o1 <- o2
ROM:03CC 50                       ld      d, b            ; Move o1 <- o2
ROM:03CD 4F                       ld      c, a            ; Move o1 <- o2
ROM:03CE 19                       add     hl, de          ; Add <reg> to A
ROM:03CF 31 41 43                 ld      sp, 4341h       ; Move o1 <- o2
ROM:03D2 0D                       dec     c               ; Decrement operand
ROM:03D3 45                       ld      b, l            ; Move o1 <- o2
ROM:03D4 1E 33                    ld      e, 33h ; '3'    ; Move o1 <- o2
ROM:03D6 3C                       inc     a               ; Increment operand
ROM:03D7 46                       ld      b, (hl)         ; Move o1 <- o2
ROM:03D8 2C                       inc     l               ; Increment operand
ROM:03D9 37                       scf                     ; Set carry flag
ROM:03DA 24                       inc     h               ; Increment operand
ROM:03DB 36 44                    ld      (hl), 44h ; 'D' ; Move o1 <- o2
ROM:03DD 30 4A                    jr      nc, loc_429     ; Jump relative (conditional & unconditional)
ROM:03DD
ROM:03DF 48                       ld      c, b            ; Move o1 <- o2
ROM:03E0 35                       dec     (hl)            ; Decrement operand
ROM:03E1 1C                       inc     e               ; Increment operand
ROM:03E2 42                       ld      b, d            ; Move o1 <- o2
ROM:03E3 4E                       ld      c, (hl)         ; Move o1 <- o2
ROM:03E4 40                       ld      b, b            ; Move o1 <- o2
ROM:03E5 2A 29 39                 ld      hl, (word_3929) ; Move o1 <- o2
ROM:03E8 2B                       dec     hl              ; Decrement operand
ROM:03E9 32 1A 3A                 ld      (byte_3A1A), a  ; Move o1 <- o2
ROM:03EC 3B                       dec     sp              ; Decrement operand
ROM:03ED 22 3E 26                 ld      (loc_263E), hl  ; Move o1 <- o2
ROM:03F0 3D                       dec     a               ; Decrement operand
ROM:03F1 20 38                    jr      nz, loc_42B     ; Jump relative (conditional & unconditional)
ROM:03F1
ROM:03F3 01 12 04                 ld      bc, 412h        ; Move o1 <- o2
ROM:03F6 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:03F7 0A                       ld      a, (bc)         ; Move o1 <- o2
ROM:03F8 09                       add     hl, bc          ; Add <reg> to A
ROM:03F9 0B                       dec     bc              ; Decrement operand
ROM:03FA 03                       inc     bc              ; Increment operand
ROM:03FB 59                       ld      e, c            ; Move o1 <- o2
ROM:03FC 5B                       ld      e, e            ; Move o1 <- o2
ROM:03FD 0C                       inc     c               ; Increment operand
ROM:03FE 5A                       ld      e, d            ; Move o1 <- o2
ROM:03FF 5C                       ld      e, h            ; Move o1 <- o2
ROM:0400 60                       ld      h, b            ; Move o1 <- o2
ROM:0401 10 61                    djnz    aCyUwsKamEpiNrt+27h ; Decrement reg B and jump relative if zero
ROM:0401
ROM:0403 15                       dec     d               ; Decrement operand
ROM:0404 5D                       ld      e, l            ; Move o1 <- o2
ROM:0405 5E                       ld      e, (hl)         ; Move o1 <- o2
ROM:0406 08                       ex      af, af'         ; Exchange operands
ROM:0407 17                       rla                     ; Rotate left through carry accumulator
ROM:0408 07                       rlca                    ; Rotate left accumulator
ROM:0409 62                       ld      h, d            ; Move o1 <- o2
ROM:040A 14                       inc     d               ; Increment operand
ROM:040B 5F                       ld      e, a            ; Move o1 <- o2
ROM:040C 06 0E                    ld      b, 0Eh          ; Move o1 <- o2
ROM:040E 13                       inc     de              ; Increment operand
ROM:040F 16 11                    ld      d, 11h          ; Move o1 <- o2
ROM:0411 18 02                    jr      loc_415         ; Jump relative (conditional & unconditional)
ROM:0411
ROM:0411          ; ---------------------------------------------------------------------------
ROM:0413 2F                       db  2Fh ; /
ROM:0414 00                       db    0
ROM:0415          ; ---------------------------------------------------------------------------
ROM:0415
ROM:0415          loc_415:                                ; CODE XREF: ROM:0411↑j
ROM:0415 00                       nop                     ; No Operation
ROM:0416 FF                       rst     38h             ; Restart at vector <int>
ROM:0416
ROM:0417 00                       nop                     ; No Operation
ROM:0418 00                       nop                     ; No Operation
ROM:0419 FF                       rst     38h             ; Restart at vector <int>
ROM:0419
ROM:041A 00                       nop                     ; No Operation
ROM:041B 00                       nop                     ; No Operation
ROM:041C FF                       rst     38h             ; Restart at vector <int>
ROM:041C
ROM:041D FF                       rst     38h             ; Restart at vector <int>
ROM:041D
ROM:041E FF                       rst     38h             ; Restart at vector <int>
ROM:041E
ROM:041F 2D                       dec     l               ; Decrement operand
ROM:0420 00                       nop                     ; No Operation
ROM:0421 FF                       rst     38h             ; Restart at vector <int>
ROM:0421
ROM:0422 1D                       dec     e               ; Decrement operand
ROM:0423 FF                       rst     38h             ; Restart at vector <int>
ROM:0423
ROM:0424 5F                       ld      e, a            ; Move o1 <- o2
ROM:0425 FF                       rst     38h             ; Restart at vector <int>
ROM:0425
ROM:0426 16 01                    ld      d, 1            ; Move o1 <- o2
ROM:0428 FF                       rst     38h             ; Restart at vector <int>
ROM:0428
ROM:0429
ROM:0429          loc_429:                                ; CODE XREF: ROM:03DD↑j
ROM:0429 02                       ld      (bc), a         ; Move o1 <- o2
ROM:042A FF                       rst     38h             ; Restart at vector <int>
ROM:042A
ROM:042B
ROM:042B          loc_42B:                                ; CODE XREF: ROM:03F1↑j
ROM:042B FF                       rst     38h             ; Restart at vector <int>
ROM:042B
ROM:042C FF                       rst     38h             ; Restart at vector <int>
ROM:042C
ROM:042D FF                       rst     38h             ; Restart at vector <int>
ROM:042D
ROM:042E FF                       rst     38h             ; Restart at vector <int>
ROM:042E
ROM:042F FF                       rst     38h             ; Restart at vector <int>
ROM:042F
ROM:0430 FF                       rst     38h             ; Restart at vector <int>
ROM:0430
ROM:0431 FF                       rst     38h             ; Restart at vector <int>
ROM:0431
ROM:0432 FF                       rst     38h             ; Restart at vector <int>
ROM:0432
ROM:0433 C0                       ret     nz              ; Return (cond & uncond)
ROM:0434 06 C3                    ld      b, 0C3h         ; Move o1 <- o2
ROM:0436 95                       sub     l               ; Subtract from A
ROM:0437 31 7F 6A                 ld      sp, 6A7Fh       ; Move o1 <- o2
ROM:043A 66                       ld      h, (hl)         ; Move o1 <- o2
ROM:043B 71                       ld      (hl), c         ; Move o1 <- o2
ROM:043B
ROM:043B          ; ---------------------------------------------------------------------------
ROM:043C 1E                       db  1Eh
ROM:043D 63 79 7E…aCyUwsKamEpiNrt:.ascii 'cy~-uws/kam"epi:nrt,gox.{lb_}d`?zv\x1D%h|!\')1'
ROM:0467          ; ---------------------------------------------------------------------------
ROM:0467 20 0E                    jr      nz, aJfqCy2uws3kam4+7 ; Jump relative (conditional & unconditional)
ROM:0467
ROM:0469 08                       ex      af, af'         ; Exchange operands
ROM:046A 01 02 0F                 ld      bc, 0F02h       ; Move o1 <- o2
ROM:046D 8B                       adc     a, e            ; Add reg to A with carry
ROM:046E 84                       add     a, h            ; Add <reg> to A
ROM:046F 85                       add     a, l            ; Add <reg> to A
ROM:046F
ROM:046F          ; ---------------------------------------------------------------------------
ROM:0470 2B 4A 46 aJfqCy2uws3kam4:.ascii '+JFQ#CY^2UWS3KAM4EPI5NRT6GOX7[LB8]D@9ZV\x1C0H\\=&(;$'
ROM:0470 51 23 43…                                        ; CODE XREF: ROM:0467↑j
ROM:04A0 0E                       db  0Eh
ROM:04A1 08                       db    8
ROM:04A2 01                       db    1
ROM:04A3 02                       db    2
ROM:04A4 0F                       db  0Fh
ROM:04A5 8B                       db  8Bh
ROM:04A6 84                       db  84h
ROM:04A7 85                       db  85h
ROM:04A8 0A                       db  0Ah
ROM:04A9 40                       db  40h ; @
ROM:04AA 44                       db  44h ; D
ROM:04AB 48                       db  48h ; H
ROM:04AC 4C                       db  4Ch ; L
ROM:04AD 50                       db  50h ; P
ROM:04AE 54                       db  54h ; T
ROM:04AF 58                       db  58h ; X
ROM:04B0 5C                       db  5Ch ; \
ROM:04B1 60                       db  60h ; `
ROM:04B2 64                       db  64h ; d
ROM:04B3 2A                       db  2Ah ; *
ROM:04B4 3C                       db  3Ch ; <
ROM:04B5 3E                       db  3Eh ; >
ROM:04B6 1F                       db  1Fh
ROM:04B7 00                       db    0
ROM:04B8 00                       db    0
ROM:04B9 00                       db    0
ROM:04BA 00                       db    0
ROM:04BB 18                       db  18h
ROM:04BC 00                       db    0
ROM:04BD 05                       db    5
ROM:04BE 05                       db    5
ROM:04BF 05                       db    5
ROM:04C0 40                       db  40h ; @
ROM:04C1 40                       db  40h ; @
ROM:04C2 40                       db  40h ; @
ROM:04C3 40                       db  40h ; @
ROM:04C4 40                       db  40h ; @
ROM:04C5 40                       db  40h ; @
ROM:04C6 40                       db  40h ; @
ROM:04C7 40                       db  40h ; @
ROM:04C8 80                       db  80h
ROM:04C9 00                       db    0
ROM:04CA 00                       db    0
ROM:04CB 00                       db    0
ROM:04CC BD                       db 0BDh
ROM:04CD 75                       db  75h ; u
ROM:04CE FD                       db 0FDh
ROM:04CF B5                       db 0B5h
ROM:04D0 0D                       db  0Dh
ROM:04D1 15                       db  15h
ROM:04D2 15                       db  15h
ROM:04D3 65                       db  65h ; e
ROM:04D4 15                       db  15h
ROM:04D5 BD                       db 0BDh
ROM:04D6 BD                       db 0BDh
ROM:04D7 65                       db  65h ; e
ROM:04D8 25                       db  25h ; %
ROM:04D9 25                       db  25h ; %
ROM:04DA 15                       db  15h
ROM:04DB 9D                       db  9Dh
ROM:04DC 0D                       db  0Dh
ROM:04DD 8D                       db  8Dh
ROM:04DE 05                       db    5
ROM:04DF 5D                       db  5Dh ; ]
ROM:04E0 75                       db  75h ; u
ROM:04E1 5D                       db  5Dh ; ]
ROM:04E2 6D                       db  6Dh ; m
ROM:04E3 AD                       db 0ADh
ROM:04E4 6D                       db  6Dh ; m
ROM:04E5 6D                       db  6Dh ; m
ROM:04E6 6D                       db  6Dh ; m
ROM:04E7 6D                       db  6Dh ; m
ROM:04E8 75                       db  75h ; u
ROM:04E9 75                       db  75h ; u
ROM:04EA 0D                       db  0Dh
ROM:04EB 65                       db  65h ; e
ROM:04EC 5D                       db  5Dh ; ]
ROM:04ED 55                       db  55h ; U
ROM:04EE 5D                       db  5Dh ; ]
ROM:04EF 65                       db  65h ; e
ROM:04F0 BD                       db 0BDh
ROM:04F1 B5                       db 0B5h
ROM:04F2 BD                       db 0BDh
ROM:04F3 B5                       db 0B5h
ROM:04F4 BD                       db 0BDh
ROM:04F5 B5                       db 0B5h
ROM:04F6 BD                       db 0BDh
ROM:04F7 AD                       db 0ADh
ROM:04F8 75                       db  75h ; u
ROM:04F9 B5                       db 0B5h
ROM:04FA BD                       db 0BDh
ROM:04FB BD                       db 0BDh
ROM:04FC B5                       db 0B5h
ROM:04FD BD                       db 0BDh
ROM:04FE BD                       db 0BDh
ROM:04FF 75                       db  75h ; u
ROM:0500 75                       db  75h ; u
ROM:0501 BD                       db 0BDh
ROM:0502 B5                       db 0B5h
ROM:0503 6D                       db  6Dh ; m
ROM:0504 6D                       db  6Dh ; m
ROM:0505 AD                       db 0ADh
ROM:0506 BD                       db 0BDh
ROM:0507 BD                       db 0BDh
ROM:0508 75                       db  75h ; u
ROM:0509 BD                       db 0BDh
ROM:050A BD                       db 0BDh
ROM:050B BD                       db 0BDh
ROM:050C 75                       db  75h ; u
ROM:050D BD                       db 0BDh
ROM:050E 75                       db  75h ; u
ROM:050F D5                       db 0D5h
ROM:0510 BD                       db 0BDh
ROM:0511 B5                       db 0B5h
ROM:0512 75                       db  75h ; u
ROM:0513 65                       db  65h ; e
ROM:0514 B5                       db 0B5h
ROM:0515 6D                       db  6Dh ; m
ROM:0516 BD                       db 0BDh
ROM:0517 65                       db  65h ; e
ROM:0518 65                       db  65h ; e
ROM:0519 6D                       db  6Dh ; m
ROM:051A 75                       db  75h ; u
ROM:051B 6D                       db  6Dh ; m
ROM:051C 6D                       db  6Dh ; m
ROM:051D B5                       db 0B5h
ROM:051E 6D                       db  6Dh ; m
ROM:051F 65                       db  65h ; e
ROM:0520 65                       db  65h ; e
ROM:0521 AD                       db 0ADh
ROM:0522 75                       db  75h ; u
ROM:0523 65                       db  65h ; e
ROM:0524 65                       db  65h ; e
ROM:0525 75                       db  75h ; u
ROM:0526 BD                       db 0BDh
ROM:0527 6D                       db  6Dh ; m
ROM:0528 65                       db  65h ; e
ROM:0529 75                       db  75h ; u
ROM:052A 6D                       db  6Dh ; m
ROM:052B B5                       db 0B5h
ROM:052C 6D                       db  6Dh ; m
ROM:052D B5                       db 0B5h
ROM:052E 65                       db  65h ; e
ROM:052F 7D                       db  7Dh ; }
ROM:0530 0C                       db  0Ch
ROM:0531 0D                       db  0Dh
ROM:0532 0E                       db  0Eh
ROM:0533 0F                       db  0Fh
ROM:0534 10                       db  10h
ROM:0535 12                       db  12h
ROM:0536 14                       db  14h
ROM:0537 15                       db  15h
ROM:0538 0C                       db  0Ch
ROM:0539 0D                       db  0Dh
ROM:053A 11                       db  11h
ROM:053B 12                       db  12h
ROM:053C 13                       db  13h
ROM:053D 14                       db  14h
ROM:053E 16                       db  16h
ROM:053F 19                       db  19h
ROM:0540 0D                       db  0Dh
ROM:0541 0E                       db  0Eh
ROM:0542 12                       db  12h
ROM:0543 14                       db  14h
ROM:0544 15                       db  15h
ROM:0545 16                       db  16h
ROM:0546 18                       db  18h
ROM:0547 1D                       db  1Dh
ROM:0548 0B                       db  0Bh
ROM:0549 0B                       db  0Bh
ROM:054A 0B                       db  0Bh
ROM:054B 0B                       db  0Bh
ROM:054C 0B                       db  0Bh
ROM:054D 0B                       db  0Bh
ROM:054E 0B                       db  0Bh
ROM:054F 0C                       db  0Ch
ROM:0550 05                       db    5
ROM:0551 06                       db    6
ROM:0552 07                       db    7
ROM:0553 09                       db    9
ROM:0554 5D                       db  5Dh ; ]
ROM:0555 5C                       db  5Ch ; \
ROM:0556 1A                       db  1Ah
ROM:0557 13                       db  13h
ROM:0558 5F                       db  5Fh ; _
ROM:0559 16                       db  16h
ROM:055A 19                       db  19h
ROM:055B 11                       db  11h
ROM:055C 5E                       db  5Eh ; ^
ROM:055D 18                       db  18h
ROM:055E 17                       db  17h
ROM:055F 15                       db  15h
ROM:0560 0F                       db  0Fh
ROM:0561 12                       db  12h
ROM:0562 14                       db  14h
ROM:0563 0C                       db  0Ch
ROM:0564 64                       db  64h ; d
ROM:0565 62                       db  62h ; b
ROM:0566 63                       db  63h ; c
ROM:0567 10                       db  10h
ROM:0568 03                       db    3
ROM:0569 0D                       db  0Dh
ROM:056A 05                       db    5
ROM:056B 04                       db    4
ROM:056C 07                       db    7
ROM:056D 06                       db    6
ROM:056E 09                       db    9
ROM:056F 08                       db    8
ROM:0570 0B                       db  0Bh
ROM:0571 0A                       db  0Ah
ROM:0572 02                       db    2
ROM:0573 1B                       db  1Bh
ROM:0574 61                       db  61h ; a
ROM:0575 0E                       db  0Eh
ROM:0576 60                       db  60h ; `
ROM:0577 1C                       db  1Ch
ROM:0578 1F                       db  1Fh
ROM:0579 2A 23 3A…a127046958:     .ascii '*#:12;"70!&/4-,\'6).+$9(58%<'
ROM:0594 1D                       db  1Dh
ROM:0595 20                       db  20h
ROM:0596 33                       db  33h ; 3
ROM:0597 01                       db    1
ROM:0598 59 50 55…aYpuEiWakxrghjn:.ascii 'YPU@EI=WAKXRGHJNSFOMLV?BQDT>[ZC'
ROM:05B7 1E                       db  1Eh
ROM:05B8 FF                       db 0FFh
ROM:05B9 FF                       db 0FFh
ROM:05BA FF                       db 0FFh
ROM:05BB FF                       db 0FFh
ROM:05BC FF                       db 0FFh
ROM:05BD 2D                       db  2Dh ; -
ROM:05BE 00                       db    0
ROM:05BF FF                       db 0FFh
ROM:05C0 3A                       db  3Ah ; :
ROM:05C1 FF                       db 0FFh
ROM:05C2 5F                       db  5Fh ; _
ROM:05C3 FF                       db 0FFh
ROM:05C4 16                       db  16h
ROM:05C5 01                       db    1
ROM:05C6 FF                       db 0FFh
ROM:05C7 FF                       db 0FFh
ROM:05C8 FF                       db 0FFh
ROM:05C9 FF                       db 0FFh
ROM:05CA 7F                       db  7Fh ; 
ROM:05CB 7F                       db  7Fh ; 
ROM:05CC 7F                       db  7Fh ; 
ROM:05CD 7F                       db  7Fh ; 
ROM:05CE 7F                       db  7Fh ; 
ROM:05CF 7F                       db  7Fh ; 
ROM:05D0 7F                       db  7Fh ; 
ROM:05D1 7F                       db  7Fh ; 
ROM:05D2 7F                       db  7Fh ; 
ROM:05D3 7F                       db  7Fh ; 
ROM:05D4 7F                       db  7Fh ; 
ROM:05D5 7F                       db  7Fh ; 
ROM:05D6 7F                       db  7Fh ; 
ROM:05D7 7F                       db  7Fh ; 
ROM:05D8 7F                       db  7Fh ; 
ROM:05D9 7F                       db  7Fh ; 
ROM:05DA 7F                       db  7Fh ; 
ROM:05DB 7F                       db  7Fh ; 
ROM:05DC 00                       db    0
ROM:05DD 00                       db    0
ROM:05DE 00                       db    0
ROM:05DF 0C                       db  0Ch
ROM:05E0 0B                       db  0Bh
ROM:05E1 00                       db    0
ROM:05E2 00                       db    0
ROM:05E3 00                       db    0
ROM:05E4 0A                       db  0Ah
ROM:05E5 0D                       db  0Dh
ROM:05E6 00                       db    0
ROM:05E7 09                       db    9
ROM:05E8 00                       db    0
ROM:05E9 0A                       db  0Ah
ROM:05EA 08                       db    8
ROM:05EB 20                       db  20h
ROM:05EC 7B                       db  7Bh ; {
ROM:05ED 7C                       db  7Ch ; |
ROM:05EE 7D                       db  7Dh ; }
ROM:05EF 00                       db    0
ROM:05F0 00                       db    0
ROM:05F1 2D                       db  2Dh ; -
ROM:05F2 00                       db    0
ROM:05F3 00                       db    0
ROM:05F4 00                       db    0
ROM:05F5 00                       db    0
ROM:05F6 00                       db    0
ROM:05F7 00                       db    0
ROM:05F8 AE                       db 0AEh
ROM:05F9 B3                       db 0B3h
ROM:05FA 9C                       db  9Ch
ROM:05FB 5E                       db  5Eh ; ^
ROM:05FC FD                       db 0FDh
ROM:05FD 21                       db  21h ; !
ROM:05FE 22                       db  22h ; "
ROM:05FF 23                       db  23h ; #
ROM:0600 B0                       db 0B0h
ROM:0601 25 26 27…a0123456789_0:  .ascii '%&\'()*+,-./0123456789:;'
ROM:0618 E6                       db 0E6h
ROM:0619 3D                       db  3Dh ; =
ROM:061A F8                       db 0F8h
ROM:061B 3F                       db  3Fh ; ?
ROM:061C 40                       db  40h ; @
ROM:061D 41                       db  41h ; A
ROM:061E 42                       db  42h ; B
ROM:061F 43                       db  43h ; C
ROM:0620 44                       db  44h ; D
ROM:0621 45                       db  45h ; E
ROM:0622 46                       db  46h ; F
ROM:0623 47                       db  47h ; G
ROM:0624 48                       db  48h ; H
ROM:0625 49                       db  49h ; I
ROM:0626 4A                       db  4Ah ; J
ROM:0627 4B                       db  4Bh ; K
ROM:0628 4C                       db  4Ch ; L
ROM:0629 4D                       db  4Dh ; M
ROM:062A 4E                       db  4Eh ; N
ROM:062B 4F                       db  4Fh ; O
ROM:062C 50                       db  50h ; P
ROM:062D 51                       db  51h ; Q
ROM:062E 52                       db  52h ; R
ROM:062F 53                       db  53h ; S
ROM:0630 54                       db  54h ; T
ROM:0631 55                       db  55h ; U
ROM:0632 56                       db  56h ; V
ROM:0633 57                       db  57h ; W
ROM:0634 58                       db  58h ; X
ROM:0635 59                       db  59h ; Y
ROM:0636 5A                       db  5Ah ; Z
ROM:0637 5B                       db  5Bh ; [
ROM:0638 5C                       db  5Ch ; \
ROM:0639 5D                       db  5Dh ; ]
ROM:063A 24                       db  24h ; $
ROM:063B 5F                       db  5Fh ; _
ROM:063C 60                       db  60h ; `
ROM:063D 61 62 63…aAbcdefghijklmn_0:.ascii 'abcdefghijklmnopqrstuvwxyz'
ROM:0657 82                       db  82h
ROM:0658 87                       db  87h
ROM:0659 8A                       db  8Ah
ROM:065A 7E                       db  7Eh ; ~
ROM:065B AF                       db 0AFh
ROM:065C 45                       db  45h ; E
ROM:065D 52                       db  52h ; R
ROM:065E 57                       db  57h ; W
ROM:065F 26 49 4A…aIjohmnqp345618:.ascii '&IJOHMNQP3456182UD'
ROM:0671 83                       db  83h
ROM:0672 93                       db  93h
ROM:0673 82                       db  82h
ROM:0674 92                       db  92h
ROM:0675 81                       db  81h
ROM:0676 91                       db  91h
ROM:0677 85                       db  85h
ROM:0678 95                       db  95h
ROM:0679 A8                       db 0A8h
ROM:067A A9                       db 0A9h
ROM:067B AA                       db 0AAh
ROM:067C AB                       db 0ABh
ROM:067D A5                       db 0A5h
ROM:067E A6                       db 0A6h
ROM:067F A7                       db 0A7h
ROM:0680 AC                       db 0ACh
ROM:0681 A0                       db 0A0h
ROM:0682 A1                       db 0A1h
ROM:0683 9C                       db  9Ch
ROM:0684 01                       db    1
ROM:0685 02                       db    2
ROM:0686          ; ---------------------------------------------------------------------------
ROM:0686          ; START OF FUNCTION CHUNK FOR sub_916
ROM:0686          ;   ADDITIONAL PARENT FUNCTION sub_7B2
ROM:0686          ;   ADDITIONAL PARENT FUNCTION sub_9A9
ROM:0686          ;   ADDITIONAL PARENT FUNCTION sub_D10
ROM:0686
ROM:0686          Motor_MIRED_Check:                      ; CODE XREF: sub_7B2+36↓j
ROM:0686                                                  ; sub_D10-45D↓j ...
ROM:0686 77                       ld      (hl), a         ; Move o1 <- o2
ROM:0687 23                       inc     hl              ; Increment operand
ROM:0688 73                       ld      (hl), e         ; Move o1 <- o2
ROM:0689 23                       inc     hl              ; Increment operand
ROM:068A 72                       ld      (hl), d         ; Move o1 <- o2
ROM:068B 23                       inc     hl              ; Increment operand
ROM:068C 70                       ld      (hl), b         ; Move o1 <- o2
ROM:068D 06 0A                    ld      b, 0Ah          ; Move o1 <- o2
ROM:068F DB 11                    in      a, (Keyboard_Row_Data_B) ; Input from port to A
ROM:0691 E6 04                    and     4               ; And with accumulator
ROM:0693 CC 1A 07                 call    z, Motor_MIRED_Set ; call (cond & uncond)
ROM:0693
ROM:0696 1A                       ld      a, (de)         ; Move o1 <- o2
ROM:0696
ROM:0697
ROM:0697          Set_Timer:                              ; CODE XREF: FBS_Clear+1A↓j
ROM:0697 1E A5                    ld      e, 0A5h         ; ;if belong to timer:
ROM:0697                                                  ; Enable Interrupt
ROM:0697                                                  ; Freq = 2.5MHz/256/B
ROM:0699 F3                       di                      ; Disable interrupts
ROM:069A ED 59                    out     (c), e          ; Output to port
ROM:069C ED 41                    out     (c), b          ; Output to port
ROM:069E ED 59                    out     (c), e          ; Output to port
ROM:06A0 ED 79                    out     (c), a          ; Output to port
ROM:06A2 FB                       ei                      ; Enable interrupts
ROM:06A3 C9                       ret                     ; Return (cond & uncond)
ROM:06A3
ROM:06A3          ; END OF FUNCTION CHUNK FOR sub_916
ROM:06A4
ROM:06A4          ; =============== S U B R O U T I N E =======================================
ROM:06A4
ROM:06A4
ROM:06A4          sub_6A4:                                ; CODE XREF: sub_7B2+C↓p
ROM:06A4                                                  ; sub_D10:loc_897↓p
ROM:06A4 CB 7A                    bit     7, d            ; Test <bit> in operand
ROM:06A6 C8                       ret     z               ; Return (cond & uncond)
ROM:06A6
ROM:06A6          ; End of function sub_6A4
ROM:06A6
ROM:06A7
ROM:06A7          ; =============== S U B R O U T I N E =======================================
ROM:06A7
ROM:06A7
ROM:06A7          sub_6A7:                                ; CODE XREF: sub_D10+150↓p
ROM:06A7                                                  ; sub_D10+19B↓p ...
ROM:06A7 21 00 00                 ld      hl, 0           ; Move o1 <- o2
ROM:06AA D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:06AA
ROM:06AB EB                       ex      de, hl          ; Exchange operands
ROM:06AC C9                       ret                     ; Return (cond & uncond)
ROM:06AC
ROM:06AC          ; End of function sub_6A7
ROM:06AC
ROM:06AD
ROM:06AD          ; =============== S U B R O U T I N E =======================================
ROM:06AD
ROM:06AD
ROM:06AD          sub_6AD:                                ; CODE XREF: sub_916+13↓p
ROM:06AD                                                  ; sub_9A9+19↓p
ROM:06AD 5F                       ld      e, a            ; Move o1 <- o2
ROM:06AE 16 00                    ld      d, 0            ; Move o1 <- o2
ROM:06AE
ROM:06B0
ROM:06B0          loc_6B0:                                ; CODE XREF: sub_6AD+30↓j
ROM:06B0                                                  ; sub_6AD+33↓j ...
ROM:06B0 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:06B1 E6 0F                    and     0Fh             ; And with accumulator
ROM:06B3 47                       ld      b, a            ; Move o1 <- o2
ROM:06B4 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:06B5 E6 F0                    and     0F0h            ; And with accumulator
ROM:06B7 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:06B8 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:06B9 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:06BA 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:06BA
ROM:06BB
ROM:06BB          loc_6BB:                                ; CODE XREF: sub_7B2+20↓p
ROM:06BB 80                       add     a, b            ; Add <reg> to A
ROM:06BC 3C                       inc     a               ; Increment operand
ROM:06BD 4F                       ld      c, a            ; Move o1 <- o2
ROM:06BE 78                       ld      a, b            ; Move o1 <- o2
ROM:06BF 06 00                    ld      b, 0            ; Move o1 <- o2
ROM:06C1 EB                       ex      de, hl          ; Exchange operands
ROM:06C2 ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:06C4 38 12                    jr      c, loc_6D8      ; Jump relative (conditional & unconditional)
ROM:06C4
ROM:06C6 20 03                    jr      nz, loc_6CB     ; Jump relative (conditional & unconditional)
ROM:06C6
ROM:06C8 A7                       and     a               ; And with accumulator
ROM:06C9 20 0D                    jr      nz, loc_6D8     ; Jump relative (conditional & unconditional)
ROM:06C9
ROM:06CB
ROM:06CB          loc_6CB:                                ; CODE XREF: sub_6AD+19↑j
ROM:06CB F5                       push    af              ; Push register pair onto stack
ROM:06CC 47                       ld      b, a            ; Move o1 <- o2
ROM:06CD 79                       ld      a, c            ; Move o1 <- o2
ROM:06CE C6 02                    add     a, 2            ; Add <reg> to A
ROM:06D0 85                       add     a, l            ; Add <reg> to A
ROM:06D1 4F                       ld      c, a            ; Move o1 <- o2
ROM:06D2 95                       sub     l               ; Subtract from A
ROM:06D3 90                       sub     b               ; Subtract from A
ROM:06D4 47                       ld      b, a            ; Move o1 <- o2
ROM:06D5 13                       inc     de              ; Increment operand
ROM:06D6 F1                       pop     af              ; Pop register pair from stack
ROM:06D7 C9                       ret                     ; Return (cond & uncond)
ROM:06D7
ROM:06D8          ; ---------------------------------------------------------------------------
ROM:06D8
ROM:06D8          loc_6D8:                                ; CODE XREF: sub_6AD+17↑j
ROM:06D8                                                  ; sub_6AD+1C↑j
ROM:06D8 09                       add     hl, bc          ; Add <reg> to A
ROM:06D9 EB                       ex      de, hl          ; Exchange operands
ROM:06DA 23                       inc     hl              ; Increment operand
ROM:06DB 09                       add     hl, bc          ; Add <reg> to A
ROM:06DC A7                       and     a               ; And with accumulator
ROM:06DD 28 D1                    jr      z, loc_6B0      ; Jump relative (conditional & unconditional)
ROM:06DD
ROM:06DF 23                       inc     hl              ; Increment operand
ROM:06E0 18 CE                    jr      loc_6B0         ; Jump relative (conditional & unconditional)
ROM:06E0
ROM:06E0          ; End of function sub_6AD
ROM:06E0
ROM:06E2          ; ---------------------------------------------------------------------------
ROM:06E2          ; START OF FUNCTION CHUNK FOR sub_85E
ROM:06E2          ;   ADDITIONAL PARENT FUNCTION INT_Timer_Ch1_func823
ROM:06E2          ;   ADDITIONAL PARENT FUNCTION INT_Timer_Ch2_typewheel
ROM:06E2
ROM:06E2          rotate_motor:                           ; CODE XREF: INT_Timer_Ch1_func823-15↓j
ROM:06E2                                                  ; sub_85E+7B↓j ...
ROM:06E2 CB 7E                    bit     7, (hl)         ; Test <bit> in operand
ROM:06E4 23                       inc     hl              ; Increment operand
ROM:06E5 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:06E6 20 02                    jr      nz, loc_6EA     ; Jump relative (conditional & unconditional)
ROM:06E6
ROM:06E8 C6 02                    add     a, 2            ; Add <reg> to A
ROM:06E8
ROM:06EA
ROM:06EA          loc_6EA:                                ; CODE XREF: sub_85E-178↑j
ROM:06EA 3D                       dec     a               ; Decrement operand
ROM:06EA
ROM:06EB
ROM:06EB          loc_6EB:                                ; CODE XREF: INT_Timer_Ch0+47↓j
ROM:06EB 77                       ld      (hl), a         ; Move o1 <- o2
ROM:06EC E6 07                    and     7               ; And with accumulator
ROM:06EE 83                       add     a, e            ; Add <reg> to A
ROM:06EF 5F                       ld      e, a            ; Move o1 <- o2
ROM:06F0 7A                       ld      a, d            ; Move o1 <- o2
ROM:06F1 CE 00                    adc     a, 0            ; Add reg to A with carry
ROM:06F3 57                       ld      d, a            ; Move o1 <- o2
ROM:06F4 1A                       ld      a, (de)         ; Move o1 <- o2
ROM:06F5 A0                       and     b               ; And with accumulator
ROM:06F6 57                       ld      d, a            ; Move o1 <- o2
ROM:06F7 78                       ld      a, b            ; Move o1 <- o2
ROM:06F8 2F                       cpl                     ; Complement the accumulator
ROM:06F9 47                       ld      b, a            ; Move o1 <- o2
ROM:06FA ED 78                    in      a, (c)          ; Input from port to A
ROM:06FC A0                       and     b               ; stepper mask
ROM:06FD B2                       or      d               ; Or with accumulator
ROM:06FE ED 79                    out     (c), a          ; Switch stepper here
ROM:06FE
ROM:06FE          ; END OF FUNCTION CHUNK FOR sub_85E
ROM:0700          ; START OF FUNCTION CHUNK FOR INT_DHM_Set
ROM:0700          ;   ADDITIONAL PARENT FUNCTION INT_Timer_Ch1_func823
ROM:0700          ;   ADDITIONAL PARENT FUNCTION INT_Timer_Ch2_func_8EE
ROM:0700          ;   ADDITIONAL PARENT FUNCTION INT_Timer_Ch2_typewheel
ROM:0700          ;   ADDITIONAL PARENT FUNCTION INT_Timer_Ch0
ROM:0700
ROM:0700          INT_reti_routine:                       ; CODE XREF: INT_Timer_Ch2_func_8EE-1DF↓j
ROM:0700                                                  ; INT_Timer_Ch1_func823+A↓j ...
ROM:0700 D9                       exx                     ; Exchange register pairs BC,DE,HL and alt reg pairs
ROM:0701 08                       ex      af, af'         ; Exchange operands
ROM:0702 FB                       ei                      ; Enable interrupts
ROM:0703 ED 4D                    reti                    ; Return from interrupt
ROM:0703
ROM:0703          ; END OF FUNCTION CHUNK FOR INT_DHM_Set
ROM:0705          ; ---------------------------------------------------------------------------
ROM:0705          ; START OF FUNCTION CHUNK FOR INT_Timer_Ch2_func_8EE
ROM:0705          ;   ADDITIONAL PARENT FUNCTION INT_Timer_Ch1_func823
ROM:0705          ;   ADDITIONAL PARENT FUNCTION INT_Timer_Ch2_typewheel
ROM:0705          ;   ADDITIONAL PARENT FUNCTION INT_Timer_Ch0
ROM:0705          ;   ADDITIONAL PARENT FUNCTION INT_TImer_Ch1_func_AB3
ROM:0705
ROM:0705          val_4070_and_with_B:                    ; CODE XREF: INT_Timer_Ch1_func823+1A↓j
ROM:0705                                                  ; INT_Timer_Ch1_func823+22↓j ...
ROM:0705 21 70 40                 ld      hl, 4070h       ; Move o1 <- o2
ROM:0708 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:0709 A0                       and     b               ; And with accumulator
ROM:070A 77                       ld      (hl), a         ; Move o1 <- o2
ROM:070A
ROM:070B
ROM:070B          loc_70B:                                ; CODE XREF: INT_Timer_Ch1_func823+29↓j
ROM:070B 3E 03                    ld      a, 3            ; Move o1 <- o2
ROM:070D ED 79                    out     (c), a          ; Output to port
ROM:070F 18 EF                    jr      INT_reti_routine ; Jump relative (conditional & unconditional)
ROM:070F
ROM:070F          ; END OF FUNCTION CHUNK FOR INT_Timer_Ch2_func_8EE
ROM:0711
ROM:0711          ; =============== S U B R O U T I N E =======================================
ROM:0711
ROM:0711          ; Arguments:
ROM:0711          ; C - Timer Channel
ROM:0711          ; HL - New Timer Value
ROM:0711
ROM:0711          Timer_update_time:                      ; CODE XREF: INT_Timer_Ch1_func823-25↓p
ROM:0711                                                  ; sub_85E+6B↓p ...
ROM:0711 23                       inc     hl              ; Increment operand
ROM:0712 3E A5                    ld      a, 0A5h         ; Move o1 <- o2
ROM:0714 ED 79                    out     (c), a          ; Output to port
ROM:0716 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:0717 ED 79                    out     (c), a          ; Output to port
ROM:0719 C9                       ret                     ; Return (cond & uncond)
ROM:0719
ROM:0719          ; End of function Timer_update_time
ROM:0719
ROM:071A
ROM:071A          ; =============== S U B R O U T I N E =======================================
ROM:071A
ROM:071A
ROM:071A          Motor_MIRED_Set:                        ; CODE XREF: sub_916-283↑p
ROM:071A F3                       di                      ; Disable interrupts
ROM:071B DB 11                    in      a, (Keyboard_Row_Data_B) ; Input from port to A
ROM:071D F6 04                    or      4               ; Or with accumulator
ROM:071F D3 11                    out     (Keyboard_Row_Data_B), a ; Output to port
ROM:0721 FB                       ei                      ; Enable interrupts
ROM:0722 06 32                    ld      b, 32h ; '2'    ; Move o1 <- o2
ROM:0724 C9                       ret                     ; Return (cond & uncond)
ROM:0724
ROM:0724          ; End of function Motor_MIRED_Set
ROM:0724
ROM:0725
ROM:0725          ; =============== S U B R O U T I N E =======================================
ROM:0725
ROM:0725
ROM:0725          Motor_MIRED_FastClear:                  ; CODE XREF: sub_D10+1F↓p
ROM:0725 DB 11                    in      a, (Keyboard_Row_Data_B) ; Input from port to A
ROM:0727 E6 04                    and     4               ; And with accumulator
ROM:0729 C8                       ret     z               ; Return (cond & uncond)
ROM:072A
ROM:072A          Motor_MIRED_Clear:
ROM:072A F3                       di                      ; Disable interrupts
ROM:072B DB 11                    in      a, (Keyboard_Row_Data_B) ; Input from port to A
ROM:072D F6 04                    or      4               ; Or with accumulator
ROM:072F EE 04                    xor     4               ; Exclusive or with accumulator
ROM:0731 D3 11                    out     (Keyboard_Row_Data_B), a ; Output to port
ROM:0733 FB                       ei                      ; Enable interrupts
ROM:0734 C9                       ret                     ; Return (cond & uncond)
ROM:0734
ROM:0734          ; End of function Motor_MIRED_FastClear
ROM:0734
ROM:0734          ; ---------------------------------------------------------------------------
ROM:0735 40                       db  40h ; @
ROM:0736 0F                       db  0Fh
ROM:0737 32                       db  32h ; 2
ROM:0738 28                       db  28h ; (
ROM:0739 22                       db  22h ; "
ROM:073A 1C                       db  1Ch
ROM:073B 17                       db  17h
ROM:073C 15                       db  15h
ROM:073D 13                       db  13h
ROM:073E 12                       db  12h
ROM:073F 11                       db  11h
ROM:0740 11                       db  11h
ROM:0741 10                       db  10h
ROM:0742 0E                       db  0Eh
ROM:0743 0D                       db  0Dh
ROM:0744 0D                       db  0Dh
ROM:0745 0D                       db  0Dh
ROM:0746 0C                       db  0Ch
ROM:0747 0C                       db  0Ch
ROM:0748 0C                       db  0Ch
ROM:0749 0B                       db  0Bh
ROM:074A 0B                       db  0Bh
ROM:074B 0B                       db  0Bh
ROM:074C 0B                       db  0Bh
ROM:074D 0A                       db  0Ah
ROM:074E 0A                       db  0Ah
ROM:074F 0A                       db  0Ah
ROM:0750 0A                       db  0Ah
ROM:0751 0A                       db  0Ah
ROM:0752 0A                       db  0Ah
ROM:0753 09                       db    9
ROM:0754 09                       db    9
ROM:0755 09                       db    9
ROM:0756 09                       db    9
ROM:0757 09                       db    9
ROM:0758 09                       db    9
ROM:0759 09                       db    9
ROM:075A 09                       db    9
ROM:075B 09                       db    9
ROM:075C 09                       db    9
ROM:075D 08                       db    8
ROM:075E 09                       db    9
ROM:075F 08                       db    8
ROM:0760 09                       db    9
ROM:0761 08                       db    8
ROM:0762 09                       db    9
ROM:0763 08                       db    8
ROM:0764 08                       db    8
ROM:0765 08                       db    8
ROM:0766 08                       db    8
ROM:0767 08                       db    8
ROM:0768 08                       db    8
ROM:0769 08                       db    8
ROM:076A 08                       db    8
ROM:076B 08                       db    8
ROM:076C 08                       db    8
ROM:076D 08                       db    8
ROM:076E 08                       db    8
ROM:076F 07                       db    7
ROM:0770 08                       db    8
ROM:0771 07                       db    7
ROM:0772 08                       db    8
ROM:0773 07                       db    7
ROM:0774 08                       db    8
ROM:0775 07                       db    7
ROM:0776 08                       db    8
ROM:0777 07                       db    7
ROM:0778 09                       db    9
ROM:0779 0A                       db  0Ah
ROM:077A 0B                       db  0Bh
ROM:077B 0B                       db  0Bh
ROM:077C 0B                       db  0Bh
ROM:077D 0B                       db  0Bh
ROM:077E 09                       db    9
ROM:077F 0A                       db  0Ah
ROM:0780 0B                       db  0Bh
ROM:0781 0E                       db  0Eh
ROM:0782 11                       db  11h
ROM:0783 13                       db  13h
ROM:0784 18                       db  18h
ROM:0785 23                       db  23h ; #
ROM:0786 30                       db  30h ; 0
ROM:0787 00                       db    0
ROM:0788 45                       db  45h ; E
ROM:0789 24                       db  24h ; $
ROM:078A 20                       db  20h
ROM:078B 1C                       db  1Ch
ROM:078C 1A                       db  1Ah
ROM:078D 18                       db  18h
ROM:078E 18                       db  18h
ROM:078F 1C                       db  1Ch
ROM:0790 20                       db  20h
ROM:0791 24                       db  24h ; $
ROM:0792 2C                       db  2Ch ; ,
ROM:0793 64                       db  64h ; d
ROM:0794 33                       db  33h ; 3
ROM:0795 2C                       db  2Ch ; ,
ROM:0796 24                       db  24h ; $
ROM:0797 20                       db  20h
ROM:0798 1E                       db  1Eh
ROM:0799 24                       db  24h ; $
ROM:079A 2E                       db  2Eh ; .
ROM:079B 32                       db  32h ; 2
ROM:079C 64                       db  64h ; d
ROM:079D 22                       db  22h ; "
ROM:079E 28                       db  28h ; (
ROM:079F 24                       db  24h ; $
ROM:07A0 24                       db  24h ; $
ROM:07A1 32                       db  32h ; 2
ROM:07A2 3C                       db  3Ch ; <
ROM:07A3 64                       db  64h ; d
ROM:07A4 11                       db  11h
ROM:07A5 40                       db  40h ; @
ROM:07A6 32                       db  32h ; 2
ROM:07A7 5A                       db  5Ah ; Z
ROM:07A8 64                       db  64h ; d
ROM:07A9 20                       db  20h
ROM:07AA 40                       db  40h ; @
ROM:07AB 40                       db  40h ; @
ROM:07AC 8C                       db  8Ch
ROM:07AD 10                       db  10h
ROM:07AE A0                       db 0A0h
ROM:07AF 8C                       db  8Ch
ROM:07B0 00                       db    0
ROM:07B1 8C                       db  8Ch
ROM:07B2
ROM:07B2          ; =============== S U B R O U T I N E =======================================
ROM:07B2
ROM:07B2
ROM:07B2          sub_7B2:                                ; CODE XREF: sub_84F+7↓p
ROM:07B2                                                  ; sub_D10+82↓j ...
ROM:07B2
ROM:07B2          ; FUNCTION CHUNK AT ROM:0686 SIZE 0000001E BYTES
ROM:07B2
ROM:07B2 7D                       ld      a, l            ; Move o1 <- o2
ROM:07B3 B4                       or      h               ; Or with accumulator
ROM:07B4 C8                       ret     z               ; Return (cond & uncond)
ROM:07B5 22 3A 41                 ld      (word_413A), hl ; 413B papertransport
ROM:07B8 EB                       ex      de, hl          ; Exchange operands
ROM:07B9 21 70 40                 ld      hl, 4070h       ; Move o1 <- o2
ROM:07BC CB CE                    set     1, (hl)         ; Set bit
ROM:07BE CD A4 06                 call    sub_6A4         ; call (cond & uncond)
ROM:07BE
ROM:07C1 28 09                    jr      z, loc_7CC      ; Jump relative (conditional & unconditional)
ROM:07C1
ROM:07C3 3A 71 40                 ld      a, (byte_4071)  ; Bit 4: Set: BB8
ROM:07C6 CB 57                    bit     2, a            ; Test <bit> in operand
ROM:07C8 20 02                    jr      nz, loc_7CC     ; Jump relative (conditional & unconditional)
ROM:07C8
ROM:07CA 13                       inc     de              ; Increment operand
ROM:07CB 13                       inc     de              ; Increment operand
ROM:07CB
ROM:07CC
ROM:07CC          loc_7CC:                                ; CODE XREF: sub_7B2+F↑j
ROM:07CC                                                  ; sub_7B2+16↑j
ROM:07CC 2A 38 41                 ld      hl, (_735h_word_4138) ; Move o1 <- o2
ROM:07CF 46                       ld      b, (hl)         ; Move o1 <- o2
ROM:07D0 23                       inc     hl              ; Increment operand
ROM:07D1 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:07D2 CD BB 06                 call    loc_6BB         ; call (cond & uncond)
ROM:07D2
ROM:07D5 22 3D 41                 ld      (word_413D), hl ; Move o1 <- o2
ROM:07D8 21 EB 07                 ld      hl, 7EBh        ; Move o1 <- o2
ROM:07DB 20 03                    jr      nz, loc_7E0     ; Jump relative (conditional & unconditional)
ROM:07DB
ROM:07DD 21 23 08                 ld      hl, 823h        ; Move o1 <- o2
ROM:07DD
ROM:07E0
ROM:07E0          loc_7E0:                                ; CODE XREF: sub_7B2+29↑j
ROM:07E0 22 4A 40                 ld      (INT_Timer_Ch1_Addr), hl ; Move o1 <- o2
ROM:07E3 21 3F 41                 ld      hl, 413Fh       ; Move o1 <- o2
ROM:07E6 0E 01                    ld      c, 1            ; Move o1 <- o2
ROM:07E8 C3 86 06                 jp      Motor_MIRED_Check ; Jump (conditional & unconditional)
ROM:07E8
ROM:07E8          ; End of function sub_7B2
ROM:07E8
ROM:07EB
ROM:07EB          ; =============== S U B R O U T I N E =======================================
ROM:07EB
ROM:07EB
ROM:07EB          INT_Timer_Ch1_unknown:
ROM:07EB
ROM:07EB          ; FUNCTION CHUNK AT ROM:07F9 SIZE 00000018 BYTES
ROM:07EB
ROM:07EB 08                       ex      af, af'         ; Exchange operands
ROM:07EC D9                       exx                     ; Exchange register pairs BC,DE,HL and alt reg pairs
ROM:07ED 21 3F 41                 ld      hl, 413Fh       ; Move o1 <- o2
ROM:07F0 35                       dec     (hl)            ; Decrement operand
ROM:07F1 20 06                    jr      nz, loc_7F9     ; Jump relative (conditional & unconditional)
ROM:07F1
ROM:07F3 21 11 08                 ld      hl, 811h        ; Move o1 <- o2
ROM:07F3
ROM:07F3          ; End of function INT_Timer_Ch1_unknown
ROM:07F3
ROM:07F6          ; START OF FUNCTION CHUNK FOR INT_Timer_Ch1_papertransport
ROM:07F6
ROM:07F6          Timer_ch1_addr_exchange:                ; CODE XREF: INT_Timer_Ch1_papertransport+10↓j
ROM:07F6 22 4A 40                 ld      (INT_Timer_Ch1_Addr), hl ; Move o1 <- o2
ROM:07F6
ROM:07F6          ; END OF FUNCTION CHUNK FOR INT_Timer_Ch1_papertransport
ROM:07F9          ; START OF FUNCTION CHUNK FOR INT_Timer_Ch1_func823
ROM:07F9          ;   ADDITIONAL PARENT FUNCTION INT_Timer_Ch1_unknown
ROM:07F9
ROM:07F9          loc_7F9:                                ; CODE XREF: INT_Timer_Ch1_unknown+6↑j
ROM:07F9                                                  ; INT_Timer_Ch1_func823+10↓j
ROM:07F9 2A 40 41                 ld      hl, (timer_ch1_time) ; Move o1 <- o2
ROM:07FC 0E 01                    ld      c, 1            ; ch1
ROM:07FE CD 11 07                 call    Timer_update_time ; Arguments:
ROM:07FE                                                  ; C - Timer Channel
ROM:07FE                                                  ; HL - New Timer Value
ROM:07FE
ROM:0801 22 40 41                 ld      (timer_ch1_time), hl ; Move o1 <- o2
ROM:0801
ROM:0804
ROM:0804          rotate_paper_transfer_motor:            ; CODE XREF: INT_Timer_Ch1_papertransport+B↓j
ROM:0804                                                  ; INT_Timer_Ch1_func823+E↓j
ROM:0804 0E 09                    ld      c, 9            ; stepper_data_b
ROM:0806 11 91 00                 ld      de, 91h         ; Move o1 <- o2
ROM:0809 21 3B 41                 ld      hl, 413Bh       ; Move o1 <- o2
ROM:080C 06 F0                    ld      b, 0F0h         ; Paper transport motor
ROM:080E C3 E2 06                 jp      rotate_motor    ; Jump (conditional & unconditional)
ROM:080E
ROM:080E          ; END OF FUNCTION CHUNK FOR INT_Timer_Ch1_func823
ROM:0811
ROM:0811          ; =============== S U B R O U T I N E =======================================
ROM:0811
ROM:0811
ROM:0811          INT_Timer_Ch1_papertransport:
ROM:0811
ROM:0811          ; FUNCTION CHUNK AT ROM:07F6 SIZE 00000003 BYTES
ROM:0811
ROM:0811 08                       ex      af, af'         ; Exchange operands
ROM:0812 D9                       exx                     ; Exchange register pairs BC,DE,HL and alt reg pairs
ROM:0813 2A 3D 41                 ld      hl, (word_413D) ; Move o1 <- o2
ROM:0816 2B                       dec     hl              ; Decrement operand
ROM:0817 22 3D 41                 ld      (word_413D), hl ; Move o1 <- o2
ROM:081A 7D                       ld      a, l            ; Move o1 <- o2
ROM:081B B4                       or      h               ; Or with accumulator
ROM:081C 20 E6                    jr      nz, rotate_paper_transfer_motor ; stepper_data_b
ROM:081C
ROM:081E 21 23 08                 ld      hl, 823h        ; Move o1 <- o2
ROM:0821 18 D3                    jr      Timer_ch1_addr_exchange ; Jump relative (conditional & unconditional)
ROM:0821
ROM:0821          ; End of function INT_Timer_Ch1_papertransport
ROM:0821
ROM:0823
ROM:0823          ; =============== S U B R O U T I N E =======================================
ROM:0823
ROM:0823
ROM:0823          INT_Timer_Ch1_func823:
ROM:0823
ROM:0823          ; FUNCTION CHUNK AT ROM:06E2 SIZE 0000001E BYTES
ROM:0823          ; FUNCTION CHUNK AT ROM:0700 SIZE 00000005 BYTES
ROM:0823          ; FUNCTION CHUNK AT ROM:0705 SIZE 0000000C BYTES
ROM:0823          ; FUNCTION CHUNK AT ROM:07F9 SIZE 00000018 BYTES
ROM:0823
ROM:0823 08                       ex      af, af'         ; Exchange operands
ROM:0824 D9                       exx                     ; Exchange register pairs BC,DE,HL and alt reg pairs
ROM:0825 21 42 41                 ld      hl, 4142h       ; Move o1 <- o2
ROM:0828 35                       dec     (hl)            ; Decrement operand
ROM:0829 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:082A 28 09                    jr      z, loc_835      ; Jump relative (conditional & unconditional)
ROM:082A
ROM:082C 3D                       dec     a               ; Decrement operand
ROM:082D CA 00 07                 jp      z, INT_reti_routine ; Jump (conditional & unconditional)
ROM:082D
ROM:0830 3D                       dec     a               ; Decrement operand
ROM:0831 28 D1                    jr      z, rotate_paper_transfer_motor ; stepper_data_b
ROM:0831
ROM:0833 18 C4                    jr      loc_7F9         ; Jump relative (conditional & unconditional)
ROM:0833
ROM:0835          ; ---------------------------------------------------------------------------
ROM:0835
ROM:0835          loc_835:                                ; CODE XREF: INT_Timer_Ch1_func823+7↑j
ROM:0835 01 01 FD                 ld      bc, 0FD01h      ; Move o1 <- o2
ROM:0838 21 3B 41                 ld      hl, 413Bh       ; Move o1 <- o2
ROM:083B CB 7E                    bit     7, (hl)         ; Test <bit> in operand
ROM:083D CA 05 07                 jp      z, val_4070_and_with_B ; Jump (conditional & unconditional)
ROM:083D
ROM:0840 3A 71 40                 ld      a, (byte_4071)  ; Bit 4: Set: BB8
ROM:0843 CB 57                    bit     2, a            ; Test <bit> in operand
ROM:0845 C2 05 07                 jp      nz, val_4070_and_with_B ; Jump (conditional & unconditional)
ROM:0845
ROM:0848 21 4F 08                 ld      hl, 84Fh        ; Move o1 <- o2
ROM:084B E5                       push    hl              ; Push register pair onto stack
ROM:084C C3 0B 07                 jp      loc_70B         ; Jump (conditional & unconditional)
ROM:084C
ROM:084C          ; End of function INT_Timer_Ch1_func823
ROM:084C
ROM:084F
ROM:084F          ; =============== S U B R O U T I N E =======================================
ROM:084F
ROM:084F
ROM:084F          sub_84F:
ROM:084F F5                       push    af              ; Push register pair onto stack
ROM:0850 C5                       push    bc              ; Push register pair onto stack
ROM:0851 D5                       push    de              ; Push register pair onto stack
ROM:0852 E5                       push    hl              ; Push register pair onto stack
ROM:0853 21 02 00                 ld      hl, 2           ; Move o1 <- o2
ROM:0856 CD B2 07                 call    sub_7B2         ; call (cond & uncond)
ROM:0856
ROM:0859 E1                       pop     hl              ; Pop register pair from stack
ROM:085A D1                       pop     de              ; Pop register pair from stack
ROM:085B C1                       pop     bc              ; Pop register pair from stack
ROM:085C F1                       pop     af              ; Pop register pair from stack
ROM:085D C9                       ret                     ; Return (cond & uncond)
ROM:085D
ROM:085D          ; End of function sub_84F
ROM:085D
ROM:085E
ROM:085E          ; =============== S U B R O U T I N E =======================================
ROM:085E
ROM:085E
ROM:085E          sub_85E:
ROM:085E
ROM:085E          ; FUNCTION CHUNK AT ROM:06E2 SIZE 0000001E BYTES
ROM:085E          ; FUNCTION CHUNK AT ROM:08B6 SIZE 00000026 BYTES
ROM:085E
ROM:085E 6E                       ld      l, (hl)         ; Move o1 <- o2
ROM:085F 28 1E                    jr      z, loc_87F      ; Jump relative (conditional & unconditional)
ROM:085F
ROM:0861 18 14                    jr      loc_877         ; Jump relative (conditional & unconditional)
ROM:0861
ROM:0861          ; ---------------------------------------------------------------------------
ROM:0863 12                       db  12h
ROM:0864 11                       db  11h
ROM:0865 10                       db  10h
ROM:0866 0E                       db  0Eh
ROM:0867 0D                       db  0Dh
ROM:0868 0D                       db  0Dh
ROM:0869 0C                       db  0Ch
ROM:086A 0C                       db  0Ch
ROM:086B 0C                       db  0Ch
ROM:086C 0D                       db  0Dh
ROM:086D 0B                       db  0Bh
ROM:086E 0C                       db  0Ch
ROM:086F 0D                       db  0Dh
ROM:0870 0F                       db  0Fh
ROM:0871 12                       db  12h
ROM:0872          ; ---------------------------------------------------------------------------
ROM:0872
ROM:0872          loc_872:                                ; CODE XREF: sub_85E+22↓j
ROM:0872 14                       inc     d               ; Increment operand
ROM:0873 1C                       inc     e               ; Increment operand
ROM:0874 F0                       ret     p               ; Return (cond & uncond)
ROM:0875 23                       inc     hl              ; Increment operand
ROM:0876 2C                       inc     l               ; Increment operand
ROM:0876
ROM:0877
ROM:0877          loc_877:                                ; CODE XREF: sub_85E+3↑j
ROM:0877 20 1C                    jr      nz, loc_895     ; Jump relative (conditional & unconditional)
ROM:0877
ROM:0879 18 1C                    jr      loc_897         ; Jump relative (conditional & unconditional)
ROM:0879
ROM:0879          ; ---------------------------------------------------------------------------
ROM:087B 24                       db  24h ; $
ROM:087C F0                       db 0F0h
ROM:087D 11                       db  11h
ROM:087E 32                       db  32h ; 2
ROM:087F          ; ---------------------------------------------------------------------------
ROM:087F
ROM:087F          loc_87F:                                ; CODE XREF: sub_85E+1↑j
ROM:087F 24                       inc     h               ; Increment operand
ROM:0880 30 F0                    jr      nc, loc_872     ; Jump relative (conditional & unconditional)
ROM:0880
ROM:0882 20 32                    jr      nz, INT_Timer_Ch2_func8B6 ; Jump relative (conditional & unconditional)
ROM:0882
ROM:0884 32 F0 10                 ld      (loc_10F0), a   ; If A[6] is set
ROM:0887 40                       ld      b, b            ; Move o1 <- o2
ROM:0888 F0                       ret     p               ; Return (cond & uncond)
ROM:0889 00                       nop                     ; No Operation
ROM:088A 00                       nop                     ; No Operation
ROM:088A
ROM:088A          ; End of function sub_85E
ROM:088A
ROM:088B          ; START OF FUNCTION CHUNK FOR sub_D10
ROM:088B
ROM:088B          loc_88B:                                ; CODE XREF: sub_D10+1C9↓j
ROM:088B 7D                       ld      a, l            ; Move o1 <- o2
ROM:088C B4                       or      h               ; Or with accumulator
ROM:088D C8                       ret     z               ; Return (cond & uncond)
ROM:088E 22 4D 41                 ld      (word_414D), hl ; 414E - Wagentransport
ROM:0891 EB                       ex      de, hl          ; Exchange operands
ROM:0892 21 70 40                 ld      hl, 4070h       ; Move o1 <- o2
ROM:0892
ROM:0895
ROM:0895          loc_895:                                ; CODE XREF: sub_85E:loc_877↑j
ROM:0895 CB EE                    set     5, (hl)         ; Set bit
ROM:0895
ROM:0897
ROM:0897          loc_897:                                ; CODE XREF: sub_85E+1B↑j
ROM:0897 CD A4 06                 call    sub_6A4         ; call (cond & uncond)
ROM:0897
ROM:089A 2A 4B 41                 ld      hl, (_85eh_word_414B) ; Move o1 <- o2
ROM:089D CD B0 06                 call    loc_6B0         ; call (cond & uncond)
ROM:089D
ROM:08A0 22 50 41                 ld      (word_4150), hl ; Move o1 <- o2
ROM:08A3 21 B6 08                 ld      hl, 8B6h        ; Move o1 <- o2
ROM:08A6 20 03                    jr      nz, loc_8AB     ; Jump relative (conditional & unconditional)
ROM:08A6
ROM:08A8 21 EE 08                 ld      hl, 8EEh        ; Move o1 <- o2
ROM:08A8
ROM:08AB
ROM:08AB          loc_8AB:                                ; CODE XREF: sub_D10-46A↑j
ROM:08AB 22 4C 40                 ld      (INT_Timer_Ch2_Addr), hl ; Move o1 <- o2
ROM:08AE 21 52 41                 ld      hl, 4152h       ; Move o1 <- o2
ROM:08B1 0E 02                    ld      c, 2            ; Move o1 <- o2
ROM:08B3 C3 86 06                 jp      Motor_MIRED_Check ; Jump (conditional & unconditional)
ROM:08B3
ROM:08B3          ; END OF FUNCTION CHUNK FOR sub_D10
ROM:08B6          ; ---------------------------------------------------------------------------
ROM:08B6          ; START OF FUNCTION CHUNK FOR sub_85E
ROM:08B6
ROM:08B6          INT_Timer_Ch2_func8B6:                  ; CODE XREF: sub_85E+24↑j
ROM:08B6 08                       ex      af, af'         ; Exchange operands
ROM:08B7 D9                       exx                     ; Exchange register pairs BC,DE,HL and alt reg pairs
ROM:08B8 21 52 41                 ld      hl, 4152h       ; Move o1 <- o2
ROM:08BB 35                       dec     (hl)            ; Decrement operand
ROM:08BC 20 06                    jr      nz, loc_8C4     ; Jump relative (conditional & unconditional)
ROM:08BC
ROM:08BE 21 DC 08                 ld      hl, 8DCh        ; Move o1 <- o2
ROM:08BE
ROM:08C1
ROM:08C1          loc_8C1:                                ; CODE XREF: INT_Timer_Ch2_wagentransport+10↓j
ROM:08C1 22 4C 40                 ld      (INT_Timer_Ch2_Addr), hl ; Move o1 <- o2
ROM:08C1
ROM:08C4
ROM:08C4          loc_8C4:                                ; CODE XREF: sub_85E+5E↑j
ROM:08C4                                                  ; INT_Timer_Ch2_func_8EE+10↓j
ROM:08C4 2A 53 41                 ld      hl, (timer_ch2_time2) ; Move o1 <- o2
ROM:08C7 0E 02                    ld      c, 2            ; ch2
ROM:08C9 CD 11 07                 call    Timer_update_time ; Arguments:
ROM:08C9                                                  ; C - Timer Channel
ROM:08C9                                                  ; HL - New Timer Value
ROM:08C9
ROM:08CC 22 53 41                 ld      (timer_ch2_time2), hl ; Move o1 <- o2
ROM:08CC
ROM:08CF
ROM:08CF          rotate_wagentransport:                  ; CODE XREF: INT_Timer_Ch2_wagentransport+B↓j
ROM:08CF                                                  ; INT_Timer_Ch2_func_8EE+E↓j
ROM:08CF 11 91 00                 ld      de, 91h         ; Move o1 <- o2
ROM:08D2 0E 09                    ld      c, 9            ; stepper B
ROM:08D4 21 4E 41                 ld      hl, 414Eh       ; Move o1 <- o2
ROM:08D7 06 0F                    ld      b, 0Fh          ; WagenTransport motor
ROM:08D9 C3 E2 06                 jp      rotate_motor    ; Jump (conditional & unconditional)
ROM:08D9
ROM:08D9          ; END OF FUNCTION CHUNK FOR sub_85E
ROM:08DC
ROM:08DC          ; =============== S U B R O U T I N E =======================================
ROM:08DC
ROM:08DC
ROM:08DC          INT_Timer_Ch2_wagentransport:
ROM:08DC 08                       ex      af, af'         ; Exchange operands
ROM:08DD D9                       exx                     ; Exchange register pairs BC,DE,HL and alt reg pairs
ROM:08DE 2A 50 41                 ld      hl, (word_4150) ; Move o1 <- o2
ROM:08E1 2B                       dec     hl              ; Decrement operand
ROM:08E2 22 50 41                 ld      (word_4150), hl ; Move o1 <- o2
ROM:08E5 7D                       ld      a, l            ; Move o1 <- o2
ROM:08E6 B4                       or      h               ;  does periodical rotation
ROM:08E7 20 E6                    jr      nz, rotate_wagentransport ; Jump relative (conditional & unconditional)
ROM:08E7
ROM:08E9 21 EE 08                 ld      hl, 8EEh        ; Move o1 <- o2
ROM:08EC 18 D3                    jr      loc_8C1         ; Jump relative (conditional & unconditional)
ROM:08EC
ROM:08EC          ; End of function INT_Timer_Ch2_wagentransport
ROM:08EC
ROM:08EE
ROM:08EE          ; =============== S U B R O U T I N E =======================================
ROM:08EE
ROM:08EE
ROM:08EE          INT_Timer_Ch2_func_8EE:
ROM:08EE
ROM:08EE          ; FUNCTION CHUNK AT ROM:0700 SIZE 00000005 BYTES
ROM:08EE          ; FUNCTION CHUNK AT ROM:0705 SIZE 0000000C BYTES
ROM:08EE
ROM:08EE 08                       ex      af, af'         ; Exchange operands
ROM:08EF D9                       exx                     ; Exchange register pairs BC,DE,HL and alt reg pairs
ROM:08F0 21 55 41                 ld      hl, 4155h       ; Move o1 <- o2
ROM:08F3 35                       dec     (hl)            ; Decrement operand
ROM:08F4 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:08F5 28 09                    jr      z, loc_900      ; Jump relative (conditional & unconditional)
ROM:08F5
ROM:08F7 3D                       dec     a               ; Decrement operand
ROM:08F8 CA 00 07                 jp      z, INT_reti_routine ; Jump (conditional & unconditional)
ROM:08F8
ROM:08FB 3D                       dec     a               ; Decrement operand
ROM:08FC 28 D1                    jr      z, rotate_wagentransport ; Jump relative (conditional & unconditional)
ROM:08FC
ROM:08FE 18 C4                    jr      loc_8C4         ; Jump relative (conditional & unconditional)
ROM:08FE
ROM:0900          ; ---------------------------------------------------------------------------
ROM:0900
ROM:0900          loc_900:                                ; CODE XREF: INT_Timer_Ch2_func_8EE+7↑j
ROM:0900 01 02 DF                 ld      bc, 0DF02h      ; Move o1 <- o2
ROM:0903 C3 05 07                 jp      val_4070_and_with_B ; Jump (conditional & unconditional)
ROM:0903
ROM:0903          ; End of function INT_Timer_Ch2_func_8EE
ROM:0903
ROM:0906          ; ---------------------------------------------------------------------------
ROM:0906 12                       ld      (de), a         ; Move o1 <- o2
ROM:0907 46                       ld      b, (hl)         ; Move o1 <- o2
ROM:0908 3C                       inc     a               ; Increment operand
ROM:0909 21 30 20                 ld      hl, 2030h       ; Move o1 <- o2
ROM:090C 30 46                    jr      nc, loc_954     ; Jump relative (conditional & unconditional)
ROM:090C
ROM:090E 3C                       inc     a               ; Increment operand
ROM:090F 46                       ld      b, (hl)         ; Move o1 <- o2
ROM:0910 20 10                    jr      nz, loc_922     ; Jump relative (conditional & unconditional)
ROM:0910
ROM:0912 46                       ld      b, (hl)         ; Move o1 <- o2
ROM:0913 64                       ld      h, h            ; Move o1 <- o2
ROM:0914 00                       nop                     ; No Operation
ROM:0915 00                       nop                     ; No Operation
ROM:0915
ROM:0916
ROM:0916          ; =============== S U B R O U T I N E =======================================
ROM:0916
ROM:0916
ROM:0916          sub_916:                                ; CODE XREF: SetupTimers_Ch1_Ch3+2A↓p
ROM:0916                                                  ; sub_D10+A0↓j ...
ROM:0916
ROM:0916          ; FUNCTION CHUNK AT ROM:0686 SIZE 0000001E BYTES
ROM:0916
ROM:0916 A7                       and     a               ; And with accumulator
ROM:0917 C8                       ret     z               ; if A != 0
ROM:0918 21 70 40                 ld      hl, 4070h       ; Move o1 <- o2
ROM:091B CB D6                    set     2, (hl)         ; Set bit
ROM:091D 32 45 41                 ld      (byte_4145), a  ; typewheel motor
ROM:0920 CB 7F                    bit     7, a            ; Test <bit> in operand
ROM:0920
ROM:0922
ROM:0922          loc_922:                                ; CODE XREF: ROM:0910↑j
ROM:0922 28 02                    jr      z, loc_926      ; Jump relative (conditional & unconditional)
ROM:0922
ROM:0924 ED 44                    neg                     ; Negate contents of accumulator
ROM:0924
ROM:0926
ROM:0926          loc_926:                                ; CODE XREF: sub_916:loc_922↑j
ROM:0926 2A 43 41                 ld      hl, (_906h_word_4143) ; Move o1 <- o2
ROM:0929 CD AD 06                 call    sub_6AD         ; call (cond & uncond)
ROM:0929
ROM:092C 7D                       ld      a, l            ; Move o1 <- o2
ROM:092D 41                       ld      b, c            ; Move o1 <- o2
ROM:092E 21 3C 09                 ld      hl, 93Ch        ; Move o1 <- o2
ROM:0931 22 4C 40                 ld      (INT_Timer_Ch2_Addr), hl ; Move o1 <- o2
ROM:0934 21 47 41                 ld      hl, 4147h       ; Move o1 <- o2
ROM:0937 0E 02                    ld      c, 2            ; Move o1 <- o2
ROM:0939 C3 86 06                 jp      Motor_MIRED_Check ; Jump (conditional & unconditional)
ROM:0939
ROM:0939          ; End of function sub_916
ROM:0939
ROM:093C
ROM:093C          ; =============== S U B R O U T I N E =======================================
ROM:093C
ROM:093C
ROM:093C          INT_Timer_Ch2_typewheel:
ROM:093C
ROM:093C          ; FUNCTION CHUNK AT ROM:06E2 SIZE 0000001E BYTES
ROM:093C          ; FUNCTION CHUNK AT ROM:0700 SIZE 00000005 BYTES
ROM:093C          ; FUNCTION CHUNK AT ROM:0705 SIZE 0000000C BYTES
ROM:093C
ROM:093C 08                       ex      af, af'         ; Exchange operands
ROM:093D D9                       exx                     ; Exchange register pairs BC,DE,HL and alt reg pairs
ROM:093E 21 4A 41                 ld      hl, 414Ah       ; Move o1 <- o2
ROM:0941 35                       dec     (hl)            ; Decrement operand
ROM:0942 4E                       ld      c, (hl)         ; Move o1 <- o2
ROM:0943 2B                       dec     hl              ; Decrement operand
ROM:0944 2B                       dec     hl              ; Decrement operand
ROM:0945 28 28                    jr      z, loc_96F      ; Jump relative (conditional & unconditional)
ROM:0945
ROM:0947 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:0948 FE 09                    cp      9               ; Compare with accumulator
ROM:094A 20 04                    jr      nz, loc_950     ; Jump relative (conditional & unconditional)
ROM:094A
ROM:094C 2B                       dec     hl              ; Decrement operand
ROM:094D 35                       dec     (hl)            ; Decrement operand
ROM:094E 20 12                    jr      nz, rotate_typewheel ; Jump relative (conditional & unconditional)
ROM:094E
ROM:0950
ROM:0950          loc_950:                                ; CODE XREF: INT_Timer_Ch2_typewheel+E↑j
ROM:0950 0D                       dec     c               ; Decrement operand
ROM:0951 CA 00 07                 jp      z, INT_reti_routine ; Jump (conditional & unconditional)
ROM:0951
ROM:0954
ROM:0954          loc_954:                                ; CODE XREF: ROM:090C↑j
ROM:0954 0D                       dec     c               ; Decrement operand
ROM:0955 28 0B                    jr      z, rotate_typewheel ; Jump relative (conditional & unconditional)
ROM:0955
ROM:0957 2A 48 41                 ld      hl, (timer_ch2_time) ; Move o1 <- o2
ROM:095A 0E 02                    ld      c, 2            ; Move o1 <- o2
ROM:095C CD 11 07                 call    Timer_update_time ; Update Ch2
ROM:095C
ROM:095F 22 48 41                 ld      (timer_ch2_time), hl ; Move o1 <- o2
ROM:095F
ROM:0962
ROM:0962          rotate_typewheel:                       ; CODE XREF: INT_Timer_Ch2_typewheel+12↑j
ROM:0962                                                  ; INT_Timer_Ch2_typewheel+19↑j
ROM:0962 11 89 00                 ld      de, 89h         ; Move o1 <- o2
ROM:0965 0E 08                    ld      c, 8            ; stepper data A
ROM:0967 21 45 41                 ld      hl, 4145h       ; Move o1 <- o2
ROM:096A 06 0F                    ld      b, 0Fh          ; Type wheel
ROM:096C C3 E2 06                 jp      rotate_motor    ; Jump (conditional & unconditional)
ROM:096C
ROM:096F          ; ---------------------------------------------------------------------------
ROM:096F
ROM:096F          loc_96F:                                ; CODE XREF: INT_Timer_Ch2_typewheel+9↑j
ROM:096F 01 02 FB                 ld      bc, 0FB02h      ; Move o1 <- o2
ROM:0972 C3 05 07                 jp      val_4070_and_with_B ; Jump (conditional & unconditional)
ROM:0972
ROM:0972          ; End of function INT_Timer_Ch2_typewheel
ROM:0972
ROM:0972          ; ---------------------------------------------------------------------------
ROM:0975 55                       db  55h ; U
ROM:0976 0E                       db  0Eh
ROM:0977 1A                       db  1Ah
ROM:0978 16                       db  16h
ROM:0979 12                       db  12h
ROM:097A 0D                       db  0Dh
ROM:097B 0C                       db  0Ch
ROM:097C 0D                       db  0Dh
ROM:097D 12                       db  12h
ROM:097E 18                       db  18h
ROM:097F 1E                       db  1Eh
ROM:0980 08                       db    8
ROM:0981 64                       db  64h ; d
ROM:0982 33                       db  33h ; 3
ROM:0983 15                       db  15h
ROM:0984 20                       db  20h
ROM:0985 18                       db  18h
ROM:0986 11                       db  11h
ROM:0987 20                       db  20h
ROM:0988 20                       db  20h
ROM:0989 08                       db    8
ROM:098A 64                       db  64h ; d
ROM:098B 60                       db  60h ; `
ROM:098C 18                       db  18h
ROM:098D 1B                       db  1Bh
ROM:098E 18                       db  18h
ROM:098F 1E                       db  1Eh
ROM:0990 20                       db  20h
ROM:0991 08                       db    8
ROM:0992 64                       db  64h ; d
ROM:0993 50                       db  50h ; P
ROM:0994 18                       db  18h
ROM:0995 20                       db  20h
ROM:0996 24                       db  24h ; $
ROM:0997 20                       db  20h
ROM:0998 08                       db    8
ROM:0999 64                       db  64h ; d
ROM:099A 40                       db  40h ; @
ROM:099B 24                       db  24h ; $
ROM:099C 2A                       db  2Ah ; *
ROM:099D 2C                       db  2Ch ; ,
ROM:099E 08                       db    8
ROM:099F 64                       db  64h ; d
ROM:09A0 30                       db  30h ; 0
ROM:09A1 30                       db  30h ; 0
ROM:09A2 40                       db  40h ; @
ROM:09A3 0A                       db  0Ah
ROM:09A4 64                       db  64h ; d
ROM:09A5 20                       db  20h
ROM:09A6 40                       db  40h ; @
ROM:09A7 0A                       db  0Ah
ROM:09A8 96                       db  96h
ROM:09A9
ROM:09A9          ; =============== S U B R O U T I N E =======================================
ROM:09A9
ROM:09A9
ROM:09A9          sub_9A9:                                ; CODE XREF: sub_D10+33↓j
ROM:09A9                                                  ; sub_D10+D3↓j ...
ROM:09A9
ROM:09A9          ; FUNCTION CHUNK AT ROM:0686 SIZE 0000001E BYTES
ROM:09A9
ROM:09A9 A7                       and     a               ; And with accumulator
ROM:09AA C8                       ret     z               ; Return (cond & uncond)
ROM:09AB 21 70 40                 ld      hl, 4070h       ; Move o1 <- o2
ROM:09AE CB C6                    set     0, (hl)         ; Set bit
ROM:09B0 21 32 41                 ld      hl, 4132h       ; Move o1 <- o2
ROM:09B3 77                       ld      (hl), a         ; Move o1 <- o2
ROM:09B4 23                       inc     hl              ; Increment operand
ROM:09B5 CB FE                    set     7, (hl)         ; Set bit
ROM:09B7 CB 7F                    bit     7, a            ; Test <bit> in operand
ROM:09B9 28 02                    jr      z, loc_9BD      ; Jump relative (conditional & unconditional)
ROM:09B9
ROM:09BB ED 44                    neg                     ; Negate contents of accumulator
ROM:09BB
ROM:09BD
ROM:09BD          loc_9BD:                                ; CODE XREF: sub_9A9+10↑j
ROM:09BD 3C                       inc     a               ; Increment operand
ROM:09BE 3C                       inc     a               ; Increment operand
ROM:09BF 2A 30 41                 ld      hl, (_975h_word_4130) ; Move o1 <- o2
ROM:09C2 CD AD 06                 call    sub_6AD         ; call (cond & uncond)
ROM:09C2
ROM:09C5 7D                       ld      a, l            ; Move o1 <- o2
ROM:09C6 41                       ld      b, c            ; Move o1 <- o2
ROM:09C7 21 D5 09                 ld      hl, 9D5h        ; Move o1 <- o2
ROM:09CA 22 48 40                 ld      (INT_Timer_Ch0_Addr), hl ; 9D5h by default
ROM:09CD 21 34 41                 ld      hl, 4134h       ; Move o1 <- o2
ROM:09D0 0E 00                    ld      c, 0            ; Move o1 <- o2
ROM:09D2 C3 86 06                 jp      Motor_MIRED_Check ; Jump (conditional & unconditional)
ROM:09D2
ROM:09D2          ; End of function sub_9A9
ROM:09D2
ROM:09D5
ROM:09D5          ; =============== S U B R O U T I N E =======================================
ROM:09D5
ROM:09D5
ROM:09D5          INT_Timer_Ch0:
ROM:09D5
ROM:09D5          ; FUNCTION CHUNK AT ROM:0700 SIZE 00000005 BYTES
ROM:09D5          ; FUNCTION CHUNK AT ROM:0705 SIZE 0000000C BYTES
ROM:09D5
ROM:09D5 08                       ex      af, af'         ; Exchange operands
ROM:09D6 D9                       exx                     ; Exchange register pairs BC,DE,HL and alt reg pairs
ROM:09D7 21 37 41                 ld      hl, 4137h       ; Move o1 <- o2
ROM:09DA 35                       dec     (hl)            ; Decrement operand
ROM:09DB 4E                       ld      c, (hl)         ; Move o1 <- o2
ROM:09DC 2B                       dec     hl              ; Decrement operand
ROM:09DD 2B                       dec     hl              ; Decrement operand
ROM:09DE 28 3F                    jr      z, loc_A1F      ; Jump relative (conditional & unconditional)
ROM:09DE
ROM:09E0 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:09E1 FE 7B                    cp      7Bh ; '{'       ; Compare with accumulator
ROM:09E3 28 04                    jr      z, loc_9E9      ; Jump relative (conditional & unconditional)
ROM:09E3
ROM:09E5 FE 86                    cp      86h             ; Compare with accumulator
ROM:09E7 20 04                    jr      nz, loc_9ED     ; Jump relative (conditional & unconditional)
ROM:09E7
ROM:09E9
ROM:09E9          loc_9E9:                                ; CODE XREF: INT_Timer_Ch0+E↑j
ROM:09E9 2B                       dec     hl              ; Decrement operand
ROM:09EA 35                       dec     (hl)            ; Decrement operand
ROM:09EB 20 12                    jr      nz, loc_9FF     ; Jump relative (conditional & unconditional)
ROM:09EB
ROM:09ED
ROM:09ED          loc_9ED:                                ; CODE XREF: INT_Timer_Ch0+12↑j
ROM:09ED 0D                       dec     c               ; Decrement operand
ROM:09EE CA 00 07                 jp      z, INT_reti_routine ; Jump (conditional & unconditional)
ROM:09EE
ROM:09F1 0D                       dec     c               ; Decrement operand
ROM:09F2 28 0B                    jr      z, loc_9FF      ; Jump relative (conditional & unconditional)
ROM:09F2
ROM:09F4 2A 35 41                 ld      hl, (timer_ch0_time) ; Move o1 <- o2
ROM:09F7 0E 00                    ld      c, 0            ; Move o1 <- o2
ROM:09F9 CD 11 07                 call    Timer_update_time ; ch0
ROM:09F9
ROM:09FC 22 35 41                 ld      (timer_ch0_time), hl ; Move o1 <- o2
ROM:09FC
ROM:09FF
ROM:09FF          loc_9FF:                                ; CODE XREF: INT_Timer_Ch0+16↑j
ROM:09FF                                                  ; INT_Timer_Ch0+1D↑j
ROM:09FF 21 32 41                 ld      hl, 4132h       ; Move o1 <- o2
ROM:0A02 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:0A03 07                       rlca                    ; Rotate left accumulator
ROM:0A04 23                       inc     hl              ; Increment operand
ROM:0A05 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:0A06 28 1D                    jr      z, loc_A25      ; Jump relative (conditional & unconditional)
ROM:0A06
ROM:0A08 CB 7F                    bit     7, a            ; Test <bit> in operand
ROM:0A0A 20 1A                    jr      nz, loc_A26     ; Jump relative (conditional & unconditional)
ROM:0A0A
ROM:0A0C 38 03                    jr      c, loc_A11      ; Jump relative (conditional & unconditional)
ROM:0A0C
ROM:0A0E 3C                       inc     a               ; Increment operand
ROM:0A0E
ROM:0A0F
ROM:0A0F          loc_A0F:                                ; CODE XREF: INT_Timer_Ch0+53↓j
ROM:0A0F C6 03                    add     a, 3            ; Add <reg> to A
ROM:0A0F
ROM:0A11
ROM:0A11          loc_A11:                                ; CODE XREF: INT_Timer_Ch0+37↑j
ROM:0A11 3D                       dec     a               ; Decrement operand
ROM:0A11
ROM:0A12
ROM:0A12          loc_A12:                                ; CODE XREF: INT_Timer_Ch0:loc_A26↓j
ROM:0A12 3D                       dec     a               ; Decrement operand
ROM:0A13 E6 07                    and     7               ; And with accumulator
ROM:0A15 11 89 00                 ld      de, 89h         ; Move o1 <- o2
ROM:0A18 0E 08                    ld      c, 8            ; stepper data A port
ROM:0A1A 06 F0                    ld      b, 0F0h         ; stepper mask. Low octet
ROM:0A1A                                                  ; Ribbon motor
ROM:0A1C C3 EB 06                 jp      loc_6EB         ; Jump (conditional & unconditional)
ROM:0A1C
ROM:0A1F          ; ---------------------------------------------------------------------------
ROM:0A1F
ROM:0A1F          loc_A1F:                                ; CODE XREF: INT_Timer_Ch0+9↑j
ROM:0A1F 01 00 FE                 ld      bc, 0FE00h      ; Move o1 <- o2
ROM:0A22 C3 05 07                 jp      val_4070_and_with_B ; Jump (conditional & unconditional)
ROM:0A22
ROM:0A25          ; ---------------------------------------------------------------------------
ROM:0A25
ROM:0A25          loc_A25:                                ; CODE XREF: INT_Timer_Ch0+31↑j
ROM:0A25 3F                       ccf                     ; Complement carry flag
ROM:0A25
ROM:0A26
ROM:0A26          loc_A26:                                ; CODE XREF: INT_Timer_Ch0+35↑j
ROM:0A26 38 EA                    jr      c, loc_A12      ; Jump relative (conditional & unconditional)
ROM:0A26
ROM:0A28 18 E5                    jr      loc_A0F         ; Jump relative (conditional & unconditional)
ROM:0A28
ROM:0A28          ; End of function INT_Timer_Ch0
ROM:0A28
ROM:0A2A
ROM:0A2A          ; =============== S U B R O U T I N E =======================================
ROM:0A2A
ROM:0A2A
ROM:0A2A          Motor_DoMagicProgramCounter0AndClearDHM:
ROM:0A2A                                                  ; CODE XREF: sub_D10+E2↓p
ROM:0A2A A7                       and     a               ; And with accumulator
ROM:0A2B C8                       ret     z               ; Return (cond & uncond)
ROM:0A2C 21 70 40                 ld      hl, 4070h       ; Move o1 <- o2
ROM:0A2F CB DE                    set     3, (hl)         ; Set bit
ROM:0A31 CB E6                    set     4, (hl)         ; Set bit
ROM:0A33 57                       ld      d, a            ; Move o1 <- o2
ROM:0A34 06 01                    ld      b, 1            ; Move o1 <- o2
ROM:0A36 3A 68 40                 ld      a, (byte_4068)  ; Move o1 <- o2
ROM:0A36
ROM:0A39
ROM:0A39          loc_A39:                                ; CODE XREF: Motor_DoMagicProgramCounter0AndClearDHM:loc_A39↓j
ROM:0A39                                                  ; Motor_DoMagicProgramCounter0AndClearDHM+13↓j
ROM:0A39 10 FE                    djnz    $               ; Decrement reg B and jump relative if zero
ROM:0A39
ROM:0A3B D6 01                    sub     1               ; Subtract from A
ROM:0A3D 30 FA                    jr      nc, loc_A39     ; Jump relative (conditional & unconditional)
ROM:0A3D
ROM:0A3F 21 60 0A                 ld      hl, 0A60h       ; Move o1 <- o2
ROM:0A42 22 48 40                 ld      (INT_Timer_Ch0_Addr), hl ; 9D5h by default
ROM:0A45 3E 32                    ld      a, 32h ; '2'    ; Move o1 <- o2
ROM:0A47 92                       sub     d               ; Subtract from A
ROM:0A48 42                       ld      b, d            ; Move o1 <- o2
ROM:0A49 0E 00                    ld      c, 0            ; Move o1 <- o2
ROM:0A4B 1E A5                    ld      e, 0A5h         ; Move o1 <- o2
ROM:0A4D F3                       di                      ; Disable interrupts
ROM:0A4E ED 59                    out     (c), e          ; Output to port
ROM:0A50 ED 41                    out     (c), b          ; Output to port
ROM:0A52 ED 59                    out     (c), e          ; Output to port
ROM:0A54 ED 79                    out     (c), a          ; Output to port
ROM:0A56 DB 11                    in      a, (Keyboard_Row_Data_B) ; Input from port to A
ROM:0A58 F6 01                    or      1               ; Or with accumulator
ROM:0A5A EE 01                    xor     1               ; Exclusive or with accumulator
ROM:0A5C D3 11                    out     (Keyboard_Row_Data_B), a ; Output to port
ROM:0A5E FB                       ei                      ; Enable interrupts
ROM:0A5F C9                       ret                     ; Return (cond & uncond)
ROM:0A5F
ROM:0A5F          ; End of function Motor_DoMagicProgramCounter0AndClearDHM
ROM:0A5F
ROM:0A60
ROM:0A60          ; =============== S U B R O U T I N E =======================================
ROM:0A60
ROM:0A60
ROM:0A60          INT_DHM_Set:
ROM:0A60
ROM:0A60          ; FUNCTION CHUNK AT ROM:0700 SIZE 00000005 BYTES
ROM:0A60
ROM:0A60 08                       ex      af, af'         ; Exchange operands
ROM:0A61 D9                       exx                     ; Exchange register pairs BC,DE,HL and alt reg pairs
ROM:0A62 DB 11                    in      a, (Keyboard_Row_Data_B) ; Input from port to A
ROM:0A64 F6 01                    or      1               ; Or with accumulator
ROM:0A66 D3 11                    out     (Keyboard_Row_Data_B), a ; Output to port
ROM:0A68 3E A5                    ld      a, 0A5h         ; Move o1 <- o2
ROM:0A6A D3 00                    out     (Timer_Ch0), a  ; Output to port
ROM:0A6C 3E 4B                    ld      a, 4Bh ; 'K'    ; Move o1 <- o2
ROM:0A6E D3 00                    out     (Timer_Ch0), a  ; Output to port
ROM:0A70 21 79 0A                 ld      hl, 0A79h       ; Move o1 <- o2
ROM:0A73 22 48 40                 ld      (INT_Timer_Ch0_Addr), hl ; 9D5h by default
ROM:0A73
ROM:0A76
ROM:0A76          loc_A76:                                ; CODE XREF: INT_Timer_Ch1_func_AA9+8↓j
ROM:0A76 C3 00 07                 jp      INT_reti_routine ; Jump (conditional & unconditional)
ROM:0A76
ROM:0A76          ; End of function INT_DHM_Set
ROM:0A76
ROM:0A76          ; ---------------------------------------------------------------------------
ROM:0A79 08                       db    8
ROM:0A7A D9                       db 0D9h
ROM:0A7B CF                       db 0CFh
ROM:0A7C 23                       db  23h ; #
ROM:0A7D CB                       db 0CBh
ROM:0A7E 9E                       db  9Eh
ROM:0A7F 21                       db  21h ; !
ROM:0A80 84                       db  84h
ROM:0A81 0A                       db  0Ah
ROM:0A82 18                       db  18h
ROM:0A83 EF                       db 0EFh
ROM:0A84 08                       db    8
ROM:0A85 D9                       db 0D9h
ROM:0A86 01                       db    1
ROM:0A87 00                       db    0
ROM:0A88 EF                       db 0EFh
ROM:0A89          ; ---------------------------------------------------------------------------
ROM:0A89          ; START OF FUNCTION CHUNK FOR INT_TImer_Ch1_func_AB3
ROM:0A89
ROM:0A89          loc_A89:                                ; CODE XREF: INT_TImer_Ch1_func_AB3+5↓j
ROM:0A89 C3 05 07                 jp      val_4070_and_with_B ; Jump (conditional & unconditional)
ROM:0A89
ROM:0A89          ; END OF FUNCTION CHUNK FOR INT_TImer_Ch1_func_AB3
ROM:0A8C
ROM:0A8C          ; =============== S U B R O U T I N E =======================================
ROM:0A8C
ROM:0A8C
ROM:0A8C          FBS_Clear:                              ; CODE XREF: sub_D10:loc_DD4↓j
ROM:0A8C                                                  ; sub_1E95+4↓p
ROM:0A8C 06 D8                    ld      b, 0D8h         ; Move o1 <- o2
ROM:0A8E F3                       di                      ; Disable interrupts
ROM:0A8F DB 11                    in      a, (Keyboard_Row_Data_B) ; Input from port to A
ROM:0A91 F6 02                    or      2               ; Or with accumulator
ROM:0A93 EE 02                    xor     2               ; Exclusive or with accumulator
ROM:0A95 D3 11                    out     (Keyboard_Row_Data_B), a ; Output to port
ROM:0A97 FB                       ei                      ; Enable interrupts
ROM:0A97
ROM:0A98
ROM:0A98          loc_A98:                                ; CODE XREF: sub_ABB+5↓j
ROM:0A98 21 70 40                 ld      hl, 4070h       ; Move o1 <- o2
ROM:0A9B CB F6                    set     6, (hl)         ; Set bit
ROM:0A9D 21 A9 0A                 ld      hl, 0AA9h       ; Move o1 <- o2
ROM:0AA0 22 4A 40                 ld      (INT_Timer_Ch1_Addr), hl ; Move o1 <- o2
ROM:0AA3 0E 01                    ld      c, 1            ; Move o1 <- o2
ROM:0AA5 78                       ld      a, b            ; set prescaler
ROM:0AA6 C3 97 06                 jp      Set_Timer       ; ;if belong to timer:
ROM:0AA6                                                  ; Enable Interrupt
ROM:0AA6                                                  ; Freq = 2.5MHz/256/B
ROM:0AA6
ROM:0AA6          ; End of function FBS_Clear
ROM:0AA6
ROM:0AA9
ROM:0AA9          ; =============== S U B R O U T I N E =======================================
ROM:0AA9
ROM:0AA9
ROM:0AA9          INT_Timer_Ch1_func_AA9:
ROM:0AA9 08                       ex      af, af'         ; Exchange operands
ROM:0AAA D9                       exx                     ; Exchange register pairs BC,DE,HL and alt reg pairs
ROM:0AAB 21 B3 0A                 ld      hl, 0AB3h       ; Move o1 <- o2
ROM:0AAE 22 4A 40                 ld      (INT_Timer_Ch1_Addr), hl ; Move o1 <- o2
ROM:0AB1 18 C3                    jr      loc_A76         ; Jump relative (conditional & unconditional)
ROM:0AB1
ROM:0AB1          ; End of function INT_Timer_Ch1_func_AA9
ROM:0AB1
ROM:0AB3
ROM:0AB3          ; =============== S U B R O U T I N E =======================================
ROM:0AB3
ROM:0AB3
ROM:0AB3          INT_TImer_Ch1_func_AB3:
ROM:0AB3
ROM:0AB3          ; FUNCTION CHUNK AT ROM:0705 SIZE 0000000C BYTES
ROM:0AB3          ; FUNCTION CHUNK AT ROM:0A89 SIZE 00000003 BYTES
ROM:0AB3
ROM:0AB3 08                       ex      af, af'         ; Exchange operands
ROM:0AB4 D9                       exx                     ; Exchange register pairs BC,DE,HL and alt reg pairs
ROM:0AB5 01 01 BF                 ld      bc, 0BF01h      ; Move o1 <- o2
ROM:0AB8 C3 89 0A                 jp      loc_A89         ; Jump (conditional & unconditional)
ROM:0AB8
ROM:0AB8          ; End of function INT_TImer_Ch1_func_AB3
ROM:0AB8
ROM:0ABB
ROM:0ABB          ; =============== S U B R O U T I N E =======================================
ROM:0ABB
ROM:0ABB
ROM:0ABB          sub_ABB:                                ; CODE XREF: sub_D10+2B↓p
ROM:0ABB 06 00                    ld      b, 0            ; Move o1 <- o2
ROM:0ABD CD C2 0A                 call    Motor_EBS_Set   ; call (cond & uncond)
ROM:0ABD
ROM:0AC0 18 D6                    jr      loc_A98         ; Jump relative (conditional & unconditional)
ROM:0AC0
ROM:0AC0          ; End of function sub_ABB
ROM:0AC0
ROM:0AC2
ROM:0AC2          ; =============== S U B R O U T I N E =======================================
ROM:0AC2
ROM:0AC2
ROM:0AC2          Motor_EBS_Set:                          ; CODE XREF: sub_ABB+2↑p
ROM:0AC2                                                  ; sub_D10+9C↓p
ROM:0AC2 F3                       di                      ; Disable interrupts
ROM:0AC3 DB 11                    in      a, (Keyboard_Row_Data_B) ; Input from port to A
ROM:0AC5 F6 02                    or      2               ; Or with accumulator
ROM:0AC7 D3 11                    out     (Keyboard_Row_Data_B), a ; Output to port
ROM:0AC9 FB                       ei                      ; Enable interrupts
ROM:0ACA C9                       ret                     ; Return (cond & uncond)
ROM:0ACA
ROM:0ACA          ; End of function Motor_EBS_Set
ROM:0ACA
ROM:0ACA          ; ---------------------------------------------------------------------------
ROM:0ACB CD                       db 0CDh
ROM:0ACC A9                       db 0A9h
ROM:0ACD 0B                       db  0Bh
ROM:0ACE          ; ---------------------------------------------------------------------------
ROM:0ACE          ; START OF FUNCTION CHUNK FOR sub_D10
ROM:0ACE
ROM:0ACE          loc_ACE:                                ; CODE XREF: sub_D10+1A9↓j
ROM:0ACE 32 7B 40                 ld      (byte_407B), a  ; Move o1 <- o2
ROM:0AD1 CD 81 0C                 call    sub_C81         ; call (cond & uncond)
ROM:0AD1
ROM:0AD1          ; END OF FUNCTION CHUNK FOR sub_D10
ROM:0AD4
ROM:0AD4          ; =============== S U B R O U T I N E =======================================
ROM:0AD4
ROM:0AD4
ROM:0AD4          sub_AD4:                                ; CODE XREF: sub_D10:loc_E18↓j
ROM:0AD4                                                  ; sub_116C:loc_1244↓p
ROM:0AD4 F5                       push    af              ; Push register pair onto stack
ROM:0AD5 FE 10                    cp      10h             ; Compare with accumulator
ROM:0AD7 38 11                    jr      c, loc_AEA      ; Jump relative (conditional & unconditional)
ROM:0AD7
ROM:0AD9 FE 80                    cp      80h             ; Compare with accumulator
ROM:0ADB 30 0D                    jr      nc, loc_AEA     ; Jump relative (conditional & unconditional)
ROM:0ADB
ROM:0ADD CD 34 0C                 call    sub_C34         ; call (cond & uncond)
ROM:0ADD
ROM:0AE0 F1                       pop     af              ; Pop register pair from stack
ROM:0AE1 F5                       push    af              ; Push register pair onto stack
ROM:0AE2 CD F9 0B                 call    sub_BF9         ; call (cond & uncond)
ROM:0AE2
ROM:0AE5 F1                       pop     af              ; Pop register pair from stack
ROM:0AE6 F5                       push    af              ; Push register pair onto stack
ROM:0AE7 CD 0A 0C                 call    sub_C0A         ; call (cond & uncond)
ROM:0AE7
ROM:0AEA
ROM:0AEA          loc_AEA:                                ; CODE XREF: sub_AD4+3↑j
ROM:0AEA                                                  ; sub_AD4+7↑j
ROM:0AEA 3A 7C 40                 ld      a, (byte_407C)  ; Move o1 <- o2
ROM:0AED 2A 7D 40                 ld      hl, (word_407D) ; Move o1 <- o2
ROM:0AF0 B4                       or      h               ; Or with accumulator
ROM:0AF1 B5                       or      l               ; Or with accumulator
ROM:0AF2 CF                       rst     8               ; Restart at vector <int>
ROM:0AF2
ROM:0AF3 28 02                    jr      z, loc_AF7      ; Jump relative (conditional & unconditional)
ROM:0AF3
ROM:0AF5 CB E6                    set     4, (hl)         ; Set bit
ROM:0AF5
ROM:0AF7
ROM:0AF7          loc_AF7:                                ; CODE XREF: sub_AD4+1F↑j
ROM:0AF7 3A 81 40                 ld      a, (byte_4081)  ; Move o1 <- o2
ROM:0AFA A7                       and     a               ; And with accumulator
ROM:0AFB 28 02                    jr      z, loc_AFF      ; Jump relative (conditional & unconditional)
ROM:0AFB
ROM:0AFD CB EE                    set     5, (hl)         ; Set bit
ROM:0AFD
ROM:0AFF
ROM:0AFF          loc_AFF:                                ; CODE XREF: sub_AD4+27↑j
ROM:0AFF F1                       pop     af              ; Pop register pair from stack
ROM:0B00 C9                       ret                     ; Return (cond & uncond)
ROM:0B00
ROM:0B00          ; End of function sub_AD4
ROM:0B00
ROM:0B01
ROM:0B01          ; =============== S U B R O U T I N E =======================================
ROM:0B01
ROM:0B01
ROM:0B01          sub_B01:                                ; CODE XREF: sub_D10+13E↓p
ROM:0B01                                                  ; sub_116C+C9↓p
ROM:0B01 21 BF 40                 ld      hl, 40BFh       ; Move o1 <- o2
ROM:0B04 CB 76                    bit     6, (hl)         ; Test <bit> in operand
ROM:0B06 C8                       ret     z               ; Return (cond & uncond)
ROM:0B07 21 7C 40                 ld      hl, 407Ch       ; Move o1 <- o2
ROM:0B0A 36 5F                    ld      (hl), 5Fh ; '_' ; Move o1 <- o2
ROM:0B0C C9                       ret                     ; Return (cond & uncond)
ROM:0B0C
ROM:0B0C          ; End of function sub_B01
ROM:0B0C
ROM:0B0D
ROM:0B0D          ; =============== S U B R O U T I N E =======================================
ROM:0B0D
ROM:0B0D
ROM:0B0D          sub_B0D:                                ; CODE XREF: sub_116C+D5↓p
ROM:0B0D 21 81 40                 ld      hl, 4081h       ; Move o1 <- o2
ROM:0B10 36 01                    ld      (hl), 1         ; Move o1 <- o2
ROM:0B12 C9                       ret                     ; Return (cond & uncond)
ROM:0B12
ROM:0B12          ; End of function sub_B0D
ROM:0B12
ROM:0B12          ; ---------------------------------------------------------------------------
ROM:0B13 21                       db  21h ; !
ROM:0B14 81                       db  81h
ROM:0B15 40                       db  40h ; @
ROM:0B16 36                       db  36h ; 6
ROM:0B17 02                       db    2
ROM:0B18 C9                       db 0C9h
ROM:0B19
ROM:0B19          ; =============== S U B R O U T I N E =======================================
ROM:0B19
ROM:0B19
ROM:0B19          sub_B19:                                ; CODE XREF: sub_F1E↓p
ROM:0B19                                                  ; sub_1D2D+4A↓j ...
ROM:0B19 CD A9 0B                 call    Test_406f_Zero  ; call (cond & uncond)
ROM:0B19
ROM:0B19          ; End of function sub_B19
ROM:0B19
ROM:0B1C
ROM:0B1C          ; =============== S U B R O U T I N E =======================================
ROM:0B1C
ROM:0B1C
ROM:0B1C          sub_B1C:                                ; CODE XREF: sub_116C+42↓j
ROM:0B1C                                                  ; sub_116C+5A↓p ...
ROM:0B1C CD 81 0B                 call    sub_B81         ; call (cond & uncond)
ROM:0B1C
ROM:0B1F D8                       ret     c               ; Return (cond & uncond)
ROM:0B1F
ROM:0B1F          ; End of function sub_B1C
ROM:0B1F
ROM:0B20
ROM:0B20          ; =============== S U B R O U T I N E =======================================
ROM:0B20
ROM:0B20
ROM:0B20          sub_B20:                                ; CODE XREF: SetupTimers_Ch1_Ch3+32A↓p
ROM:0B20                                                  ; SetupTimers_Ch1_Ch3+34A↓p
ROM:0B20 ED 43 A8                 ld      (word_40A8), bc ; Move o1 <- o2
ROM:0B20 40
ROM:0B24 21 72 40                 ld      hl, 4072h       ; Move o1 <- o2
ROM:0B27 CB 5E                    bit     3, (hl)         ; Test <bit> in operand
ROM:0B29 20 09                    jr      nz, loc_B34     ; Jump relative (conditional & unconditional)
ROM:0B29
ROM:0B2B ED 53 89                 ld      (word_4089), de ; Move o1 <- o2
ROM:0B2B 40
ROM:0B2F CF                       rst     8               ; Restart at vector <int>
ROM:0B2F
ROM:0B30 CB F6                    set     6, (hl)         ; Set bit
ROM:0B32 EB                       ex      de, hl          ; Exchange operands
ROM:0B33 C9                       ret                     ; Return (cond & uncond)
ROM:0B33
ROM:0B34          ; ---------------------------------------------------------------------------
ROM:0B34
ROM:0B34          loc_B34:                                ; CODE XREF: sub_B20+9↑j
ROM:0B34 2A 89 40                 ld      hl, (word_4089) ; Move o1 <- o2
ROM:0B37 19                       add     hl, de          ; Add <reg> to A
ROM:0B38 22 89 40                 ld      (word_4089), hl ; Move o1 <- o2
ROM:0B3B EB                       ex      de, hl          ; Exchange operands
ROM:0B3C C9                       ret                     ; Return (cond & uncond)
ROM:0B3C
ROM:0B3C          ; End of function sub_B20
ROM:0B3C
ROM:0B3D
ROM:0B3D          ; =============== S U B R O U T I N E =======================================
ROM:0B3D
ROM:0B3D
ROM:0B3D          sub_B3D:                                ; CODE XREF: ROM:loc_2E7E↓p
ROM:0B3D CD 9F 0B                 call    sub_B9F         ; call (cond & uncond)
ROM:0B3D
ROM:0B40 21 00 00                 ld      hl, 0           ; Move o1 <- o2
ROM:0B43 22 89 40                 ld      (word_4089), hl ; Move o1 <- o2
ROM:0B46 22 8B 40                 ld      (word_408B), hl ; Move o1 <- o2
ROM:0B49 21 72 40                 ld      hl, 4072h       ; Move o1 <- o2
ROM:0B4C CB DE                    set     3, (hl)         ; Set bit
ROM:0B4E C9                       ret                     ; Return (cond & uncond)
ROM:0B4E
ROM:0B4E          ; End of function sub_B3D
ROM:0B4E
ROM:0B4F          ; ---------------------------------------------------------------------------
ROM:0B4F          ; START OF FUNCTION CHUNK FOR sub_2EDB
ROM:0B4F
ROM:0B4F          loc_B4F:                                ; CODE XREF: sub_2EDB+3F↓j
ROM:0B4F 21 72 40                 ld      hl, 4072h       ; Move o1 <- o2
ROM:0B52 CB 5E                    bit     3, (hl)         ; Test <bit> in operand
ROM:0B54 C8                       ret     z               ; Return (cond & uncond)
ROM:0B55 CB 9E                    res     3, (hl)         ; Reset bit
ROM:0B57 CF                       rst     8               ; Restart at vector <int>
ROM:0B57
ROM:0B58 CB F6                    set     6, (hl)         ; Set bit
ROM:0B5A CB FE                    set     7, (hl)         ; Set bit
ROM:0B5C C9                       ret                     ; Return (cond & uncond)
ROM:0B5C
ROM:0B5C          ; END OF FUNCTION CHUNK FOR sub_2EDB
ROM:0B5D
ROM:0B5D          ; =============== S U B R O U T I N E =======================================
ROM:0B5D
ROM:0B5D
ROM:0B5D          sub_B5D:                                ; CODE XREF: sub_1D2D:loc_1D7D↓j
ROM:0B5D                                                  ; sub_2188+6F↓p ...
ROM:0B5D CD A9 0B                 call    Test_406f_Zero  ; call (cond & uncond)
ROM:0B5D
ROM:0B60
ROM:0B60          loc_B60:                                ; CODE XREF: sub_116C:loc_11CC↓j
ROM:0B60 EB                       ex      de, hl          ; Exchange operands
ROM:0B61 2A AA 40                 ld      hl, (word_40AA) ; Move o1 <- o2
ROM:0B64 19                       add     hl, de          ; Add <reg> to A
ROM:0B65 22 AA 40                 ld      (word_40AA), hl ; Move o1 <- o2
ROM:0B68 21 72 40                 ld      hl, 4072h       ; Move o1 <- o2
ROM:0B6B CB 5E                    bit     3, (hl)         ; Test <bit> in operand
ROM:0B6D 20 09                    jr      nz, loc_B78     ; Jump relative (conditional & unconditional)
ROM:0B6D
ROM:0B6F ED 53 8B                 ld      (word_408B), de ; Move o1 <- o2
ROM:0B6F 40
ROM:0B73 CF                       rst     8               ; Restart at vector <int>
ROM:0B73
ROM:0B74 CB FE                    set     7, (hl)         ; Set bit
ROM:0B76 EB                       ex      de, hl          ; Exchange operands
ROM:0B77 C9                       ret                     ; Return (cond & uncond)
ROM:0B77
ROM:0B78          ; ---------------------------------------------------------------------------
ROM:0B78
ROM:0B78          loc_B78:                                ; CODE XREF: sub_B5D+10↑j
ROM:0B78 2A 8B 40                 ld      hl, (word_408B) ; Move o1 <- o2
ROM:0B7B 19                       add     hl, de          ; Add <reg> to A
ROM:0B7C 22 8B 40                 ld      (word_408B), hl ; Move o1 <- o2
ROM:0B7F EB                       ex      de, hl          ; Exchange operands
ROM:0B80 C9                       ret                     ; Return (cond & uncond)
ROM:0B80
ROM:0B80          ; End of function sub_B5D
ROM:0B80
ROM:0B81
ROM:0B81          ; =============== S U B R O U T I N E =======================================
ROM:0B81
ROM:0B81
ROM:0B81          sub_B81:                                ; CODE XREF: sub_B1C↑p
ROM:0B81                                                  ; sub_BEB+3↓p ...
ROM:0B81 EB                       ex      de, hl          ; Exchange operands
ROM:0B82 2A A8 40                 ld      hl, (word_40A8) ; Move o1 <- o2
ROM:0B85 A7                       and     a               ; And with accumulator
ROM:0B86 ED 5A                    adc     hl, de          ; Add reg to A with carry
ROM:0B88 FA 98 0B                 jp      m, loc_B98      ; Jump (conditional & unconditional)
ROM:0B88
ROM:0B8B 44                       ld      b, h            ; Move o1 <- o2
ROM:0B8C 4D                       ld      c, l            ; Move o1 <- o2
ROM:0B8D 2A AB 00                 ld      hl, (word_AB)   ; Move o1 <- o2
ROM:0B90 A7                       and     a               ; And with accumulator
ROM:0B91 ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:0B93 D0                       ret     nc              ; Return (cond & uncond)
ROM:0B94 3E 16                    ld      a, 16h          ; Move o1 <- o2
ROM:0B96 18 02                    jr      loc_B9A         ; Jump relative (conditional & unconditional)
ROM:0B96
ROM:0B98          ; ---------------------------------------------------------------------------
ROM:0B98
ROM:0B98          loc_B98:                                ; CODE XREF: sub_B81+7↑j
ROM:0B98 3E 15                    ld      a, 15h          ; Move o1 <- o2
ROM:0B98
ROM:0B9A
ROM:0B9A          loc_B9A:                                ; CODE XREF: sub_B81+15↑j
ROM:0B9A CD 68 26                 call    sub_2668        ; call (cond & uncond)
ROM:0B9A
ROM:0B9D 37                       scf                     ; Set carry flag
ROM:0B9E C9                       ret                     ; Return (cond & uncond)
ROM:0B9E
ROM:0B9E          ; End of function sub_B81
ROM:0B9E
ROM:0B9F
ROM:0B9F          ; =============== S U B R O U T I N E =======================================
ROM:0B9F
ROM:0B9F
ROM:0B9F          sub_B9F:                                ; CODE XREF: sub_B3D↑p
ROM:0B9F                                                  ; sub_B9F+7↓j ...
ROM:0B9F CD A9 0B                 call    Test_406f_Zero  ; call (cond & uncond)
ROM:0B9F
ROM:0BA2 3A 70 40                 ld      a, (word_406F+1) ; Bit2: Set: 91Bh
ROM:0BA5 A7                       and     a               ; And with accumulator
ROM:0BA6 20 F7                    jr      nz, sub_B9F     ; Jump relative (conditional & unconditional)
ROM:0BA6
ROM:0BA8 C9                       ret                     ; Return (cond & uncond)
ROM:0BA8
ROM:0BA8          ; End of function sub_B9F
ROM:0BA8
ROM:0BA9
ROM:0BA9          ; =============== S U B R O U T I N E =======================================
ROM:0BA9
ROM:0BA9
ROM:0BA9          Test_406f_Zero:                         ; CODE XREF: sub_B19↑p
ROM:0BA9                                                  ; sub_B5D↑p ...
ROM:0BA9 F5                       push    af              ; Push register pair onto stack
ROM:0BA9
ROM:0BAA
ROM:0BAA          loc_BAA:                                ; CODE XREF: Test_406f_Zero+5↓j
ROM:0BAA 3A 6F 40                 ld      a, (word_406F)  ; Bit2: Set: 91Bh
ROM:0BAD A7                       and     a               ; And with accumulator
ROM:0BAE 20 FA                    jr      nz, loc_BAA     ; Jump relative (conditional & unconditional)
ROM:0BAE
ROM:0BB0 F1                       pop     af              ; Pop register pair from stack
ROM:0BB1 C9                       ret                     ; Return (cond & uncond)
ROM:0BB1
ROM:0BB1          ; End of function Test_406f_Zero
ROM:0BB1
ROM:0BB2
ROM:0BB2          ; =============== S U B R O U T I N E =======================================
ROM:0BB2
ROM:0BB2
ROM:0BB2          sub_BB2:                                ; CODE XREF: Setup_all+37↓p
ROM:0BB2                                                  ; Setup_all+92↓p
ROM:0BB2 CD BB 0B                 call    SetupTimers_Ch1_Ch3 ; call (cond & uncond)
ROM:0BB2
ROM:0BB5 21 71 40                 ld      hl, 4071h       ; Move o1 <- o2
ROM:0BB8 CB E6                    set     4, (hl)         ; Set bit
ROM:0BBA C9                       ret                     ; Return (cond & uncond)
ROM:0BBA
ROM:0BBA          ; End of function sub_BB2
ROM:0BBA
ROM:0BBB
ROM:0BBB          ; =============== S U B R O U T I N E =======================================
ROM:0BBB
ROM:0BBB
ROM:0BBB          SetupTimers_Ch1_Ch3:                    ; CODE XREF: sub_BB2↑p
ROM:0BBB
ROM:0BBB          ; FUNCTION CHUNK AT ROM:0EDC SIZE 0000002C BYTES
ROM:0BBB
ROM:0BBB 21 FB 01                 ld      hl, 1FBh        ; Move o1 <- o2
ROM:0BBE 22 4E 40                 ld      (INT_Timer_Ch3_Addr), hl ; 1FBh by default
ROM:0BC1 21 00 00                 ld      hl, 0           ; Move o1 <- o2
ROM:0BC4 22 6F 40                 ld      (word_406F), hl ; Also load zero in Int?
ROM:0BC7 22 85 40                 ld      (word_4085), hl ; Move o1 <- o2
ROM:0BCA CD 51 02                 call    InitTimers      ; call (cond & uncond)
ROM:0BCA
ROM:0BCD 21 00 00                 ld      hl, 0           ; Move o1 <- o2
ROM:0BCD
ROM:0BD0
ROM:0BD0          wait_10ms:                              ; CODE XREF: SetupTimers_Ch1_Ch3+16↓j
ROM:0BD0                                                  ; SetupTimers_Ch1_Ch3+19↓j
ROM:0BD0 2D                       dec     l               ; Decrement operand
ROM:0BD1 20 FD                    jr      nz, wait_10ms   ; Jump relative (conditional & unconditional)
ROM:0BD1
ROM:0BD3 25                       dec     h               ; Decrement operand
ROM:0BD4 20 FA                    jr      nz, wait_10ms   ; Jump relative (conditional & unconditional)
ROM:0BD4
ROM:0BD6 AF                       xor     a               ; A = 0
ROM:0BD7 32 72 40                 ld      (byte_4072), a  ; Move o1 <- o2
ROM:0BDA FB                       ei                      ; Enable interrupts
ROM:0BDB 21 00 40                 ld      hl, 4000h       ; Move o1 <- o2
ROM:0BDE 46                       ld      b, (hl)         ; Move o1 <- o2
ROM:0BDF 77                       ld      (hl), a         ; Move o1 <- o2
ROM:0BE0 05                       dec     b               ; Decrement operand
ROM:0BE1 20 05                    jr      nz, loc_BE8     ; Jump relative (conditional & unconditional)
ROM:0BE1
ROM:0BE3 3E 5A                    ld      a, 5Ah ; 'Z'    ; Move o1 <- o2
ROM:0BE5 CD 16 09                 call    sub_916         ; call (cond & uncond)
ROM:0BE5
ROM:0BE8
ROM:0BE8          loc_BE8:                                ; CODE XREF: SetupTimers_Ch1_Ch3+26↑j
ROM:0BE8 C3 DC 0E                 jp      loc_EDC         ; Jump (conditional & unconditional)
ROM:0BE8
ROM:0BE8          ; End of function SetupTimers_Ch1_Ch3
ROM:0BE8
ROM:0BEB
ROM:0BEB          ; =============== S U B R O U T I N E =======================================
ROM:0BEB
ROM:0BEB
ROM:0BEB          sub_BEB:                                ; CODE XREF: sub_116C+C2↓p
ROM:0BEB 22 79 40                 ld      (word_4079), hl ; Move o1 <- o2
ROM:0BEE CD 81 0B                 call    sub_B81         ; call (cond & uncond)
ROM:0BEE
ROM:0BF1 ED 43 A8                 ld      (word_40A8), bc ; Move o1 <- o2
ROM:0BF1 40
ROM:0BF5 CF                       rst     8               ; Restart at vector <int>
ROM:0BF5
ROM:0BF6 CB C6                    set     0, (hl)         ; Set bit
ROM:0BF8 C9                       ret                     ; Return (cond & uncond)
ROM:0BF8
ROM:0BF8          ; End of function sub_BEB
ROM:0BF8
ROM:0BF9
ROM:0BF9          ; =============== S U B R O U T I N E =======================================
ROM:0BF9
ROM:0BF9
ROM:0BF9          sub_BF9:                                ; CODE XREF: sub_AD4+E↑p
ROM:0BF9 1E 06                    ld      e, 6            ; Move o1 <- o2
ROM:0BFB CD AA 0C                 call    sub_CAA         ; call (cond & uncond)
ROM:0BFB
ROM:0BFE F3                       di                      ; Disable interrupts
ROM:0BFF CD 6E 0C                 call    sub_C6E         ; call (cond & uncond)
ROM:0BFF
ROM:0C02 32 8D 40                 ld      (byte_408D), a  ; Move o1 <- o2
ROM:0C05 CF                       rst     8               ; Restart at vector <int>
ROM:0C05
ROM:0C06 CB D6                    set     2, (hl)         ; Set bit
ROM:0C08 FB                       ei                      ; Enable interrupts
ROM:0C09 C9                       ret                     ; Return (cond & uncond)
ROM:0C09
ROM:0C09          ; End of function sub_BF9
ROM:0C09
ROM:0C0A
ROM:0C0A          ; =============== S U B R O U T I N E =======================================
ROM:0C0A
ROM:0C0A
ROM:0C0A          sub_C0A:                                ; CODE XREF: sub_AD4+13↑p
ROM:0C0A CD A8 0C                 call    sub_CA8         ; call (cond & uncond)
ROM:0C0A
ROM:0C0D 3A 82 40                 ld      a, (byte_4082)  ; Move o1 <- o2
ROM:0C10 E6 0F                    and     0Fh             ; And with accumulator
ROM:0C12 28 19                    jr      z, loc_C2D      ; Jump relative (conditional & unconditional)
ROM:0C12
ROM:0C14 FE 05                    cp      5               ; Compare with accumulator
ROM:0C16 38 04                    jr      c, loc_C1C      ; Jump relative (conditional & unconditional)
ROM:0C16
ROM:0C18 3E 01                    ld      a, 1            ; Move o1 <- o2
ROM:0C1A 18 11                    jr      loc_C2D         ; Jump relative (conditional & unconditional)
ROM:0C1A
ROM:0C1C          ; ---------------------------------------------------------------------------
ROM:0C1C
ROM:0C1C          loc_C1C:                                ; CODE XREF: sub_C0A+C↑j
ROM:0C1C 3D                       dec     a               ; Decrement operand
ROM:0C1D 07                       rlca                    ; Rotate left accumulator
ROM:0C1E 07                       rlca                    ; Rotate left accumulator
ROM:0C1F 07                       rlca                    ; Rotate left accumulator
ROM:0C20 47                       ld      b, a            ; Move o1 <- o2
ROM:0C21 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:0C22 E6 38                    and     38h ; '8'       ; And with accumulator
ROM:0C24 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:0C25 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:0C26 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:0C27 80                       add     a, b            ; Add <reg> to A
ROM:0C28 1E 02                    ld      e, 2            ; Move o1 <- o2
ROM:0C2A CD AA 0C                 call    sub_CAA         ; call (cond & uncond)
ROM:0C2A
ROM:0C2D
ROM:0C2D          loc_C2D:                                ; CODE XREF: sub_C0A+8↑j
ROM:0C2D                                                  ; sub_C0A+10↑j
ROM:0C2D 32 83 40                 ld      (byte_4083), a  ; Move o1 <- o2
ROM:0C30 CF                       rst     8               ; Restart at vector <int>
ROM:0C30
ROM:0C31 CB DE                    set     3, (hl)         ; Set bit
ROM:0C33 C9                       ret                     ; Return (cond & uncond)
ROM:0C33
ROM:0C33          ; End of function sub_C0A
ROM:0C33
ROM:0C34
ROM:0C34          ; =============== S U B R O U T I N E =======================================
ROM:0C34
ROM:0C34
ROM:0C34          sub_C34:                                ; CODE XREF: sub_AD4+9↑p
ROM:0C34                                                  ; sub_1E95+F↓j
ROM:0C34 57                       ld      d, a            ; Move o1 <- o2
ROM:0C35 21 71 40                 ld      hl, 4071h       ; Move o1 <- o2
ROM:0C38 4E                       ld      c, (hl)         ; Move o1 <- o2
ROM:0C39 3E D8                    ld      a, 0D8h         ; Move o1 <- o2
ROM:0C3B CB 49                    bit     1, c            ; Test <bit> in operand
ROM:0C3D 20 28                    jr      nz, loc_C67     ; Jump relative (conditional & unconditional)
ROM:0C3D
ROM:0C3F 3A 82 40                 ld      a, (byte_4082)  ; Move o1 <- o2
ROM:0C42 E6 0F                    and     0Fh             ; And with accumulator
ROM:0C44 28 21                    jr      z, loc_C67      ; Jump relative (conditional & unconditional)
ROM:0C44
ROM:0C46 06 02                    ld      b, 2            ; Move o1 <- o2
ROM:0C48 CB 41                    bit     0, c            ; Test <bit> in operand
ROM:0C4A 20 0E                    jr      nz, loc_C5A     ; Jump relative (conditional & unconditional)
ROM:0C4A
ROM:0C4C 7A                       ld      a, d            ; Move o1 <- o2
ROM:0C4D CD A8 0C                 call    sub_CA8         ; call (cond & uncond)
ROM:0C4D
ROM:0C50 E6 C0                    and     0C0h            ; And with accumulator
ROM:0C52 07                       rlca                    ; Rotate left accumulator
ROM:0C53 07                       rlca                    ; Rotate left accumulator
ROM:0C54 1E 04                    ld      e, 4            ; Move o1 <- o2
ROM:0C56 CD AA 0C                 call    sub_CAA         ; call (cond & uncond)
ROM:0C56
ROM:0C59 46                       ld      b, (hl)         ; Move o1 <- o2
ROM:0C59
ROM:0C5A
ROM:0C5A          loc_C5A:                                ; CODE XREF: sub_C34+16↑j
ROM:0C5A                                                  ; sub_D10+F3↓p
ROM:0C5A 21 8F 40                 ld      hl, 408Fh       ; Move o1 <- o2
ROM:0C5D 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:0C5E 70                       ld      (hl), b         ; Move o1 <- o2
ROM:0C5F E6 0F                    and     0Fh             ; And with accumulator
ROM:0C61 20 02                    jr      nz, loc_C65     ; Jump relative (conditional & unconditional)
ROM:0C61
ROM:0C63 3E 09                    ld      a, 9            ; Move o1 <- o2
ROM:0C63
ROM:0C65
ROM:0C65          loc_C65:                                ; CODE XREF: sub_C34+2D↑j
ROM:0C65 80                       add     a, b            ; Add <reg> to A
ROM:0C66 1F                       rra                     ; Rotate right through carry accumulator
ROM:0C66
ROM:0C67
ROM:0C67          loc_C67:                                ; CODE XREF: sub_C34+9↑j
ROM:0C67                                                  ; sub_C34+10↑j
ROM:0C67 32 8E 40                 ld      (byte_408E), a  ; Move o1 <- o2
ROM:0C6A CF                       rst     8               ; Restart at vector <int>
ROM:0C6A
ROM:0C6B CB CE                    set     1, (hl)         ; Set bit
ROM:0C6D C9                       ret                     ; Return (cond & uncond)
ROM:0C6D
ROM:0C6D          ; End of function sub_C34
ROM:0C6D
ROM:0C6E
ROM:0C6E          ; =============== S U B R O U T I N E =======================================
ROM:0C6E
ROM:0C6E
ROM:0C6E          sub_C6E:                                ; CODE XREF: sub_BF9+6↑p
ROM:0C6E                                                  ; sub_D10+30↓p
ROM:0C6E 21 84 40                 ld      hl, 4084h       ; Move o1 <- o2
ROM:0C71 46                       ld      b, (hl)         ; Move o1 <- o2
ROM:0C72 77                       ld      (hl), a         ; Move o1 <- o2
ROM:0C73 90                       sub     b               ; Subtract from A
ROM:0C74 38 05                    jr      c, loc_C7B      ; Jump relative (conditional & unconditional)
ROM:0C74
ROM:0C76 FE 32                    cp      32h ; '2'       ; Compare with accumulator
ROM:0C78 D8                       ret     c               ; Return (cond & uncond)
ROM:0C79 D6 64                    sub     64h ; 'd'       ; Subtract from A
ROM:0C79
ROM:0C7B
ROM:0C7B          loc_C7B:                                ; CODE XREF: sub_C6E+6↑j
ROM:0C7B FE CE                    cp      0CEh            ; Compare with accumulator
ROM:0C7D D0                       ret     nc              ; Return (cond & uncond)
ROM:0C7E C6 64                    add     a, 64h ; 'd'    ; Add <reg> to A
ROM:0C80 C9                       ret                     ; Return (cond & uncond)
ROM:0C80
ROM:0C80          ; End of function sub_C6E
ROM:0C80
ROM:0C81
ROM:0C81          ; =============== S U B R O U T I N E =======================================
ROM:0C81
ROM:0C81
ROM:0C81          sub_C81:                                ; CODE XREF: sub_D10-23F↑p
ROM:0C81                                                  ; sub_116C+A3↓p ...
ROM:0C81 FE 10                    cp      10h             ; Compare with accumulator
ROM:0C83 D8                       ret     c               ; Return (cond & uncond)
ROM:0C84 FE 1C                    cp      1Ch             ; Compare with accumulator
ROM:0C86 D0                       ret     nc              ; Return (cond & uncond)
ROM:0C87 F5                       push    af              ; Push register pair onto stack
ROM:0C88 2A A0 40                 ld      hl, (word_40A0) ; Move o1 <- o2
ROM:0C8B D6 10                    sub     10h             ; Subtract from A
ROM:0C8D 28 0B                    jr      z, loc_C9A      ; Jump relative (conditional & unconditional)
ROM:0C8D
ROM:0C8F
ROM:0C8F          loc_C8F:                                ; CODE XREF: sub_C81+17↓j
ROM:0C8F F5                       push    af              ; Push register pair onto stack
ROM:0C8F
ROM:0C90
ROM:0C90          loc_C90:                                ; CODE XREF: sub_C81+13↓j
ROM:0C90 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:0C91 FE FF                    cp      0FFh            ; Compare with accumulator
ROM:0C93 23                       inc     hl              ; Increment operand
ROM:0C94 20 FA                    jr      nz, loc_C90     ; Jump relative (conditional & unconditional)
ROM:0C94
ROM:0C96 F1                       pop     af              ; Pop register pair from stack
ROM:0C97 3D                       dec     a               ; Decrement operand
ROM:0C98 20 F5                    jr      nz, loc_C8F     ; Jump relative (conditional & unconditional)
ROM:0C98
ROM:0C9A
ROM:0C9A          loc_C9A:                                ; CODE XREF: sub_C81+C↑j
ROM:0C9A F1                       pop     af              ; Pop register pair from stack
ROM:0C9B FE 18                    cp      18h             ; Compare with accumulator
ROM:0C9D D0                       ret     nc              ; Return (cond & uncond)
ROM:0C9E 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:0C9F CB 7F                    bit     7, a            ; Test <bit> in operand
ROM:0CA1 20 01                    jr      nz, loc_CA4     ; Jump relative (conditional & unconditional)
ROM:0CA1
ROM:0CA3 23                       inc     hl              ; Increment operand
ROM:0CA3
ROM:0CA4
ROM:0CA4          loc_CA4:                                ; CODE XREF: sub_C81+20↑j
ROM:0CA4 22 7D 40                 ld      (word_407D), hl ; Move o1 <- o2
ROM:0CA7 C9                       ret                     ; Return (cond & uncond)
ROM:0CA7
ROM:0CA7          ; End of function sub_C81
ROM:0CA7
ROM:0CA8
ROM:0CA8          ; =============== S U B R O U T I N E =======================================
ROM:0CA8
ROM:0CA8
ROM:0CA8          sub_CA8:                                ; CODE XREF: sub_C0A↑p
ROM:0CA8                                                  ; sub_C34+19↑p ...
ROM:0CA8 1E 00                    ld      e, 0            ; Move o1 <- o2
ROM:0CA8
ROM:0CA8          ; End of function sub_CA8
ROM:0CA8
ROM:0CAA
ROM:0CAA          ; =============== S U B R O U T I N E =======================================
ROM:0CAA
ROM:0CAA
ROM:0CAA          sub_CAA:                                ; CODE XREF: sub_BF9+2↑p
ROM:0CAA                                                  ; sub_C0A+20↑p ...
ROM:0CAA 21 92 40                 ld      hl, 4092h       ; Move o1 <- o2
ROM:0CAD 16 00                    ld      d, 0            ; Move o1 <- o2
ROM:0CAF 19                       add     hl, de          ; Add <reg> to A
ROM:0CB0 5E                       ld      e, (hl)         ; Move o1 <- o2
ROM:0CB1 23                       inc     hl              ; Increment operand
ROM:0CB2 66                       ld      h, (hl)         ; Move o1 <- o2
ROM:0CB3 6B                       ld      l, e            ; Move o1 <- o2
ROM:0CB4 5F                       ld      e, a            ; Move o1 <- o2
ROM:0CB5 19                       add     hl, de          ; Add <reg> to A
ROM:0CB6 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:0CB7 C9                       ret                     ; Return (cond & uncond)
ROM:0CB7
ROM:0CB7          ; End of function sub_CAA
ROM:0CB7
ROM:0CB8
ROM:0CB8          ; =============== S U B R O U T I N E =======================================
ROM:0CB8
ROM:0CB8
ROM:0CB8          sub_CB8:                                ; CODE XREF: INT_Timer_Ch3+B↑p
ROM:0CB8 CF                       rst     8               ; Restart at vector <int>
ROM:0CB8
ROM:0CB9 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:0CBA E6 3F                    and     3Fh ; '?'       ; And with accumulator
ROM:0CBC C0                       ret     nz              ; Return (cond & uncond)
ROM:0CBD CB 76                    bit     6, (hl)         ; Test <bit> in operand
ROM:0CBF 28 17                    jr      z, loc_CD8      ; Jump relative (conditional & unconditional)
ROM:0CBF
ROM:0CC1 ED 4B 89                 ld      bc, (word_4089) ; Move o1 <- o2
ROM:0CC1 40
ROM:0CC5 ED 5B 3A                 ld      de, (word_413A) ; 413B papertransport
ROM:0CC5 41
ROM:0CC9 F3                       di                      ; Disable interrupts
ROM:0CCA 2A 3D 41                 ld      hl, (word_413D) ; Move o1 <- o2
ROM:0CCD CD F6 0C                 call    sub_CF6         ; call (cond & uncond)
ROM:0CCD
ROM:0CD0 38 06                    jr      c, loc_CD8      ; Jump relative (conditional & unconditional)
ROM:0CD0
ROM:0CD2 22 3D 41                 ld      (word_413D), hl ; Move o1 <- o2
ROM:0CD5 CF                       rst     8               ; Restart at vector <int>
ROM:0CD5
ROM:0CD6 CB B6                    res     6, (hl)         ; Reset bit
ROM:0CD6
ROM:0CD8
ROM:0CD8          loc_CD8:                                ; CODE XREF: sub_CB8+7↑j
ROM:0CD8                                                  ; sub_CB8+18↑j
ROM:0CD8 FB                       ei                      ; Enable interrupts
ROM:0CD9 CF                       rst     8               ; Restart at vector <int>
ROM:0CD9
ROM:0CDA CB 7E                    bit     7, (hl)         ; Test <bit> in operand
ROM:0CDC C8                       ret     z               ; Return (cond & uncond)
ROM:0CDD ED 4B 8B                 ld      bc, (word_408B) ; Move o1 <- o2
ROM:0CDD 40
ROM:0CE1 ED 5B 4D                 ld      de, (word_414D) ; 414E - Wagentransport
ROM:0CE1 41
ROM:0CE5 F3                       di                      ; Disable interrupts
ROM:0CE6 2A 50 41                 ld      hl, (word_4150) ; Move o1 <- o2
ROM:0CE9 CD F6 0C                 call    sub_CF6         ; call (cond & uncond)
ROM:0CE9
ROM:0CEC 38 06                    jr      c, loc_CF4      ; Jump relative (conditional & unconditional)
ROM:0CEC
ROM:0CEE 22 50 41                 ld      (word_4150), hl ; Move o1 <- o2
ROM:0CF1 CF                       rst     8               ; Restart at vector <int>
ROM:0CF1
ROM:0CF2 CB BE                    res     7, (hl)         ; Reset bit
ROM:0CF2
ROM:0CF4
ROM:0CF4          loc_CF4:                                ; CODE XREF: sub_CB8+34↑j
ROM:0CF4 FB                       ei                      ; Enable interrupts
ROM:0CF5 C9                       ret                     ; Return (cond & uncond)
ROM:0CF5
ROM:0CF5          ; End of function sub_CB8
ROM:0CF5
ROM:0CF6
ROM:0CF6          ; =============== S U B R O U T I N E =======================================
ROM:0CF6
ROM:0CF6
ROM:0CF6          sub_CF6:                                ; CODE XREF: sub_CB8+15↑p
ROM:0CF6                                                  ; sub_CB8+31↑p
ROM:0CF6 2B                       dec     hl              ; Decrement operand
ROM:0CF7 D5                       push    de              ; Push register pair onto stack
ROM:0CF8 EB                       ex      de, hl          ; Exchange operands
ROM:0CF9 21 02 00                 ld      hl, 2           ; Move o1 <- o2
ROM:0CFC D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:0CFC
ROM:0CFD EB                       ex      de, hl          ; Exchange operands
ROM:0CFE D1                       pop     de              ; Pop register pair from stack
ROM:0CFF D8                       ret     c               ; Return (cond & uncond)
ROM:0D00 7A                       ld      a, d            ; Move o1 <- o2
ROM:0D01 A8                       xor     b               ; Exclusive or with accumulator
ROM:0D02 07                       rlca                    ; Rotate left accumulator
ROM:0D03 D8                       ret     c               ; Return (cond & uncond)
ROM:0D04 CB 78                    bit     7, b            ; Test <bit> in operand
ROM:0D06 28 05                    jr      z, loc_D0D      ; Jump relative (conditional & unconditional)
ROM:0D06
ROM:0D08 ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:0D08
ROM:0D0A
ROM:0D0A          loc_D0A:                                ; CODE XREF: sub_CF6+18↓j
ROM:0D0A 23                       inc     hl              ; Increment operand
ROM:0D0B AF                       xor     a               ; Exclusive or with accumulator
ROM:0D0C C9                       ret                     ; Return (cond & uncond)
ROM:0D0C
ROM:0D0D          ; ---------------------------------------------------------------------------
ROM:0D0D
ROM:0D0D          loc_D0D:                                ; CODE XREF: sub_CF6+10↑j
ROM:0D0D 09                       add     hl, bc          ; Add <reg> to A
ROM:0D0E 18 FA                    jr      loc_D0A         ; Jump relative (conditional & unconditional)
ROM:0D0E
ROM:0D0E          ; End of function sub_CF6
ROM:0D0E
ROM:0D10
ROM:0D10          ; =============== S U B R O U T I N E =======================================
ROM:0D10
ROM:0D10
ROM:0D10          sub_D10:                                ; CODE XREF: INT_Timer_Ch3+8↑p
ROM:0D10
ROM:0D10          ; FUNCTION CHUNK AT ROM:0686 SIZE 0000001E BYTES
ROM:0D10          ; FUNCTION CHUNK AT ROM:088B SIZE 0000002B BYTES
ROM:0D10          ; FUNCTION CHUNK AT ROM:0ACE SIZE 00000006 BYTES
ROM:0D10          ; FUNCTION CHUNK AT ROM:0E97 SIZE 00000045 BYTES
ROM:0D10
ROM:0D10 ED 4B 6F                 ld      bc, (word_406F) ; Bit2: Set: 91Bh
ROM:0D10 40
ROM:0D14 2A 85 40                 ld      hl, (word_4085) ; Move o1 <- o2
ROM:0D17 A7                       and     a               ; And with accumulator
ROM:0D18 ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:0D1A 21 88 40                 ld      hl, 4088h       ; Move o1 <- o2
ROM:0D1D 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:0D1E 20 26                    jr      nz, loc_D46     ; Jump relative (conditional & unconditional)
ROM:0D1E
ROM:0D20 05                       dec     b               ; Decrement operand
ROM:0D21 04                       inc     b               ; Increment operand
ROM:0D22 C0                       ret     nz              ; Return (cond & uncond)
ROM:0D23 0D                       dec     c               ; Decrement operand
ROM:0D24 0C                       inc     c               ; Increment operand
ROM:0D25 20 1F                    jr      nz, loc_D46     ; Jump relative (conditional & unconditional)
ROM:0D25
ROM:0D27 A7                       and     a               ; And with accumulator
ROM:0D28 20 09                    jr      nz, loc_D33     ; Jump relative (conditional & unconditional)
ROM:0D28
ROM:0D2A 3A 71 40                 ld      a, (byte_4071)  ; Bit 4: Set: BB8
ROM:0D2D CB 67                    bit     4, a            ; Test <bit> in operand
ROM:0D2F C4 25 07                 call    nz, Motor_MIRED_FastClear ; call (cond & uncond)
ROM:0D2F
ROM:0D32 C9                       ret                     ; Return (cond & uncond)
ROM:0D32
ROM:0D33          ; ---------------------------------------------------------------------------
ROM:0D33
ROM:0D33          loc_D33:                                ; CODE XREF: sub_D10+18↑j
ROM:0D33 3A 87 40                 ld      a, (byte_4087)  ; Move o1 <- o2
ROM:0D36 E6 03                    and     3               ; And with accumulator
ROM:0D38 C0                       ret     nz              ; Return (cond & uncond)
ROM:0D39 35                       dec     (hl)            ; Decrement operand
ROM:0D3A C0                       ret     nz              ; Return (cond & uncond)
ROM:0D3B CD BB 0A                 call    sub_ABB         ; call (cond & uncond)
ROM:0D3B
ROM:0D3E 3E 01                    ld      a, 1            ; Move o1 <- o2
ROM:0D40 CD 6E 0C                 call    sub_C6E         ; call (cond & uncond)
ROM:0D40
ROM:0D43 C3 A9 09                 jp      sub_9A9         ; Jump (conditional & unconditional)
ROM:0D43
ROM:0D46          ; ---------------------------------------------------------------------------
ROM:0D46
ROM:0D46          loc_D46:                                ; CODE XREF: sub_D10+E↑j
ROM:0D46                                                  ; sub_D10+15↑j
ROM:0D46 ED 43 85                 ld      (word_4085), bc ; Move o1 <- o2
ROM:0D46 40
ROM:0D4A A7                       and     a               ; And with accumulator
ROM:0D4B 28 03                    jr      z, loc_D50      ; Jump relative (conditional & unconditional)
ROM:0D4B
ROM:0D4D 3E 01                    ld      a, 1            ; Move o1 <- o2
ROM:0D4F 77                       ld      (hl), a         ; Move o1 <- o2
ROM:0D4F
ROM:0D50
ROM:0D50          loc_D50:                                ; CODE XREF: sub_D10+3B↑j
ROM:0D50 CF                       rst     8               ; Restart at vector <int>
ROM:0D50
ROM:0D51 79                       ld      a, c            ; Move o1 <- o2
ROM:0D52 48                       ld      c, b            ; Move o1 <- o2
ROM:0D53 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:0D54 30 3F                    jr      nc, loc_D95     ; Jump relative (conditional & unconditional)
ROM:0D54
ROM:0D56 3E 4A                    ld      a, 4Ah ; 'J'    ; Move o1 <- o2
ROM:0D58 A1                       and     c               ; And with accumulator
ROM:0D59 ED 5B 79                 ld      de, (word_4079) ; Move o1 <- o2
ROM:0D59 40
ROM:0D5D 28 30                    jr      z, loc_D8F      ; Jump relative (conditional & unconditional)
ROM:0D5D
ROM:0D5F F3                       di                      ; Disable interrupts
ROM:0D60 ED 4B 3D                 ld      bc, (word_413D) ; Move o1 <- o2
ROM:0D60 41
ROM:0D64 79                       ld      a, c            ; Move o1 <- o2
ROM:0D65 B0                       or      b               ; Or with accumulator
ROM:0D66 28 1F                    jr      z, loc_D87      ; Jump relative (conditional & unconditional)
ROM:0D66
ROM:0D68 EB                       ex      de, hl          ; Exchange operands
ROM:0D69 3A 3B 41                 ld      a, (word_413A+1) ; 413B papertransport
ROM:0D6C AC                       xor     h               ; Exclusive or with accumulator
ROM:0D6D 07                       rlca                    ; Rotate left accumulator
ROM:0D6E 30 19                    jr      nc, loc_D89     ; Jump relative (conditional & unconditional)
ROM:0D6E
ROM:0D70 CB 7C                    bit     7, h            ; Test <bit> in operand
ROM:0D72 20 05                    jr      nz, loc_D79     ; Jump relative (conditional & unconditional)
ROM:0D72
ROM:0D74
ROM:0D74          loc_D74:                                ; CODE XREF: sub_D10+7D↓j
ROM:0D74 EB                       ex      de, hl          ; Exchange operands
ROM:0D75 AF                       xor     a               ; Exclusive or with accumulator
ROM:0D76 6F                       ld      l, a            ; Move o1 <- o2
ROM:0D77 67                       ld      h, a            ; Move o1 <- o2
ROM:0D78 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:0D78
ROM:0D79
ROM:0D79          loc_D79:                                ; CODE XREF: sub_D10+62↑j
ROM:0D79                                                  ; sub_D10+7B↓j
ROM:0D79 A7                       and     a               ; And with accumulator
ROM:0D7A ED 4A                    adc     hl, bc          ; Add reg to A with carry
ROM:0D7C 28 09                    jr      z, loc_D87      ; Jump relative (conditional & unconditional)
ROM:0D7C
ROM:0D7E FA 87 0D                 jp      m, loc_D87      ; Jump (conditional & unconditional)
ROM:0D7E
ROM:0D81 22 3D 41                 ld      (word_413D), hl ; Move o1 <- o2
ROM:0D84 CF                       rst     8               ; Restart at vector <int>
ROM:0D84
ROM:0D85 CB 86                    res     0, (hl)         ; Reset bit
ROM:0D85
ROM:0D87
ROM:0D87          loc_D87:                                ; CODE XREF: sub_D10+56↑j
ROM:0D87                                                  ; sub_D10+6C↑j ...
ROM:0D87 FB                       ei                      ; Enable interrupts
ROM:0D88 C9                       ret                     ; Return (cond & uncond)
ROM:0D88
ROM:0D89          ; ---------------------------------------------------------------------------
ROM:0D89
ROM:0D89          loc_D89:                                ; CODE XREF: sub_D10+5E↑j
ROM:0D89 CB 7C                    bit     7, h            ; Test <bit> in operand
ROM:0D8B 28 EC                    jr      z, loc_D79      ; Jump relative (conditional & unconditional)
ROM:0D8B
ROM:0D8D 18 E5                    jr      loc_D74         ; Jump relative (conditional & unconditional)
ROM:0D8D
ROM:0D8F          ; ---------------------------------------------------------------------------
ROM:0D8F
ROM:0D8F          loc_D8F:                                ; CODE XREF: sub_D10+4D↑j
ROM:0D8F CB 86                    res     0, (hl)         ; Reset bit
ROM:0D91 EB                       ex      de, hl          ; Exchange operands
ROM:0D92 C3 B2 07                 jp      sub_7B2         ; Jump (conditional & unconditional)
ROM:0D92
ROM:0D95          ; ---------------------------------------------------------------------------
ROM:0D95
ROM:0D95          loc_D95:                                ; CODE XREF: sub_D10+44↑j
ROM:0D95 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:0D96 30 3F                    jr      nc, loc_DD7     ; Jump relative (conditional & unconditional)
ROM:0D96
ROM:0D98 EB                       ex      de, hl          ; Exchange operands
ROM:0D99 21 88 40                 ld      hl, 4088h       ; Move o1 <- o2
ROM:0D9C 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:0D9D A7                       and     a               ; And with accumulator
ROM:0D9E 28 29                    jr      z, loc_DC9      ; Jump relative (conditional & unconditional)
ROM:0D9E
ROM:0DA0 3E 2C                    ld      a, 2Ch ; ','    ; Move o1 <- o2
ROM:0DA2 A1                       and     c               ; And with accumulator
ROM:0DA3 C0                       ret     nz              ; Return (cond & uncond)
ROM:0DA4 EB                       ex      de, hl          ; Exchange operands
ROM:0DA5 CB 8E                    res     1, (hl)         ; Reset bit
ROM:0DA7 3A 8E 40                 ld      a, (byte_408E)  ; Move o1 <- o2
ROM:0DAA F5                       push    af              ; Push register pair onto stack
ROM:0DAB 07                       rlca                    ; Rotate left accumulator
ROM:0DAC DC C2 0A                 call    c, Motor_EBS_Set ; call (cond & uncond)
ROM:0DAC
ROM:0DAF F1                       pop     af              ; Pop register pair from stack
ROM:0DB0 C3 16 09                 jp      sub_916         ; Jump (conditional & unconditional)
ROM:0DB0
ROM:0DB3          ; ---------------------------------------------------------------------------
ROM:0DB3
ROM:0DB3          loc_DB3:                                ; CODE XREF: sub_D10+EA↓j
ROM:0DB3 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:0DB4 E6 42                    and     42h ; 'B'       ; And with accumulator
ROM:0DB6 C0                       ret     nz              ; Return (cond & uncond)
ROM:0DB7 3E 02                    ld      a, 2            ; Move o1 <- o2
ROM:0DB9 DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:0DB9                                                  ; A - if < 10h is 0000xxxx read mask
ROM:0DB9                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:0DB9                                                  ;         A[5:3] - bit index for...
ROM:0DB9                                                  ;         A[2:0] - bit index for...
ROM:0DB9                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:0DB9
ROM:0DBA 23                       inc     hl              ; Increment operand
ROM:0DBB CB 8E                    res     1, (hl)         ; Reset bit
ROM:0DBD 28 07                    jr      z, loc_DC6      ; Jump relative (conditional & unconditional)
ROM:0DBD
ROM:0DBF CB 7E                    bit     7, (hl)         ; Test <bit> in operand
ROM:0DC1 CB FE                    set     7, (hl)         ; Set bit
ROM:0DC3 C8                       ret     z               ; Return (cond & uncond)
ROM:0DC4 CB CE                    set     1, (hl)         ; Set bit
ROM:0DC4
ROM:0DC6
ROM:0DC6          loc_DC6:                                ; CODE XREF: sub_D10+AD↑j
ROM:0DC6 CB BE                    res     7, (hl)         ; Reset bit
ROM:0DC8 C9                       ret                     ; Return (cond & uncond)
ROM:0DC8
ROM:0DC9          ; ---------------------------------------------------------------------------
ROM:0DC9
ROM:0DC9          loc_DC9:                                ; CODE XREF: sub_D10+8E↑j
ROM:0DC9 3E 5A                    ld      a, 5Ah ; 'Z'    ; Move o1 <- o2
ROM:0DCB A1                       and     c               ; And with accumulator
ROM:0DCC C0                       ret     nz              ; Return (cond & uncond)
ROM:0DCD 36 FF                    ld      (hl), 0FFh      ; Move o1 <- o2
ROM:0DCF 2E 71                    ld      l, 71h ; 'q'    ; Move o1 <- o2
ROM:0DD1 CB 4E                    bit     1, (hl)         ; Test <bit> in operand
ROM:0DD3 C0                       ret     nz              ; Return (cond & uncond)
ROM:0DD3
ROM:0DD4
ROM:0DD4          loc_DD4:                                ; CODE XREF: sub_D10+F6↓j
ROM:0DD4 C3 8C 0A                 jp      FBS_Clear       ; Jump (conditional & unconditional)
ROM:0DD4
ROM:0DD7          ; ---------------------------------------------------------------------------
ROM:0DD7
ROM:0DD7          loc_DD7:                                ; CODE XREF: sub_D10+86↑j
ROM:0DD7 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:0DD8 30 0C                    jr      nc, loc_DE6     ; Jump relative (conditional & unconditional)
ROM:0DD8
ROM:0DDA 3E 59                    ld      a, 59h ; 'Y'    ; Move o1 <- o2
ROM:0DDC A1                       and     c               ; And with accumulator
ROM:0DDD C0                       ret     nz              ; Return (cond & uncond)
ROM:0DDE CB 96                    res     2, (hl)         ; Reset bit
ROM:0DE0 3A 8D 40                 ld      a, (byte_408D)  ; Move o1 <- o2
ROM:0DE3 C3 A9 09                 jp      sub_9A9         ; Jump (conditional & unconditional)
ROM:0DE3
ROM:0DE6          ; ---------------------------------------------------------------------------
ROM:0DE6
ROM:0DE6          loc_DE6:                                ; CODE XREF: sub_D10+C8↑j
ROM:0DE6 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:0DE7 30 1F                    jr      nc, loc_E08     ; Jump relative (conditional & unconditional)
ROM:0DE7
ROM:0DE9 3E 7F                    ld      a, 7Fh          ; Move o1 <- o2
ROM:0DEB A1                       and     c               ; And with accumulator
ROM:0DEC C0                       ret     nz              ; Return (cond & uncond)
ROM:0DED CB 9E                    res     3, (hl)         ; Reset bit
ROM:0DEF 3A 83 40                 ld      a, (byte_4083)  ; Move o1 <- o2
ROM:0DF2 CD 2A 0A                 call    Motor_DoMagicProgramCounter0AndClearDHM ; call (cond & uncond)
ROM:0DF2
ROM:0DF5 21 71 40                 ld      hl, 4071h       ; Move o1 <- o2
ROM:0DF8 CB 4E                    bit     1, (hl)         ; Test <bit> in operand
ROM:0DFA 28 B7                    jr      z, loc_DB3      ; Jump relative (conditional & unconditional)
ROM:0DFA
ROM:0DFC 3E D7                    ld      a, 0D7h         ; Move o1 <- o2
ROM:0DFE CD 16 09                 call    sub_916         ; call (cond & uncond)
ROM:0DFE
ROM:0E01 06 09                    ld      b, 9            ; Move o1 <- o2
ROM:0E03 CD 5A 0C                 call    loc_C5A         ; call (cond & uncond)
ROM:0E03
ROM:0E06 18 CC                    jr      loc_DD4         ; Jump relative (conditional & unconditional)
ROM:0E06
ROM:0E08          ; ---------------------------------------------------------------------------
ROM:0E08
ROM:0E08          loc_E08:                                ; CODE XREF: sub_D10+D7↑j
ROM:0E08 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:0E09 D2 97 0E                 jp      nc, loc_E97     ; Jump (conditional & unconditional)
ROM:0E09
ROM:0E0C 21 7C 40                 ld      hl, 407Ch       ; Move o1 <- o2
ROM:0E0F 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:0E10 36 00                    ld      (hl), 0         ; Move o1 <- o2
ROM:0E12 B7                       or      a               ; Or with accumulator
ROM:0E13 28 06                    jr      z, loc_E1B      ; Jump relative (conditional & unconditional)
ROM:0E13
ROM:0E15 CF                       rst     8               ; Restart at vector <int>
ROM:0E15
ROM:0E16 CB A6                    res     4, (hl)         ; Reset bit
ROM:0E16
ROM:0E18
ROM:0E18          loc_E18:                                ; CODE XREF: sub_D10+120↓j
ROM:0E18 C3 D4 0A                 jp      sub_AD4         ; Jump (conditional & unconditional)
ROM:0E18
ROM:0E1B          ; ---------------------------------------------------------------------------
ROM:0E1B
ROM:0E1B          loc_E1B:                                ; CODE XREF: sub_D10+103↑j
ROM:0E1B 2A 7D 40                 ld      hl, (word_407D) ; Move o1 <- o2
ROM:0E1E 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:0E1F FE FF                    cp      0FFh            ; Compare with accumulator
ROM:0E21 28 56                    jr      z, loc_E79      ; Jump relative (conditional & unconditional)
ROM:0E21
ROM:0E23 CB 7E                    bit     7, (hl)         ; Test <bit> in operand
ROM:0E25 20 0B                    jr      nz, loc_E32     ; Jump relative (conditional & unconditional)
ROM:0E25
ROM:0E27 3E 1B                    ld      a, 1Bh          ; Move o1 <- o2
ROM:0E29 A1                       and     c               ; And with accumulator
ROM:0E2A C0                       ret     nz              ; Return (cond & uncond)
ROM:0E2B 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:0E2C 23                       inc     hl              ; Increment operand
ROM:0E2D 22 7D 40                 ld      (word_407D), hl ; Move o1 <- o2
ROM:0E30 18 E6                    jr      loc_E18         ; Jump relative (conditional & unconditional)
ROM:0E30
ROM:0E32          ; ---------------------------------------------------------------------------
ROM:0E32
ROM:0E32          loc_E32:                                ; CODE XREF: sub_D10+115↑j
ROM:0E32 3E 02                    ld      a, 2            ; Move o1 <- o2
ROM:0E34 A1                       and     c               ; And with accumulator
ROM:0E35 C0                       ret     nz              ; Return (cond & uncond)
ROM:0E36 11 00 00                 ld      de, 0           ; Move o1 <- o2
ROM:0E36
ROM:0E39
ROM:0E39          loc_E39:                                ; CODE XREF: sub_D10+14A↓j
ROM:0E39 4E                       ld      c, (hl)         ; Move o1 <- o2
ROM:0E3A 26 00                    ld      h, 0            ; Move o1 <- o2
ROM:0E3C 3E 07                    ld      a, 7            ; Move o1 <- o2
ROM:0E3E CB 71                    bit     6, c            ; Test <bit> in operand
ROM:0E40 20 2C                    jr      nz, loc_E6E     ; Jump relative (conditional & unconditional)
ROM:0E40
ROM:0E42 3E 0F                    ld      a, 0Fh          ; Move o1 <- o2
ROM:0E44 A1                       and     c               ; And with accumulator
ROM:0E45 3C                       inc     a               ; Increment operand
ROM:0E46 3C                       inc     a               ; Increment operand
ROM:0E47 CD 1E 13                 call    sub_131E        ; call (cond & uncond)
ROM:0E47
ROM:0E4A
ROM:0E4A          loc_E4A:                                ; CODE XREF: sub_D10+167↓j
ROM:0E4A 19                       add     hl, de          ; Add <reg> to A
ROM:0E4B EB                       ex      de, hl          ; Exchange operands
ROM:0E4C CB 69                    bit     5, c            ; Test <bit> in operand
ROM:0E4E C4 01 0B                 call    nz, sub_B01     ; call (cond & uncond)
ROM:0E4E
ROM:0E51 CB 61                    bit     4, c            ; Test <bit> in operand
ROM:0E53 2A 7D 40                 ld      hl, (word_407D) ; Move o1 <- o2
ROM:0E56 23                       inc     hl              ; Increment operand
ROM:0E57 22 7D 40                 ld      (word_407D), hl ; Move o1 <- o2
ROM:0E5A 20 DD                    jr      nz, loc_E39     ; Jump relative (conditional & unconditional)
ROM:0E5A
ROM:0E5C ED 53 79                 ld      (word_4079), de ; Move o1 <- o2
ROM:0E5C 40
ROM:0E60 CD A7 06                 call    sub_6A7         ; call (cond & uncond)
ROM:0E60
ROM:0E63 2A 7F 40                 ld      hl, (word_407F) ; Move o1 <- o2
ROM:0E66 19                       add     hl, de          ; Add <reg> to A
ROM:0E67 22 7F 40                 ld      (word_407F), hl ; Move o1 <- o2
ROM:0E6A CF                       rst     8               ; Restart at vector <int>
ROM:0E6A
ROM:0E6B CB C6                    set     0, (hl)         ; Set bit
ROM:0E6D C9                       ret                     ; Return (cond & uncond)
ROM:0E6D
ROM:0E6E          ; ---------------------------------------------------------------------------
ROM:0E6E
ROM:0E6E          loc_E6E:                                ; CODE XREF: sub_D10+130↑j
ROM:0E6E A1                       and     c               ; And with accumulator
ROM:0E6F CB 59                    bit     3, c            ; Test <bit> in operand
ROM:0E71 28 03                    jr      z, loc_E76      ; Jump relative (conditional & unconditional)
ROM:0E71
ROM:0E73 25                       dec     h               ; Decrement operand
ROM:0E74 ED 44                    neg                     ; Negate contents of accumulator
ROM:0E74
ROM:0E76
ROM:0E76          loc_E76:                                ; CODE XREF: sub_D10+161↑j
ROM:0E76 6F                       ld      l, a            ; Move o1 <- o2
ROM:0E77 18 D1                    jr      loc_E4A         ; Jump relative (conditional & unconditional)
ROM:0E77
ROM:0E79          ; ---------------------------------------------------------------------------
ROM:0E79
ROM:0E79          loc_E79:                                ; CODE XREF: sub_D10+111↑j
ROM:0E79 11 00 00                 ld      de, 0           ; Move o1 <- o2
ROM:0E7C CF                       rst     8               ; Restart at vector <int>
ROM:0E7C
ROM:0E7D CB A6                    res     4, (hl)         ; Reset bit
ROM:0E7F ED 53 7D                 ld      (word_407D), de ; Move o1 <- o2
ROM:0E7F 40
ROM:0E83 CB 6E                    bit     5, (hl)         ; Test <bit> in operand
ROM:0E85 C0                       ret     nz              ; Return (cond & uncond)
ROM:0E86 CB F6                    set     6, (hl)         ; Set bit
ROM:0E86
ROM:0E86          ; End of function sub_D10
ROM:0E86
ROM:0E88
ROM:0E88          ; =============== S U B R O U T I N E =======================================
ROM:0E88
ROM:0E88
ROM:0E88          sub_E88:                                ; CODE XREF: sub_D10+1B8↓p
ROM:0E88 2A 7F 40                 ld      hl, (word_407F) ; Move o1 <- o2
ROM:0E8B EB                       ex      de, hl          ; Exchange operands
ROM:0E8C 22 7F 40                 ld      (word_407F), hl ; Move o1 <- o2
ROM:0E8F 2A 89 40                 ld      hl, (word_4089) ; Move o1 <- o2
ROM:0E92 19                       add     hl, de          ; Add <reg> to A
ROM:0E93 22 89 40                 ld      (word_4089), hl ; Move o1 <- o2
ROM:0E96 C9                       ret                     ; Return (cond & uncond)
ROM:0E96
ROM:0E96          ; End of function sub_E88
ROM:0E96
ROM:0E97          ; ---------------------------------------------------------------------------
ROM:0E97          ; START OF FUNCTION CHUNK FOR sub_D10
ROM:0E97
ROM:0E97          loc_E97:                                ; CODE XREF: sub_D10+F9↑j
ROM:0E97 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:0E98 30 22                    jr      nc, loc_EBC     ; Jump relative (conditional & unconditional)
ROM:0E98
ROM:0E9A 3E 4A                    ld      a, 4Ah ; 'J'    ; Move o1 <- o2
ROM:0E9C A1                       and     c               ; And with accumulator
ROM:0E9D C0                       ret     nz              ; Return (cond & uncond)
ROM:0E9E CB AE                    res     5, (hl)         ; Reset bit
ROM:0EA0 ED 4B 7F                 ld      bc, (word_407F) ; Move o1 <- o2
ROM:0EA0 40
ROM:0EA4 21 81 40                 ld      hl, 4081h       ; Move o1 <- o2
ROM:0EA7 5E                       ld      e, (hl)         ; Move o1 <- o2
ROM:0EA8 16 00                    ld      d, 0            ; Move o1 <- o2
ROM:0EAA 72                       ld      (hl), d         ; Move o1 <- o2
ROM:0EAB CD A7 06                 call    sub_6A7         ; call (cond & uncond)
ROM:0EAB
ROM:0EAE ED 53 7F                 ld      (word_407F), de ; Move o1 <- o2
ROM:0EAE 40
ROM:0EB2 09                       add     hl, bc          ; Add <reg> to A
ROM:0EB3 CD B2 07                 call    sub_7B2         ; call (cond & uncond)
ROM:0EB3
ROM:0EB6 3A 7B 40                 ld      a, (byte_407B)  ; Move o1 <- o2
ROM:0EB9 C3 CE 0A                 jp      loc_ACE         ; Jump (conditional & unconditional)
ROM:0EB9
ROM:0EBC          ; ---------------------------------------------------------------------------
ROM:0EBC
ROM:0EBC          loc_EBC:                                ; CODE XREF: sub_D10+188↑j
ROM:0EBC 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:0EBD 30 0F                    jr      nc, loc_ECE     ; Jump relative (conditional & unconditional)
ROM:0EBD
ROM:0EBF 3E 4A                    ld      a, 4Ah ; 'J'    ; Move o1 <- o2
ROM:0EC1 A1                       and     c               ; And with accumulator
ROM:0EC2 C0                       ret     nz              ; Return (cond & uncond)
ROM:0EC3 CB B6                    res     6, (hl)         ; Reset bit
ROM:0EC5 11 00 00                 ld      de, 0           ; Move o1 <- o2
ROM:0EC8 CD 88 0E                 call    sub_E88         ; call (cond & uncond)
ROM:0EC8
ROM:0ECB C3 B2 07                 jp      sub_7B2         ; Jump (conditional & unconditional)
ROM:0ECB
ROM:0ECE          ; ---------------------------------------------------------------------------
ROM:0ECE
ROM:0ECE          loc_ECE:                                ; CODE XREF: sub_D10+1AD↑j
ROM:0ECE 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:0ECF D0                       ret     nc              ; Return (cond & uncond)
ROM:0ED0 3E 2C                    ld      a, 2Ch ; ','    ; Move o1 <- o2
ROM:0ED2 A1                       and     c               ; And with accumulator
ROM:0ED3 C0                       ret     nz              ; Return (cond & uncond)
ROM:0ED4 CB BE                    res     7, (hl)         ; Reset bit
ROM:0ED6 2A 8B 40                 ld      hl, (word_408B) ; Move o1 <- o2
ROM:0ED9 C3 8B 08                 jp      loc_88B         ; Jump (conditional & unconditional)
ROM:0ED9
ROM:0ED9          ; END OF FUNCTION CHUNK FOR sub_D10
ROM:0EDC          ; ---------------------------------------------------------------------------
ROM:0EDC          ; START OF FUNCTION CHUNK FOR SetupTimers_Ch1_Ch3
ROM:0EDC
ROM:0EDC          loc_EDC:                                ; CODE XREF: SetupTimers_Ch1_Ch3:loc_BE8↑j
ROM:0EDC 2A AB 00                 ld      hl, (word_AB)   ; Move o1 <- o2
ROM:0EDF 11 18 00                 ld      de, 18h         ; Move o1 <- o2
ROM:0EE2 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:0EE2
ROM:0EE3 44                       ld      b, h            ; Move o1 <- o2
ROM:0EE4 4D                       ld      c, l            ; Move o1 <- o2
ROM:0EE5 CD 20 0B                 call    sub_B20         ; call (cond & uncond)
ROM:0EE5
ROM:0EE8 21 F4 FF                 ld      hl, 0FFF4h      ; Move o1 <- o2
ROM:0EEB CD 1E 0F                 call    sub_F1E         ; call (cond & uncond)
ROM:0EEB
ROM:0EEE 6C                       ld      l, h            ; Move o1 <- o2
ROM:0EEF 28 07                    jr      z, loc_EF8      ; Jump relative (conditional & unconditional)
ROM:0EEF
ROM:0EF1
ROM:0EF1          loc_EF1:                                ; CODE XREF: SetupTimers_Ch1_Ch3+33B↓j
ROM:0EF1 CD 1E 0F                 call    sub_F1E         ; call (cond & uncond)
ROM:0EF1
ROM:0EF4 38 09                    jr      c, loc_EFF      ; Jump relative (conditional & unconditional)
ROM:0EF4
ROM:0EF6 20 F9                    jr      nz, loc_EF1     ; Jump relative (conditional & unconditional)
ROM:0EF6
ROM:0EF8
ROM:0EF8          loc_EF8:                                ; CODE XREF: SetupTimers_Ch1_Ch3+334↑j
ROM:0EF8                                                  ; SetupTimers_Ch1_Ch3+342↓j
ROM:0EF8 CD 1E 0F                 call    sub_F1E         ; call (cond & uncond)
ROM:0EF8
ROM:0EFB 38 02                    jr      c, loc_EFF      ; Jump relative (conditional & unconditional)
ROM:0EFB
ROM:0EFD 28 F9                    jr      z, loc_EF8      ; Jump relative (conditional & unconditional)
ROM:0EFD
ROM:0EFF
ROM:0EFF          loc_EFF:                                ; CODE XREF: SetupTimers_Ch1_Ch3+339↑j
ROM:0EFF                                                  ; SetupTimers_Ch1_Ch3+340↑j
ROM:0EFF 01 00 00                 ld      bc, 0           ; Move o1 <- o2
ROM:0F02 11 0C 00                 ld      de, 0Ch         ; Move o1 <- o2
ROM:0F05 CD 20 0B                 call    sub_B20         ; call (cond & uncond)
ROM:0F05
ROM:0F05          ; END OF FUNCTION CHUNK FOR SetupTimers_Ch1_Ch3
ROM:0F08
ROM:0F08          ; =============== S U B R O U T I N E =======================================
ROM:0F08
ROM:0F08
ROM:0F08          sub_F08:                                ; CODE XREF: sub_1E95+C↓p
ROM:0F08 CD 0B 0F                 call    sub_F0B         ; call (cond & uncond)
ROM:0F08
ROM:0F08          ; End of function sub_F08
ROM:0F08
ROM:0F0B
ROM:0F0B          ; =============== S U B R O U T I N E =======================================
ROM:0F0B
ROM:0F0B
ROM:0F0B          sub_F0B:                                ; CODE XREF: sub_F08↑p
ROM:0F0B                                                  ; sub_F0B+B↓j
ROM:0F0B 3E 04                    ld      a, 4            ; Move o1 <- o2
ROM:0F0D CD A9 09                 call    sub_9A9         ; call (cond & uncond)
ROM:0F0D
ROM:0F10 CD 9F 0B                 call    sub_B9F         ; call (cond & uncond)
ROM:0F10
ROM:0F13 3E 04                    ld      a, 4            ; Move o1 <- o2
ROM:0F15 DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:0F15                                                  ; A - if < 10h is 0000xxxx read mask
ROM:0F15                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:0F15                                                  ;         A[5:3] - bit index for...
ROM:0F15                                                  ;         A[2:0] - bit index for...
ROM:0F15                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:0F15
ROM:0F16 20 F3                    jr      nz, sub_F0B     ; Jump relative (conditional & unconditional)
ROM:0F16
ROM:0F18 3E 01                    ld      a, 1            ; Move o1 <- o2
ROM:0F1A 32 84 40                 ld      (byte_4084), a  ; Move o1 <- o2
ROM:0F1D C9                       ret                     ; Return (cond & uncond)
ROM:0F1D
ROM:0F1D          ; End of function sub_F0B
ROM:0F1D
ROM:0F1E
ROM:0F1E          ; =============== S U B R O U T I N E =======================================
ROM:0F1E
ROM:0F1E
ROM:0F1E          sub_F1E:                                ; CODE XREF: SetupTimers_Ch1_Ch3+330↑p
ROM:0F1E                                                  ; SetupTimers_Ch1_Ch3:loc_EF1↑p ...
ROM:0F1E CD 19 0B                 call    sub_B19         ; call (cond & uncond)
ROM:0F1E
ROM:0F21 CD A9 0B                 call    Test_406f_Zero  ; call (cond & uncond)
ROM:0F21
ROM:0F24 79                       ld      a, c            ; Move o1 <- o2
ROM:0F25 B0                       or      b               ; Or with accumulator
ROM:0F26 37                       scf                     ; Set carry flag
ROM:0F27 C8                       ret     z               ; Return (cond & uncond)
ROM:0F28 3E 02                    ld      a, 2            ; Move o1 <- o2
ROM:0F2A DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:0F2A                                                  ; A - if < 10h is 0000xxxx read mask
ROM:0F2A                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:0F2A                                                  ;         A[5:3] - bit index for...
ROM:0F2A                                                  ;         A[2:0] - bit index for...
ROM:0F2A                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:0F2A
ROM:0F2B C9                       ret                     ; Return (cond & uncond)
ROM:0F2B
ROM:0F2B          ; End of function sub_F1E
ROM:0F2B
ROM:0F2C
ROM:0F2C          ; =============== S U B R O U T I N E =======================================
ROM:0F2C
ROM:0F2C
ROM:0F2C          sub_F2C:                                ; CODE XREF: INT_Timer_Ch3+5↑p
ROM:0F2C 3E 08                    ld      a, 8            ; Move o1 <- o2
ROM:0F2E DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:0F2E                                                  ; A - if < 10h is 0000xxxx read mask
ROM:0F2E                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:0F2E                                                  ;         A[5:3] - bit index for...
ROM:0F2E                                                  ;         A[2:0] - bit index for...
ROM:0F2E                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:0F2E
ROM:0F2F 21 90 40                 ld      hl, 4090h       ; Move o1 <- o2
ROM:0F32 11 72 40                 ld      de, 4072h       ; Move o1 <- o2
ROM:0F35 28 06                    jr      z, loc_F3D      ; Jump relative (conditional & unconditional)
ROM:0F35
ROM:0F37 36 FF                    ld      (hl), 0FFh      ; Move o1 <- o2
ROM:0F39 EB                       ex      de, hl          ; Exchange operands
ROM:0F3A CB 96                    res     2, (hl)         ; Reset bit
ROM:0F3C C9                       ret                     ; Return (cond & uncond)
ROM:0F3C
ROM:0F3D          ; ---------------------------------------------------------------------------
ROM:0F3D
ROM:0F3D          loc_F3D:                                ; CODE XREF: sub_F2C+9↑j
ROM:0F3D 3A 4F 41                 ld      a, (_0_byte_414F) ; Move o1 <- o2
ROM:0F40 47                       ld      b, a            ; Move o1 <- o2
ROM:0F41 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:0F42 A7                       and     a               ; And with accumulator
ROM:0F43 C8                       ret     z               ; Return (cond & uncond)
ROM:0F44 3C                       inc     a               ; Increment operand
ROM:0F45 20 05                    jr      nz, loc_F4C     ; Jump relative (conditional & unconditional)
ROM:0F45
ROM:0F47 36 9C                    ld      (hl), 9Ch       ; Move o1 <- o2
ROM:0F49 23                       inc     hl              ; Increment operand
ROM:0F4A 70                       ld      (hl), b         ; Move o1 <- o2
ROM:0F4B C9                       ret                     ; Return (cond & uncond)
ROM:0F4B
ROM:0F4C          ; ---------------------------------------------------------------------------
ROM:0F4C
ROM:0F4C          loc_F4C:                                ; CODE XREF: sub_F2C+19↑j
ROM:0F4C 23                       inc     hl              ; Increment operand
ROM:0F4D 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:0F4E 90                       sub     b               ; Subtract from A
ROM:0F4F C8                       ret     z               ; Return (cond & uncond)
ROM:0F50 70                       ld      (hl), b         ; Move o1 <- o2
ROM:0F51 2B                       dec     hl              ; Decrement operand
ROM:0F52 86                       add     a, (hl)         ; Add <reg> to A
ROM:0F53 77                       ld      (hl), a         ; Move o1 <- o2
ROM:0F54 30 19                    jr      nc, loc_F6F     ; Jump relative (conditional & unconditional)
ROM:0F54
ROM:0F56 21 AF 00                 ld      hl, 0AFh        ; Move o1 <- o2
ROM:0F59 46                       ld      b, (hl)         ; Move o1 <- o2
ROM:0F5A 4F                       ld      c, a            ; Move o1 <- o2
ROM:0F5B CD F2 13                 call    sub_13F2        ; call (cond & uncond)
ROM:0F5B
ROM:0F5E 7D                       ld      a, l            ; Move o1 <- o2
ROM:0F5F D6 31                    sub     31h ; '1'       ; Subtract from A
ROM:0F61 38 02                    jr      c, loc_F65      ; Jump relative (conditional & unconditional)
ROM:0F61
ROM:0F63 2E 30                    ld      l, 30h ; '0'    ; Move o1 <- o2
ROM:0F63
ROM:0F65
ROM:0F65          loc_F65:                                ; CODE XREF: sub_F2C+35↑j
ROM:0F65 79                       ld      a, c            ; Move o1 <- o2
ROM:0F65
ROM:0F66
ROM:0F66          loc_F66:                                ; CODE XREF: sub_F2C+3B↓j
ROM:0F66 95                       sub     l               ; Subtract from A
ROM:0F67 10 FD                    djnz    loc_F66         ; Decrement reg B and jump relative if zero
ROM:0F67
ROM:0F69 A7                       and     a               ; And with accumulator
ROM:0F6A C0                       ret     nz              ; Return (cond & uncond)
ROM:0F6B EB                       ex      de, hl          ; Exchange operands
ROM:0F6C CB D6                    set     2, (hl)         ; Set bit
ROM:0F6E C9                       ret                     ; Return (cond & uncond)
ROM:0F6E
ROM:0F6F          ; ---------------------------------------------------------------------------
ROM:0F6F
ROM:0F6F          loc_F6F:                                ; CODE XREF: sub_F2C+28↑j
ROM:0F6F 3C                       inc     a               ; Increment operand
ROM:0F70 C0                       ret     nz              ; Return (cond & uncond)
ROM:0F71 77                       ld      (hl), a         ; Move o1 <- o2
ROM:0F72 C9                       ret                     ; Return (cond & uncond)
ROM:0F72
ROM:0F72          ; End of function sub_F2C
ROM:0F72
ROM:0F73
ROM:0F73          ; =============== S U B R O U T I N E =======================================
ROM:0F73
ROM:0F73          ; KbColumnChB_send04h
ROM:0F73
ROM:0F73          sub_F73:                                ; CODE XREF: sub_30↑j
ROM:0F73                                                  ; sub_28BE+8↓p
ROM:0F73 01 0D 40                 ld      bc, 400Dh       ; Move o1 <- o2
ROM:0F73
ROM:0F76
ROM:0F76          loc_F76:                                ; CODE XREF: sub_F73+10↓j
ROM:0F76 CD 67 10                 call    GetKbColValue   ; Arguments:
ROM:0F76                                                  ; B - value to port
ROM:0F76                                                  ; C - Selected input channel for read
ROM:0F76                                                  ; Return:
ROM:0F76                                                  ; D == A = ~KbCol(A or B).value
ROM:0F76                                                  ; Note: Interrupt Disabled if 40BDh.bit6 is set
ROM:0F76
ROM:0F79 07                       rlca                    ; Rotate left accumulator
ROM:0F7A 21 BD 40                 ld      hl, 40BDh       ; Move o1 <- o2
ROM:0F7D 30 02                    jr      nc, loc_F81     ; Jump relative (conditional & unconditional)
ROM:0F7D
ROM:0F7F CB D6                    set     2, (hl)         ; Set bit
ROM:0F7F
ROM:0F81
ROM:0F81          loc_F81:                                ; CODE XREF: sub_F73+A↑j
ROM:0F81 CB 10                    rl      b               ; Rotate left through carry
ROM:0F83 30 F1                    jr      nc, loc_F76     ; Jump relative (conditional & unconditional)
ROM:0F83
ROM:0F85 11 23 41                 ld      de, 4123h       ; Move o1 <- o2
ROM:0F88 1A                       ld      a, (de)         ; Move o1 <- o2
ROM:0F89 4F                       ld      c, a            ; Move o1 <- o2
ROM:0F8A 78                       ld      a, b            ; Move o1 <- o2
ROM:0F8B 12                       ld      (de), a         ; Move o1 <- o2
ROM:0F8C A9                       xor     c               ; Exclusive or with accumulator
ROM:0F8D A1                       and     c               ; And with accumulator
ROM:0F8E CB 4F                    bit     1, a            ; Test <bit> in operand
ROM:0F90 28 02                    jr      z, loc_F94      ; Jump relative (conditional & unconditional)
ROM:0F90
ROM:0F92 CB 96                    res     2, (hl)         ; Reset bit
ROM:0F92
ROM:0F94
ROM:0F94          loc_F94:                                ; CODE XREF: sub_F73+1D↑j
ROM:0F94 CD F6 0F                 call    sub_FF6         ; call (cond & uncond)
ROM:0F94
ROM:0F97 21 22 41                 ld      hl, 4122h       ; Move o1 <- o2
ROM:0F9A 28 17                    jr      z, loc_FB3      ; Jump relative (conditional & unconditional)
ROM:0F9A
ROM:0F9C
ROM:0F9C          loc_F9C:
ROM:0F9C 3E 9C                    ld      a, 9Ch          ; Move o1 <- o2
ROM:0F9E 77                       ld      (hl), a         ; Move o1 <- o2
ROM:0F9F 7A                       ld      a, d            ; Move o1 <- o2
ROM:0FA0 2B                       dec     hl              ; Decrement operand
ROM:0FA1 BE                       cp      (hl)            ; Compare with accumulator
ROM:0FA2 77                       ld      (hl), a         ; Move o1 <- o2
ROM:0FA3 2B                       dec     hl              ; Decrement operand
ROM:0FA4 46                       ld      b, (hl)         ; Move o1 <- o2
ROM:0FA5 36 19                    ld      (hl), 19h       ; Move o1 <- o2
ROM:0FA7 20 04                    jr      nz, loc_FAD     ; Jump relative (conditional & unconditional)
ROM:0FA7
ROM:0FA9 04                       inc     b               ; Increment operand
ROM:0FAA 05                       dec     b               ; Decrement operand
ROM:0FAB 20 12                    jr      nz, loc_FBF     ; Jump relative (conditional & unconditional)
ROM:0FAB
ROM:0FAD
ROM:0FAD          loc_FAD:                                ; CODE XREF: sub_F73+34↑j
ROM:0FAD CD C1 0F                 call    sub_FC1         ; call (cond & uncond)
ROM:0FAD
ROM:0FB0 CB BF                    res     7, a            ; Reset bit
ROM:0FB2 C9                       ret                     ; Return (cond & uncond)
ROM:0FB2
ROM:0FB3          ; ---------------------------------------------------------------------------
ROM:0FB3
ROM:0FB3          loc_FB3:                                ; CODE XREF: sub_F73+27↑j
ROM:0FB3 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:0FB4 3C                       inc     a               ; Increment operand
ROM:0FB5 20 08                    jr      nz, loc_FBF     ; Jump relative (conditional & unconditional)
ROM:0FB5
ROM:0FB7 2B                       dec     hl              ; Decrement operand
ROM:0FB8 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:0FB9 CD C1 0F                 call    sub_FC1         ; call (cond & uncond)
ROM:0FB9
ROM:0FBC CB 7F                    bit     7, a            ; Test <bit> in operand
ROM:0FBE C8                       ret     z               ; Return (cond & uncond)
ROM:0FBE
ROM:0FBF
ROM:0FBF          loc_FBF:                                ; CODE XREF: sub_F73+38↑j
ROM:0FBF                                                  ; sub_F73+42↑j ...
ROM:0FBF AF                       xor     a               ; Exclusive or with accumulator
ROM:0FC0 C9                       ret                     ; Return (cond & uncond)
ROM:0FC0
ROM:0FC0          ; End of function sub_F73
ROM:0FC0
ROM:0FC1
ROM:0FC1          ; =============== S U B R O U T I N E =======================================
ROM:0FC1
ROM:0FC1
ROM:0FC1          sub_FC1:                                ; CODE XREF: sub_F73:loc_FAD↑p
ROM:0FC1                                                  ; sub_F73+46↑p
ROM:0FC1 21 23 41                 ld      hl, 4123h       ; Move o1 <- o2
ROM:0FC4 CB 46                    bit     0, (hl)         ; Test <bit> in operand
ROM:0FC6 28 04                    jr      z, loc_FCC      ; Jump relative (conditional & unconditional)
ROM:0FC6
ROM:0FC8 CB 4E                    bit     1, (hl)         ; Test <bit> in operand
ROM:0FCA 20 12                    jr      nz, loc_FDE     ; Jump relative (conditional & unconditional)
ROM:0FCA
ROM:0FCC
ROM:0FCC          loc_FCC:                                ; CODE XREF: sub_FC1+5↑j
ROM:0FCC                                                  ; sub_FC1+1F↓j
ROM:0FCC D6 08                    sub     8               ; Subtract from A
ROM:0FCE 21 BD 40                 ld      hl, 40BDh       ; Move o1 <- o2
ROM:0FD1 CB 56                    bit     2, (hl)         ; Test <bit> in operand
ROM:0FD3 20 02                    jr      nz, loc_FD7     ; Jump relative (conditional & unconditional)
ROM:0FD3
ROM:0FD5 D6 38                    sub     38h ; '8'       ; Subtract from A
ROM:0FD5
ROM:0FD7
ROM:0FD7          loc_FD7:                                ; CODE XREF: sub_FC1+12↑j
ROM:0FD7 1E 08                    ld      e, 8            ; Move o1 <- o2
ROM:0FD9 CD AA 0C                 call    sub_CAA         ; call (cond & uncond)
ROM:0FD9
ROM:0FDC 18 16                    jr      loc_FF4         ; Jump relative (conditional & unconditional)
ROM:0FDC
ROM:0FDE          ; ---------------------------------------------------------------------------
ROM:0FDE
ROM:0FDE          loc_FDE:                                ; CODE XREF: sub_FC1+9↑j
ROM:0FDE FE 70                    cp      70h ; 'p'       ; Compare with accumulator
ROM:0FE0 30 EA                    jr      nc, loc_FCC     ; Jump relative (conditional & unconditional)
ROM:0FE0
ROM:0FE2 2A 9C 40                 ld      hl, (word_409C) ; Move o1 <- o2
ROM:0FE5 4E                       ld      c, (hl)         ; Move o1 <- o2
ROM:0FE6 06 00                    ld      b, 0            ; Move o1 <- o2
ROM:0FE8 23                       inc     hl              ; Increment operand
ROM:0FE9 ED B1                    cpir                    ; Compare accumulator with memory and
ROM:0FE9                                                  ; increment address and byte counter,
ROM:0FE9                                                  ; continue until match is found or
ROM:0FE9                                                  ; byte counter is zero
ROM:0FEB 20 D2                    jr      nz, loc_FBF     ; Jump relative (conditional & unconditional)
ROM:0FEB
ROM:0FED 2A 9E 40                 ld      hl, (word_409E) ; Move o1 <- o2
ROM:0FF0 A7                       and     a               ; And with accumulator
ROM:0FF1 ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:0FF3 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:0FF3
ROM:0FF4
ROM:0FF4          loc_FF4:                                ; CODE XREF: sub_FC1+1B↑j
ROM:0FF4 A7                       and     a               ; And with accumulator
ROM:0FF5 C9                       ret                     ; Return (cond & uncond)
ROM:0FF5
ROM:0FF5          ; End of function sub_FC1
ROM:0FF5
ROM:0FF6
ROM:0FF6          ; =============== S U B R O U T I N E =======================================
ROM:0FF6
ROM:0FF6
ROM:0FF6          sub_FF6:                                ; CODE XREF: sub_F73:loc_F94↑p
ROM:0FF6 3E 78                    ld      a, 78h ; 'x'    ; Move o1 <- o2
ROM:0FF6
ROM:0FF8
ROM:0FF8          loc_FF8:                                ; CODE XREF: sub_FF6+41↓j
ROM:0FF8 CB B7                    res     6, a            ; Reset bit
ROM:0FFA F5                       push    af              ; Push register pair onto stack
ROM:0FFB 21 24 41                 ld      hl, 4124h       ; Move o1 <- o2
ROM:0FFE 01 0D 01                 ld      bc, 10Dh        ; Move o1 <- o2
ROM:0FFE
ROM:1001
ROM:1001          loc_1001:                               ; CODE XREF: sub_FF6+3C↓j
ROM:1001 CD 67 10                 call    GetKbColValue   ; Arguments:
ROM:1001                                                  ; B - value to port
ROM:1001                                                  ; C - Selected input channel for read
ROM:1001                                                  ; Return:
ROM:1001                                                  ; D == A = ~KbCol(A or B).value
ROM:1001                                                  ; Note: Interrupt Disabled if 40BDh.bit6 is set
ROM:1001
ROM:1004 E6 7F                    and     7Fh             ; And with accumulator
ROM:1006 5F                       ld      e, a            ; Move o1 <- o2
ROM:1007 56                       ld      d, (hl)         ; Move o1 <- o2
ROM:1008 77                       ld      (hl), a         ; Move o1 <- o2
ROM:1009 BA                       cp      d               ; Compare with accumulator
ROM:100A 28 23                    jr      z, loc_102F     ; Jump relative (conditional & unconditional)
ROM:100A
ROM:100C AA                       xor     d               ; Exclusive or with accumulator
ROM:100D A3                       and     e               ; And with accumulator
ROM:100E 28 35                    jr      z, loc_1045     ; Jump relative (conditional & unconditional)
ROM:100E
ROM:1010 D5                       push    de              ; Push register pair onto stack
ROM:1011 CD 4E 10                 call    sub_104E        ; call (cond & uncond)
ROM:1011
ROM:1014 D1                       pop     de              ; Pop register pair from stack
ROM:1015 20 18                    jr      nz, loc_102F    ; Jump relative (conditional & unconditional)
ROM:1015
ROM:1017 5F                       ld      e, a            ; Move o1 <- o2
ROM:1018 F1                       pop     af              ; Pop register pair from stack
ROM:1019 CB F7                    set     6, a            ; Set bit
ROM:101B F5                       push    af              ; Push register pair onto stack
ROM:101C CB 7F                    bit     7, a            ; Test <bit> in operand
ROM:101E 20 1B                    jr      nz, loc_103B    ; Jump relative (conditional & unconditional)
ROM:101E
ROM:1020 BB                       cp      e               ; Compare with accumulator
ROM:1020
ROM:1021
ROM:1021          loc_1021:                               ; CODE XREF: sub_FF6+48↓j
ROM:1021 72                       ld      (hl), d         ; Move o1 <- o2
ROM:1022 20 04                    jr      nz, loc_1028    ; Jump relative (conditional & unconditional)
ROM:1022
ROM:1024 CB FB                    set     7, e            ; Set bit
ROM:1026 18 04                    jr      loc_102C        ; Jump relative (conditional & unconditional)
ROM:1026
ROM:1028          ; ---------------------------------------------------------------------------
ROM:1028
ROM:1028          loc_1028:                               ; CODE XREF: sub_FF6+2C↑j
ROM:1028 FE 78                    cp      78h ; 'x'       ; Compare with accumulator
ROM:102A 20 1F                    jr      nz, loc_104B    ; Jump relative (conditional & unconditional)
ROM:102A
ROM:102C
ROM:102C          loc_102C:                               ; CODE XREF: sub_FF6+30↑j
ROM:102C F1                       pop     af              ; Pop register pair from stack
ROM:102D 7B                       ld      a, e            ; Move o1 <- o2
ROM:102E F5                       push    af              ; Push register pair onto stack
ROM:102E
ROM:102F
ROM:102F          loc_102F:                               ; CODE XREF: sub_FF6+14↑j
ROM:102F                                                  ; sub_FF6+1F↑j ...
ROM:102F 23                       inc     hl              ; Increment operand
ROM:1030 CB 00                    rlc     b               ; Rotate left branch carry
ROM:1032 30 CD                    jr      nc, loc_1001    ; Jump relative (conditional & unconditional)
ROM:1032
ROM:1034 F1                       pop     af              ; Pop register pair from stack
ROM:1035 CB 77                    bit     6, a            ; Test <bit> in operand
ROM:1037 20 BF                    jr      nz, loc_FF8     ; Jump relative (conditional & unconditional)
ROM:1037
ROM:1039 18 11                    jr      loc_104C        ; Jump relative (conditional & unconditional)
ROM:1039
ROM:103B          ; ---------------------------------------------------------------------------
ROM:103B
ROM:103B          loc_103B:                               ; CODE XREF: sub_FF6+28↑j
ROM:103B CB BF                    res     7, a            ; Reset bit
ROM:103D BB                       cp      e               ; Compare with accumulator
ROM:103E 20 E1                    jr      nz, loc_1021    ; Jump relative (conditional & unconditional)
ROM:103E
ROM:1040 F1                       pop     af              ; Pop register pair from stack
ROM:1041 7B                       ld      a, e            ; Move o1 <- o2
ROM:1042 53                       ld      d, e            ; Move o1 <- o2
ROM:1043 A7                       and     a               ; And with accumulator
ROM:1044 C9                       ret                     ; Return (cond & uncond)
ROM:1044
ROM:1045          ; ---------------------------------------------------------------------------
ROM:1045
ROM:1045          loc_1045:                               ; CODE XREF: sub_FF6+18↑j
ROM:1045 AF                       xor     a               ; Exclusive or with accumulator
ROM:1046 32 22 41                 ld      (byte_4122), a  ; Move o1 <- o2
ROM:1049 18 E4                    jr      loc_102F        ; Jump relative (conditional & unconditional)
ROM:1049
ROM:104B          ; ---------------------------------------------------------------------------
ROM:104B
ROM:104B          loc_104B:                               ; CODE XREF: sub_FF6+34↑j
ROM:104B F1                       pop     af              ; Pop register pair from stack
ROM:104B
ROM:104C
ROM:104C          loc_104C:                               ; CODE XREF: sub_FF6+43↑j
ROM:104C AF                       xor     a               ; Exclusive or with accumulator
ROM:104D C9                       ret                     ; Return (cond & uncond)
ROM:104D
ROM:104D          ; End of function sub_FF6
ROM:104D
ROM:104E
ROM:104E          ; =============== S U B R O U T I N E =======================================
ROM:104E
ROM:104E
ROM:104E          sub_104E:                               ; CODE XREF: sub_FF6+1B↑p
ROM:104E                                                  ; sub_1094+14↓p
ROM:104E 16 07                    ld      d, 7            ; Move o1 <- o2
ROM:104E
ROM:1050
ROM:1050          loc_1050:                               ; CODE XREF: sub_104E+5↓j
ROM:1050 14                       inc     d               ; Increment operand
ROM:1051 CB 1F                    rr      a               ; Rotate right through carry
ROM:1053 30 FB                    jr      nc, loc_1050    ; Jump relative (conditional & unconditional)
ROM:1053
ROM:1055 3E 00                    ld      a, 0            ; Move o1 <- o2
ROM:1057 C0                       ret     nz              ; Return (cond & uncond)
ROM:1058 78                       ld      a, b            ; Move o1 <- o2
ROM:1059 1E FF                    ld      e, 0FFh         ; Move o1 <- o2
ROM:1059
ROM:105B
ROM:105B          loc_105B:                               ; CODE XREF: sub_104E+F↓j
ROM:105B 1C                       inc     e               ; Increment operand
ROM:105C 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:105D 30 FC                    jr      nc, loc_105B    ; Jump relative (conditional & unconditional)
ROM:105D
ROM:105F 7A                       ld      a, d            ; Move o1 <- o2
ROM:1060 07                       rlca                    ; Rotate left accumulator
ROM:1061 07                       rlca                    ; Rotate left accumulator
ROM:1062 07                       rlca                    ; Rotate left accumulator
ROM:1063 B3                       or      e               ; Or with accumulator
ROM:1064 57                       ld      d, a            ; Move o1 <- o2
ROM:1065 BA                       cp      d               ; Compare with accumulator
ROM:1066 C9                       ret                     ; Return (cond & uncond)
ROM:1066
ROM:1066          ; End of function sub_104E
ROM:1066
ROM:1067
ROM:1067          ; =============== S U B R O U T I N E =======================================
ROM:1067
ROM:1067          ; Arguments:
ROM:1067          ; B - value to port
ROM:1067          ; C - Selected input channel for read
ROM:1067          ; Return:
ROM:1067          ; D == A = ~KbCol(A or B).value
ROM:1067          ; Note: Interrupt Disabled if 40BDh.bit6 is set
ROM:1067
ROM:1067          GetKbColValue:                          ; CODE XREF: sub_F73:loc_F76↑p
ROM:1067                                                  ; sub_FF6:loc_1001↑p ...
ROM:1067 1E 05                    ld      e, 5            ; Move o1 <- o2
ROM:1067
ROM:1069
ROM:1069          SetRowData:                             ; CODE XREF: GetKbColValue+18↓j
ROM:1069 78                       ld      a, b            ; get port pin B = 4 on first time
ROM:106A F3                       di                      ; Disable interrupts
ROM:106B D3 10                    out     (Keyboard_Row_Data_A), a ; Output to port
ROM:106D ED 78                    in      a, (c)          ; Input from port to A
ROM:106F 2F                       cpl                     ; a = ~a
ROM:1070 E5                       push    hl              ; save current hl value
ROM:1071 21 BD 40                 ld      hl, 40BDh       ; and load value from 40BDh - Who should change it?
ROM:1074 CB 76                    bit     6, (hl)         ; Status.Z = ~((40BD) & (1<< 6))
ROM:1076 E1                       pop     hl              ; return current hl value
ROM:1077 20 01                    jr      nz, checkKbCol_skip_ei ; If Status.Z is == 0, skip EI
ROM:1077
ROM:1079 FB                       ei                      ; Enable interrupts
ROM:1079
ROM:107A
ROM:107A          checkKbCol_skip_ei:                     ; CODE XREF: GetKbColValue+10↑j
ROM:107A BA                       cp      d               ; Status flags = f(A - D)
ROM:107A                                                  ; What comes to D before call?
ROM:107B 57                       ld      d, a            ; Now D = A
ROM:107C 20 E9                    jr      nz, GetKbColValue ; Arguments:
ROM:107C                                                  ; B - value to port
ROM:107C                                                  ; C - Selected input channel for read
ROM:107C                                                  ; Return:
ROM:107C                                                  ; D == A = ~KbCol(A or B).value
ROM:107C                                                  ; Note: Interrupt Disabled if 40BDh.bit6 is set
ROM:107C
ROM:107E 1D                       dec     e               ; Decrement operand
ROM:107F 20 E8                    jr      nz, SetRowData  ; get port pin B = 4 on first time
ROM:107F
ROM:1081 C9                       ret                     ; Return (cond & uncond)
ROM:1081
ROM:1081          ; End of function GetKbColValue
ROM:1081
ROM:1082
ROM:1082          ; =============== S U B R O U T I N E =======================================
ROM:1082
ROM:1082
ROM:1082          sub_1082:                               ; CODE XREF: INT_Timer_Ch3+17↑p
ROM:1082 5F                       ld      e, a            ; Move o1 <- o2
ROM:1083 21 20 41                 ld      hl, 4120h       ; Move o1 <- o2
ROM:1086 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:1087 A7                       and     a               ; And with accumulator
ROM:1088 28 01                    jr      z, loc_108B     ; Jump relative (conditional & unconditional)
ROM:1088
ROM:108A 35                       dec     (hl)            ; Decrement operand
ROM:108A
ROM:108B
ROM:108B          loc_108B:                               ; CODE XREF: sub_1082+6↑j
ROM:108B 23                       inc     hl              ; Increment operand
ROM:108C 23                       inc     hl              ; Increment operand
ROM:108D 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:108E A7                       and     a               ; And with accumulator
ROM:108F C8                       ret     z               ; Return (cond & uncond)
ROM:1090 3C                       inc     a               ; Increment operand
ROM:1091 C8                       ret     z               ; Return (cond & uncond)
ROM:1092 34                       inc     (hl)            ; Increment operand
ROM:1093 C9                       ret                     ; Return (cond & uncond)
ROM:1093
ROM:1093          ; End of function sub_1082
ROM:1093
ROM:1094
ROM:1094          ; =============== S U B R O U T I N E =======================================
ROM:1094
ROM:1094
ROM:1094          sub_1094:                               ; CODE XREF: sub_28↑j
ROM:1094                                                  ; sub_10BC↓p
ROM:1094 26 00                    ld      h, 0            ; Move o1 <- o2
ROM:1096 01 0C 01                 ld      bc, 10Ch        ; Move o1 <- o2
ROM:1096
ROM:1099
ROM:1099          loc_1099:                               ; CODE XREF: sub_1094+23↓j
ROM:1099 CD 67 10                 call    GetKbColValue   ; Arguments:
ROM:1099                                                  ; B - value to port
ROM:1099                                                  ; C - Selected input channel for read
ROM:1099                                                  ; Return:
ROM:1099                                                  ; D == A = ~KbCol(A or B).value
ROM:1099                                                  ; Note: Interrupt Disabled if 40BDh.bit6 is set
ROM:1099
ROM:109C 3E FB                    ld      a, 0FBh         ; Move o1 <- o2
ROM:109E A0                       and     b               ; And with accumulator
ROM:109F 7A                       ld      a, d            ; Move o1 <- o2
ROM:10A0 20 02                    jr      nz, loc_10A4    ; Jump relative (conditional & unconditional)
ROM:10A0
ROM:10A2 E6 17                    and     17h             ; And with accumulator
ROM:10A2
ROM:10A4
ROM:10A4          loc_10A4:                               ; CODE XREF: sub_1094+C↑j
ROM:10A4 E6 1F                    and     1Fh             ; And with accumulator
ROM:10A6 28 0D                    jr      z, loc_10B5     ; Jump relative (conditional & unconditional)
ROM:10A6
ROM:10A8 CD 4E 10                 call    sub_104E        ; call (cond & uncond)
ROM:10A8
ROM:10AB C0                       ret     nz              ; Return (cond & uncond)
ROM:10AC CB B2                    res     6, d            ; Reset bit
ROM:10AE CB FA                    set     7, d            ; Set bit
ROM:10B0 AF                       xor     a               ; Exclusive or with accumulator
ROM:10B1 25                       dec     h               ; Decrement operand
ROM:10B2 24                       inc     h               ; Increment operand
ROM:10B3 62                       ld      h, d            ; Move o1 <- o2
ROM:10B4 C0                       ret     nz              ; Return (cond & uncond)
ROM:10B4
ROM:10B5
ROM:10B5          loc_10B5:                               ; CODE XREF: sub_1094+12↑j
ROM:10B5 CB 00                    rlc     b               ; Rotate left branch carry
ROM:10B7 30 E0                    jr      nc, loc_1099    ; Jump relative (conditional & unconditional)
ROM:10B7
ROM:10B9 7C                       ld      a, h            ; Move o1 <- o2
ROM:10BA A7                       and     a               ; And with accumulator
ROM:10BB C9                       ret                     ; Return (cond & uncond)
ROM:10BB
ROM:10BB          ; End of function sub_1094
ROM:10BB
ROM:10BC
ROM:10BC          ; =============== S U B R O U T I N E =======================================
ROM:10BC
ROM:10BC
ROM:10BC          sub_10BC:                               ; CODE XREF: sub_10BC+3↓j
ROM:10BC                                                  ; sub_17E4:loc_1804↓p ...
ROM:10BC CD 94 10                 call    sub_1094        ; call (cond & uncond)
ROM:10BC
ROM:10BF 20 FB                    jr      nz, sub_10BC    ; Jump relative (conditional & unconditional)
ROM:10BF
ROM:10C1 C9                       ret                     ; Return (cond & uncond)
ROM:10C1
ROM:10C1          ; End of function sub_10BC
ROM:10C1
ROM:10C2
ROM:10C2          ; =============== S U B R O U T I N E =======================================
ROM:10C2
ROM:10C2          ; KeyboardReadColumn Arguments:
ROM:10C2          ; A - if < 10h is 0000xxxx read mask
ROM:10C2          ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:10C2          ;         A[5:3] - bit index for read
ROM:10C2          ;         A[2:0] - bit index for write
ROM:10C2          ; Return: A - Value from port, Z flag if A is empty
ROM:10C2
ROM:10C2          KeyboardReadColumn:                     ; CODE XREF: j_KeyboardReadColumn↑j
ROM:10C2
ROM:10C2          ; FUNCTION CHUNK AT ROM:1100 SIZE 0000000A BYTES
ROM:10C2
ROM:10C2 5F                       ld      e, a            ; Move o1 <- o2
ROM:10C3 FE 10                    cp      10h             ; Compare with accumulator
ROM:10C5 38 39                    jr      c, Kb_A_less_10h ;  if A < 10h, jump
ROM:10C5
ROM:10C7 E6 38                    and     38h ; '8'       ; A = A & (0b00111000) mask
ROM:10C9 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:10CA 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:10CB 0F                       rrca                    ; A = {00000, A[5:3]}
ROM:10CC CD F7 10                 call    BV_A            ; B = (1<<A[5:3])
ROM:10CC
ROM:10CF 50                       ld      d, b            ; D = B
ROM:10D0 7B                       ld      a, e            ; restore A value
ROM:10D1 E6 07                    and     7               ; Apply 00000xxx mask
ROM:10D3 CD F7 10                 call    BV_A            ; B = (1<<A[2:0])
ROM:10D3
ROM:10D6 0E 0D                    ld      c, 0Dh          ; ColumnDataB
ROM:10D8 CB 7B                    bit     7, e            ; Status.Z = ~A[7]
ROM:10DA 28 0B                    jr      z, loc_10E7     ; Jump if A[7] is Zero
ROM:10DA
ROM:10DC 0E 0C                    ld      c, 0Ch          ; ColumnDataA
ROM:10DE CB 73                    bit     6, e            ; Status.Z = ~A[6]
ROM:10E0 28 05                    jr      z, loc_10E7     ; Jump if A[6] is zero
ROM:10E0
ROM:10E2 0E 11                    ld      c, 11h          ; RowDataB
ROM:10E4 78                       ld      a, b            ; Move o1 <- o2
ROM:10E5 2F                       cpl                     ; A = ~(1<<A[5:3])
ROM:10E6 47                       ld      b, a            ; B = A
ROM:10E6
ROM:10E7
ROM:10E7          loc_10E7:                               ; CODE XREF: KeyboardReadColumn+18↑j
ROM:10E7                                                  ; KeyboardReadColumn+1E↑j
ROM:10E7 D5                       push    de              ; Push register pair onto stack
ROM:10E8 CD 67 10                 call    GetKbColValue   ; Arguments:
ROM:10E8                                                  ; B - value to port
ROM:10E8                                                  ; C - Selected input channel for read
ROM:10E8                                                  ; Return:
ROM:10E8                                                  ; D == A = ~KbCol(A or B).value
ROM:10E8                                                  ; Note: Interrupt Disabled if 40BDh.bit6 is set
ROM:10E8
ROM:10EB D1                       pop     de              ; Pop register pair from stack
ROM:10EC CB 7B                    bit     7, e            ; if A[7] is set
ROM:10EE 28 05                    jr      z, loc_10F5     ; A = f(KbColA) & (1<<A[5:3])
ROM:10EE
ROM:10F0
ROM:10F0          loc_10F0:                               ; DATA XREF: sub_85E+26↑w
ROM:10F0 CB 73                    bit     6, e            ; If A[6] is set
ROM:10F2 28 01                    jr      z, loc_10F5     ; A = f(KbColA) & (1<<A[5:3])
ROM:10F2
ROM:10F4 2F                       cpl                     ; We are here only if A[7:6] == 11
ROM:10F4                                                  ; A = KbRowB
ROM:10F4
ROM:10F5
ROM:10F5          loc_10F5:                               ; CODE XREF: KeyboardReadColumn+2C↑j
ROM:10F5                                                  ; KeyboardReadColumn+30↑j
ROM:10F5 A2                       and     d               ; A = f(KbColA) & (1<<A[5:3])
ROM:10F6 C9                       ret                     ; Return (cond & uncond)
ROM:10F6
ROM:10F6          ; End of function KeyboardReadColumn
ROM:10F6
ROM:10F7
ROM:10F7          ; =============== S U B R O U T I N E =======================================
ROM:10F7
ROM:10F7
ROM:10F7          BV_A:                                   ; CODE XREF: KeyboardReadColumn+A↑p
ROM:10F7                                                  ; KeyboardReadColumn+11↑p
ROM:10F7 3C                       inc     a               ; Increment operand
ROM:10F8 06 80                    ld      b, 80h          ; Move o1 <- o2
ROM:10F8
ROM:10FA
ROM:10FA          loc_10FA:                               ; CODE XREF: BV_A+6↓j
ROM:10FA CB 00                    rlc     b               ; Rotate left branch carry
ROM:10FC 3D                       dec     a               ; Decrement operand
ROM:10FD 20 FB                    jr      nz, loc_10FA    ; Jump relative (conditional & unconditional)
ROM:10FD
ROM:10FF C9                       ret                     ; Return (cond & uncond)
ROM:10FF
ROM:10FF          ; End of function BV_A
ROM:10FF
ROM:1100          ; ---------------------------------------------------------------------------
ROM:1100          ; START OF FUNCTION CHUNK FOR KeyboardReadColumn
ROM:1100
ROM:1100          Kb_A_less_10h:                          ; CODE XREF: KeyboardReadColumn+3↑j
ROM:1100 07                       rlca                    ; Rotate left accumulator
ROM:1101 07                       rlca                    ; Rotate left accumulator
ROM:1102 07                       rlca                    ; Rotate left accumulator
ROM:1103 07                       rlca                    ; A <<< 4
ROM:1104 57                       ld      d, a            ; Move o1 <- o2
ROM:1105 DB 0C                    in      a, (Keyboard_Col_Data_A) ; Input from port to A
ROM:1107 2F                       cpl                     ; A = ~KbColDataA.{BE,Tygs,Paper,SP24}
ROM:1108 A2                       and     d               ; Apply mask from D
ROM:1109 C9                       ret                     ; Return (cond & uncond)
ROM:1109
ROM:1109          ; END OF FUNCTION CHUNK FOR KeyboardReadColumn
ROM:110A
ROM:110A          ; =============== S U B R O U T I N E =======================================
ROM:110A
ROM:110A
ROM:110A          Display_Clear_40AC:                     ; CODE XREF: Setup_all+8F↓p
ROM:110A 06 11                    ld      b, 11h          ; Move o1 <- o2
ROM:110C 21 AC 40                 ld      hl, 40ACh       ; Move o1 <- o2
ROM:110F C3 03 27                 jp      Array_fill_with_0Fh ; Jump (conditional & unconditional)
ROM:110F
ROM:110F          ; End of function Display_Clear_40AC
ROM:110F
ROM:1112
ROM:1112          ; =============== S U B R O U T I N E =======================================
ROM:1112
ROM:1112
ROM:1112          DisplayRoutine:                         ; CODE XREF: INT_Timer_Ch3+1C↑p
ROM:1112                                                  ; TapeAndDisplay_p_lusDI+28↓p
ROM:1112 3A BD 40                 ld      a, (byte_40BD)  ; Bit 7 - test:  1115h
ROM:1112                                                  ; Bit 6 - set:   321Ah
ROM:1112                                                  ;         reset: 32BBh
ROM:1112                                                  ;         test:  1074h
ROM:1112                                                  ; Bit 2 - set:   0F7Fh
ROM:1112                                                  ;         reset: 0F92h, 2E50h
ROM:1112                                                  ;         test:  0FD1h, 111Bh
ROM:1115 CB 7F                    bit     7, a            ; Test <bit> in operand
ROM:1117 06 0F                    ld      b, 0Fh          ; Move o1 <- o2
ROM:1119 20 2D                    jr      nz, loc_1148    ; Jump relative (conditional & unconditional)
ROM:1119
ROM:111B CB 57                    bit     2, a            ; Test <bit> in operand
ROM:111D 28 02                    jr      z, loc_1121     ; Jump relative (conditional & unconditional)
ROM:111D
ROM:111F CB E8                    set     5, b            ; Set bit
ROM:111F
ROM:1121
ROM:1121          loc_1121:                               ; CODE XREF: DisplayRoutine+B↑j
ROM:1121 3A 6B 40                 ld      a, (usart_bvar4_0) ; Move o1 <- o2
ROM:1124 07                       rlca                    ; Rotate left accumulator
ROM:1125 2F                       cpl                     ; Complement the accumulator
ROM:1126 32 BA 40                 ld      (Display_LED_p2), a ; Display_LED_Group2
ROM:1129 3A BE 40                 ld      a, (byte_40BE)  ; Move o1 <- o2
ROM:112C 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:112D 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:112E 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:112F 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:1130 E6 0F                    and     0Fh             ; And with accumulator
ROM:1132 2F                       cpl                     ; Complement the accumulator
ROM:1133 32 B9 40                 ld      (Display_LED_p1), a ; Display_LED_Group1
ROM:1136 3A BF 40                 ld      a, (byte_40BF)  ; Move o1 <- o2
ROM:1139 07                       rlca                    ; Rotate left accumulator
ROM:113A E6 0E                    and     0Eh             ; And with accumulator
ROM:113C 28 04                    jr      z, loc_1142     ; Jump relative (conditional & unconditional)
ROM:113C
ROM:113E FE 0E                    cp      0Eh             ; Compare with accumulator
ROM:1140 20 02                    jr      nz, loc_1144    ; Jump relative (conditional & unconditional)
ROM:1140
ROM:1142
ROM:1142          loc_1142:                               ; CODE XREF: DisplayRoutine+2A↑j
ROM:1142 3E 01                    ld      a, 1            ; Move o1 <- o2
ROM:1142
ROM:1144
ROM:1144          loc_1144:                               ; CODE XREF: DisplayRoutine+2E↑j
ROM:1144 2F                       cpl                     ; Complement the accumulator
ROM:1145 32 B8 40                 ld      (Display_LED_p0), a ; Display_LED_Group0
ROM:1145
ROM:1148
ROM:1148          loc_1148:                               ; CODE XREF: DisplayRoutine+7↑j
ROM:1148 21 69 40                 ld      hl, 4069h       ; Move o1 <- o2
ROM:114B 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:114C A7                       and     a               ; And with accumulator
ROM:114D 28 0C                    jr      z, loc_115B     ; Jump relative (conditional & unconditional)
ROM:114D
ROM:114F 35                       dec     (hl)            ; Decrement operand
ROM:1150 CB F0                    set     6, b            ; Set bit
ROM:1152 23                       inc     hl              ; Increment operand
ROM:1153 CB 5E                    bit     3, (hl)         ; Test <bit> in operand
ROM:1155 20 04                    jr      nz, loc_115B    ; Jump relative (conditional & unconditional)
ROM:1155
ROM:1157 CB B0                    res     6, b            ; Reset bit
ROM:1159 CB F8                    set     7, b            ; Set bit
ROM:1159
ROM:115B
ROM:115B          loc_115B:                               ; CODE XREF: DisplayRoutine+3B↑j
ROM:115B                                                  ; DisplayRoutine+43↑j
ROM:115B 21 BB 40                 ld      hl, 40BBh       ; Move o1 <- o2
ROM:115B
ROM:115E
ROM:115E          DisplayPrint:                           ; CODE XREF: DisplayRoutine+57↓j
ROM:115E 78                       ld      a, b            ; B - iteration counter
ROM:115E                                                  ; HL - Addr Ptr to load
ROM:115F D3 05                    out     (Display_Data_B), a ; Output to port
ROM:1161 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:1162 2F                       cpl                     ; Complement the accumulator
ROM:1163 D3 04                    out     (Display_Data_A), a ; Output to port
ROM:1165 2B                       dec     hl              ; Decrement operand
ROM:1166 05                       dec     b               ; Decrement operand
ROM:1167 CB 60                    bit     4, b            ; Test <bit> in operand
ROM:1169 28 F3                    jr      z, DisplayPrint ; B - iteration counter
ROM:1169                                                  ; HL - Addr Ptr to load
ROM:1169
ROM:116B C9                       ret                     ; Return (cond & uncond)
ROM:116B
ROM:116B          ; End of function DisplayRoutine
ROM:116B
ROM:116C
ROM:116C          ; =============== S U B R O U T I N E =======================================
ROM:116C
ROM:116C
ROM:116C          sub_116C:                               ; CODE XREF: sub_20↑j
ROM:116C                                                  ; sub_116C+AB↓p ...
ROM:116C
ROM:116C          ; FUNCTION CHUNK AT ROM:16F3 SIZE 00000009 BYTES
ROM:116C          ; FUNCTION CHUNK AT ROM:1705 SIZE 00000009 BYTES
ROM:116C          ; FUNCTION CHUNK AT ROM:1717 SIZE 00000009 BYTES
ROM:116C          ; FUNCTION CHUNK AT ROM:1729 SIZE 00000009 BYTES
ROM:116C
ROM:116C A7                       and     a               ; And with accumulator
ROM:116D C8                       ret     z               ; Return (cond & uncond)
ROM:116E CD A9 0B                 call    Test_406f_Zero  ; call (cond & uncond)
ROM:116E
ROM:1171 32 7B 40                 ld      (byte_407B), a  ; Move o1 <- o2
ROM:1174 CD 06 14                 call    sub_1406        ; call (cond & uncond)
ROM:1174
ROM:1177 22 73 40                 ld      (word_4073), hl ; Move o1 <- o2
ROM:117A CB 7F                    bit     7, a            ; Test <bit> in operand
ROM:117C C2 4B 12                 jp      nz, loc_124B    ; Jump (conditional & unconditional)
ROM:117C
ROM:117F FE 0D                    cp      0Dh             ; Compare with accumulator
ROM:1181 30 66                    jr      nc, loc_11E9    ; Jump relative (conditional & unconditional)
ROM:1181
ROM:1183 D6 0D                    sub     0Dh             ; Subtract from A
ROM:1185 3C                       inc     a               ; Increment operand
ROM:1186 C8                       ret     z               ; Return (cond & uncond)
ROM:1187 3C                       inc     a               ; Increment operand
ROM:1188 28 1C                    jr      z, loc_11A6     ; Jump relative (conditional & unconditional)
ROM:1188
ROM:118A 3C                       inc     a               ; Increment operand
ROM:118B 28 24                    jr      z, loc_11B1     ; Jump relative (conditional & unconditional)
ROM:118B
ROM:118D 3C                       inc     a               ; Increment operand
ROM:118E 28 2E                    jr      z, loc_11BE     ; Jump relative (conditional & unconditional)
ROM:118E
ROM:1190 3C                       inc     a               ; Increment operand
ROM:1191 28 30                    jr      z, loc_11C3     ; Jump relative (conditional & unconditional)
ROM:1191
ROM:1193 C6 03                    add     a, 3            ; Add <reg> to A
ROM:1195 28 38                    jr      z, loc_11CF     ; Jump relative (conditional & unconditional)
ROM:1195
ROM:1197 3C                       inc     a               ; Increment operand
ROM:1198 28 3C                    jr      z, loc_11D6     ; Jump relative (conditional & unconditional)
ROM:1198
ROM:119A 3C                       inc     a               ; Increment operand
ROM:119B 3C                       inc     a               ; Increment operand
ROM:119C 28 41                    jr      z, loc_11DF     ; Jump relative (conditional & unconditional)
ROM:119C
ROM:119E 3C                       inc     a               ; Increment operand
ROM:119F 28 43                    jr      z, loc_11E4     ; Jump relative (conditional & unconditional)
ROM:119F
ROM:11A1
ROM:11A1          loc_11A1:                               ; CODE XREF: sub_116C+152↓j
ROM:11A1 3E 35                    ld      a, 35h ; '5'    ; Move o1 <- o2
ROM:11A1
ROM:11A3
ROM:11A3          loc_11A3:                               ; CODE XREF: sub_116C+71↓j
ROM:11A3 C3 68 26                 jp      sub_2668        ; Jump (conditional & unconditional)
ROM:11A3
ROM:11A6          ; ---------------------------------------------------------------------------
ROM:11A6
ROM:11A6          loc_11A6:                               ; CODE XREF: sub_116C+1C↑j
ROM:11A6 CD 59 14                 call    sub_1459        ; call (cond & uncond)
ROM:11A6
ROM:11A9 30 30                    jr      nc, loc_11DB    ; Jump relative (conditional & unconditional)
ROM:11A9
ROM:11AB
ROM:11AB          loc_11AB:                               ; CODE XREF: sub_116C+50↓j
ROM:11AB                                                  ; sub_116C+55↓j
ROM:11AB CD 9F 0B                 call    sub_B9F         ; call (cond & uncond)
ROM:11AB
ROM:11AE C3 1C 0B                 jp      sub_B1C         ; Jump (conditional & unconditional)
ROM:11AE
ROM:11B1          ; ---------------------------------------------------------------------------
ROM:11B1
ROM:11B1          loc_11B1:                               ; CODE XREF: sub_116C+1F↑j
ROM:11B1 2A CC 40                 ld      hl, (word_40CC) ; Move o1 <- o2
ROM:11B4 22 C0 40                 ld      (word_40C0), hl ; Move o1 <- o2
ROM:11B7 ED 5B 73                 ld      de, (word_4073) ; Move o1 <- o2
ROM:11B7 40
ROM:11BB D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:11BB
ROM:11BC 18 ED                    jr      loc_11AB        ; Jump relative (conditional & unconditional)
ROM:11BC
ROM:11BE          ; ---------------------------------------------------------------------------
ROM:11BE
ROM:11BE          loc_11BE:                               ; CODE XREF: sub_116C+22↑j
ROM:11BE CD DC 13                 call    sub_13DC        ; call (cond & uncond)
ROM:11BE
ROM:11C1 18 E8                    jr      loc_11AB        ; Jump relative (conditional & unconditional)
ROM:11C1
ROM:11C3          ; ---------------------------------------------------------------------------
ROM:11C3
ROM:11C3          loc_11C3:                               ; CODE XREF: sub_116C+25↑j
ROM:11C3 CD DC 13                 call    sub_13DC        ; call (cond & uncond)
ROM:11C3
ROM:11C6 CD 1C 0B                 call    sub_B1C         ; call (cond & uncond)
ROM:11C6
ROM:11C9 CD F2 13                 call    sub_13F2        ; call (cond & uncond)
ROM:11C9
ROM:11CC
ROM:11CC          loc_11CC:                               ; CODE XREF: sub_116C+66↓j
ROM:11CC                                                  ; sub_116C+6D↓j ...
ROM:11CC C3 60 0B                 jp      loc_B60         ; Jump (conditional & unconditional)
ROM:11CC
ROM:11CF          ; ---------------------------------------------------------------------------
ROM:11CF
ROM:11CF          loc_11CF:                               ; CODE XREF: sub_116C+29↑j
ROM:11CF CD 97 14                 call    sub_1497        ; call (cond & uncond)
ROM:11CF
ROM:11D2 20 F8                    jr      nz, loc_11CC    ; Jump relative (conditional & unconditional)
ROM:11D2
ROM:11D4 18 05                    jr      loc_11DB        ; Jump relative (conditional & unconditional)
ROM:11D4
ROM:11D6          ; ---------------------------------------------------------------------------
ROM:11D6
ROM:11D6          loc_11D6:                               ; CODE XREF: sub_116C+2C↑j
ROM:11D6 CD 92 14                 call    sub_1492        ; call (cond & uncond)
ROM:11D6
ROM:11D9 20 F1                    jr      nz, loc_11CC    ; Jump relative (conditional & unconditional)
ROM:11D9
ROM:11DB
ROM:11DB          loc_11DB:                               ; CODE XREF: sub_116C+3D↑j
ROM:11DB                                                  ; sub_116C+68↑j
ROM:11DB 3E 02                    ld      a, 2            ; Move o1 <- o2
ROM:11DD 18 C4                    jr      loc_11A3        ; Jump relative (conditional & unconditional)
ROM:11DD
ROM:11DF          ; ---------------------------------------------------------------------------
ROM:11DF
ROM:11DF          loc_11DF:                               ; CODE XREF: sub_116C+30↑j
ROM:11DF 21 F4 FF                 ld      hl, 0FFF4h      ; Move o1 <- o2
ROM:11E2 18 E8                    jr      loc_11CC        ; Jump relative (conditional & unconditional)
ROM:11E2
ROM:11E4          ; ---------------------------------------------------------------------------
ROM:11E4
ROM:11E4          loc_11E4:                               ; CODE XREF: sub_116C+33↑j
ROM:11E4 21 0C 00                 ld      hl, 0Ch         ; Move o1 <- o2
ROM:11E7 18 E3                    jr      loc_11CC        ; Jump relative (conditional & unconditional)
ROM:11E7
ROM:11E9          ; ---------------------------------------------------------------------------
ROM:11E9
ROM:11E9          loc_11E9:                               ; CODE XREF: sub_116C+15↑j
ROM:11E9 21 72 40                 ld      hl, 4072h       ; Move o1 <- o2
ROM:11EC CB 4E                    bit     1, (hl)         ; Test <bit> in operand
ROM:11EE 28 0D                    jr      z, loc_11FD     ; Jump relative (conditional & unconditional)
ROM:11EE
ROM:11F0 CB 46                    bit     0, (hl)         ; Test <bit> in operand
ROM:11F2 20 09                    jr      nz, loc_11FD    ; Jump relative (conditional & unconditional)
ROM:11F2
ROM:11F4 CB C6                    set     0, (hl)         ; Set bit
ROM:11F6 F5                       push    af              ; Push register pair onto stack
ROM:11F7 3E 01                    ld      a, 1            ; Move o1 <- o2
ROM:11F9 CD 68 26                 call    sub_2668        ; call (cond & uncond)
ROM:11F9
ROM:11FC F1                       pop     af              ; Pop register pair from stack
ROM:11FC
ROM:11FD
ROM:11FD          loc_11FD:                               ; CODE XREF: sub_116C+82↑j
ROM:11FD                                                  ; sub_116C+86↑j
ROM:11FD CD 2E 13                 call    sub_132E        ; call (cond & uncond)
ROM:11FD
ROM:1200 D5                       push    de              ; Push register pair onto stack
ROM:1201 CD 81 0B                 call    sub_B81         ; call (cond & uncond)
ROM:1201
ROM:1204 EB                       ex      de, hl          ; Exchange operands
ROM:1205 D1                       pop     de              ; Pop register pair from stack
ROM:1206 D8                       ret     c               ; Return (cond & uncond)
ROM:1207 FE 18                    cp      18h             ; Compare with accumulator
ROM:1209 38 13                    jr      c, loc_121E     ; Jump relative (conditional & unconditional)
ROM:1209
ROM:120B FE 1C                    cp      1Ch             ; Compare with accumulator
ROM:120D 30 0F                    jr      nc, loc_121E    ; Jump relative (conditional & unconditional)
ROM:120D
ROM:120F CD 81 0C                 call    sub_C81         ; call (cond & uncond)
ROM:120F
ROM:1212
ROM:1212          loc_1212:                               ; CODE XREF: sub_116C+B0↓j
ROM:1212 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:1213 FE FF                    cp      0FFh            ; Compare with accumulator
ROM:1215 C8                       ret     z               ; Return (cond & uncond)
ROM:1216 E5                       push    hl              ; Push register pair onto stack
ROM:1217 CD 6C 11                 call    sub_116C        ; call (cond & uncond)
ROM:1217
ROM:121A E1                       pop     hl              ; Pop register pair from stack
ROM:121B 23                       inc     hl              ; Increment operand
ROM:121C 18 F4                    jr      loc_1212        ; Jump relative (conditional & unconditional)
ROM:121C
ROM:121E          ; ---------------------------------------------------------------------------
ROM:121E
ROM:121E          loc_121E:                               ; CODE XREF: sub_116C+9D↑j
ROM:121E                                                  ; sub_116C+A1↑j
ROM:121E E5                       push    hl              ; Push register pair onto stack
ROM:121F D5                       push    de              ; Push register pair onto stack
ROM:1220 CD 81 0C                 call    sub_C81         ; call (cond & uncond)
ROM:1220
ROM:1223 D1                       pop     de              ; Pop register pair from stack
ROM:1224 E1                       pop     hl              ; Pop register pair from stack
ROM:1225 A7                       and     a               ; And with accumulator
ROM:1226 C8                       ret     z               ; Return (cond & uncond)
ROM:1227 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:1227
ROM:1228 E5                       push    hl              ; Push register pair onto stack
ROM:1229 21 00 00                 ld      hl, 0           ; Move o1 <- o2
ROM:122C EB                       ex      de, hl          ; Exchange operands
ROM:122D D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:122D
ROM:122E C4 EB 0B                 call    nz, sub_BEB     ; call (cond & uncond)
ROM:122E
ROM:1231 FE 0E                    cp      0Eh             ; Compare with accumulator
ROM:1233 28 12                    jr      z, loc_1247     ; Jump relative (conditional & unconditional)
ROM:1233
ROM:1235 CD 01 0B                 call    sub_B01         ; call (cond & uncond)
ROM:1235
ROM:1238 FE 10                    cp      10h             ; Compare with accumulator
ROM:123A 38 08                    jr      c, loc_1244     ; Jump relative (conditional & unconditional)
ROM:123A
ROM:123C 21 BF 40                 ld      hl, 40BFh       ; Move o1 <- o2
ROM:123F CB 7E                    bit     7, (hl)         ; Test <bit> in operand
ROM:1241 C4 0D 0B                 call    nz, sub_B0D     ; call (cond & uncond)
ROM:1241
ROM:1244
ROM:1244          loc_1244:                               ; CODE XREF: sub_116C+CE↑j
ROM:1244 CD D4 0A                 call    sub_AD4         ; call (cond & uncond)
ROM:1244
ROM:1247
ROM:1247          loc_1247:                               ; CODE XREF: sub_116C+C7↑j
ROM:1247 E1                       pop     hl              ; Pop register pair from stack
ROM:1248 C3 1C 0B                 jp      sub_B1C         ; Jump (conditional & unconditional)
ROM:1248
ROM:124B          ; ---------------------------------------------------------------------------
ROM:124B
ROM:124B          loc_124B:                               ; CODE XREF: sub_116C+10↑j
ROM:124B 21 BF 40                 ld      hl, 40BFh       ; Move o1 <- o2
ROM:124E 47                       ld      b, a            ; Move o1 <- o2
ROM:124F 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:1250 E6 A7                    and     0A7h            ; And with accumulator
ROM:1252 4F                       ld      c, a            ; Move o1 <- o2
ROM:1253 78                       ld      a, b            ; Move o1 <- o2
ROM:1254 D6 81                    sub     81h             ; Subtract from A
ROM:1256 CA F3 16                 jp      z, loc_16F3     ; Jump (conditional & unconditional)
ROM:1256
ROM:1259 3D                       dec     a               ; Decrement operand
ROM:125A CA 05 17                 jp      z, loc_1705     ; Jump (conditional & unconditional)
ROM:125A
ROM:125D 3D                       dec     a               ; Decrement operand
ROM:125E CA 17 17                 jp      z, loc_1717     ; Jump (conditional & unconditional)
ROM:125E
ROM:1261 3D                       dec     a               ; Decrement operand
ROM:1262 3D                       dec     a               ; Decrement operand
ROM:1263 CA 29 17                 jp      z, loc_1729     ; Jump (conditional & unconditional)
ROM:1263
ROM:1266 D6 0C                    sub     0Ch             ; Subtract from A
ROM:1268 CA FC 16                 jp      z, sub_16FC     ; Jump (conditional & unconditional)
ROM:1268
ROM:126B 3D                       dec     a               ; Decrement operand
ROM:126C CA 0E 17                 jp      z, sub_170E     ; Jump (conditional & unconditional)
ROM:126C
ROM:126F 3D                       dec     a               ; Decrement operand
ROM:1270 CA 20 17                 jp      z, sub_1720     ; Jump (conditional & unconditional)
ROM:1270
ROM:1273 3D                       dec     a               ; Decrement operand
ROM:1274 3D                       dec     a               ; Decrement operand
ROM:1275 CA 32 17                 jp      z, sub_1732     ; Jump (conditional & unconditional)
ROM:1275
ROM:1278 D6 0B                    sub     0Bh             ; Subtract from A
ROM:127A CA 11 14                 jp      z, sub_1411     ; Jump (conditional & unconditional)
ROM:127A
ROM:127D 3D                       dec     a               ; Decrement operand
ROM:127E CA 42 14                 jp      z, sub_1442     ; Jump (conditional & unconditional)
ROM:127E
ROM:1281 D6 04                    sub     4               ; Subtract from A
ROM:1283 21 BE 40                 ld      hl, 40BEh       ; Move o1 <- o2
ROM:1286 20 03                    jr      nz, loc_128B    ; Jump relative (conditional & unconditional)
ROM:1286
ROM:1288 36 80                    ld      (hl), 80h       ; Move o1 <- o2
ROM:128A C9                       ret                     ; Return (cond & uncond)
ROM:128A
ROM:128B          ; ---------------------------------------------------------------------------
ROM:128B
ROM:128B          loc_128B:                               ; CODE XREF: sub_116C+11A↑j
ROM:128B 3D                       dec     a               ; Decrement operand
ROM:128C 20 03                    jr      nz, loc_1291    ; Jump relative (conditional & unconditional)
ROM:128C
ROM:128E 36 40                    ld      (hl), 40h ; '@' ; Move o1 <- o2
ROM:1290 C9                       ret                     ; Return (cond & uncond)
ROM:1290
ROM:1291          ; ---------------------------------------------------------------------------
ROM:1291
ROM:1291          loc_1291:                               ; CODE XREF: sub_116C+120↑j
ROM:1291 3D                       dec     a               ; Decrement operand
ROM:1292 20 03                    jr      nz, loc_1297    ; Jump relative (conditional & unconditional)
ROM:1292
ROM:1294 36 20                    ld      (hl), 20h ; ' ' ; Move o1 <- o2
ROM:1296 C9                       ret                     ; Return (cond & uncond)
ROM:1296
ROM:1297          ; ---------------------------------------------------------------------------
ROM:1297
ROM:1297          loc_1297:                               ; CODE XREF: sub_116C+126↑j
ROM:1297                                                  ; ROM:loc_30E0↓j
ROM:1297 21 BF 40                 ld      hl, 40BFh       ; Move o1 <- o2
ROM:129A 47                       ld      b, a            ; Move o1 <- o2
ROM:129B 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:129C E6 F8                    and     0F8h            ; And with accumulator
ROM:129E 4F                       ld      c, a            ; Move o1 <- o2
ROM:129F 78                       ld      a, b            ; Move o1 <- o2
ROM:12A0 3D                       dec     a               ; Decrement operand
ROM:12A1 20 04                    jr      nz, loc_12A7    ; Jump relative (conditional & unconditional)
ROM:12A1
ROM:12A3 CB D1                    set     2, c            ; Set bit
ROM:12A5 71                       ld      (hl), c         ; Move o1 <- o2
ROM:12A6 C9                       ret                     ; Return (cond & uncond)
ROM:12A6
ROM:12A7          ; ---------------------------------------------------------------------------
ROM:12A7
ROM:12A7          loc_12A7:                               ; CODE XREF: sub_116C+135↑j
ROM:12A7 3D                       dec     a               ; Decrement operand
ROM:12A8 20 04                    jr      nz, loc_12AE    ; Jump relative (conditional & unconditional)
ROM:12A8
ROM:12AA CB C9                    set     1, c            ; Set bit
ROM:12AC 71                       ld      (hl), c         ; Move o1 <- o2
ROM:12AD C9                       ret                     ; Return (cond & uncond)
ROM:12AD
ROM:12AE          ; ---------------------------------------------------------------------------
ROM:12AE
ROM:12AE          loc_12AE:                               ; CODE XREF: sub_116C+13C↑j
ROM:12AE 3D                       dec     a               ; Decrement operand
ROM:12AF 20 04                    jr      nz, loc_12B5    ; Jump relative (conditional & unconditional)
ROM:12AF
ROM:12B1 CB C1                    set     0, c            ; Set bit
ROM:12B3 71                       ld      (hl), c         ; Move o1 <- o2
ROM:12B4 C9                       ret                     ; Return (cond & uncond)
ROM:12B4
ROM:12B5          ; ---------------------------------------------------------------------------
ROM:12B5
ROM:12B5          loc_12B5:                               ; CODE XREF: sub_116C+143↑j
ROM:12B5 3D                       dec     a               ; Decrement operand
ROM:12B6 20 05                    jr      nz, loc_12BD    ; Jump relative (conditional & unconditional)
ROM:12B6
ROM:12B8 79                       ld      a, c            ; Move o1 <- o2
ROM:12B9 F6 07                    or      7               ; Or with accumulator
ROM:12BB 77                       ld      (hl), a         ; Move o1 <- o2
ROM:12BC C9                       ret                     ; Return (cond & uncond)
ROM:12BC
ROM:12BD          ; ---------------------------------------------------------------------------
ROM:12BD
ROM:12BD          loc_12BD:                               ; CODE XREF: sub_116C+14A↑j
ROM:12BD 3D                       dec     a               ; Decrement operand
ROM:12BE C2 A1 11                 jp      nz, loc_11A1    ; Jump (conditional & unconditional)
ROM:12BE
ROM:12C1 21 BE 40                 ld      hl, 40BEh       ; Move o1 <- o2
ROM:12C4 36 10                    ld      (hl), 10h       ; Move o1 <- o2
ROM:12C6 C9                       ret                     ; Return (cond & uncond)
ROM:12C6
ROM:12C6          ; End of function sub_116C
ROM:12C6
ROM:12C7
ROM:12C7          ; =============== S U B R O U T I N E =======================================
ROM:12C7
ROM:12C7
ROM:12C7          sub_12C7:                               ; CODE XREF: Setup_all+8C↓p
ROM:12C7 F3                       di                      ; Disable interrupts
ROM:12C8 21 40 40                 ld      hl, 4040h       ; Move o1 <- o2
ROM:12CB 06 D4                    ld      b, 0D4h         ; Move o1 <- o2
ROM:12CB
ROM:12CD
ROM:12CD          loc_12CD:                               ; CODE XREF: sub_12C7+9↓j
ROM:12CD 36 00                    ld      (hl), 0         ; Move o1 <- o2
ROM:12CF 23                       inc     hl              ; Increment operand
ROM:12D0 10 FB                    djnz    loc_12CD        ; Decrement reg B and jump relative if zero
ROM:12D0
ROM:12D2 21 08 01                 ld      hl, 108h        ; Move o1 <- o2
ROM:12D5 22 6C 40                 ld      (word_406C), hl ; Move o1 <- o2
ROM:12D8 F5                       push    af              ; Push register pair onto stack
ROM:12D9 3A B0 00                 ld      a, (byte_B0)    ; Move o1 <- o2
ROM:12DC 32 82 40                 ld      (byte_4082), a  ; Move o1 <- o2
ROM:12DF 3A AE 00                 ld      a, (byte_AE)    ; Move o1 <- o2
ROM:12E2 32 BE 40                 ld      (byte_40BE), a  ; Move o1 <- o2
ROM:12E5 F1                       pop     af              ; Pop register pair from stack
ROM:12E5
ROM:12E6
ROM:12E6          loc_12E6:                               ; CODE XREF: ROM:1DE6↓p
ROM:12E6 21 BA 00                 ld      hl, 0BAh        ; Move o1 <- o2
ROM:12E9 B7                       or      a               ; Or with accumulator
ROM:12EA 28 03                    jr      z, loc_12EF     ; Jump relative (conditional & unconditional)
ROM:12EA
ROM:12EC 21 CD 00                 ld      hl, 0CDh        ; Move o1 <- o2
ROM:12EC
ROM:12EF
ROM:12EF          loc_12EF:                               ; CODE XREF: sub_12C7+23↑j
ROM:12EF 01 13 00                 ld      bc, 13h         ; Move o1 <- o2
ROM:12F2 11 92 40                 ld      de, 4092h       ; Move o1 <- o2
ROM:12F5 ED B0                    ldir                    ; Transfer data (DE)->(HL) until byte
ROM:12F5                                                  ; counter is zero, increment destination
ROM:12F5                                                  ; and source addresses
ROM:12F5
ROM:12F5          ; End of function sub_12C7
ROM:12F5
ROM:12F7
ROM:12F7          ; =============== S U B R O U T I N E =======================================
ROM:12F7
ROM:12F7
ROM:12F7          sub_12F7:                               ; CODE XREF: sub_17E4+1D↓p
ROM:12F7 3A B1 00                 ld      a, (byte_B1)    ; Move o1 <- o2
ROM:12FA 32 BF 40                 ld      (byte_40BF), a  ; Move o1 <- o2
ROM:12FD 21 CE 40                 ld      hl, 40CEh       ; Move o1 <- o2
ROM:1300 06 50                    ld      b, 50h ; 'P'    ; Move o1 <- o2
ROM:1302 CD F4 26                 call    Array_clear     ; HL - Base Address
ROM:1302                                                  ; B - Count
ROM:1302
ROM:1305 21 9B 00                 ld      hl, 9Bh         ; Move o1 <- o2
ROM:1308 11 C4 40                 ld      de, 40C4h       ; Move o1 <- o2
ROM:130B 01 0C 00                 ld      bc, 0Ch         ; Move o1 <- o2
ROM:130E ED B0                    ldir                    ; Transfer data (DE)->(HL) until byte
ROM:130E                                                  ; counter is zero, increment destination
ROM:130E                                                  ; and source addresses
ROM:1310 0E 04                    ld      c, 4            ; Move o1 <- o2
ROM:1312 11 00 41                 ld      de, 4100h       ; Move o1 <- o2
ROM:1315 ED B0                    ldir                    ; Transfer data (DE)->(HL) until byte
ROM:1315                                                  ; counter is zero, increment destination
ROM:1315                                                  ; and source addresses
ROM:1317 2A 9F 00                 ld      hl, (word_9F)   ; Move o1 <- o2
ROM:131A 22 C0 40                 ld      (word_40C0), hl ; Move o1 <- o2
ROM:131D C9                       ret                     ; Return (cond & uncond)
ROM:131D
ROM:131D          ; End of function sub_12F7
ROM:131D
ROM:131E
ROM:131E          ; =============== S U B R O U T I N E =======================================
ROM:131E
ROM:131E
ROM:131E          sub_131E:                               ; CODE XREF: sub_D10+137↑p
ROM:131E                                                  ; sub_132E+37↓p
ROM:131E 6F                       ld      l, a            ; Move o1 <- o2
ROM:131F CD D4 13                 call    sub_13D4        ; call (cond & uncond)
ROM:131F
ROM:1322 C8                       ret     z               ; Return (cond & uncond)
ROM:1323 2E 08                    ld      l, 8            ; Move o1 <- o2
ROM:1325 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:1326 D8                       ret     c               ; Return (cond & uncond)
ROM:1327 2E 0A                    ld      l, 0Ah          ; Move o1 <- o2
ROM:1329 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:132A D8                       ret     c               ; Return (cond & uncond)
ROM:132B 2E 0C                    ld      l, 0Ch          ; Move o1 <- o2
ROM:132D C9                       ret                     ; Return (cond & uncond)
ROM:132D
ROM:132D          ; End of function sub_131E
ROM:132D
ROM:132E
ROM:132E          ; =============== S U B R O U T I N E =======================================
ROM:132E
ROM:132E
ROM:132E          sub_132E:                               ; CODE XREF: sub_116C:loc_11FD↑p
ROM:132E                                                  ; sub_132E+16↓p ...
ROM:132E F5                       push    af              ; Push register pair onto stack
ROM:132F 11 00 00                 ld      de, 0           ; Move o1 <- o2
ROM:1332 FE 1C                    cp      1Ch             ; Compare with accumulator
ROM:1334 30 1B                    jr      nc, loc_1351    ; Jump relative (conditional & unconditional)
ROM:1334
ROM:1336 FE 18                    cp      18h             ; Compare with accumulator
ROM:1338 38 17                    jr      c, loc_1351     ; Jump relative (conditional & unconditional)
ROM:1338
ROM:133A CD 81 0C                 call    sub_C81         ; call (cond & uncond)
ROM:133A
ROM:133D
ROM:133D          loc_133D:                               ; CODE XREF: sub_132E+1E↓j
ROM:133D 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:133E FE FF                    cp      0FFh            ; Compare with accumulator
ROM:1340 28 0C                    jr      z, loc_134E     ; Jump relative (conditional & unconditional)
ROM:1340
ROM:1342 E5                       push    hl              ; Push register pair onto stack
ROM:1343 D5                       push    de              ; Push register pair onto stack
ROM:1344 CD 2E 13                 call    sub_132E        ; call (cond & uncond)
ROM:1344
ROM:1347 D1                       pop     de              ; Pop register pair from stack
ROM:1348 19                       add     hl, de          ; Add <reg> to A
ROM:1349 EB                       ex      de, hl          ; Exchange operands
ROM:134A E1                       pop     hl              ; Pop register pair from stack
ROM:134B 23                       inc     hl              ; Increment operand
ROM:134C 18 EF                    jr      loc_133D        ; Jump relative (conditional & unconditional)
ROM:134C
ROM:134E          ; ---------------------------------------------------------------------------
ROM:134E
ROM:134E          loc_134E:                               ; CODE XREF: sub_132E+12↑j
ROM:134E                                                  ; sub_132E+25↓j
ROM:134E EB                       ex      de, hl          ; Exchange operands
ROM:134F F1                       pop     af              ; Pop register pair from stack
ROM:1350 C9                       ret                     ; Return (cond & uncond)
ROM:1350
ROM:1351          ; ---------------------------------------------------------------------------
ROM:1351
ROM:1351          loc_1351:                               ; CODE XREF: sub_132E+6↑j
ROM:1351                                                  ; sub_132E+A↑j
ROM:1351 FE 0D                    cp      0Dh             ; Compare with accumulator
ROM:1353 38 F9                    jr      c, loc_134E     ; Jump relative (conditional & unconditional)
ROM:1353
ROM:1355 CD A8 0C                 call    sub_CA8         ; call (cond & uncond)
ROM:1355
ROM:1358 4F                       ld      c, a            ; Move o1 <- o2
ROM:1359 E6 07                    and     7               ; And with accumulator
ROM:135B 11 00 00                 ld      de, 0           ; Move o1 <- o2
ROM:135E 6B                       ld      l, e            ; Move o1 <- o2
ROM:135F 62                       ld      h, d            ; Move o1 <- o2
ROM:1360 28 34                    jr      z, loc_1396     ; Jump relative (conditional & unconditional)
ROM:1360
ROM:1362 3C                       inc     a               ; Increment operand
ROM:1363 5F                       ld      e, a            ; Move o1 <- o2
ROM:1364 87                       add     a, a            ; Add <reg> to A
ROM:1365 CD 1E 13                 call    sub_131E        ; call (cond & uncond)
ROM:1365
ROM:1368 F1                       pop     af              ; Pop register pair from stack
ROM:1369 F5                       push    af              ; Push register pair onto stack
ROM:136A FE 18                    cp      18h             ; Compare with accumulator
ROM:136C 30 17                    jr      nc, loc_1385    ; Jump relative (conditional & unconditional)
ROM:136C
ROM:136E FE 10                    cp      10h             ; Compare with accumulator
ROM:1370 38 13                    jr      c, loc_1385     ; Jump relative (conditional & unconditional)
ROM:1370
ROM:1372 79                       ld      a, c            ; Move o1 <- o2
ROM:1373 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:1374 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:1375 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:1376 E6 07                    and     7               ; And with accumulator
ROM:1378 3C                       inc     a               ; Increment operand
ROM:1379 5F                       ld      e, a            ; Move o1 <- o2
ROM:137A 79                       ld      a, c            ; Move o1 <- o2
ROM:137B 07                       rlca                    ; Rotate left accumulator
ROM:137C 07                       rlca                    ; Rotate left accumulator
ROM:137D E6 03                    and     3               ; And with accumulator
ROM:137F 47                       ld      b, a            ; Move o1 <- o2
ROM:1380 AF                       xor     a               ; Exclusive or with accumulator
ROM:1380
ROM:1381
ROM:1381          loc_1381:                               ; CODE XREF: sub_132E+54↓j
ROM:1381 85                       add     a, l            ; Add <reg> to A
ROM:1382 10 FD                    djnz    loc_1381        ; Decrement reg B and jump relative if zero
ROM:1382
ROM:1384 6F                       ld      l, a            ; Move o1 <- o2
ROM:1384
ROM:1385
ROM:1385          loc_1385:                               ; CODE XREF: sub_132E+3E↑j
ROM:1385                                                  ; sub_132E+42↑j
ROM:1385 01 06 00                 ld      bc, 6           ; Move o1 <- o2
ROM:1388 3A BF 40                 ld      a, (byte_40BF)  ; Move o1 <- o2
ROM:138B CB 5F                    bit     3, a            ; Test <bit> in operand
ROM:138D 28 01                    jr      z, loc_1390     ; Jump relative (conditional & unconditional)
ROM:138D
ROM:138F 09                       add     hl, bc          ; Add <reg> to A
ROM:138F
ROM:1390
ROM:1390          loc_1390:                               ; CODE XREF: sub_132E+5F↑j
ROM:1390 CB 67                    bit     4, a            ; Test <bit> in operand
ROM:1392 28 02                    jr      z, loc_1396     ; Jump relative (conditional & unconditional)
ROM:1392
ROM:1394 2B                       dec     hl              ; Decrement operand
ROM:1395 2B                       dec     hl              ; Decrement operand
ROM:1395
ROM:1396
ROM:1396          loc_1396:                               ; CODE XREF: sub_132E+32↑j
ROM:1396                                                  ; sub_132E+64↑j
ROM:1396 CD D4 13                 call    sub_13D4        ; call (cond & uncond)
ROM:1396
ROM:1399 28 05                    jr      z, loc_13A0     ; Jump relative (conditional & unconditional)
ROM:1399
ROM:139B 11 00 00                 ld      de, 0           ; Move o1 <- o2
ROM:139E 18 0E                    jr      loc_13AE        ; Jump relative (conditional & unconditional)
ROM:139E
ROM:13A0          ; ---------------------------------------------------------------------------
ROM:13A0
ROM:13A0          loc_13A0:                               ; CODE XREF: sub_132E+6B↑j
ROM:13A0 2C                       inc     l               ; Increment operand
ROM:13A1 2D                       dec     l               ; Decrement operand
ROM:13A2 20 02                    jr      nz, loc_13A6    ; Jump relative (conditional & unconditional)
ROM:13A2
ROM:13A4 1E 06                    ld      e, 6            ; Move o1 <- o2
ROM:13A4
ROM:13A6
ROM:13A6          loc_13A6:                               ; CODE XREF: sub_132E+74↑j
ROM:13A6 01 03 00                 ld      bc, 3           ; Move o1 <- o2
ROM:13A9 EB                       ex      de, hl          ; Exchange operands
ROM:13AA B7                       or      a               ; Or with accumulator
ROM:13AB ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:13AD EB                       ex      de, hl          ; Exchange operands
ROM:13AD
ROM:13AE
ROM:13AE          loc_13AE:                               ; CODE XREF: sub_132E+70↑j
ROM:13AE F1                       pop     af              ; Pop register pair from stack
ROM:13AF F5                       push    af              ; Push register pair onto stack
ROM:13B0 FE 10                    cp      10h             ; Compare with accumulator
ROM:13B2 30 0C                    jr      nc, loc_13C0    ; Jump relative (conditional & unconditional)
ROM:13B2
ROM:13B4 FE 0E                    cp      0Eh             ; Compare with accumulator
ROM:13B6 20 05                    jr      nz, loc_13BD    ; Jump relative (conditional & unconditional)
ROM:13B6
ROM:13B8 EB                       ex      de, hl          ; Exchange operands
ROM:13B9 21 00 00                 ld      hl, 0           ; Move o1 <- o2
ROM:13BC D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:13BC
ROM:13BD
ROM:13BD          loc_13BD:                               ; CODE XREF: sub_132E+88↑j
ROM:13BD 11 00 00                 ld      de, 0           ; Move o1 <- o2
ROM:13BD
ROM:13C0
ROM:13C0          loc_13C0:                               ; CODE XREF: sub_132E+84↑j
ROM:13C0 3A BF 40                 ld      a, (byte_40BF)  ; Move o1 <- o2
ROM:13C3 CB 6F                    bit     5, a            ; Test <bit> in operand
ROM:13C5 28 0B                    jr      z, loc_13D2     ; Jump relative (conditional & unconditional)
ROM:13C5
ROM:13C7 44                       ld      b, h            ; Move o1 <- o2
ROM:13C8 4D                       ld      c, l            ; Move o1 <- o2
ROM:13C9 EB                       ex      de, hl          ; Exchange operands
ROM:13CA D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:13CA
ROM:13CB EB                       ex      de, hl          ; Exchange operands
ROM:13CC 21 00 00                 ld      hl, 0           ; Move o1 <- o2
ROM:13CF A7                       and     a               ; And with accumulator
ROM:13D0 ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:13D0
ROM:13D2
ROM:13D2          loc_13D2:                               ; CODE XREF: sub_132E+97↑j
ROM:13D2 F1                       pop     af              ; Pop register pair from stack
ROM:13D3 C9                       ret                     ; Return (cond & uncond)
ROM:13D3
ROM:13D3          ; End of function sub_132E
ROM:13D3
ROM:13D4
ROM:13D4          ; =============== S U B R O U T I N E =======================================
ROM:13D4
ROM:13D4
ROM:13D4          sub_13D4:                               ; CODE XREF: sub_131E+1↑p
ROM:13D4                                                  ; sub_132E:loc_1396↑p
ROM:13D4 3A BF 40                 ld      a, (byte_40BF)  ; Move o1 <- o2
ROM:13D7 E6 07                    and     7               ; And with accumulator
ROM:13D9 FE 07                    cp      7               ; Compare with accumulator
ROM:13DB C9                       ret                     ; Return (cond & uncond)
ROM:13DB
ROM:13DB          ; End of function sub_13D4
ROM:13DB
ROM:13DC
ROM:13DC          ; =============== S U B R O U T I N E =======================================
ROM:13DC
ROM:13DC
ROM:13DC          sub_13DC:                               ; CODE XREF: sub_116C:loc_11BE↑p
ROM:13DC                                                  ; sub_116C:loc_11C3↑p
ROM:13DC CD 06 14                 call    sub_1406        ; call (cond & uncond)
ROM:13DC
ROM:13DF EB                       ex      de, hl          ; Exchange operands
ROM:13E0 2A C0 40                 ld      hl, (word_40C0) ; Move o1 <- o2
ROM:13E3 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:13E3
ROM:13E4 C0                       ret     nz              ; Return (cond & uncond)
ROM:13E4
ROM:13E4          ; End of function sub_13DC
ROM:13E4
ROM:13E5
ROM:13E5          ; =============== S U B R O U T I N E =======================================
ROM:13E5
ROM:13E5
ROM:13E5          sub_13E5:                               ; CODE XREF: sub_24CA+5↓p
ROM:13E5 CD 3F 17                 call    sub_173F        ; call (cond & uncond)
ROM:13E5
ROM:13E8
ROM:13E8          loc_13E8:                               ; CODE XREF: ROM:30E3↓p
ROM:13E8 2A C8 40                 ld      hl, (word_40C8) ; Move o1 <- o2
ROM:13EB 22 C0 40                 ld      (word_40C0), hl ; Move o1 <- o2
ROM:13EB
ROM:13EE
ROM:13EE          SubWord_hl_de_:                         ; CODE XREF: j_SubWord_hl_de_↑j
ROM:13EE A7                       and     a               ; Clear C flag
ROM:13EF ED 52                    sbc     hl, de          ; sub hl-de-C
ROM:13F1 C9                       ret                     ; Return (cond & uncond)
ROM:13F1
ROM:13F1          ; End of function sub_13E5
ROM:13F1
ROM:13F2
ROM:13F2          ; =============== S U B R O U T I N E =======================================
ROM:13F2
ROM:13F2
ROM:13F2          sub_13F2:                               ; CODE XREF: sub_F2C+2F↑p
ROM:13F2                                                  ; sub_116C+5D↑p ...
ROM:13F2 3A BE 40                 ld      a, (byte_40BE)  ; Move o1 <- o2
ROM:13F5 21 18 00                 ld      hl, 18h         ; Move o1 <- o2
ROM:13F8 07                       rlca                    ; Rotate left accumulator
ROM:13F9 D8                       ret     c               ; Return (cond & uncond)
ROM:13FA 2E 24                    ld      l, 24h ; '$'    ; Move o1 <- o2
ROM:13FC 07                       rlca                    ; Rotate left accumulator
ROM:13FD D8                       ret     c               ; Return (cond & uncond)
ROM:13FE 2E 30                    ld      l, 30h ; '0'    ; Move o1 <- o2
ROM:1400 07                       rlca                    ; Rotate left accumulator
ROM:1401 D8                       ret     c               ; Return (cond & uncond)
ROM:1402 2A C4 40                 ld      hl, (word_40C4) ; Move o1 <- o2
ROM:1405 C9                       ret                     ; Return (cond & uncond)
ROM:1405
ROM:1405          ; End of function sub_13F2
ROM:1405
ROM:1406
ROM:1406          ; =============== S U B R O U T I N E =======================================
ROM:1406
ROM:1406
ROM:1406          sub_1406:                               ; CODE XREF: sub_116C+8↑p
ROM:1406                                                  ; sub_13DC↑p ...
ROM:1406 2A A8 40                 ld      hl, (word_40A8) ; Move o1 <- o2
ROM:1409 ED 4B A6                 ld      bc, (word_40A6) ; Move o1 <- o2
ROM:1409 40
ROM:140D A7                       and     a               ; And with accumulator
ROM:140E ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:1410 C9                       ret                     ; Return (cond & uncond)
ROM:1410
ROM:1410          ; End of function sub_1406
ROM:1410
ROM:1411
ROM:1411          ; =============== S U B R O U T I N E =======================================
ROM:1411
ROM:1411
ROM:1411          sub_1411:                               ; CODE XREF: sub_116C+10E↑j
ROM:1411                                                  ; sub_2905:loc_2123↓p
ROM:1411
ROM:1411          ; FUNCTION CHUNK AT ROM:2640 SIZE 00000004 BYTES
ROM:1411
ROM:1411 CD 42 14                 call    sub_1442        ; call (cond & uncond)
ROM:1411
ROM:1414
ROM:1414          loc_1414:                               ; CODE XREF: sub_1426+3↓j
ROM:1414 CD DB 14                 call    sub_14DB        ; call (cond & uncond)
ROM:1414
ROM:1417
ROM:1417          loc_1417:                               ; CODE XREF: sub_142B+6↓j
ROM:1417 ED 5B 75                 ld      de, (word_4075) ; Move o1 <- o2
ROM:1417 40
ROM:1417
ROM:141B
ROM:141B          loc_141B:                               ; CODE XREF: sub_1411+10↓j
ROM:141B 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:141C 23                       inc     hl              ; Increment operand
ROM:141D B6                       or      (hl)            ; Or with accumulator
ROM:141E 28 2A                    jr      z, loc_144A     ; Jump relative (conditional & unconditional)
ROM:141E
ROM:1420 23                       inc     hl              ; Increment operand
ROM:1421 10 F8                    djnz    loc_141B        ; Decrement reg B and jump relative if zero
ROM:1421
ROM:1423 C3 40 26                 jp      loc_2640        ; Jump (conditional & unconditional)
ROM:1423
ROM:1423          ; End of function sub_1411
ROM:1423
ROM:1426
ROM:1426          ; =============== S U B R O U T I N E =======================================
ROM:1426
ROM:1426
ROM:1426          sub_1426:                               ; CODE XREF: sub_2905:loc_2128↓p
ROM:1426 CD 4F 14                 call    sub_144F        ; call (cond & uncond)
ROM:1426
ROM:1429 18 E9                    jr      loc_1414        ; Jump relative (conditional & unconditional)
ROM:1429
ROM:1429          ; End of function sub_1426
ROM:1429
ROM:142B
ROM:142B          ; =============== S U B R O U T I N E =======================================
ROM:142B
ROM:142B
ROM:142B          sub_142B:                               ; CODE XREF: sub_2905-80D↓p
ROM:142B CD 54 14                 call    sub_1454        ; call (cond & uncond)
ROM:142B
ROM:142E CD EE 14                 call    sub_14EE        ; call (cond & uncond)
ROM:142E
ROM:1431 18 E4                    jr      loc_1417        ; Jump relative (conditional & unconditional)
ROM:1431
ROM:1431          ; End of function sub_142B
ROM:1431
ROM:1433
ROM:1433          ; =============== S U B R O U T I N E =======================================
ROM:1433
ROM:1433
ROM:1433          sub_1433:                               ; CODE XREF: sub_2905:loc_2113↓p
ROM:1433 CD 3B 17                 call    sub_173B        ; call (cond & uncond)
ROM:1433
ROM:1436 2A 7B 41                 ld      hl, (word_417B) ; Move o1 <- o2
ROM:1439 22 CC 40                 ld      (word_40CC), hl ; Move o1 <- o2
ROM:143C 22 C0 40                 ld      (word_40C0), hl ; Move o1 <- o2
ROM:143F EB                       ex      de, hl          ; Exchange operands
ROM:1440 37                       scf                     ; Set carry flag
ROM:1441 C9                       ret                     ; Return (cond & uncond)
ROM:1441
ROM:1441          ; End of function sub_1433
ROM:1441
ROM:1442
ROM:1442          ; =============== S U B R O U T I N E =======================================
ROM:1442
ROM:1442
ROM:1442          sub_1442:                               ; CODE XREF: sub_116C+112↑j
ROM:1442                                                  ; sub_1411↑p ...
ROM:1442 CD D5 14                 call    sub_14D5        ; call (cond & uncond)
ROM:1442
ROM:1445
ROM:1445          loc_1445:                               ; CODE XREF: sub_144F+3↓j
ROM:1445                                                  ; sub_1454+3↓j
ROM:1445 CD F4 14                 call    sub_14F4        ; call (cond & uncond)
ROM:1445
ROM:1448 C0                       ret     nz              ; Return (cond & uncond)
ROM:1449 2B                       dec     hl              ; Decrement operand
ROM:1449
ROM:144A
ROM:144A          loc_144A:                               ; CODE XREF: sub_1411+D↑j
ROM:144A 72                       ld      (hl), d         ; Move o1 <- o2
ROM:144B 2B                       dec     hl              ; Decrement operand
ROM:144C 73                       ld      (hl), e         ; Move o1 <- o2
ROM:144D 37                       scf                     ; Set carry flag
ROM:144E C9                       ret                     ; Return (cond & uncond)
ROM:144E
ROM:144E          ; End of function sub_1442
ROM:144E
ROM:144F
ROM:144F          ; =============== S U B R O U T I N E =======================================
ROM:144F
ROM:144F
ROM:144F          sub_144F:                               ; CODE XREF: sub_1426↑p
ROM:144F                                                  ; sub_2162+5↓j
ROM:144F CD E1 14                 call    sub_14E1        ; call (cond & uncond)
ROM:144F
ROM:1452 18 F1                    jr      loc_1445        ; Jump relative (conditional & unconditional)
ROM:1452
ROM:1452          ; End of function sub_144F
ROM:1452
ROM:1454
ROM:1454          ; =============== S U B R O U T I N E =======================================
ROM:1454
ROM:1454
ROM:1454          sub_1454:                               ; CODE XREF: sub_142B↑p
ROM:1454                                                  ; sub_2905-805↓p
ROM:1454 CD E8 14                 call    sub_14E8        ; call (cond & uncond)
ROM:1454
ROM:1457 18 EC                    jr      loc_1445        ; Jump relative (conditional & unconditional)
ROM:1457
ROM:1457          ; End of function sub_1454
ROM:1457
ROM:1459
ROM:1459          ; =============== S U B R O U T I N E =======================================
ROM:1459
ROM:1459
ROM:1459          sub_1459:                               ; CODE XREF: sub_116C:loc_11A6↑p
ROM:1459                                                  ; sub_2028+14↓p ...
ROM:1459 CD D5 14                 call    sub_14D5        ; call (cond & uncond)
ROM:1459
ROM:145C
ROM:145C          loc_145C:                               ; CODE XREF: sub_1492+3↓j
ROM:145C 11 FF 0F                 ld      de, 0FFFh       ; Move o1 <- o2
ROM:145C
ROM:145F
ROM:145F          loc_145F:                               ; CODE XREF: sub_148A+6↓j
ROM:145F ED 53 77                 ld      (unk_4077), de  ; Move o1 <- o2
ROM:145F 40
ROM:145F
ROM:1463
ROM:1463          loc_1463:                               ; CODE XREF: sub_1459+23↓j
ROM:1463 C5                       push    bc              ; Push register pair onto stack
ROM:1464 ED 4B 75                 ld      bc, (word_4075) ; Move o1 <- o2
ROM:1464 40
ROM:1468 CD 01 15                 call    sub_1501        ; call (cond & uncond)
ROM:1468
ROM:146B 38 0E                    jr      c, loc_147B     ; Jump relative (conditional & unconditional)
ROM:146B
ROM:146D 28 0C                    jr      z, loc_147B     ; Jump relative (conditional & unconditional)
ROM:146D
ROM:146F E5                       push    hl              ; Push register pair onto stack
ROM:1470 2A 77 40                 ld      hl, (unk_4077)  ; Move o1 <- o2
ROM:1473 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:1473
ROM:1474 38 04                    jr      c, loc_147A     ; Jump relative (conditional & unconditional)
ROM:1474
ROM:1476 ED 53 77                 ld      (unk_4077), de  ; Move o1 <- o2
ROM:1476 40
ROM:1476
ROM:147A
ROM:147A          loc_147A:                               ; CODE XREF: sub_1459+1B↑j
ROM:147A E1                       pop     hl              ; Pop register pair from stack
ROM:147A
ROM:147B
ROM:147B          loc_147B:                               ; CODE XREF: sub_1459+12↑j
ROM:147B                                                  ; sub_1459+14↑j
ROM:147B C1                       pop     bc              ; Pop register pair from stack
ROM:147C 10 E5                    djnz    loc_1463        ; Decrement reg B and jump relative if zero
ROM:147C
ROM:147E 2A 77 40                 ld      hl, (unk_4077)  ; Move o1 <- o2
ROM:1481 E5                       push    hl              ; Push register pair onto stack
ROM:1482 01 FF 0F                 ld      bc, 0FFFh       ; Move o1 <- o2
ROM:1485 B7                       or      a               ; Or with accumulator
ROM:1486 ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:1488 E1                       pop     hl              ; Pop register pair from stack
ROM:1489 C9                       ret                     ; Return (cond & uncond)
ROM:1489
ROM:1489          ; End of function sub_1459
ROM:1489
ROM:148A
ROM:148A          ; =============== S U B R O U T I N E =======================================
ROM:148A
ROM:148A
ROM:148A          sub_148A:                               ; CODE XREF: sub_223A+13↓p
ROM:148A                                                  ; sub_2028:loc_2972↓p
ROM:148A CD E1 14                 call    sub_14E1        ; call (cond & uncond)
ROM:148A
ROM:148D 11 FF FF                 ld      de, 0FFFFh      ; Move o1 <- o2
ROM:1490 18 CD                    jr      loc_145F        ; Jump relative (conditional & unconditional)
ROM:1490
ROM:1490          ; End of function sub_148A
ROM:1490
ROM:1492
ROM:1492          ; =============== S U B R O U T I N E =======================================
ROM:1492
ROM:1492
ROM:1492          sub_1492:                               ; CODE XREF: sub_116C:loc_11D6↑p
ROM:1492                                                  ; sub_2028:loc_2077↓p ...
ROM:1492 CD E8 14                 call    sub_14E8        ; call (cond & uncond)
ROM:1492
ROM:1495 18 C5                    jr      loc_145C        ; Jump relative (conditional & unconditional)
ROM:1495
ROM:1495          ; End of function sub_1492
ROM:1495
ROM:1497
ROM:1497          ; =============== S U B R O U T I N E =======================================
ROM:1497
ROM:1497
ROM:1497          sub_1497:                               ; CODE XREF: sub_116C:loc_11CF↑p
ROM:1497                                                  ; sub_2028:loc_207F↓p ...
ROM:1497 06 0F                    ld      b, 0Fh          ; Move o1 <- o2
ROM:1499 21 1D 41                 ld      hl, 411Dh       ; Move o1 <- o2
ROM:149C 11 00 00                 ld      de, 0           ; Move o1 <- o2
ROM:149F ED 53 77                 ld      (unk_4077), de  ; Move o1 <- o2
ROM:149F 40
ROM:149F
ROM:14A3
ROM:14A3          loc_14A3:                               ; CODE XREF: sub_1497+29↓j
ROM:14A3 C5                       push    bc              ; Push register pair onto stack
ROM:14A4 ED 4B AA                 ld      bc, (word_40AA) ; Move o1 <- o2
ROM:14A4 40
ROM:14A8 56                       ld      d, (hl)         ; Move o1 <- o2
ROM:14A9 2B                       dec     hl              ; Decrement operand
ROM:14AA 5E                       ld      e, (hl)         ; Move o1 <- o2
ROM:14AB 2B                       dec     hl              ; Decrement operand
ROM:14AC D5                       push    de              ; Push register pair onto stack
ROM:14AD CD 05 15                 call    sub_1505        ; call (cond & uncond)
ROM:14AD
ROM:14B0 D1                       pop     de              ; Pop register pair from stack
ROM:14B1 30 0C                    jr      nc, loc_14BF    ; Jump relative (conditional & unconditional)
ROM:14B1
ROM:14B3 E5                       push    hl              ; Push register pair onto stack
ROM:14B4 2A 77 40                 ld      hl, (unk_4077)  ; Move o1 <- o2
ROM:14B7 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:14B7
ROM:14B8 E1                       pop     hl              ; Pop register pair from stack
ROM:14B9 30 04                    jr      nc, loc_14BF    ; Jump relative (conditional & unconditional)
ROM:14B9
ROM:14BB ED 53 77                 ld      (unk_4077), de  ; Move o1 <- o2
ROM:14BB 40
ROM:14BB
ROM:14BF
ROM:14BF          loc_14BF:                               ; CODE XREF: sub_1497+1A↑j
ROM:14BF                                                  ; sub_1497+22↑j
ROM:14BF C1                       pop     bc              ; Pop register pair from stack
ROM:14C0 10 E1                    djnz    loc_14A3        ; Decrement reg B and jump relative if zero
ROM:14C0
ROM:14C2 ED 5B 77                 ld      de, (unk_4077)  ; Move o1 <- o2
ROM:14C2 40
ROM:14C6 AF                       xor     a               ; Exclusive or with accumulator
ROM:14C7 BA                       cp      d               ; Compare with accumulator
ROM:14C8 20 02                    jr      nz, loc_14CC    ; Jump relative (conditional & unconditional)
ROM:14C8
ROM:14CA BB                       cp      e               ; Compare with accumulator
ROM:14CB C8                       ret     z               ; Return (cond & uncond)
ROM:14CB
ROM:14CC
ROM:14CC          loc_14CC:                               ; CODE XREF: sub_1497+31↑j
ROM:14CC EB                       ex      de, hl          ; Exchange operands
ROM:14CD ED 4B AA                 ld      bc, (word_40AA) ; Move o1 <- o2
ROM:14CD 40
ROM:14D1 B7                       or      a               ; Or with accumulator
ROM:14D2 ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:14D4 C9                       ret                     ; Return (cond & uncond)
ROM:14D4
ROM:14D4          ; End of function sub_1497
ROM:14D4
ROM:14D5
ROM:14D5          ; =============== S U B R O U T I N E =======================================
ROM:14D5
ROM:14D5
ROM:14D5          sub_14D5:                               ; CODE XREF: sub_1442↑p
ROM:14D5                                                  ; sub_1459↑p
ROM:14D5 2A 73 40                 ld      hl, (word_4073) ; Move o1 <- o2
ROM:14D5
ROM:14D8
ROM:14D8          loc_14D8:                               ; CODE XREF: sub_14E1+5↓j
ROM:14D8 22 75 40                 ld      (word_4075), hl ; Move o1 <- o2
ROM:14D8
ROM:14D8          ; End of function sub_14D5
ROM:14D8
ROM:14DB
ROM:14DB          ; =============== S U B R O U T I N E =======================================
ROM:14DB
ROM:14DB
ROM:14DB          sub_14DB:                               ; CODE XREF: sub_1411:loc_1414↑p
ROM:14DB 21 CE 40                 ld      hl, 40CEh       ; Move o1 <- o2
ROM:14DE 06 19                    ld      b, 19h          ; Move o1 <- o2
ROM:14E0 C9                       ret                     ; Return (cond & uncond)
ROM:14E0
ROM:14E0          ; End of function sub_14DB
ROM:14E0
ROM:14E1
ROM:14E1          ; =============== S U B R O U T I N E =======================================
ROM:14E1
ROM:14E1
ROM:14E1          sub_14E1:                               ; CODE XREF: sub_144F↑p
ROM:14E1                                                  ; sub_148A↑p
ROM:14E1 2A 7B 41                 ld      hl, (word_417B) ; Move o1 <- o2
ROM:14E4 CB FC                    set     7, h            ; Set bit
ROM:14E6 18 F0                    jr      loc_14D8        ; Jump relative (conditional & unconditional)
ROM:14E6
ROM:14E6          ; End of function sub_14E1
ROM:14E6
ROM:14E8
ROM:14E8          ; =============== S U B R O U T I N E =======================================
ROM:14E8
ROM:14E8
ROM:14E8          sub_14E8:                               ; CODE XREF: sub_1454↑p
ROM:14E8                                                  ; sub_1492↑p
ROM:14E8 2A AA 40                 ld      hl, (word_40AA) ; Move o1 <- o2
ROM:14EB 22 75 40                 ld      (word_4075), hl ; Move o1 <- o2
ROM:14EB
ROM:14EB          ; End of function sub_14E8
ROM:14EB
ROM:14EE
ROM:14EE          ; =============== S U B R O U T I N E =======================================
ROM:14EE
ROM:14EE
ROM:14EE          sub_14EE:                               ; CODE XREF: sub_142B+3↑p
ROM:14EE 21 00 41                 ld      hl, 4100h       ; Move o1 <- o2
ROM:14F1 06 0F                    ld      b, 0Fh          ; Move o1 <- o2
ROM:14F3 C9                       ret                     ; Return (cond & uncond)
ROM:14F3
ROM:14F3          ; End of function sub_14EE
ROM:14F3
ROM:14F4
ROM:14F4          ; =============== S U B R O U T I N E =======================================
ROM:14F4
ROM:14F4
ROM:14F4          sub_14F4:                               ; CODE XREF: sub_1442:loc_1445↑p
ROM:14F4                                                  ; sub_14F4+A↓j
ROM:14F4 C5                       push    bc              ; Push register pair onto stack
ROM:14F5 ED 4B 75                 ld      bc, (word_4075) ; Move o1 <- o2
ROM:14F5 40
ROM:14F9 CD 01 15                 call    sub_1501        ; call (cond & uncond)
ROM:14F9
ROM:14FC C1                       pop     bc              ; Pop register pair from stack
ROM:14FD C8                       ret     z               ; Return (cond & uncond)
ROM:14FE 10 F4                    djnz    sub_14F4        ; Decrement reg B and jump relative if zero
ROM:14FE
ROM:1500 C9                       ret                     ; Return (cond & uncond)
ROM:1500
ROM:1500          ; End of function sub_14F4
ROM:1500
ROM:1501
ROM:1501          ; =============== S U B R O U T I N E =======================================
ROM:1501
ROM:1501
ROM:1501          sub_1501:                               ; CODE XREF: sub_1459+F↑p
ROM:1501                                                  ; sub_14F4+5↑p
ROM:1501 5E                       ld      e, (hl)         ; Move o1 <- o2
ROM:1502 23                       inc     hl              ; Increment operand
ROM:1503 56                       ld      d, (hl)         ; Move o1 <- o2
ROM:1504 23                       inc     hl              ; Increment operand
ROM:1504
ROM:1504          ; End of function sub_1501
ROM:1504
ROM:1505
ROM:1505          ; =============== S U B R O U T I N E =======================================
ROM:1505
ROM:1505
ROM:1505          sub_1505:                               ; CODE XREF: sub_1497+16↑p
ROM:1505 EB                       ex      de, hl          ; Exchange operands
ROM:1506 B7                       or      a               ; Or with accumulator
ROM:1507 ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:1509 EB                       ex      de, hl          ; Exchange operands
ROM:150A C9                       ret                     ; Return (cond & uncond)
ROM:150A
ROM:150A          ; End of function sub_1505
ROM:150A
ROM:150A          ; ---------------------------------------------------------------------------
ROM:150B 1F                       db 1Fh
ROM:150C 99                       db 99h
ROM:150D 95                       db 95h
ROM:150E 1E                       db 1Eh
ROM:150F 98                       db  98h
ROM:1510 46                       db 46h
ROM:1511 1E                       db 1Eh
ROM:1512 9C                       db  9Ch
ROM:1513 ED                       db 0EDh
ROM:1514 2B                       db  2Bh ; +
ROM:1515 9E                       db  9Eh
ROM:1516 82                       db  82h
ROM:1517 27                       db  27h ; '
ROM:1518 87                       db  87h
ROM:1519 2E                       db  2Eh ; .
ROM:151A 18                       db  18h
ROM:151B 97                       db  97h
ROM:151C F7                       db 0F7h
ROM:151D 25                       db  25h ; %
ROM:151E 83                       db  83h
ROM:151F D3                       db 0D3h
ROM:1520 23                       db  23h ; #
ROM:1521 86                       db  86h
ROM:1522 94                       db  94h
ROM:1523 23                       db  23h ; #
ROM:1524 85                       db  85h
ROM:1525 F4                       db 0F4h
ROM:1526 1F                       db  1Fh
ROM:1527 96                       db  96h
ROM:1528 DB                       db 0DBh
ROM:1529 2C                       db  2Ch ; ,
ROM:152A 84                       db  84h
ROM:152B B4                       db 0B4h
ROM:152C 25                       db  25h ; %
ROM:152D A4                       db 0A4h
ROM:152E 64                       db  64h ; d
ROM:152F 2E                       db  2Eh ; .
ROM:1530 A5                       db 0A5h
ROM:1531 12                       db  12h
ROM:1532 2E                       db  2Eh ; .
ROM:1533 A6                       db 0A6h
ROM:1534 D8                       db 0D8h
ROM:1535 2D                       db  2Dh ; -
ROM:1536 92                       db  92h
ROM:1537 EF                       db 0EFh
ROM:1538 1D                       db  1Dh
ROM:1539 93                       db  93h
ROM:153A 0A                       db  0Ah
ROM:153B 1E                       db  1Eh
ROM:153C 94                       db  94h
ROM:153D 17                       db  17h
ROM:153E 1E                       db  1Eh
ROM:153F 95                       db  95h
ROM:1540 24                       db  24h ; $
ROM:1541 1E                       db  1Eh
ROM:1542 91                       db  91h
ROM:1543 35                       db  35h ; 5
ROM:1544 1E                       db  1Eh
ROM:1545 8F                       db  8Fh
ROM:1546 F1                       db 0F1h
ROM:1547 28                       db  28h ; (
ROM:1548 88                       db  88h
ROM:1549 B5                       db 0B5h
ROM:154A 2A                       db  2Ah ; *
ROM:154B 89                       db  89h
ROM:154C 28                       db  28h ; (
ROM:154D 2A                       db  2Ah ; *
ROM:154E 90                       db  90h
ROM:154F 48                       db  48h ; H
ROM:1550 2C                       db  2Ch ; ,
ROM:1551 8B                       db  8Bh
ROM:1552 7C                       db  7Ch ; |
ROM:1553 2C                       db  2Ch ; ,
ROM:1554 8C                       db  8Ch
ROM:1555 87                       db  87h
ROM:1556 2C                       db  2Ch ; ,
ROM:1557 9D                       db  9Dh
ROM:1558 16                       db  16h
ROM:1559 2B                       db  2Bh ; +
ROM:155A 82                       db  82h
ROM:155B E4                       db 0E4h
ROM:155C 17                       db  17h
ROM:155D 81                       db  81h
ROM:155E 1D                       db  1Dh
ROM:155F 2F                       db  2Fh ; /
ROM:1560 8A                       db  8Ah
ROM:1561 DE                       db 0DEh
ROM:1562 1F                       db  1Fh
ROM:1563 8D                       db  8Dh
ROM:1564 D6                       db 0D6h
ROM:1565 1F                       db  1Fh
ROM:1566 9B                       db  9Bh
ROM:1567 A3                       db 0A3h
ROM:1568 24                       db  24h ; $
ROM:1569 24                       db  24h ; $
ROM:156A 06                       db    6
ROM:156B 88                       db  88h
ROM:156C 21                       db  21h ; !
ROM:156D 07                       db    7
ROM:156E DD                       db 0DDh
ROM:156F 21                       db  21h ; !
ROM:1570 0A                       db  0Ah
ROM:1571 86                       db  86h
ROM:1572 20                       db  20h
ROM:1573 0C                       db  0Ch
ROM:1574 D6                       db 0D6h
ROM:1575 1F                       db  1Fh
ROM:1576 80                       db  80h
ROM:1577 2A                       db  2Ah ; *
ROM:1578 26                       db  26h ; &
ROM:1579 81                       db  81h
ROM:157A FC                       db 0FCh
ROM:157B 1D                       db  1Dh
ROM:157C 82                       db  82h
ROM:157D FC                       db 0FCh
ROM:157E 1D                       db  1Dh
ROM:157F 83                       db  83h
ROM:1580 FC                       db 0FCh
ROM:1581 1D                       db  1Dh
ROM:1582 85                       db  85h
ROM:1583 FC                       db 0FCh
ROM:1584 1D                       db  1Dh
ROM:1585 87                       db  87h
ROM:1586 F1                       db 0F1h
ROM:1587 28                       db  28h ; (
ROM:1588 8D                       db  8Dh
ROM:1589 F7                       db 0F7h
ROM:158A 25                       db  25h ; %
ROM:158B 8E                       db  8Eh
ROM:158C 2F                       db  2Fh ; /
ROM:158D 1E                       db  1Eh
ROM:158E 8F                       db  8Fh
ROM:158F 2F                       db  2Fh ; /
ROM:1590 1E                       db  1Eh
ROM:1591 91                       db  91h
ROM:1592 FC                       db 0FCh
ROM:1593 1D                       db  1Dh
ROM:1594 92                       db  92h
ROM:1595 FC                       db 0FCh
ROM:1596 1D                       db  1Dh
ROM:1597 93                       db  93h
ROM:1598 FC                       db 0FCh
ROM:1599 1D                       db  1Dh
ROM:159A 95                       db  95h
ROM:159B FC                       db 0FCh
ROM:159C 1D                       db  1Dh
ROM:159D 9C                       db  9Ch
ROM:159E DC                       db 0DCh
ROM:159F 22                       db  22h ; "
ROM:15A0 9D                       db  9Dh
ROM:15A1 E0                       db 0E0h
ROM:15A2 22                       db  22h ; "
ROM:15A3 9E                       db  9Eh
ROM:15A4 3E                       db  3Eh ; >
ROM:15A5 21                       db  21h ; !
ROM:15A6 9F                       db  9Fh
ROM:15A7 28                       db  28h ; (
ROM:15A8 21                       db  21h ; !
ROM:15A9 A0                       db 0A0h
ROM:15AA 34                       db  34h ; 4
ROM:15AB 21                       db  21h ; !
ROM:15AC A1                       db 0A1h
ROM:15AD 3E                       db  3Eh ; >
ROM:15AE 21                       db  21h ; !
ROM:15AF A2                       db 0A2h
ROM:15B0 F8                       db 0F8h
ROM:15B1 20                       db  20h
ROM:15B2 A3                       db 0A3h
ROM:15B3 00                       db    0
ROM:15B4 21                       db  21h ; !
ROM:15B5 A4                       db 0A4h
ROM:15B6 13                       db  13h
ROM:15B7 21                       db  21h ; !
ROM:15B8 A5                       db 0A5h
ROM:15B9 2F                       db  2Fh ; /
ROM:15BA 1E                       db  1Eh
ROM:15BB A6                       db 0A6h
ROM:15BC 2F                       db  2Fh ; /
ROM:15BD 1E                       db  1Eh
ROM:15BE A7                       db 0A7h
ROM:15BF 2F                       db  2Fh ; /
ROM:15C0 1E                       db  1Eh
ROM:15C1 AC                       db 0ACh
ROM:15C2 2F                       db  2Fh ; /
ROM:15C3 1E                       db  1Eh
ROM:15C4 A8                       db 0A8h
ROM:15C5 B0                       db 0B0h
ROM:15C6 1D                       db  1Dh
ROM:15C7 A9                       db 0A9h
ROM:15C8 AC                       db 0ACh
ROM:15C9 1D                       db  1Dh
ROM:15CA AA                       db 0AAh
ROM:15CB A8                       db 0A8h
ROM:15CC 1D                       db  1Dh
ROM:15CD AB                       db 0ABh
ROM:15CE B4                       db 0B4h
ROM:15CF 1D                       db  1Dh
ROM:15D0 AD                       db 0ADh
ROM:15D1 1C                       db  1Ch
ROM:15D2 24                       db  24h ; $
ROM:15D3 AE                       db 0AEh
ROM:15D4 1C                       db  1Ch
ROM:15D5 24                       db  24h ; $
ROM:15D6 0B                       db  0Bh
ROM:15D7 0C                       db  0Ch
ROM:15D8 06                       db    6
ROM:15D9 87                       db  87h
ROM:15DA 0A                       db  0Ah
ROM:15DB 08                       db    8
ROM:15DC 0D                       db  0Dh
ROM:15DD 04                       db    4
ROM:15DE 05                       db    5
ROM:15DF 07                       db    7
ROM:15E0 A0                       db 0A0h
ROM:15E1 A1                       db 0A1h
ROM:15E2 A2                       db 0A2h
ROM:15E3 A3                       db 0A3h
ROM:15E4 A4                       db 0A4h
ROM:15E5 9F                       db  9Fh
ROM:15E6 9E                       db  9Eh
ROM:15E7 AD                       db 0ADh
ROM:15E8 AE                       db 0AEh
ROM:15E9 20                       db  20h
ROM:15EA 01                       db    1
ROM:15EB AA                       db 0AAh
ROM:15EC 30                       db  30h ; 0
ROM:15ED 02                       db    2
ROM:15EE AA                       db 0AAh
ROM:15EF 30                       db  30h ; 0
ROM:15F0 04                       db    4
ROM:15F1 F4                       db 0F4h
ROM:15F2 30                       db  30h ; 0
ROM:15F3 05                       db    5
ROM:15F4 F4                       db 0F4h
ROM:15F5 30                       db  30h ; 0
ROM:15F6 0B                       db  0Bh
ROM:15F7 E9                       db 0E9h
ROM:15F8 30                       db  30h ; 0
ROM:15F9 08                       db    8
ROM:15FA AE                       db 0AEh
ROM:15FB 30                       db  30h ; 0
ROM:15FC 0D                       db  0Dh
ROM:15FD AE                       db 0AEh
ROM:15FE 30                       db  30h ; 0
ROM:15FF 0A                       db  0Ah
ROM:1600 E3                       db 0E3h
ROM:1601 30                       db  30h ; 0
ROM:1602 A5                       db 0A5h
ROM:1603 C0                       db 0C0h
ROM:1604 30                       db  30h ; 0
ROM:1605 A6                       db 0A6h
ROM:1606 C4                       db 0C4h
ROM:1607 30                       db  30h ; 0
ROM:1608 A7                       db 0A7h
ROM:1609 C8                       db 0C8h
ROM:160A 30                       db  30h ; 0
ROM:160B AC                       db 0ACh
ROM:160C CC                       db 0CCh
ROM:160D 30                       db  30h ; 0
ROM:160E A8                       db 0A8h
ROM:160F D2                       db 0D2h
ROM:1610 30                       db  30h ; 0
ROM:1611 A9                       db 0A9h
ROM:1612 D6                       db 0D6h
ROM:1613 30                       db  30h ; 0
ROM:1614 AA                       db 0AAh
ROM:1615 DA                       db 0DAh
ROM:1616 30                       db  30h ; 0
ROM:1617 AB                       db 0ABh
ROM:1618 DE                       db 0DEh
ROM:1619 30                       db  30h ; 0
ROM:161A 0E                       db  0Eh
ROM:161B FF                       db 0FFh
ROM:161C 30                       db  30h ; 0
ROM:161D 0C                       db  0Ch
ROM:161E E9                       db 0E9h
ROM:161F 30                       db  30h ; 0
ROM:1620 06                       db    6
ROM:1621 E9                       db 0E9h
ROM:1622 30                       db  30h ; 0
ROM:1623 07                       db    7
ROM:1624 F4                       db 0F4h
ROM:1625 30                       db  30h ; 0
ROM:1626 8E                       db  8Eh
ROM:1627 94                       db  94h
ROM:1628 1D                       db  1Dh
ROM:1629 8F                       db  8Fh
ROM:162A 8F                       db  8Fh
ROM:162B 1D                       db  1Dh
ROM:162C 82                       db  82h
ROM:162D 0E                       db  0Eh
ROM:162E 17                       db  17h
ROM:162F 92                       db  92h
ROM:1630 05                       db    5
ROM:1631 17                       db  17h
ROM:1632 81                       db  81h
ROM:1633 FC                       db 0FCh
ROM:1634 16                       db  16h
ROM:1635 91                       db  91h
ROM:1636 F3                       db 0F3h
ROM:1637 16                       db  16h
ROM:1638 85                       db  85h
ROM:1639 32                       db  32h ; 2
ROM:163A 17                       db  17h
ROM:163B 95                       db  95h
ROM:163C 29                       db  29h ; )
ROM:163D 17                       db  17h
ROM:163E 83                       db  83h
ROM:163F 20                       db  20h
ROM:1640 17                       db  17h
ROM:1641 93                       db  93h
ROM:1642 17                       db  17h
ROM:1643 17                       db  17h
ROM:1644 A4                       db 0A4h
ROM:1645 E5                       db 0E5h
ROM:1646 13                       db  13h
ROM:1647 87                       db  87h
ROM:1648 E9                       db 0E9h
ROM:1649 30                       db  30h ; 0
ROM:164A
ROM:164A          ; =============== S U B R O U T I N E =======================================
ROM:164A
ROM:164A
ROM:164A          test_4156_bit1:                         ; CODE XREF: sub_1B5B+42↓p
ROM:164A                                                  ; sub_1C47+17↓p ...
ROM:164A 21 56 41                 ld      hl, 4156h       ; Move o1 <- o2
ROM:164D CB 4E                    bit     1, (hl)         ; Test <bit> in operand
ROM:164F C9                       ret                     ; Return (cond & uncond)
ROM:164F
ROM:164F          ; End of function test_4156_bit1
ROM:164F
ROM:1650
ROM:1650          ; =============== S U B R O U T I N E =======================================
ROM:1650
ROM:1650
ROM:1650          sub_1650:                               ; CODE XREF: sub_19FC+1F↓p
ROM:1650                                                  ; sub_1AA8+35↓p ...
ROM:1650 21 56 41                 ld      hl, 4156h       ; Move o1 <- o2
ROM:1653 3E 03                    ld      a, 3            ; Move o1 <- o2
ROM:1655 A6                       and     (hl)            ; And with accumulator
ROM:1656 C9                       ret                     ; Return (cond & uncond)
ROM:1656
ROM:1656          ; End of function sub_1650
ROM:1656
ROM:1657
ROM:1657          ; =============== S U B R O U T I N E =======================================
ROM:1657
ROM:1657
ROM:1657          sub_1657:                               ; CODE XREF: sub_1C67+3B↓p
ROM:1657                                                  ; sub_2188+28B↓p ...
ROM:1657 21 56 41                 ld      hl, 4156h       ; Move o1 <- o2
ROM:165A CB 86                    res     0, (hl)         ; Reset bit
ROM:165C CB 8E                    res     1, (hl)         ; Reset bit
ROM:165E C9                       ret                     ; Return (cond & uncond)
ROM:165E
ROM:165E          ; End of function sub_1657
ROM:165E
ROM:165F
ROM:165F          ; =============== S U B R O U T I N E =======================================
ROM:165F
ROM:165F
ROM:165F          test_4156_bit2:                         ; CODE XREF: sub_22E8↓p
ROM:165F                                                  ; sub_237A↓p
ROM:165F 21 56 41                 ld      hl, 4156h       ; Move o1 <- o2
ROM:1662 CB 56                    bit     2, (hl)         ; Test <bit> in operand
ROM:1664 C9                       ret                     ; Return (cond & uncond)
ROM:1664
ROM:1664          ; End of function test_4156_bit2
ROM:1664
ROM:1665
ROM:1665          ; =============== S U B R O U T I N E =======================================
ROM:1665
ROM:1665
ROM:1665          test_4157_bit0:                         ; CODE XREF: sub_1B5B+4F↓p
ROM:1665                                                  ; sub_1C67+19↓p ...
ROM:1665 21 57 41                 ld      hl, 4157h       ; Move o1 <- o2
ROM:1668 CB 46                    bit     0, (hl)         ; Test <bit> in operand
ROM:166A C9                       ret                     ; Return (cond & uncond)
ROM:166A
ROM:166A          ; End of function test_4157_bit0
ROM:166A
ROM:166B
ROM:166B          ; =============== S U B R O U T I N E =======================================
ROM:166B
ROM:166B
ROM:166B          set_4157_bit0:                          ; CODE XREF: sub_1AA8↓p
ROM:166B 21 57 41                 ld      hl, 4157h       ; Move o1 <- o2
ROM:166E CB C6                    set     0, (hl)         ; Set bit
ROM:1670 C9                       ret                     ; Return (cond & uncond)
ROM:1670
ROM:1670          ; End of function set_4157_bit0
ROM:1670
ROM:1671
ROM:1671          ; =============== S U B R O U T I N E =======================================
ROM:1671
ROM:1671
ROM:1671          rst_4157_bit0:                          ; CODE XREF: sub_19FC:loc_1A36↓p
ROM:1671 21 57 41                 ld      hl, 4157h       ; Move o1 <- o2
ROM:1674 CB 86                    res     0, (hl)         ; Reset bit
ROM:1676 C9                       ret                     ; Return (cond & uncond)
ROM:1676
ROM:1676          ; End of function rst_4157_bit0
ROM:1676
ROM:1677
ROM:1677          ; =============== S U B R O U T I N E =======================================
ROM:1677
ROM:1677
ROM:1677          test_4157_bit3:                         ; CODE XREF: sub_19FC:loc_1A22↓p
ROM:1677                                                  ; sub_19FC+64↓p ...
ROM:1677 21 57 41                 ld      hl, 4157h       ; Move o1 <- o2
ROM:167A CB 5E                    bit     3, (hl)         ; Test <bit> in operand
ROM:167C C9                       ret                     ; Return (cond & uncond)
ROM:167C
ROM:167C          ; End of function test_4157_bit3
ROM:167C
ROM:167D
ROM:167D          ; =============== S U B R O U T I N E =======================================
ROM:167D
ROM:167D
ROM:167D          set_4157_bit3:                          ; CODE XREF: sub_28CD+540↓p
ROM:167D 21 57 41                 ld      hl, 4157h       ; Move o1 <- o2
ROM:1680 CB DE                    set     3, (hl)         ; Set bit
ROM:1682 C9                       ret                     ; Return (cond & uncond)
ROM:1682
ROM:1682          ; End of function set_4157_bit3
ROM:1682
ROM:1683
ROM:1683          ; =============== S U B R O U T I N E =======================================
ROM:1683
ROM:1683
ROM:1683          rst_4157_bit3:                          ; CODE XREF: sub_1AA8+54↓j
ROM:1683                                                  ; sub_1B5B+53↓p ...
ROM:1683 21 57 41                 ld      hl, 4157h       ; Move o1 <- o2
ROM:1686 CB 9E                    res     3, (hl)         ; Reset bit
ROM:1688 C9                       ret                     ; Return (cond & uncond)
ROM:1688
ROM:1688          ; End of function rst_4157_bit3
ROM:1688
ROM:1689
ROM:1689          ; =============== S U B R O U T I N E =======================================
ROM:1689
ROM:1689
ROM:1689          test_4156_bit4:                         ; CODE XREF: sub_307B+C↓p
ROM:1689 21 56 41                 ld      hl, 4156h       ; Move o1 <- o2
ROM:168C CB 66                    bit     4, (hl)         ; Test <bit> in operand
ROM:168E C9                       ret                     ; Return (cond & uncond)
ROM:168E
ROM:168E          ; End of function test_4156_bit4
ROM:168E
ROM:168F
ROM:168F          ; =============== S U B R O U T I N E =======================================
ROM:168F
ROM:168F
ROM:168F          test_4156_bit7:                         ; CODE XREF: sub_1D12↓p
ROM:168F 21 56 41                 ld      hl, 4156h       ; Move o1 <- o2
ROM:1692 CB 7E                    bit     7, (hl)         ; Test <bit> in operand
ROM:1694 C9                       ret                     ; Return (cond & uncond)
ROM:1694
ROM:1694          ; End of function test_4156_bit7
ROM:1694
ROM:1695
ROM:1695          ; =============== S U B R O U T I N E =======================================
ROM:1695
ROM:1695
ROM:1695          sub_1695:                               ; CODE XREF: sub_1749+8↓p
ROM:1695 21 56 41                 ld      hl, 4156h       ; Move o1 <- o2
ROM:1698 CB FE                    set     7, (hl)         ; Set bit
ROM:1698
ROM:169A
ROM:169A          loc_169A:                               ; CODE XREF: sub_251E+74↓j
ROM:169A 3A BF 40                 ld      a, (byte_40BF)  ; Move o1 <- o2
ROM:169D 32 1B 42                 ld      (byte_421B), a  ; Move o1 <- o2
ROM:16A0 C9                       ret                     ; Return (cond & uncond)
ROM:16A0
ROM:16A0          ; End of function sub_1695
ROM:16A0
ROM:16A1
ROM:16A1          ; =============== S U B R O U T I N E =======================================
ROM:16A1
ROM:16A1
ROM:16A1          rst_4156_bit7:                          ; CODE XREF: sub_1758+8↓p
ROM:16A1                                                  ; sub_1CBA+4↓p
ROM:16A1 21 56 41                 ld      hl, 4156h       ; Move o1 <- o2
ROM:16A4 CB BE                    res     7, (hl)         ; Reset bit
ROM:16A6 C9                       ret                     ; Return (cond & uncond)
ROM:16A6
ROM:16A6          ; End of function rst_4156_bit7
ROM:16A6
ROM:16A7
ROM:16A7          ; =============== S U B R O U T I N E =======================================
ROM:16A7
ROM:16A7
ROM:16A7          test_4156_bit3:                         ; CODE XREF: sub_1AA8+2B↓p
ROM:16A7                                                  ; sub_1C47↓p ...
ROM:16A7 21 56 41                 ld      hl, 4156h       ; Move o1 <- o2
ROM:16AA CB 5E                    bit     3, (hl)         ; Test <bit> in operand
ROM:16AC C9                       ret                     ; Return (cond & uncond)
ROM:16AC
ROM:16AC          ; End of function test_4156_bit3
ROM:16AC
ROM:16AD
ROM:16AD          ; =============== S U B R O U T I N E =======================================
ROM:16AD
ROM:16AD
ROM:16AD          rst_4156_bit3:                          ; CODE XREF: sub_1B5B+72↓p
ROM:16AD                                                  ; sub_1C67+38↓p
ROM:16AD 21 56 41                 ld      hl, 4156h       ; Move o1 <- o2
ROM:16B0 CB 9E                    res     3, (hl)         ; Reset bit
ROM:16B2 C9                       ret                     ; Return (cond & uncond)
ROM:16B2
ROM:16B2          ; End of function rst_4156_bit3
ROM:16B2
ROM:16B3
ROM:16B3          ; =============== S U B R O U T I N E =======================================
ROM:16B3
ROM:16B3
ROM:16B3          sub_16B3:                               ; CODE XREF: ROM:2A28↓p
ROM:16B3                                                  ; sub_3621↓p
ROM:16B3 CD C9 16                 call    test_4068_b0    ; call (cond & uncond)
ROM:16B3
ROM:16B6 C8                       ret     z               ; Return (cond & uncond)
ROM:16B6
ROM:16B6          ; End of function sub_16B3
ROM:16B6
ROM:16B7
ROM:16B7          ; =============== S U B R O U T I N E =======================================
ROM:16B7
ROM:16B7
ROM:16B7          test_4068_b1:                           ; CODE XREF: ROM:18CE↓p
ROM:16B7                                                  ; sub_19FC+E↓p ...
ROM:16B7 21 6B 40                 ld      hl, 406Bh       ; Move o1 <- o2
ROM:16BA CB 4E                    bit     1, (hl)         ; Test <bit> in operand
ROM:16BC C9                       ret                     ; Return (cond & uncond)
ROM:16BC
ROM:16BC          ; End of function test_4068_b1
ROM:16BC
ROM:16BD
ROM:16BD          ; =============== S U B R O U T I N E =======================================
ROM:16BD
ROM:16BD
ROM:16BD          set_4068_b1_to_1:                       ; CODE XREF: ROM:loc_36F6↓p
ROM:16BD 21 6B 40                 ld      hl, 406Bh       ; Move o1 <- o2
ROM:16C0 CB CE                    set     1, (hl)         ; Set bit
ROM:16C2 C9                       ret                     ; Return (cond & uncond)
ROM:16C2
ROM:16C2          ; End of function set_4068_b1_to_1
ROM:16C2
ROM:16C3
ROM:16C3          ; =============== S U B R O U T I N E =======================================
ROM:16C3
ROM:16C3
ROM:16C3          set_4068_b1_to_0:                       ; CODE XREF: UsartCtrl+C↓p
ROM:16C3                                                  ; ROM:36D1↓p
ROM:16C3 21 6B 40                 ld      hl, 406Bh       ; Move o1 <- o2
ROM:16C6 CB 8E                    res     1, (hl)         ; Reset bit
ROM:16C8 C9                       ret                     ; Return (cond & uncond)
ROM:16C8
ROM:16C8          ; End of function set_4068_b1_to_0
ROM:16C8
ROM:16C9
ROM:16C9          ; =============== S U B R O U T I N E =======================================
ROM:16C9
ROM:16C9
ROM:16C9          test_4068_b0:                           ; CODE XREF: sub_16B3↑p
ROM:16C9                                                  ; ROM:18EC↓p ...
ROM:16C9 21 6B 40                 ld      hl, 406Bh       ; Move o1 <- o2
ROM:16CC CB 46                    bit     0, (hl)         ; Test <bit> in operand
ROM:16CE C9                       ret                     ; Return (cond & uncond)
ROM:16CE
ROM:16CE          ; End of function test_4068_b0
ROM:16CE
ROM:16CF
ROM:16CF          ; =============== S U B R O U T I N E =======================================
ROM:16CF
ROM:16CF
ROM:16CF          set_4068_b0_to_1:                       ; CODE XREF: ROM:36C7↓p
ROM:16CF 21 6B 40                 ld      hl, 406Bh       ; Move o1 <- o2
ROM:16D2 CB C6                    set     0, (hl)         ; Set bit
ROM:16D4 C9                       ret                     ; Return (cond & uncond)
ROM:16D4
ROM:16D4          ; End of function set_4068_b0_to_1
ROM:16D4
ROM:16D5
ROM:16D5          ; =============== S U B R O U T I N E =======================================
ROM:16D5
ROM:16D5
ROM:16D5          set_4068_b0_to_0:                       ; CODE XREF: UsartCtrl+9↓p
ROM:16D5                                                  ; ROM:36A7↓p
ROM:16D5 21 6B 40                 ld      hl, 406Bh       ; Move o1 <- o2
ROM:16D8 CB 86                    res     0, (hl)         ; Reset bit
ROM:16DA C9                       ret                     ; Return (cond & uncond)
ROM:16DA
ROM:16DA          ; End of function set_4068_b0_to_0
ROM:16DA
ROM:16DB
ROM:16DB          ; =============== S U B R O U T I N E =======================================
ROM:16DB
ROM:16DB
ROM:16DB          test_4157_bit2:                         ; CODE XREF: sub_1AA8+19↓p
ROM:16DB                                                  ; sub_1C47+4↓p ...
ROM:16DB 21 57 41                 ld      hl, 4157h       ; Move o1 <- o2
ROM:16DE CB 56                    bit     2, (hl)         ; Test <bit> in operand
ROM:16E0 C9                       ret                     ; Return (cond & uncond)
ROM:16E0
ROM:16E0          ; End of function test_4157_bit2
ROM:16E0
ROM:16E1          ; ---------------------------------------------------------------------------
ROM:16E1
ROM:16E1          loc_16E1:                               ; CODE XREF: ROM:1DF9↓j
ROM:16E1 21 57 41                 ld      hl, 4157h       ; Move o1 <- o2
ROM:16E4 CB D6                    set     2, (hl)         ; Set bit
ROM:16E6 0E 00                    ld      c, 0            ; Move o1 <- o2
ROM:16E8 18 53                    jr      loc_173D        ; Jump relative (conditional & unconditional)
ROM:16E8
ROM:16EA
ROM:16EA          ; =============== S U B R O U T I N E =======================================
ROM:16EA
ROM:16EA
ROM:16EA          sub_16EA:                               ; CODE XREF: sub_1749+5↓p
ROM:16EA                                                  ; ROM:1DF2↓j
ROM:16EA 21 57 41                 ld      hl, 4157h       ; Move o1 <- o2
ROM:16ED CB 96                    res     2, (hl)         ; Reset bit
ROM:16EF 0E 00                    ld      c, 0            ; Move o1 <- o2
ROM:16F1 18 4E                    jr      loc_1741        ; Jump relative (conditional & unconditional)
ROM:16F1
ROM:16F1          ; End of function sub_16EA
ROM:16F1
ROM:16F3          ; ---------------------------------------------------------------------------
ROM:16F3          ; START OF FUNCTION CHUNK FOR sub_116C
ROM:16F3
ROM:16F3          loc_16F3:                               ; CODE XREF: sub_116C+EA↑j
ROM:16F3 21 BF 40                 ld      hl, 40BFh       ; Move o1 <- o2
ROM:16F6 CB E6                    set     4, (hl)         ; Set bit
ROM:16F8 0E 01                    ld      c, 1            ; Move o1 <- o2
ROM:16FA 18 41                    jr      loc_173D        ; Jump relative (conditional & unconditional)
ROM:16FA
ROM:16FA          ; END OF FUNCTION CHUNK FOR sub_116C
ROM:16FC
ROM:16FC          ; =============== S U B R O U T I N E =======================================
ROM:16FC
ROM:16FC
ROM:16FC          sub_16FC:                               ; CODE XREF: sub_116C+FC↑j
ROM:16FC                                                  ; sub_24CA+E↓p
ROM:16FC 21 BF 40                 ld      hl, 40BFh       ; Move o1 <- o2
ROM:16FF CB A6                    res     4, (hl)         ; Reset bit
ROM:1701 0E 01                    ld      c, 1            ; Move o1 <- o2
ROM:1703 18 3C                    jr      loc_1741        ; Jump relative (conditional & unconditional)
ROM:1703
ROM:1703          ; End of function sub_16FC
ROM:1703
ROM:1705          ; ---------------------------------------------------------------------------
ROM:1705          ; START OF FUNCTION CHUNK FOR sub_116C
ROM:1705
ROM:1705          loc_1705:                               ; CODE XREF: sub_116C+EE↑j
ROM:1705 21 BF 40                 ld      hl, 40BFh       ; Move o1 <- o2
ROM:1708 CB DE                    set     3, (hl)         ; Set bit
ROM:170A 0E 02                    ld      c, 2            ; Move o1 <- o2
ROM:170C 18 2F                    jr      loc_173D        ; Jump relative (conditional & unconditional)
ROM:170C
ROM:170C          ; END OF FUNCTION CHUNK FOR sub_116C
ROM:170E
ROM:170E          ; =============== S U B R O U T I N E =======================================
ROM:170E
ROM:170E
ROM:170E          sub_170E:                               ; CODE XREF: sub_116C+100↑j
ROM:170E                                                  ; sub_24CA+11↓p
ROM:170E 21 BF 40                 ld      hl, 40BFh       ; Move o1 <- o2
ROM:1711 CB 9E                    res     3, (hl)         ; Reset bit
ROM:1713 0E 02                    ld      c, 2            ; Move o1 <- o2
ROM:1715 18 2A                    jr      loc_1741        ; Jump relative (conditional & unconditional)
ROM:1715
ROM:1715          ; End of function sub_170E
ROM:1715
ROM:1717          ; ---------------------------------------------------------------------------
ROM:1717          ; START OF FUNCTION CHUNK FOR sub_116C
ROM:1717
ROM:1717          loc_1717:                               ; CODE XREF: sub_116C+F2↑j
ROM:1717 21 BF 40                 ld      hl, 40BFh       ; Move o1 <- o2
ROM:171A CB F6                    set     6, (hl)         ; Set bit
ROM:171C 0E 03                    ld      c, 3            ; Move o1 <- o2
ROM:171E 18 1D                    jr      loc_173D        ; Jump relative (conditional & unconditional)
ROM:171E
ROM:171E          ; END OF FUNCTION CHUNK FOR sub_116C
ROM:1720
ROM:1720          ; =============== S U B R O U T I N E =======================================
ROM:1720
ROM:1720
ROM:1720          sub_1720:                               ; CODE XREF: sub_116C+104↑j
ROM:1720                                                  ; sub_24CA+B↓p
ROM:1720 21 BF 40                 ld      hl, 40BFh       ; Move o1 <- o2
ROM:1723 CB B6                    res     6, (hl)         ; Reset bit
ROM:1725 0E 03                    ld      c, 3            ; Move o1 <- o2
ROM:1727 18 18                    jr      loc_1741        ; Jump relative (conditional & unconditional)
ROM:1727
ROM:1727          ; End of function sub_1720
ROM:1727
ROM:1729          ; ---------------------------------------------------------------------------
ROM:1729          ; START OF FUNCTION CHUNK FOR sub_116C
ROM:1729
ROM:1729          loc_1729:                               ; CODE XREF: sub_116C+F7↑j
ROM:1729 21 BF 40                 ld      hl, 40BFh       ; Move o1 <- o2
ROM:172C CB FE                    set     7, (hl)         ; Set bit
ROM:172E 0E 04                    ld      c, 4            ; Move o1 <- o2
ROM:1730 18 0B                    jr      loc_173D        ; Jump relative (conditional & unconditional)
ROM:1730
ROM:1730          ; END OF FUNCTION CHUNK FOR sub_116C
ROM:1732
ROM:1732          ; =============== S U B R O U T I N E =======================================
ROM:1732
ROM:1732
ROM:1732          sub_1732:                               ; CODE XREF: sub_116C+109↑j
ROM:1732                                                  ; sub_24CA+8↓p
ROM:1732 21 BF 40                 ld      hl, 40BFh       ; Move o1 <- o2
ROM:1735 CB BE                    res     7, (hl)         ; Reset bit
ROM:1737 0E 04                    ld      c, 4            ; Move o1 <- o2
ROM:1739 18 06                    jr      loc_1741        ; Jump relative (conditional & unconditional)
ROM:1739
ROM:1739          ; End of function sub_1732
ROM:1739
ROM:173B
ROM:173B          ; =============== S U B R O U T I N E =======================================
ROM:173B
ROM:173B
ROM:173B          sub_173B:                               ; CODE XREF: sub_1433↑p
ROM:173B                                                  ; sub_2028:loc_2086↓p
ROM:173B
ROM:173B          ; FUNCTION CHUNK AT ROM:1787 SIZE 00000005 BYTES
ROM:173B
ROM:173B 0E 05                    ld      c, 5            ; Move o1 <- o2
ROM:173B
ROM:173D
ROM:173D          loc_173D:                               ; CODE XREF: ROM:16E8↑j
ROM:173D                                                  ; sub_116C+58E↑j ...
ROM:173D 18 48                    jr      loc_1787        ; Jump relative (conditional & unconditional)
ROM:173D
ROM:173D          ; End of function sub_173B
ROM:173D
ROM:173F
ROM:173F          ; =============== S U B R O U T I N E =======================================
ROM:173F
ROM:173F
ROM:173F          sub_173F:                               ; CODE XREF: sub_13E5↑p
ROM:173F                                                  ; sub_2188+29C↓p ...
ROM:173F 0E 05                    ld      c, 5            ; Move o1 <- o2
ROM:173F
ROM:1741
ROM:1741          loc_1741:                               ; CODE XREF: sub_16EA+7↑j
ROM:1741                                                  ; sub_16FC+7↑j ...
ROM:1741 18 75                    jr      sub_17B8        ; Jump relative (conditional & unconditional)
ROM:1741
ROM:1741          ; End of function sub_173F
ROM:1741
ROM:1743
ROM:1743          ; =============== S U B R O U T I N E =======================================
ROM:1743
ROM:1743
ROM:1743          sub_1743:                               ; CODE XREF: ROM:18F7↓p
ROM:1743                                                  ; ROM:1907↓p ...
ROM:1743 21 57 41                 ld      hl, 4157h       ; Move o1 <- o2
ROM:1746 CB 76                    bit     6, (hl)         ; Test <bit> in operand
ROM:1748 C9                       ret                     ; Return (cond & uncond)
ROM:1748
ROM:1748          ; End of function sub_1743
ROM:1748
ROM:1749
ROM:1749          ; =============== S U B R O U T I N E =======================================
ROM:1749
ROM:1749
ROM:1749          sub_1749:                               ; CODE XREF: ROM:loc_1911↓p
ROM:1749                                                  ; sub_19FC+2F↓p
ROM:1749
ROM:1749          ; FUNCTION CHUNK AT ROM:1787 SIZE 00000005 BYTES
ROM:1749
ROM:1749 21 57 41                 ld      hl, 4157h       ; Move o1 <- o2
ROM:174C CB F6                    set     6, (hl)         ; Set bit
ROM:174E CD EA 16                 call    sub_16EA        ; call (cond & uncond)
ROM:174E
ROM:1751 CD 95 16                 call    sub_1695        ; call (cond & uncond)
ROM:1751
ROM:1754 0E 06                    ld      c, 6            ; Move o1 <- o2
ROM:1756 18 2F                    jr      loc_1787        ; Jump relative (conditional & unconditional)
ROM:1756
ROM:1756          ; End of function sub_1749
ROM:1756
ROM:1758
ROM:1758          ; =============== S U B R O U T I N E =======================================
ROM:1758
ROM:1758
ROM:1758          sub_1758:                               ; CODE XREF: ROM:190C↓p
ROM:1758                                                  ; sub_1AA8+51↓p ...
ROM:1758 21 57 41                 ld      hl, 4157h       ; Move o1 <- o2
ROM:175B CB 76                    bit     6, (hl)         ; Test <bit> in operand
ROM:175D C8                       ret     z               ; Return (cond & uncond)
ROM:175E CB B6                    res     6, (hl)         ; Reset bit
ROM:1760 CD A1 16                 call    rst_4156_bit7   ; call (cond & uncond)
ROM:1760
ROM:1763 0E 06                    ld      c, 6            ; Move o1 <- o2
ROM:1765 CD B8 17                 call    sub_17B8        ; call (cond & uncond)
ROM:1765
ROM:1765          ; End of function sub_1758
ROM:1765
ROM:1768
ROM:1768          ; =============== S U B R O U T I N E =======================================
ROM:1768
ROM:1768
ROM:1768          sub_1768:                               ; CODE XREF: sub_251E:loc_2565↓p
ROM:1768                                                  ; sub_251E:loc_2582↓p
ROM:1768 F5                       push    af              ; Push register pair onto stack
ROM:1769 3A 1B 42                 ld      a, (byte_421B)  ; Move o1 <- o2
ROM:176C 32 BF 40                 ld      (byte_40BF), a  ; Move o1 <- o2
ROM:176F F1                       pop     af              ; Pop register pair from stack
ROM:1770 C9                       ret                     ; Return (cond & uncond)
ROM:1770
ROM:1770          ; End of function sub_1768
ROM:1770
ROM:1771
ROM:1771          ; =============== S U B R O U T I N E =======================================
ROM:1771
ROM:1771
ROM:1771          sub_1771:                               ; CODE XREF: ROM:25D3↓p
ROM:1771                                                  ; ROM:2E81↓p
ROM:1771
ROM:1771          ; FUNCTION CHUNK AT ROM:1787 SIZE 00000005 BYTES
ROM:1771
ROM:1771 0E 07                    ld      c, 7            ; Move o1 <- o2
ROM:1773 18 12                    jr      loc_1787        ; Jump relative (conditional & unconditional)
ROM:1773
ROM:1773          ; End of function sub_1771
ROM:1773
ROM:1775
ROM:1775          ; =============== S U B R O U T I N E =======================================
ROM:1775
ROM:1775
ROM:1775          sub_1775:                               ; CODE XREF: sub_25D9+15↓p
ROM:1775                                                  ; sub_2EDB+2C↓p
ROM:1775 0E 07                    ld      c, 7            ; Move o1 <- o2
ROM:1777 18 3F                    jr      sub_17B8        ; Jump relative (conditional & unconditional)
ROM:1777
ROM:1777          ; End of function sub_1775
ROM:1777
ROM:1779
ROM:1779          ; =============== S U B R O U T I N E =======================================
ROM:1779
ROM:1779
ROM:1779          sub_1779:                               ; CODE XREF: ROM:2A9E↓p
ROM:1779                                                  ; sub_2BED↓p
ROM:1779 21 5B 41                 ld      hl, 415Bh       ; Move o1 <- o2
ROM:177C CB 76                    bit     6, (hl)         ; Test <bit> in operand
ROM:177E C9                       ret                     ; Return (cond & uncond)
ROM:177E
ROM:177E          ; End of function sub_1779
ROM:177E
ROM:177F
ROM:177F          ; =============== S U B R O U T I N E =======================================
ROM:177F
ROM:177F
ROM:177F          sub_177F:                               ; CODE XREF: ROM:2A57↓p
ROM:177F 21 5B 41                 ld      hl, 415Bh       ; Move o1 <- o2
ROM:1782 CB F6                    set     6, (hl)         ; Set bit
ROM:1784 C9                       ret                     ; Return (cond & uncond)
ROM:1784
ROM:1784          ; End of function sub_177F
ROM:1784
ROM:1785
ROM:1785          ; =============== S U B R O U T I N E =======================================
ROM:1785
ROM:1785
ROM:1785          sub_1785:                               ; CODE XREF: ROM:loc_2A5A↓p
ROM:1785 0E 09                    ld      c, 9            ; Move o1 <- o2
ROM:1785
ROM:1785          ; End of function sub_1785
ROM:1785
ROM:1787          ; START OF FUNCTION CHUNK FOR sub_173B
ROM:1787          ;   ADDITIONAL PARENT FUNCTION sub_1749
ROM:1787          ;   ADDITIONAL PARENT FUNCTION sub_1771
ROM:1787
ROM:1787          loc_1787:                               ; CODE XREF: sub_173B:loc_173D↑j
ROM:1787                                                  ; sub_1749+D↑j ...
ROM:1787 F5                       push    af              ; Push register pair onto stack
ROM:1788 3E 83                    ld      a, 83h          ; Move o1 <- o2
ROM:178A 18 2F                    jr      loc_17BB        ; Jump relative (conditional & unconditional)
ROM:178A
ROM:178A          ; END OF FUNCTION CHUNK FOR sub_173B
ROM:178C
ROM:178C          ; =============== S U B R O U T I N E =======================================
ROM:178C
ROM:178C
ROM:178C          sub_178C:                               ; CODE XREF: sub_2BED:loc_2C1D↓p
ROM:178C                                                  ; sub_2BED:loc_2C42↓p
ROM:178C 21 5B 41                 ld      hl, 415Bh       ; Move o1 <- o2
ROM:178F CB B6                    res     6, (hl)         ; Reset bit
ROM:1791 CB 6E                    bit     5, (hl)         ; Test <bit> in operand
ROM:1793 C0                       ret     nz              ; Return (cond & uncond)
ROM:1794 0E 09                    ld      c, 9            ; Move o1 <- o2
ROM:1796 18 20                    jr      sub_17B8        ; Jump relative (conditional & unconditional)
ROM:1796
ROM:1796          ; End of function sub_178C
ROM:1796
ROM:1798
ROM:1798          ; =============== S U B R O U T I N E =======================================
ROM:1798
ROM:1798
ROM:1798          set_4157_b4_to_1:                       ; CODE XREF: sub_251E+A↓p
ROM:1798                                                  ; Display_copy_419D_to40AC+7↓p ...
ROM:1798 21 57 41                 ld      hl, 4157h       ; Move o1 <- o2
ROM:179B CB 66                    bit     4, (hl)         ; Test <bit> in operand
ROM:179D C9                       ret                     ; Return (cond & uncond)
ROM:179D
ROM:179D          ; End of function set_4157_b4_to_1
ROM:179D
ROM:179E          ; ---------------------------------------------------------------------------
ROM:179E          ; START OF FUNCTION CHUNK FOR sub_2CFE
ROM:179E
ROM:179E          loc_179E:                               ; CODE XREF: sub_2CFE-85↓j
ROM:179E 21 57 41                 ld      hl, 4157h       ; Move o1 <- o2
ROM:17A1 CB E6                    set     4, (hl)         ; Set bit
ROM:17A3 0E 0A                    ld      c, 0Ah          ; Move o1 <- o2
ROM:17A5 3E 9B                    ld      a, 9Bh          ; Move o1 <- o2
ROM:17A7 F5                       push    af              ; Push register pair onto stack
ROM:17A8 18 11                    jr      loc_17BB        ; Jump relative (conditional & unconditional)
ROM:17A8
ROM:17A8          ; END OF FUNCTION CHUNK FOR sub_2CFE
ROM:17AA
ROM:17AA          ; =============== S U B R O U T I N E =======================================
ROM:17AA
ROM:17AA
ROM:17AA          sub_17AA:                               ; CODE XREF: sub_1AA8+45↓p
ROM:17AA                                                  ; sub_28CD+554↓j ...
ROM:17AA 21 57 41                 ld      hl, 4157h       ; Move o1 <- o2
ROM:17AD CB BE                    res     7, (hl)         ; Reset bit
ROM:17AF CB A6                    res     4, (hl)         ; Reset bit
ROM:17B1 0E 0A                    ld      c, 0Ah          ; Move o1 <- o2
ROM:17B3 CD B8 17                 call    sub_17B8        ; call (cond & uncond)
ROM:17B3
ROM:17B6 0E 0B                    ld      c, 0Bh          ; Move o1 <- o2
ROM:17B6
ROM:17B6          ; End of function sub_17AA
ROM:17B6
ROM:17B8
ROM:17B8          ; =============== S U B R O U T I N E =======================================
ROM:17B8
ROM:17B8
ROM:17B8          sub_17B8:                               ; CODE XREF: sub_173F:loc_1741↑j
ROM:17B8                                                  ; sub_1758+D↑p ...
ROM:17B8 F5                       push    af              ; Push register pair onto stack
ROM:17B9 3E 0F                    ld      a, 0Fh          ; Move o1 <- o2
ROM:17B9
ROM:17BB
ROM:17BB          loc_17BB:                               ; CODE XREF: sub_173B+4F↑j
ROM:17BB                                                  ; sub_2CFE-1556↑j
ROM:17BB 06 00                    ld      b, 0            ; Move o1 <- o2
ROM:17BD 21 91 41                 ld      hl, 4191h       ; Move o1 <- o2
ROM:17C0 09                       add     hl, bc          ; Add <reg> to A
ROM:17C1 77                       ld      (hl), a         ; Move o1 <- o2
ROM:17C2 F1                       pop     af              ; Pop register pair from stack
ROM:17C3 C3 94 26                 jp      sub_2694        ; Jump (conditional & unconditional)
ROM:17C3
ROM:17C3          ; End of function sub_17B8
ROM:17C3
ROM:17C3          ; ---------------------------------------------------------------------------
ROM:17C6 90                       db  90h
ROM:17C7 34                       db  34h ; 4
ROM:17C8 2A                       db  2Ah ; *
ROM:17C9 8B                       db  8Bh
ROM:17CA 39                       db  39h ; 9
ROM:17CB 2A                       db  2Ah ; *
ROM:17CC 8C                       db  8Ch
ROM:17CD 3E                       db  3Eh ; >
ROM:17CE 2A                       db  2Ah ; *
ROM:17CF 9D                       db  9Dh
ROM:17D0 0F                       db  0Fh
ROM:17D1 2B                       db  2Bh ; +
ROM:17D2 8E                       db  8Eh
ROM:17D3 9A                       db  9Ah
ROM:17D4 2B                       db  2Bh ; +
ROM:17D5 90                       db  90h
ROM:17D6 81                       db  81h
ROM:17D7 2A                       db  2Ah ; *
ROM:17D8 8B                       db  8Bh
ROM:17D9 D2                       db 0D2h
ROM:17DA 2A                       db  2Ah ; *
ROM:17DB 8C                       db  8Ch
ROM:17DC E4                       db 0E4h
ROM:17DD 2A                       db  2Ah ; *
ROM:17DE 9D                       db  9Dh
ROM:17DF 07                       db    7
ROM:17E0 2B                       db  2Bh ; +
ROM:17E1 8E                       db  8Eh
ROM:17E2 92                       db  92h
ROM:17E3 2B                       db  2Bh ; +
ROM:17E4
ROM:17E4          ; =============== S U B R O U T I N E =======================================
ROM:17E4
ROM:17E4
ROM:17E4          sub_17E4:                               ; CODE XREF: sub_17E4+2F↓j
ROM:17E4                                                  ; sub_1EB2+E↓p
ROM:17E4
ROM:17E4          ; FUNCTION CHUNK AT ROM:201F SIZE 00000009 BYTES
ROM:17E4
ROM:17E4 3E B6                    ld      a, 0B6h         ; Move o1 <- o2
ROM:17E6 CD 41 27                 call    sub_2741        ; call (cond & uncond)
ROM:17E6
ROM:17E9 36 2B                    ld      (hl), 2Bh ; '+' ; Move o1 <- o2
ROM:17EB 23                       inc     hl              ; Increment operand
ROM:17EC 3A 72 40                 ld      a, (byte_4072)  ; Move o1 <- o2
ROM:17EF CB 67                    bit     4, a            ; Test <bit> in operand
ROM:17F1 F5                       push    af              ; Push register pair onto stack
ROM:17F2 20 02                    jr      nz, loc_17F6    ; Jump relative (conditional & unconditional)
ROM:17F2
ROM:17F4 36 B4                    ld      (hl), 0B4h      ; Move o1 <- o2
ROM:17F4
ROM:17F6
ROM:17F6          loc_17F6:                               ; CODE XREF: sub_17E4+E↑j
ROM:17F6 CD B1 26                 call    Display_copy_419D_to40AC ; call (cond & uncond)
ROM:17F6
ROM:17F9 F1                       pop     af              ; Pop register pair from stack
ROM:17FA 20 0E                    jr      nz, loc_180A    ; Jump relative (conditional & unconditional)
ROM:17FA
ROM:17FC 3E 8E                    ld      a, 8Eh          ; Move o1 <- o2
ROM:17FE DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:17FE                                                  ; A - if < 10h is 0000xxxx read mask
ROM:17FE                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:17FE                                                  ;         A[5:3] - bit index for...
ROM:17FE                                                  ;         A[2:0] - bit index for...
ROM:17FE                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:17FE
ROM:17FF 28 09                    jr      z, loc_180A     ; Jump relative (conditional & unconditional)
ROM:17FF
ROM:1801 CD F7 12                 call    sub_12F7        ; call (cond & uncond)
ROM:1801
ROM:1804
ROM:1804          loc_1804:                               ; CODE XREF: ROM:25D6↓p
ROM:1804 CD BC 10                 call    sub_10BC        ; call (cond & uncond)
ROM:1804
ROM:1807 C3 1F 20                 jp      loc_201F        ; Jump (conditional & unconditional)
ROM:1807
ROM:180A          ; ---------------------------------------------------------------------------
ROM:180A
ROM:180A          loc_180A:                               ; CODE XREF: sub_17E4+16↑j
ROM:180A                                                  ; sub_17E4+1B↑j
ROM:180A 3E 9C                    ld      a, 9Ch          ; Move o1 <- o2
ROM:180C DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:180C                                                  ; A - if < 10h is 0000xxxx read mask
ROM:180C                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:180C                                                  ;         A[5:3] - bit index for...
ROM:180C                                                  ;         A[2:0] - bit index for...
ROM:180C                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:180C
ROM:180D C2 59 1F                 jp      nz, loc_1F59    ; Jump (conditional & unconditional)
ROM:180D
ROM:1810 3E 82                    ld      a, 82h          ; Move o1 <- o2
ROM:1812 DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:1812                                                  ; A - if < 10h is 0000xxxx read mask
ROM:1812                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:1812                                                  ;         A[5:3] - bit index for...
ROM:1812                                                  ;         A[2:0] - bit index for...
ROM:1812                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:1812
ROM:1813 20 CF                    jr      nz, sub_17E4    ; Jump relative (conditional & unconditional)
ROM:1813
ROM:1815 3E B6                    ld      a, 0B6h         ; Move o1 <- o2
ROM:1817 CD 41 27                 call    sub_2741        ; call (cond & uncond)
ROM:1817
ROM:181A 36 0B                    ld      (hl), 0Bh       ; Move o1 <- o2
ROM:181C 23                       inc     hl              ; Increment operand
ROM:181D 36 04                    ld      (hl), 4         ; Move o1 <- o2
ROM:181F 3E 75                    ld      a, 75h ; 'u'    ; Move o1 <- o2
ROM:1821 21 DC 22                 ld      hl, 22DCh       ; Move o1 <- o2
ROM:1824 CD 58 27                 call    sub_2758        ; call (cond & uncond)
ROM:1824
ROM:1827 3E 76                    ld      a, 76h ; 'v'    ; Move o1 <- o2
ROM:1829 21 E0 22                 ld      hl, 22E0h       ; Move o1 <- o2
ROM:182C 18 2E                    jr      loc_185C        ; Jump relative (conditional & unconditional)
ROM:182C
ROM:182C          ; End of function sub_17E4
ROM:182C
ROM:182E
ROM:182E          ; =============== S U B R O U T I N E =======================================
ROM:182E
ROM:182E
ROM:182E          sub_182E:                               ; CODE XREF: sub_34CA+A8↓p
ROM:182E                                                  ; sub_3607-1D↓j
ROM:182E
ROM:182E          ; FUNCTION CHUNK AT ROM:2722 SIZE 0000001F BYTES
ROM:182E
ROM:182E CD 61 27                 call    Array_41A9_refil ; Return DE as address after last
ROM:182E
ROM:1831 21 E0 00                 ld      hl, 0E0h        ; Move o1 <- o2
ROM:1834 01 15 00                 ld      bc, 15h         ; Move o1 <- o2
ROM:1837 ED B0                    ldir                    ; Transfer data (DE)->(HL) until byte
ROM:1837                                                  ; counter is zero, increment destination
ROM:1837                                                  ; and source addresses
ROM:1839 CD FE 26                 call    Display_Clear_419D ; call (cond & uncond)
ROM:1839
ROM:183C EB                       ex      de, hl          ; Exchange operands
ROM:183D 21 F5 00                 ld      hl, 0F5h        ; Move o1 <- o2
ROM:1840 01 07 00                 ld      bc, 7           ; Move o1 <- o2
ROM:1843 ED B0                    ldir                    ; Transfer data (DE)->(HL) until byte
ROM:1843                                                  ; counter is zero, increment destination
ROM:1843                                                  ; and source addresses
ROM:1845 CD 97 2D                 call    sub_2D97        ; call (cond & uncond)
ROM:1845
ROM:1848 18 15                    jr      loc_185F        ; Jump relative (conditional & unconditional)
ROM:1848
ROM:184A          ; ---------------------------------------------------------------------------
ROM:184A
ROM:184A          loc_184A:                               ; CODE XREF: ROM:1869↓j
ROM:184A                                                  ; ROM:186D↓j
ROM:184A 3E BC                    ld      a, 0BCh         ; Move o1 <- o2
ROM:184C CD 41 27                 call    sub_2741        ; call (cond & uncond)
ROM:184C
ROM:184F 3A 82 40                 ld      a, (byte_4082)  ; Move o1 <- o2
ROM:1852 D6 31                    sub     31h ; '1'       ; Subtract from A
ROM:1854 C6 BD                    add     a, 0BDh         ; Add <reg> to A
ROM:1856 77                       ld      (hl), a         ; Move o1 <- o2
ROM:1857 3E 88                    ld      a, 88h          ; Move o1 <- o2
ROM:1859 21 62 18                 ld      hl, 1862h       ; Move o1 <- o2
ROM:1859
ROM:185C
ROM:185C          loc_185C:                               ; CODE XREF: sub_17E4+48↑j
ROM:185C                                                  ; ROM:188B↓j ...
ROM:185C CD 58 27                 call    sub_2758        ; call (cond & uncond)
ROM:185C
ROM:185F
ROM:185F          loc_185F:                               ; CODE XREF: sub_182E+1A↑j
ROM:185F C3 22 27                 jp      loc_2722        ; Jump (conditional & unconditional)
ROM:185F
ROM:185F          ; End of function sub_182E
ROM:185F
ROM:1862          ; ---------------------------------------------------------------------------
ROM:1862 21 82 40                 ld      hl, 4082h       ; Move o1 <- o2
ROM:1865 34                       inc     (hl)            ; Increment operand
ROM:1866 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:1867 FE 34                    cp      34h ; '4'       ; Compare with accumulator
ROM:1869 20 DF                    jr      nz, loc_184A    ; Jump relative (conditional & unconditional)
ROM:1869
ROM:186B 36 31                    ld      (hl), 31h ; '1' ; Move o1 <- o2
ROM:186D 18 DB                    jr      loc_184A        ; Jump relative (conditional & unconditional)
ROM:186D
ROM:186F          ; ---------------------------------------------------------------------------
ROM:186F
ROM:186F          loc_186F:                               ; CODE XREF: ROM:1DBD↓j
ROM:186F 3E 03                    ld      a, 3            ; Move o1 <- o2
ROM:1871 CD 41 27                 call    sub_2741        ; call (cond & uncond)
ROM:1871
ROM:1874 06 AB                    ld      b, 0ABh         ; Move o1 <- o2
ROM:1876 3A BF 40                 ld      a, (byte_40BF)  ; Move o1 <- o2
ROM:1879 E6 07                    and     7               ; And with accumulator
ROM:187B FE 07                    cp      7               ; Compare with accumulator
ROM:187D 28 06                    jr      z, loc_1885     ; Jump relative (conditional & unconditional)
ROM:187D
ROM:187F
ROM:187F          loc_187F:                               ; CODE XREF: ROM:1883↓j
ROM:187F 1F                       rra                     ; Rotate right through carry accumulator
ROM:1880 05                       dec     b               ; Decrement operand
ROM:1881 38 02                    jr      c, loc_1885     ; Jump relative (conditional & unconditional)
ROM:1881
ROM:1883 18 FA                    jr      loc_187F        ; Jump relative (conditional & unconditional)
ROM:1883
ROM:1885          ; ---------------------------------------------------------------------------
ROM:1885
ROM:1885          loc_1885:                               ; CODE XREF: ROM:187D↑j
ROM:1885                                                  ; ROM:1881↑j
ROM:1885 70                       ld      (hl), b         ; Move o1 <- o2
ROM:1886 3E 89                    ld      a, 89h          ; Move o1 <- o2
ROM:1888 21 99 1D                 ld      hl, 1D99h       ; Move o1 <- o2
ROM:188B 18 CF                    jr      loc_185C        ; Jump relative (conditional & unconditional)
ROM:188B
ROM:188D          ; ---------------------------------------------------------------------------
ROM:188D
ROM:188D          loc_188D:                               ; CODE XREF: ROM:loc_1DCB↓j
ROM:188D 3E B8                    ld      a, 0B8h         ; Move o1 <- o2
ROM:188F CD 41 27                 call    sub_2741        ; call (cond & uncond)
ROM:188F
ROM:1892 06 8A                    ld      b, 8Ah          ; Move o1 <- o2
ROM:1894 3A 71 40                 ld      a, (byte_4071)  ; Bit 4: Set: BB8
ROM:1897 1F                       rra                     ; Rotate right through carry accumulator
ROM:1898 38 02                    jr      c, loc_189C     ; Jump relative (conditional & unconditional)
ROM:1898
ROM:189A 06 9A                    ld      b, 9Ah          ; Move o1 <- o2
ROM:189A
ROM:189C
ROM:189C          loc_189C:                               ; CODE XREF: ROM:1898↑j
ROM:189C 70                       ld      (hl), b         ; Move o1 <- o2
ROM:189D 3E 90                    ld      a, 90h          ; Move o1 <- o2
ROM:189F 21 C0 1D                 ld      hl, 1DC0h       ; Move o1 <- o2
ROM:189F
ROM:18A2
ROM:18A2          loc_18A2:                               ; CODE XREF: ROM:18C6↓j
ROM:18A2                                                  ; ROM:18E4↓j ...
ROM:18A2 18 B8                    jr      loc_185C        ; Jump relative (conditional & unconditional)
ROM:18A2
ROM:18A4          ; ---------------------------------------------------------------------------
ROM:18A4
ROM:18A4          loc_18A4:                               ; CODE XREF: ROM:1DEC↓j
ROM:18A4 CD 9B 1F                 call    loc_1F9B        ; call (cond & uncond)
ROM:18A4
ROM:18A7 3E 94                    ld      a, 94h          ; Move o1 <- o2
ROM:18A9 CD 41 27                 call    sub_2741        ; call (cond & uncond)
ROM:18A9
ROM:18AC D5                       push    de              ; Push register pair onto stack
ROM:18AD EB                       ex      de, hl          ; Exchange operands
ROM:18AE 21 15 01                 ld      hl, 115h        ; Move o1 <- o2
ROM:18B1 3A 6B 40                 ld      a, (usart_bvar4_0) ; Move o1 <- o2
ROM:18B4 CB 57                    bit     2, a            ; Test <bit> in operand
ROM:18B6 28 03                    jr      z, loc_18BB     ; Jump relative (conditional & unconditional)
ROM:18B6
ROM:18B8 21 88 01                 ld      hl, 188h        ; Move o1 <- o2
ROM:18B8
ROM:18BB
ROM:18BB          loc_18BB:                               ; CODE XREF: ROM:18B6↑j
ROM:18BB 01 03 00                 ld      bc, 3           ; Move o1 <- o2
ROM:18BE ED B0                    ldir                    ; Transfer data (DE)->(HL) until byte
ROM:18BE                                                  ; counter is zero, increment destination
ROM:18BE                                                  ; and source addresses
ROM:18C0 D1                       pop     de              ; Pop register pair from stack
ROM:18C1 3E 8E                    ld      a, 8Eh          ; Move o1 <- o2
ROM:18C3 21 CE 1D                 ld      hl, 1DCEh       ; Move o1 <- o2
ROM:18C6 18 DA                    jr      loc_18A2        ; Jump relative (conditional & unconditional)
ROM:18C6
ROM:18C8          ; ---------------------------------------------------------------------------
ROM:18C8
ROM:18C8          loc_18C8:                               ; CODE XREF: ROM:36DA↓j
ROM:18C8 3E BA                    ld      a, 0BAh         ; Move o1 <- o2
ROM:18CA CD 41 27                 call    sub_2741        ; call (cond & uncond)
ROM:18CA
ROM:18CD E5                       push    hl              ; Push register pair onto stack
ROM:18CE CD B7 16                 call    test_4068_b1    ; call (cond & uncond)
ROM:18CE
ROM:18D1
ROM:18D1          loc_18D1:                               ; CODE XREF: ROM:18EF↓j
ROM:18D1 E1                       pop     hl              ; Pop register pair from stack
ROM:18D2 20 02                    jr      nz, loc_18D6    ; Jump relative (conditional & unconditional)
ROM:18D2
ROM:18D4 3E 0F                    ld      a, 0Fh          ; Move o1 <- o2
ROM:18D4
ROM:18D6
ROM:18D6          loc_18D6:                               ; CODE XREF: ROM:18D2↑j
ROM:18D6 77                       ld      (hl), a         ; Move o1 <- o2
ROM:18D7 3E 9D                    ld      a, 9Dh          ; Move o1 <- o2
ROM:18D9 21 CC 36                 ld      hl, 36CCh       ; Move o1 <- o2
ROM:18DC CD 58 27                 call    sub_2758        ; call (cond & uncond)
ROM:18DC
ROM:18DF 3E 8C                    ld      a, 8Ch          ; Move o1 <- o2
ROM:18E1 21 98 36                 ld      hl, 3698h       ; Move o1 <- o2
ROM:18E4 18 BC                    jr      loc_18A2        ; Jump relative (conditional & unconditional)
ROM:18E4
ROM:18E6          ; ---------------------------------------------------------------------------
ROM:18E6
ROM:18E6          loc_18E6:                               ; CODE XREF: ROM:loc_36AA↓j
ROM:18E6 3E BB                    ld      a, 0BBh         ; Move o1 <- o2
ROM:18E8 CD 41 27                 call    sub_2741        ; call (cond & uncond)
ROM:18E8
ROM:18EB E5                       push    hl              ; Push register pair onto stack
ROM:18EC CD C9 16                 call    test_4068_b0    ; call (cond & uncond)
ROM:18EC
ROM:18EF 18 E0                    jr      loc_18D1        ; Jump relative (conditional & unconditional)
ROM:18EF
ROM:18F1          ; ---------------------------------------------------------------------------
ROM:18F1
ROM:18F1          loc_18F1:                               ; CODE XREF: ROM:190F↓j
ROM:18F1                                                  ; ROM:1914↓j
ROM:18F1 3E 88                    ld      a, 88h          ; Move o1 <- o2
ROM:18F3 CD 41 27                 call    sub_2741        ; call (cond & uncond)
ROM:18F3
ROM:18F6 E5                       push    hl              ; Push register pair onto stack
ROM:18F7 CD 43 17                 call    sub_1743        ; call (cond & uncond)
ROM:18F7
ROM:18FA E1                       pop     hl              ; Pop register pair from stack
ROM:18FB 20 02                    jr      nz, loc_18FF    ; Jump relative (conditional & unconditional)
ROM:18FB
ROM:18FD 3E 0F                    ld      a, 0Fh          ; Move o1 <- o2
ROM:18FD
ROM:18FF
ROM:18FF          loc_18FF:                               ; CODE XREF: ROM:18FB↑j
ROM:18FF 77                       ld      (hl), a         ; Move o1 <- o2
ROM:1900 3E 8B                    ld      a, 8Bh          ; Move o1 <- o2
ROM:1902 21 07 19                 ld      hl, 1907h       ; Move o1 <- o2
ROM:1905 18 9B                    jr      loc_18A2        ; Jump relative (conditional & unconditional)
ROM:1905
ROM:1907          ; ---------------------------------------------------------------------------
ROM:1907 CD 43 17                 call    sub_1743        ; call (cond & uncond)
ROM:1907
ROM:190A 28 05                    jr      z, loc_1911     ; Jump relative (conditional & unconditional)
ROM:190A
ROM:190C CD 58 17                 call    sub_1758        ; call (cond & uncond)
ROM:190C
ROM:190F 18 E0                    jr      loc_18F1        ; Jump relative (conditional & unconditional)
ROM:190F
ROM:1911          ; ---------------------------------------------------------------------------
ROM:1911
ROM:1911          loc_1911:                               ; CODE XREF: ROM:190A↑j
ROM:1911 CD 49 17                 call    sub_1749        ; call (cond & uncond)
ROM:1911
ROM:1914 18 DB                    jr      loc_18F1        ; Jump relative (conditional & unconditional)
ROM:1914
ROM:1916          ; ---------------------------------------------------------------------------
ROM:1916
ROM:1916          loc_1916:                               ; CODE XREF: ROM:2A31↓j
ROM:1916 E5                       push    hl              ; Push register pair onto stack
ROM:1917 CD 41 27                 call    sub_2741        ; call (cond & uncond)
ROM:1917
ROM:191A 3A 58 41                 ld      a, (byte_4158)  ; Move o1 <- o2
ROM:191D CB 4F                    bit     1, a            ; Test <bit> in operand
ROM:191F 3E 10                    ld      a, 10h          ; Move o1 <- o2
ROM:1921 20 11                    jr      nz, loc_1934    ; Jump relative (conditional & unconditional)
ROM:1921
ROM:1923 3A 5B 41                 ld      a, (byte_415B)  ; Move o1 <- o2
ROM:1926 CB 6F                    bit     5, a            ; Test <bit> in operand
ROM:1928 28 02                    jr      z, loc_192C     ; Jump relative (conditional & unconditional)
ROM:1928
ROM:192A F6 07                    or      7               ; Or with accumulator
ROM:192A
ROM:192C
ROM:192C          loc_192C:                               ; CODE XREF: ROM:1928↑j
ROM:192C E6 C7                    and     0C7h            ; And with accumulator
ROM:192E 4F                       ld      c, a            ; Move o1 <- o2
ROM:192F 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:1930 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:1931 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:1932 B1                       or      c               ; Or with accumulator
ROM:1933 2F                       cpl                     ; Complement the accumulator
ROM:1933
ROM:1934
ROM:1934          loc_1934:                               ; CODE XREF: ROM:1921↑j
ROM:1934                                                  ; ROM:195E↓j
ROM:1934 06 05                    ld      b, 5            ; Move o1 <- o2
ROM:1936 0E B0                    ld      c, 0B0h         ; Move o1 <- o2
ROM:1936
ROM:1938
ROM:1938          loc_1938:                               ; CODE XREF: ROM:194E↓j
ROM:1938 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:1939 30 0C                    jr      nc, loc_1947    ; Jump relative (conditional & unconditional)
ROM:1939
ROM:193B 71                       ld      (hl), c         ; Move o1 <- o2
ROM:193C E3                       ex      (sp), hl        ; Exchange operands
ROM:193D E5                       push    hl              ; Push register pair onto stack
ROM:193E C5                       push    bc              ; Push register pair onto stack
ROM:193F 01 03 00                 ld      bc, 3           ; Move o1 <- o2
ROM:1942 ED B0                    ldir                    ; Transfer data (DE)->(HL) until byte
ROM:1942                                                  ; counter is zero, increment destination
ROM:1942                                                  ; and source addresses
ROM:1944 C1                       pop     bc              ; Pop register pair from stack
ROM:1945 E1                       pop     hl              ; Pop register pair from stack
ROM:1946 E3                       ex      (sp), hl        ; Exchange operands
ROM:1946
ROM:1947
ROM:1947          loc_1947:                               ; CODE XREF: ROM:1939↑j
ROM:1947 23                       inc     hl              ; Increment operand
ROM:1948 E3                       ex      (sp), hl        ; Exchange operands
ROM:1949 23                       inc     hl              ; Increment operand
ROM:194A 23                       inc     hl              ; Increment operand
ROM:194B 23                       inc     hl              ; Increment operand
ROM:194C E3                       ex      (sp), hl        ; Exchange operands
ROM:194D 0C                       inc     c               ; Increment operand
ROM:194E 10 E8                    djnz    loc_1938        ; Decrement reg B and jump relative if zero
ROM:194E
ROM:1950 CD 97 2D                 call    sub_2D97        ; call (cond & uncond)
ROM:1950
ROM:1953 18 38                    jr      loc_198D        ; Jump relative (conditional & unconditional)
ROM:1953
ROM:1955          ; ---------------------------------------------------------------------------
ROM:1955
ROM:1955          loc_1955:                               ; CODE XREF: ROM:2AC5↓j
ROM:1955 E5                       push    hl              ; Push register pair onto stack
ROM:1956 CD 41 27                 call    sub_2741        ; call (cond & uncond)
ROM:1956
ROM:1959 3A 5B 41                 ld      a, (byte_415B)  ; Move o1 <- o2
ROM:195C F6 18                    or      18h             ; Or with accumulator
ROM:195E 18 D4                    jr      loc_1934        ; Jump relative (conditional & unconditional)
ROM:195E
ROM:1960          ; ---------------------------------------------------------------------------
ROM:1960
ROM:1960          loc_1960:                               ; CODE XREF: ROM:loc_2B0C↓j
ROM:1960 22 30 42                 ld      (word_4230), hl ; Move o1 <- o2
ROM:1963 3E B3                    ld      a, 0B3h         ; Move o1 <- o2
ROM:1965 CD 41 27                 call    sub_2741        ; call (cond & uncond)
ROM:1965
ROM:1968 E5                       push    hl              ; Push register pair onto stack
ROM:1969 21 44 42                 ld      hl, 4244h       ; Move o1 <- o2
ROM:196C 06 0A                    ld      b, 0Ah          ; Move o1 <- o2
ROM:196C
ROM:196E
ROM:196E          loc_196E:                               ; CODE XREF: ROM:198B↓j
ROM:196E 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:196F E3                       ex      (sp), hl        ; Exchange operands
ROM:1970 07                       rlca                    ; Rotate left accumulator
ROM:1971 CB 41                    bit     0, c            ; Test <bit> in operand
ROM:1973 28 01                    jr      z, loc_1976     ; Jump relative (conditional & unconditional)
ROM:1973
ROM:1975 3F                       ccf                     ; Complement carry flag
ROM:1975
ROM:1976
ROM:1976          loc_1976:                               ; CODE XREF: ROM:1973↑j
ROM:1976 38 0E                    jr      c, loc_1986     ; Jump relative (conditional & unconditional)
ROM:1976
ROM:1978 1F                       rra                     ; Rotate right through carry accumulator
ROM:1979 CD 4F 27                 call    sub_274F        ; call (cond & uncond)
ROM:1979
ROM:197C 78                       ld      a, b            ; Move o1 <- o2
ROM:197D 3D                       dec     a               ; Decrement operand
ROM:197E 3E 3B                    ld      a, 3Bh ; ';'    ; Move o1 <- o2
ROM:1980 20 02                    jr      nz, loc_1984    ; Jump relative (conditional & unconditional)
ROM:1980
ROM:1982 D6 0A                    sub     0Ah             ; Subtract from A
ROM:1982
ROM:1984
ROM:1984          loc_1984:                               ; CODE XREF: ROM:1980↑j
ROM:1984 90                       sub     b               ; Subtract from A
ROM:1985 77                       ld      (hl), a         ; Move o1 <- o2
ROM:1985
ROM:1986
ROM:1986          loc_1986:                               ; CODE XREF: ROM:loc_1976↑j
ROM:1986 23                       inc     hl              ; Increment operand
ROM:1987 E3                       ex      (sp), hl        ; Exchange operands
ROM:1988 CD 34 28                 call    sub_2834        ; call (cond & uncond)
ROM:1988
ROM:198B 10 E1                    djnz    loc_196E        ; Decrement reg B and jump relative if zero
ROM:198B
ROM:198D
ROM:198D          loc_198D:                               ; CODE XREF: ROM:1953↑j
ROM:198D 18 2B                    jr      loc_19BA        ; Jump relative (conditional & unconditional)
ROM:198D
ROM:198F          ; ---------------------------------------------------------------------------
ROM:198F          ; START OF FUNCTION CHUNK FOR sub_2BA1
ROM:198F
ROM:198F          loc_198F:                               ; CODE XREF: sub_2BA1:loc_2B97↓j
ROM:198F 22 30 42                 ld      (word_4230), hl ; Move o1 <- o2
ROM:1992 3E B4                    ld      a, 0B4h         ; Move o1 <- o2
ROM:1994 CD 41 27                 call    sub_2741        ; call (cond & uncond)
ROM:1994
ROM:1997 E5                       push    hl              ; Push register pair onto stack
ROM:1998 DD 2A 79                 ld      ix, (word_4179) ; Move o1 <- o2
ROM:1998 41
ROM:199C 3A 5C 41                 ld      a, (byte_415C)  ; Move o1 <- o2
ROM:199F 06 04                    ld      b, 4            ; Move o1 <- o2
ROM:199F
ROM:19A1
ROM:19A1          loc_19A1:                               ; CODE XREF: sub_2BA1-11E9↓j
ROM:19A1 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:19A2 CB 41                    bit     0, c            ; Test <bit> in operand
ROM:19A4 28 01                    jr      z, loc_19A7     ; Jump relative (conditional & unconditional)
ROM:19A4
ROM:19A6 3F                       ccf                     ; Complement carry flag
ROM:19A6
ROM:19A7
ROM:19A7          loc_19A7:                               ; CODE XREF: sub_2BA1-11FD↑j
ROM:19A7 38 0C                    jr      c, loc_19B5     ; Jump relative (conditional & unconditional)
ROM:19A7
ROM:19A9 F5                       push    af              ; Push register pair onto stack
ROM:19AA DD 7E 00                 ld      a, (ix+0)       ; Move o1 <- o2
ROM:19AD CD 4F 27                 call    sub_274F        ; call (cond & uncond)
ROM:19AD
ROM:19B0 3E 35                    ld      a, 35h ; '5'    ; Move o1 <- o2
ROM:19B2 90                       sub     b               ; Subtract from A
ROM:19B3 77                       ld      (hl), a         ; Move o1 <- o2
ROM:19B4 F1                       pop     af              ; Pop register pair from stack
ROM:19B4
ROM:19B5
ROM:19B5          loc_19B5:                               ; CODE XREF: sub_2BA1:loc_19A7↑j
ROM:19B5 DD 23                    inc     ix              ; Increment operand
ROM:19B7 23                       inc     hl              ; Increment operand
ROM:19B8 10 E7                    djnz    loc_19A1        ; Decrement reg B and jump relative if zero
ROM:19B8
ROM:19BA
ROM:19BA          loc_19BA:                               ; CODE XREF: ROM:loc_198D↑j
ROM:19BA E1                       pop     hl              ; Pop register pair from stack
ROM:19BB C3 22 27                 jp      loc_2722        ; Jump (conditional & unconditional)
ROM:19BB
ROM:19BB          ; END OF FUNCTION CHUNK FOR sub_2BA1
ROM:19BE
ROM:19BE          ; =============== S U B R O U T I N E =======================================
ROM:19BE
ROM:19BE
ROM:19BE          sub_19BE:                               ; CODE XREF: ROM:2A51↓p
ROM:19BE                                                  ; ROM:2AFE↓p ...
ROM:19BE 4F                       ld      c, a            ; Move o1 <- o2
ROM:19BF 21 44 42                 ld      hl, 4244h       ; Move o1 <- o2
ROM:19C2 06 0A                    ld      b, 0Ah          ; Move o1 <- o2
ROM:19C2
ROM:19C4
ROM:19C4          loc_19C4:                               ; CODE XREF: sub_19BE+E↓j
ROM:19C4 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:19C5 CB BF                    res     7, a            ; Reset bit
ROM:19C7 B9                       cp      c               ; Compare with accumulator
ROM:19C8 C8                       ret     z               ; Return (cond & uncond)
ROM:19C9 CD 34 28                 call    sub_2834        ; call (cond & uncond)
ROM:19C9
ROM:19CC 10 F6                    djnz    loc_19C4        ; Decrement reg B and jump relative if zero
ROM:19CC
ROM:19CE
ROM:19CE          loc_19CE:                               ; CODE XREF: ROM:2A63↓p
ROM:19CE                                                  ; ROM:2B87↓p
ROM:19CE DD 21 76                 ld      ix, 4276h       ; Move o1 <- o2
ROM:19CE 42
ROM:19D2 2A 79 41                 ld      hl, (word_4179) ; Move o1 <- o2
ROM:19D5 06 04                    ld      b, 4            ; Move o1 <- o2
ROM:19D5
ROM:19D7
ROM:19D7          loc_19D7:                               ; CODE XREF: sub_19BE+25↓j
ROM:19D7 DD E5                    push    ix              ; Push register pair onto stack
ROM:19D9 11 61 00                 ld      de, 61h ; 'a'   ; Move o1 <- o2
ROM:19DC DD 19                    add     ix, de          ; Add <reg> to A
ROM:19DE BE                       cp      (hl)            ; Compare with accumulator
ROM:19DF 23                       inc     hl              ; Increment operand
ROM:19E0 28 03                    jr      z, loc_19E5     ; Jump relative (conditional & unconditional)
ROM:19E0
ROM:19E2 D1                       pop     de              ; Pop register pair from stack
ROM:19E3 10 F2                    djnz    loc_19D7        ; Decrement reg B and jump relative if zero
ROM:19E3
ROM:19E5
ROM:19E5          loc_19E5:                               ; CODE XREF: sub_19BE+22↑j
ROM:19E5 DD E5                    push    ix              ; Push register pair onto stack
ROM:19E7 E1                       pop     hl              ; Pop register pair from stack
ROM:19E8 D1                       pop     de              ; Pop register pair from stack
ROM:19E9 3E 10                    ld      a, 10h          ; Move o1 <- o2
ROM:19E9
ROM:19EB
ROM:19EB          loc_19EB:                               ; CODE XREF: sub_19BE+2E↓j
ROM:19EB 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:19EC 10 FD                    djnz    loc_19EB        ; Decrement reg B and jump relative if zero
ROM:19EC
ROM:19EE C9                       ret                     ; Return (cond & uncond)
ROM:19EE
ROM:19EE          ; End of function sub_19BE
ROM:19EE
ROM:19EF          ; ---------------------------------------------------------------------------
ROM:19EF          ; START OF FUNCTION CHUNK FOR CleanupMemory
ROM:19EF
ROM:19EF          Start:                                  ; CODE XREF: ROM:0004↑j
ROM:19EF                                                  ; CleanupMemory+8↑j
ROM:19EF CD E0 1E                 call    Setup_all       ; call (cond & uncond)
ROM:19EF
ROM:19F2 20 03                    jr      nz, loc_19F7    ; Jump relative (conditional & unconditional)
ROM:19F2
ROM:19F4
ROM:19F4          loc_19F4:                               ; CODE XREF: CleanupMemory+19AE↓j
ROM:19F4 CD B2 1E                 call    sub_1EB2        ; call (cond & uncond)
ROM:19F4
ROM:19F7
ROM:19F7          loc_19F7:                               ; CODE XREF: CleanupMemory+19A6↑j
ROM:19F7 CD FC 19                 call    sub_19FC        ; call (cond & uncond)
ROM:19F7
ROM:19FA 18 F8                    jr      loc_19F4        ; Jump relative (conditional & unconditional)
ROM:19FA
ROM:19FA          ; END OF FUNCTION CHUNK FOR CleanupMemory
ROM:19FC
ROM:19FC          ; =============== S U B R O U T I N E =======================================
ROM:19FC
ROM:19FC
ROM:19FC          sub_19FC:                               ; CODE XREF: CleanupMemory:loc_19F7↑p
ROM:19FC                                                  ; sub_19FC+24↓j
ROM:19FC CD BC 10                 call    sub_10BC        ; call (cond & uncond)
ROM:19FC
ROM:19FF
ROM:19FF          loc_19FF:                               ; CODE XREF: sub_19FC+22↓j
ROM:19FF CD 94 26                 call    sub_2694        ; call (cond & uncond)
ROM:19FF
ROM:1A02
ROM:1A02          loc_1A02:                               ; CODE XREF: sub_19FC:loc_1A55↓j
ROM:1A02 CD A7 1E                 call    sub_1EA7        ; call (cond & uncond)
ROM:1A02
ROM:1A05 CD CA 34                 call    sub_34CA        ; call (cond & uncond)
ROM:1A05
ROM:1A08 28 08                    jr      z, loc_1A12     ; Jump relative (conditional & unconditional)
ROM:1A08
ROM:1A0A CD B7 16                 call    test_4068_b1    ; call (cond & uncond)
ROM:1A0A
ROM:1A0D C4 07 36                 call    nz, sub_3607    ; call (cond & uncond)
ROM:1A0D
ROM:1A10 18 45                    jr      loc_1A57        ; Jump relative (conditional & unconditional)
ROM:1A10
ROM:1A12          ; ---------------------------------------------------------------------------
ROM:1A12
ROM:1A12          loc_1A12:                               ; CODE XREF: sub_19FC+C↑j
ROM:1A12 EF                       rst     28h             ; Restart at vector <int>
ROM:1A12
ROM:1A13 28 0D                    jr      z, loc_1A22     ; Jump relative (conditional & unconditional)
ROM:1A13
ROM:1A15 CD 7B 1A                 call    sub_1A7B        ; call (cond & uncond)
ROM:1A15
ROM:1A18 CD 9F 0B                 call    sub_B9F         ; call (cond & uncond)
ROM:1A18
ROM:1A1B CD 50 16                 call    sub_1650        ; call (cond & uncond)
ROM:1A1B
ROM:1A1E 20 DF                    jr      nz, loc_19FF    ; Jump relative (conditional & unconditional)
ROM:1A1E
ROM:1A20 18 DA                    jr      sub_19FC        ; Jump relative (conditional & unconditional)
ROM:1A20
ROM:1A22          ; ---------------------------------------------------------------------------
ROM:1A22
ROM:1A22          loc_1A22:                               ; CODE XREF: sub_19FC+17↑j
ROM:1A22 CD 77 16                 call    test_4157_bit3  ; call (cond & uncond)
ROM:1A22
ROM:1A25 28 0F                    jr      z, loc_1A36     ; Jump relative (conditional & unconditional)
ROM:1A25
ROM:1A27 3A 1B 42                 ld      a, (byte_421B)  ; Move o1 <- o2
ROM:1A2A 3C                       inc     a               ; Increment operand
ROM:1A2B CC 49 17                 call    z, sub_1749     ; call (cond & uncond)
ROM:1A2B
ROM:1A2E CD A8 1A                 call    sub_1AA8        ; call (cond & uncond)
ROM:1A2E
ROM:1A31 CD FF 1A                 call    sub_1AFF        ; call (cond & uncond)
ROM:1A31
ROM:1A34 18 21                    jr      loc_1A57        ; Jump relative (conditional & unconditional)
ROM:1A34
ROM:1A36          ; ---------------------------------------------------------------------------
ROM:1A36
ROM:1A36          loc_1A36:                               ; CODE XREF: sub_19FC+29↑j
ROM:1A36                                                  ; sub_19FC+56↓j
ROM:1A36 CD 71 16                 call    rst_4157_bit0   ; call (cond & uncond)
ROM:1A36
ROM:1A39 CD 43 17                 call    sub_1743        ; call (cond & uncond)
ROM:1A39
ROM:1A3C 20 19                    jr      nz, loc_1A57    ; Jump relative (conditional & unconditional)
ROM:1A3C
ROM:1A3E F7                       rst     30h             ; Restart at vector <int>
ROM:1A3E
ROM:1A3F 20 08                    jr      nz, loc_1A49    ; Jump relative (conditional & unconditional)
ROM:1A3F
ROM:1A41 B7                       or      a               ; Or with accumulator
ROM:1A42 28 13                    jr      z, loc_1A57     ; Jump relative (conditional & unconditional)
ROM:1A42
ROM:1A44 F5                       push    af              ; Push register pair onto stack
ROM:1A45 CD BA 1C                 call    sub_1CBA        ; call (cond & uncond)
ROM:1A45
ROM:1A48 F1                       pop     af              ; Pop register pair from stack
ROM:1A48
ROM:1A49
ROM:1A49          loc_1A49:                               ; CODE XREF: sub_19FC+43↑j
ROM:1A49 CD A7 1E                 call    sub_1EA7        ; call (cond & uncond)
ROM:1A49
ROM:1A4C CD 5B 1B                 call    sub_1B5B        ; call (cond & uncond)
ROM:1A4C
ROM:1A4F 3E 71                    ld      a, 71h ; 'q'    ; Move o1 <- o2
ROM:1A51 DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:1A51                                                  ; A - if < 10h is 0000xxxx read mask
ROM:1A51                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:1A51                                                  ;         A[5:3] - bit index for...
ROM:1A51                                                  ;         A[2:0] - bit index for...
ROM:1A51                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:1A51
ROM:1A52 C2 36 1A                 jp      nz, loc_1A36    ; Jump (conditional & unconditional)
ROM:1A52
ROM:1A55
ROM:1A55          loc_1A55:                               ; CODE XREF: sub_19FC+67↓j
ROM:1A55                                                  ; sub_19FC+76↓j ...
ROM:1A55 18 AB                    jr      loc_1A02        ; Jump relative (conditional & unconditional)
ROM:1A55
ROM:1A57          ; ---------------------------------------------------------------------------
ROM:1A57
ROM:1A57          loc_1A57:                               ; CODE XREF: sub_19FC+14↑j
ROM:1A57                                                  ; sub_19FC+38↑j ...
ROM:1A57 CD B7 16                 call    test_4068_b1    ; call (cond & uncond)
ROM:1A57
ROM:1A5A C4 97 35                 call    nz, sub_3597    ; call (cond & uncond)
ROM:1A5A
ROM:1A5D
ROM:1A5D          loc_1A5D:                               ; CODE XREF: sub_19FC+7B↓j
ROM:1A5D CD 12 1D                 call    sub_1D12        ; call (cond & uncond)
ROM:1A5D
ROM:1A60 CD 77 16                 call    test_4157_bit3  ; call (cond & uncond)
ROM:1A60
ROM:1A63 28 F0                    jr      z, loc_1A55     ; Jump relative (conditional & unconditional)
ROM:1A63
ROM:1A65 CD B7 16                 call    test_4068_b1    ; call (cond & uncond)
ROM:1A65
ROM:1A68 28 05                    jr      z, loc_1A6F     ; Jump relative (conditional & unconditional)
ROM:1A68
ROM:1A6A CD CA 1C                 call    sub_1CCA        ; call (cond & uncond)
ROM:1A6A
ROM:1A6D 20 E8                    jr      nz, loc_1A57    ; Jump relative (conditional & unconditional)
ROM:1A6D
ROM:1A6F
ROM:1A6F          loc_1A6F:                               ; CODE XREF: sub_19FC+6C↑j
ROM:1A6F CD 43 17                 call    sub_1743        ; call (cond & uncond)
ROM:1A6F
ROM:1A72 20 E1                    jr      nz, loc_1A55    ; Jump relative (conditional & unconditional)
ROM:1A72
ROM:1A74 CD CF 1C                 call    sub_1CCF        ; call (cond & uncond)
ROM:1A74
ROM:1A77 20 E4                    jr      nz, loc_1A5D    ; Jump relative (conditional & unconditional)
ROM:1A77
ROM:1A79 18 DA                    jr      loc_1A55        ; Jump relative (conditional & unconditional)
ROM:1A79
ROM:1A79          ; End of function sub_19FC
ROM:1A79
ROM:1A7B
ROM:1A7B          ; =============== S U B R O U T I N E =======================================
ROM:1A7B
ROM:1A7B
ROM:1A7B          sub_1A7B:                               ; CODE XREF: sub_19FC+19↑p
ROM:1A7B FE 97                    cp      97h             ; Compare with accumulator
ROM:1A7D 28 04                    jr      z, loc_1A83     ; Jump relative (conditional & unconditional)
ROM:1A7D
ROM:1A7F CD 77 16                 call    test_4157_bit3  ; call (cond & uncond)
ROM:1A7F
ROM:1A82 C0                       ret     nz              ; Return (cond & uncond)
ROM:1A82
ROM:1A83
ROM:1A83          loc_1A83:                               ; CODE XREF: sub_1A7B+2↑j
ROM:1A83 21 0B 15                 ld      hl, 150Bh       ; Move o1 <- o2
ROM:1A83
ROM:1A86
ROM:1A86          loc_1A86:                               ; CODE XREF: sub_1AFF+8↓j
ROM:1A86 46                       ld      b, (hl)         ; Move o1 <- o2
ROM:1A86
ROM:1A87
ROM:1A87          loc_1A87:                               ; CODE XREF: sub_1A7B+13↓j
ROM:1A87 23                       inc     hl              ; Increment operand
ROM:1A88 BE                       cp      (hl)            ; Compare with accumulator
ROM:1A89 CD 42 28                 call    sub_2842        ; call (cond & uncond)
ROM:1A89
ROM:1A8C 28 03                    jr      z, loc_1A91     ; Jump relative (conditional & unconditional)
ROM:1A8C
ROM:1A8E 10 F7                    djnz    loc_1A87        ; Decrement reg B and jump relative if zero
ROM:1A8E
ROM:1A90 C9                       ret                     ; Return (cond & uncond)
ROM:1A90
ROM:1A91          ; ---------------------------------------------------------------------------
ROM:1A91
ROM:1A91          loc_1A91:                               ; CODE XREF: sub_1A7B+11↑j
ROM:1A91 32 2D 42                 ld      (byte_422D), a  ; Move o1 <- o2
ROM:1A94 FE 83                    cp      83h             ; Compare with accumulator
ROM:1A96 28 09                    jr      z, loc_1AA1     ; Jump relative (conditional & unconditional)
ROM:1A96
ROM:1A98 FE 86                    cp      86h             ; Compare with accumulator
ROM:1A9A 28 05                    jr      z, loc_1AA1     ; Jump relative (conditional & unconditional)
ROM:1A9A
ROM:1A9C D5                       push    de              ; Push register pair onto stack
ROM:1A9D CD 7A 23                 call    sub_237A        ; call (cond & uncond)
ROM:1A9D
ROM:1AA0 D1                       pop     de              ; Pop register pair from stack
ROM:1AA0
ROM:1AA1
ROM:1AA1          loc_1AA1:                               ; CODE XREF: sub_1A7B+1B↑j
ROM:1AA1                                                  ; sub_1A7B+1F↑j
ROM:1AA1 EB                       ex      de, hl          ; Exchange operands
ROM:1AA2 F5                       push    af              ; Push register pair onto stack
ROM:1AA3 CD 9F 0B                 call    sub_B9F         ; call (cond & uncond)
ROM:1AA3
ROM:1AA6 F1                       pop     af              ; Pop register pair from stack
ROM:1AA7 E9                       jp      (hl)            ; Jump (conditional & unconditional)
ROM:1AA7
ROM:1AA7          ; End of function sub_1A7B
ROM:1AA7
ROM:1AA8
ROM:1AA8          ; =============== S U B R O U T I N E =======================================
ROM:1AA8
ROM:1AA8
ROM:1AA8          sub_1AA8:                               ; CODE XREF: sub_19FC+32↑p
ROM:1AA8                                                  ; sub_28CD+5↓p
ROM:1AA8 CD 6B 16                 call    set_4157_bit0   ; call (cond & uncond)
ROM:1AA8
ROM:1AAB 2A 6D 41                 ld      hl, (word_416D) ; Move o1 <- o2
ROM:1AAE 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:1AAF 32 1E 42                 ld      (word_421E), a  ; Move o1 <- o2
ROM:1AB2 32 1F 42                 ld      (word_421E+1), a ; Move o1 <- o2
ROM:1AB5 CD E6 27                 call    sub_27E6        ; call (cond & uncond)
ROM:1AB5
ROM:1AB8 22 6D 41                 ld      (word_416D), hl ; Move o1 <- o2
ROM:1ABB E5                       push    hl              ; Push register pair onto stack
ROM:1ABC D1                       pop     de              ; Pop register pair from stack
ROM:1ABD FE 2D                    cp      2Dh ; '-'       ; Compare with accumulator
ROM:1ABF 20 1B                    jr      nz, loc_1ADC    ; Jump relative (conditional & unconditional)
ROM:1ABF
ROM:1AC1 CD DB 16                 call    test_4157_bit2  ; call (cond & uncond)
ROM:1AC1
ROM:1AC4 28 16                    jr      z, loc_1ADC     ; Jump relative (conditional & unconditional)
ROM:1AC4
ROM:1AC6 1A                       ld      a, (de)         ; Move o1 <- o2
ROM:1AC7 FE 08                    cp      8               ; Compare with accumulator
ROM:1AC9 20 0F                    jr      nz, loc_1ADA    ; Jump relative (conditional & unconditional)
ROM:1AC9
ROM:1ACB EB                       ex      de, hl          ; Exchange operands
ROM:1ACC CD E6 27                 call    sub_27E6        ; call (cond & uncond)
ROM:1ACC
ROM:1ACF 22 6D 41                 ld      (word_416D), hl ; Move o1 <- o2
ROM:1AD2 EB                       ex      de, hl          ; Exchange operands
ROM:1AD3 CD A7 16                 call    test_4156_bit3  ; call (cond & uncond)
ROM:1AD3
ROM:1AD6 20 02                    jr      nz, loc_1ADA    ; Jump relative (conditional & unconditional)
ROM:1AD6
ROM:1AD8 AF                       xor     a               ; Exclusive or with accumulator
ROM:1AD9 C9                       ret                     ; Return (cond & uncond)
ROM:1AD9
ROM:1ADA          ; ---------------------------------------------------------------------------
ROM:1ADA
ROM:1ADA          loc_1ADA:                               ; CODE XREF: sub_1AA8+21↑j
ROM:1ADA                                                  ; sub_1AA8+2E↑j
ROM:1ADA 3E 2D                    ld      a, 2Dh ; '-'    ; Move o1 <- o2
ROM:1ADA
ROM:1ADC
ROM:1ADC          loc_1ADC:                               ; CODE XREF: sub_1AA8+17↑j
ROM:1ADC                                                  ; sub_1AA8+1C↑j
ROM:1ADC F5                       push    af              ; Push register pair onto stack
ROM:1ADD CD 50 16                 call    sub_1650        ; call (cond & uncond)
ROM:1ADD
ROM:1AE0 C4 B1 26                 call    nz, Display_copy_419D_to40AC ; call (cond & uncond)
ROM:1AE0
ROM:1AE3 CC 94 26                 call    z, sub_2694     ; call (cond & uncond)
ROM:1AE3
ROM:1AE6 F1                       pop     af              ; Pop register pair from stack
ROM:1AE7 2A 71 41                 ld      hl, (word_4171) ; Move o1 <- o2
ROM:1AEA D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:1AEA
ROM:1AEB 30 05                    jr      nc, loc_1AF2    ; Jump relative (conditional & unconditional)
ROM:1AEB
ROM:1AED CD AA 17                 call    sub_17AA        ; call (cond & uncond)
ROM:1AED
ROM:1AF0 18 05                    jr      loc_1AF7        ; Jump relative (conditional & unconditional)
ROM:1AF0
ROM:1AF2          ; ---------------------------------------------------------------------------
ROM:1AF2
ROM:1AF2          loc_1AF2:                               ; CODE XREF: sub_1AA8+43↑j
ROM:1AF2 2A 6F 41                 ld      hl, (word_416F) ; Move o1 <- o2
ROM:1AF5 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:1AF5
ROM:1AF6 D0                       ret     nc              ; Return (cond & uncond)
ROM:1AF6
ROM:1AF7
ROM:1AF7          loc_1AF7:                               ; CODE XREF: sub_1AA8+48↑j
ROM:1AF7 FE 08                    cp      8               ; Compare with accumulator
ROM:1AF9 C4 58 17                 call    nz, sub_1758    ; call (cond & uncond)
ROM:1AF9
ROM:1AFC C3 83 16                 jp      rst_4157_bit3   ; Jump (conditional & unconditional)
ROM:1AFC
ROM:1AFC          ; End of function sub_1AA8
ROM:1AFC
ROM:1AFF
ROM:1AFF          ; =============== S U B R O U T I N E =======================================
ROM:1AFF
ROM:1AFF
ROM:1AFF          sub_1AFF:                               ; CODE XREF: sub_19FC+35↑p
ROM:1AFF                                                  ; sub_2905+2E↓j
ROM:1AFF CD 9B 27                 call    sub_279B        ; call (cond & uncond)
ROM:1AFF
ROM:1B02 38 57                    jr      c, sub_1B5B     ; Jump relative (conditional & unconditional)
ROM:1B02
ROM:1B04 21 69 15                 ld      hl, 1569h       ; Move o1 <- o2
ROM:1B07 C3 86 1A                 jp      loc_1A86        ; Jump (conditional & unconditional)
ROM:1B07
ROM:1B07          ; End of function sub_1AFF
ROM:1B07
ROM:1B0A
ROM:1B0A          ; =============== S U B R O U T I N E =======================================
ROM:1B0A
ROM:1B0A
ROM:1B0A          sub_1B0A:                               ; CODE XREF: sub_1BDC↓p
ROM:1B0A                                                  ; sub_204E↓p
ROM:1B0A 21 58 41                 ld      hl, 4158h       ; Move o1 <- o2
ROM:1B0D CB 46                    bit     0, (hl)         ; Test <bit> in operand
ROM:1B0F CB C6                    set     0, (hl)         ; Set bit
ROM:1B11 2A 63 41                 ld      hl, (word_4163) ; Move o1 <- o2
ROM:1B14 C0                       ret     nz              ; Return (cond & uncond)
ROM:1B14
ROM:1B14          ; End of function sub_1B0A
ROM:1B14
ROM:1B15
ROM:1B15          ; =============== S U B R O U T I N E =======================================
ROM:1B15
ROM:1B15
ROM:1B15          sub_1B15:                               ; CODE XREF: Setup_all+AD↓p
ROM:1B15                                                  ; sub_2AC8+5↓p ...
ROM:1B15 D5                       push    de              ; Push register pair onto stack
ROM:1B16 2A FA 43                 ld      hl, (data_for_40bd_ptr_5fffh) ; Move o1 <- o2
ROM:1B19 11 4A 01                 ld      de, 14Ah        ; Move o1 <- o2
ROM:1B1C D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:1B1C
ROM:1B1D ED 5B 6B                 ld      de, (word_416B) ; Move o1 <- o2
ROM:1B1D 41
ROM:1B21 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:1B21
ROM:1B22 21 58 41                 ld      hl, 4158h       ; Move o1 <- o2
ROM:1B25 CB CE                    set     1, (hl)         ; Set bit
ROM:1B27 CB DE                    set     3, (hl)         ; Set bit
ROM:1B29 38 0C                    jr      c, loc_1B37     ; Jump relative (conditional & unconditional)
ROM:1B29
ROM:1B2B CB 9E                    res     3, (hl)         ; Reset bit
ROM:1B2D CB 8E                    res     1, (hl)         ; Reset bit
ROM:1B2F 21 BD 40                 ld      hl, 40BDh       ; Move o1 <- o2
ROM:1B32 01 61 00                 ld      bc, 61h ; 'a'   ; Move o1 <- o2
ROM:1B35 ED B0                    ldir                    ; Transfer data (DE)->(HL) until byte
ROM:1B35                                                  ; counter is zero, increment destination
ROM:1B35                                                  ; and source addresses
ROM:1B35
ROM:1B37
ROM:1B37          loc_1B37:                               ; CODE XREF: sub_1B15+14↑j
ROM:1B37 EB                       ex      de, hl          ; Exchange operands
ROM:1B38 D1                       pop     de              ; Pop register pair from stack
ROM:1B39 C3 21 28                 jp      sub_2821        ; Jump (conditional & unconditional)
ROM:1B39
ROM:1B39          ; End of function sub_1B15
ROM:1B39
ROM:1B3C          ; ---------------------------------------------------------------------------
ROM:1B3C          ; START OF FUNCTION CHUNK FOR sub_2065
ROM:1B3C
ROM:1B3C          loc_1B3C:                               ; CODE XREF: sub_2065+5↓j
ROM:1B3C 21 57 41                 ld      hl, 4157h       ; Move o1 <- o2
ROM:1B3F CB 7E                    bit     7, (hl)         ; Test <bit> in operand
ROM:1B41 28 54                    jr      z, loc_1B97     ; Jump relative (conditional & unconditional)
ROM:1B41
ROM:1B43 2A 63 41                 ld      hl, (word_4163) ; Move o1 <- o2
ROM:1B46 E5                       push    hl              ; Push register pair onto stack
ROM:1B47 CD 34 28                 call    sub_2834        ; call (cond & uncond)
ROM:1B47
ROM:1B4A ED 5B 6D                 ld      de, (word_416D) ; Move o1 <- o2
ROM:1B4A 41
ROM:1B4E D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:1B4E
ROM:1B4F E1                       pop     hl              ; Pop register pair from stack
ROM:1B50 38 45                    jr      c, loc_1B97     ; Jump relative (conditional & unconditional)
ROM:1B50
ROM:1B52 CD 0E 28                 call    sub_280E        ; call (cond & uncond)
ROM:1B52
ROM:1B55 22 63 41                 ld      (word_4163), hl ; Move o1 <- o2
ROM:1B58 C3 58 26                 jp      loc_2658        ; Jump (conditional & unconditional)
ROM:1B58
ROM:1B58          ; END OF FUNCTION CHUNK FOR sub_2065
ROM:1B5B
ROM:1B5B          ; =============== S U B R O U T I N E =======================================
ROM:1B5B
ROM:1B5B
ROM:1B5B          sub_1B5B:                               ; CODE XREF: sub_19FC+50↑p
ROM:1B5B                                                  ; sub_1AFF+3↑j ...
ROM:1B5B
ROM:1B5B          ; FUNCTION CHUNK AT ROM:1BE5 SIZE 00000017 BYTES
ROM:1B5B          ; FUNCTION CHUNK AT ROM:1FC9 SIZE 0000000D BYTES
ROM:1B5B          ; FUNCTION CHUNK AT ROM:1FFA SIZE 00000025 BYTES
ROM:1B5B          ; FUNCTION CHUNK AT ROM:2650 SIZE 00000004 BYTES
ROM:1B5B
ROM:1B5B F5                       push    af              ; Push register pair onto stack
ROM:1B5C CD 7A 23                 call    sub_237A        ; call (cond & uncond)
ROM:1B5C
ROM:1B5F F1                       pop     af              ; Pop register pair from stack
ROM:1B5F
ROM:1B60
ROM:1B60          loc_1B60:                               ; CODE XREF: ROM:1FE9↓j
ROM:1B60 67                       ld      h, a            ; Move o1 <- o2
ROM:1B61 3E 7E                    ld      a, 7Eh ; '~'    ; Move o1 <- o2
ROM:1B63 DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:1B63                                                  ; A - if < 10h is 0000xxxx read mask
ROM:1B63                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:1B63                                                  ;         A[5:3] - bit index for...
ROM:1B63                                                  ;         A[2:0] - bit index for...
ROM:1B63                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:1B63
ROM:1B64 7C                       ld      a, h            ; Move o1 <- o2
ROM:1B65 28 0A                    jr      z, loc_1B71     ; Jump relative (conditional & unconditional)
ROM:1B65
ROM:1B67 FE 03                    cp      3               ; Compare with accumulator
ROM:1B69 30 06                    jr      nc, loc_1B71    ; Jump relative (conditional & unconditional)
ROM:1B69
ROM:1B6B 06 8D                    ld      b, 8Dh          ; Move o1 <- o2
ROM:1B6D 80                       add     a, b            ; Add <reg> to A
ROM:1B6E C3 2F 1E                 jp      sub_1E2F        ; Jump (conditional & unconditional)
ROM:1B6E
ROM:1B71          ; ---------------------------------------------------------------------------
ROM:1B71
ROM:1B71          loc_1B71:                               ; CODE XREF: sub_1B5B+A↑j
ROM:1B71                                                  ; sub_1B5B+E↑j
ROM:1B71 CD 47 1C                 call    sub_1C47        ; call (cond & uncond)
ROM:1B71
ROM:1B74 32 2D 42                 ld      (byte_422D), a  ; Move o1 <- o2
ROM:1B77 FE 0B                    cp      0Bh             ; Compare with accumulator
ROM:1B79 CA EC 1F                 jp      z, sub_1FEC     ; Jump (conditional & unconditional)
ROM:1B79
ROM:1B7C FE 04                    cp      4               ; Compare with accumulator
ROM:1B7E CA C9 1F                 jp      z, loc_1FC9     ; Jump (conditional & unconditional)
ROM:1B7E
ROM:1B81 FE 05                    cp      5               ; Compare with accumulator
ROM:1B83 CA CE 1F                 jp      z, loc_1FCE     ; Jump (conditional & unconditional)
ROM:1B83
ROM:1B86 FE 0D                    cp      0Dh             ; Compare with accumulator
ROM:1B88 28 04                    jr      z, loc_1B8E     ; Jump relative (conditional & unconditional)
ROM:1B88
ROM:1B8A FE 08                    cp      8               ; Compare with accumulator
ROM:1B8C 20 0B                    jr      nz, loc_1B99    ; Jump relative (conditional & unconditional)
ROM:1B8C
ROM:1B8E
ROM:1B8E          loc_1B8E:                               ; CODE XREF: sub_1B5B+2D↑j
ROM:1B8E CD 50 16                 call    sub_1650        ; call (cond & uncond)
ROM:1B8E
ROM:1B91 C4 94 26                 call    nz, sub_2694    ; call (cond & uncond)
ROM:1B91
ROM:1B94 CD 67 1C                 call    sub_1C67        ; call (cond & uncond)
ROM:1B94
ROM:1B97
ROM:1B97          loc_1B97:                               ; CODE XREF: sub_2065-524↑j
ROM:1B97                                                  ; sub_2065-515↑j
ROM:1B97 18 4C                    jr      loc_1BE5        ; Jump relative (conditional & unconditional)
ROM:1B97
ROM:1B99          ; ---------------------------------------------------------------------------
ROM:1B99
ROM:1B99          loc_1B99:                               ; CODE XREF: sub_1B5B+31↑j
ROM:1B99 FE 0F                    cp      0Fh             ; Compare with accumulator
ROM:1B9B 38 36                    jr      c, loc_1BD3     ; Jump relative (conditional & unconditional)
ROM:1B9B
ROM:1B9D CD 4A 16                 call    test_4156_bit1  ; call (cond & uncond)
ROM:1B9D
ROM:1BA0 20 31                    jr      nz, loc_1BD3    ; Jump relative (conditional & unconditional)
ROM:1BA0
ROM:1BA2 CD AD 1C                 call    sub_1CAD        ; call (cond & uncond)
ROM:1BA2
ROM:1BA5 30 20                    jr      nc, loc_1BC7    ; Jump relative (conditional & unconditional)
ROM:1BA5
ROM:1BA7 CD 8D 27                 call    sub_278D        ; call (cond & uncond)
ROM:1BA7
ROM:1BAA CD 65 16                 call    test_4157_bit0  ; call (cond & uncond)
ROM:1BAA
ROM:1BAD C8                       ret     z               ; Return (cond & uncond)
ROM:1BAE CD 83 16                 call    rst_4157_bit3   ; call (cond & uncond)
ROM:1BAE
ROM:1BB1 2A 6D 41                 ld      hl, (word_416D) ; Move o1 <- o2
ROM:1BB4 CD 0E 28                 call    sub_280E        ; call (cond & uncond)
ROM:1BB4
ROM:1BB7 22 6D 41                 ld      (word_416D), hl ; Move o1 <- o2
ROM:1BBA CD 58 17                 call    sub_1758        ; call (cond & uncond)
ROM:1BBA
ROM:1BBD C3 94 26                 jp      sub_2694        ; Jump (conditional & unconditional)
ROM:1BBD
ROM:1BC0          ; ---------------------------------------------------------------------------
ROM:1BC0
ROM:1BC0          loc_1BC0:                               ; CODE XREF: sub_2622+2↓p
ROM:1BC0 F5                       push    af              ; Push register pair onto stack
ROM:1BC1 CD BC 10                 call    sub_10BC        ; call (cond & uncond)
ROM:1BC1
ROM:1BC4 F1                       pop     af              ; Pop register pair from stack
ROM:1BC5 18 15                    jr      sub_1BDC        ; Jump relative (conditional & unconditional)
ROM:1BC5
ROM:1BC7          ; ---------------------------------------------------------------------------
ROM:1BC7
ROM:1BC7          loc_1BC7:                               ; CODE XREF: sub_1B5B+4A↑j
ROM:1BC7 ED 4B 10                 ld      bc, (word_110)  ; Move o1 <- o2
ROM:1BC7 01
ROM:1BCB ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:1BCD D4 AD 16                 call    nc, rst_4156_bit3 ; call (cond & uncond)
ROM:1BCD
ROM:1BD0 DC DA 1C                 call    c, sub_1CDA     ; call (cond & uncond)
ROM:1BD0
ROM:1BD3
ROM:1BD3          loc_1BD3:                               ; CODE XREF: sub_1B5B+40↑j
ROM:1BD3                                                  ; sub_1B5B+45↑j
ROM:1BD3 3A 2D 42                 ld      a, (byte_422D)  ; Move o1 <- o2
ROM:1BD3
ROM:1BD3          ; End of function sub_1B5B
ROM:1BD3
ROM:1BD6
ROM:1BD6          ; =============== S U B R O U T I N E =======================================
ROM:1BD6
ROM:1BD6
ROM:1BD6          sub_1BD6:                               ; CODE XREF: sub_1C47:loc_1C62↓p
ROM:1BD6                                                  ; sub_1C67+31↓j
ROM:1BD6 CD 5D 28                 call    sub_285D        ; call (cond & uncond)
ROM:1BD6
ROM:1BD9 30 01                    jr      nc, sub_1BDC    ; Jump relative (conditional & unconditional)
ROM:1BD9
ROM:1BDB C8                       ret     z               ; Return (cond & uncond)
ROM:1BDB
ROM:1BDB          ; End of function sub_1BD6
ROM:1BDB
ROM:1BDC
ROM:1BDC          ; =============== S U B R O U T I N E =======================================
ROM:1BDC
ROM:1BDC
ROM:1BDC          sub_1BDC:                               ; CODE XREF: sub_1B5B+6A↑j
ROM:1BDC                                                  ; sub_1BD6+3↑j ...
ROM:1BDC CD 0A 1B                 call    sub_1B0A        ; call (cond & uncond)
ROM:1BDC
ROM:1BDF CD 65 20                 call    sub_2065        ; call (cond & uncond)
ROM:1BDF
ROM:1BE2 C3 A1 26                 jp      sub_26A1        ; Jump (conditional & unconditional)
ROM:1BE2
ROM:1BE2          ; End of function sub_1BDC
ROM:1BE2
ROM:1BE5          ; ---------------------------------------------------------------------------
ROM:1BE5          ; START OF FUNCTION CHUNK FOR sub_1B5B
ROM:1BE5          ;   ADDITIONAL PARENT FUNCTION sub_2F1D
ROM:1BE5
ROM:1BE5          loc_1BE5:                               ; CODE XREF: sub_1B5B:loc_1B97↑j
ROM:1BE5                                                  ; sub_2F1D+13↓j
ROM:1BE5 11 4A 01                 ld      de, 14Ah        ; Move o1 <- o2
ROM:1BE8 CD C3 2D                 call    sub_2DC3        ; call (cond & uncond)
ROM:1BE8
ROM:1BEB 21 58 41                 ld      hl, 4158h       ; Move o1 <- o2
ROM:1BEE CB 4E                    bit     1, (hl)         ; Test <bit> in operand
ROM:1BF0 20 22                    jr      nz, loc_1C14    ; Jump relative (conditional & unconditional)
ROM:1BF0
ROM:1BF2 CB 56                    bit     2, (hl)         ; Test <bit> in operand
ROM:1BF4 CB 96                    res     2, (hl)         ; Reset bit
ROM:1BF6 D0                       ret     nc              ; Return (cond & uncond)
ROM:1BF7 CB D6                    set     2, (hl)         ; Set bit
ROM:1BF9 CA 50 26                 jp      z, loc_2650     ; Jump (conditional & unconditional)
ROM:1BF9
ROM:1BF9          ; END OF FUNCTION CHUNK FOR sub_1B5B
ROM:1BFC
ROM:1BFC          ; =============== S U B R O U T I N E =======================================
ROM:1BFC
ROM:1BFC
ROM:1BFC          sub_1BFC:                               ; CODE XREF: sub_2905↓p
ROM:1BFC                                                  ; sub_2028+968↓p
ROM:1BFC 11 E3 00                 ld      de, 0E3h        ; Move o1 <- o2
ROM:1BFF CD C3 2D                 call    sub_2DC3        ; call (cond & uncond)
ROM:1BFF
ROM:1C02 21 58 41                 ld      hl, 4158h       ; Move o1 <- o2
ROM:1C05 CB 5E                    bit     3, (hl)         ; Test <bit> in operand
ROM:1C07 CB 9E                    res     3, (hl)         ; Reset bit
ROM:1C09 D0                       ret     nc              ; Return (cond & uncond)
ROM:1C0A CB DE                    set     3, (hl)         ; Set bit
ROM:1C0C 20 06                    jr      nz, loc_1C14    ; Jump relative (conditional & unconditional)
ROM:1C0C
ROM:1C0E CD 54 26                 call    sub_2654        ; call (cond & uncond)
ROM:1C0E
ROM:1C11 C3 E1 24                 jp      loc_24E1        ; Jump (conditional & unconditional)
ROM:1C11
ROM:1C14          ; ---------------------------------------------------------------------------
ROM:1C14
ROM:1C14          loc_1C14:                               ; CODE XREF: sub_1B5B+95↑j
ROM:1C14                                                  ; sub_1BFC+10↑j
ROM:1C14 11 03 00                 ld      de, 3           ; Move o1 <- o2
ROM:1C17 CD C3 2D                 call    sub_2DC3        ; call (cond & uncond)
ROM:1C17
ROM:1C1A D0                       ret     nc              ; Return (cond & uncond)
ROM:1C1B 2A FA 43                 ld      hl, (data_for_40bd_ptr_5fffh) ; Move o1 <- o2
ROM:1C1E 01 D8 00                 ld      bc, 0D8h        ; Move o1 <- o2
ROM:1C21 B7                       or      a               ; Or with accumulator
ROM:1C22 ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:1C24 22 5D 41                 ld      (word_415D), hl ; Move o1 <- o2
ROM:1C27 54                       ld      d, h            ; Move o1 <- o2
ROM:1C28 5D                       ld      e, l            ; Move o1 <- o2
ROM:1C29 1B                       dec     de              ; Decrement operand
ROM:1C2A 1B                       dec     de              ; Decrement operand
ROM:1C2B 1B                       dec     de              ; Decrement operand
ROM:1C2C ED B0                    ldir                    ; Transfer data (DE)->(HL) until byte
ROM:1C2C                                                  ; counter is zero, increment destination
ROM:1C2C                                                  ; and source addresses
ROM:1C2E 06 05                    ld      b, 5            ; Move o1 <- o2
ROM:1C30 CD B7 16                 call    test_4068_b1    ; call (cond & uncond)
ROM:1C30
ROM:1C33 21 5F 41                 ld      hl, 415Fh       ; Move o1 <- o2
ROM:1C36 28 03                    jr      z, loc_1C3B     ; Jump relative (conditional & unconditional)
ROM:1C36
ROM:1C38 05                       dec     b               ; Decrement operand
ROM:1C38
ROM:1C39
ROM:1C39          loc_1C39:                               ; CODE XREF: sub_1BFC+48↓j
ROM:1C39 23                       inc     hl              ; Increment operand
ROM:1C3A 23                       inc     hl              ; Increment operand
ROM:1C3A
ROM:1C3B
ROM:1C3B          loc_1C3B:                               ; CODE XREF: sub_1BFC+3A↑j
ROM:1C3B 5E                       ld      e, (hl)         ; Move o1 <- o2
ROM:1C3C 23                       inc     hl              ; Increment operand
ROM:1C3D 56                       ld      d, (hl)         ; Move o1 <- o2
ROM:1C3E 1B                       dec     de              ; Decrement operand
ROM:1C3F 1B                       dec     de              ; Decrement operand
ROM:1C40 1B                       dec     de              ; Decrement operand
ROM:1C41 72                       ld      (hl), d         ; Move o1 <- o2
ROM:1C42 2B                       dec     hl              ; Decrement operand
ROM:1C43 73                       ld      (hl), e         ; Move o1 <- o2
ROM:1C44 10 F3                    djnz    loc_1C39        ; Decrement reg B and jump relative if zero
ROM:1C44
ROM:1C46 C9                       ret                     ; Return (cond & uncond)
ROM:1C46
ROM:1C46          ; End of function sub_1BFC
ROM:1C46
ROM:1C47
ROM:1C47          ; =============== S U B R O U T I N E =======================================
ROM:1C47
ROM:1C47
ROM:1C47          sub_1C47:                               ; CODE XREF: sub_1B5B:loc_1B71↑p
ROM:1C47 CD A7 16                 call    test_4156_bit3  ; call (cond & uncond)
ROM:1C47
ROM:1C4A C8                       ret     z               ; Return (cond & uncond)
ROM:1C4B CD DB 16                 call    test_4157_bit2  ; call (cond & uncond)
ROM:1C4B
ROM:1C4E C8                       ret     z               ; Return (cond & uncond)
ROM:1C4F FE 0F                    cp      0Fh             ; Compare with accumulator
ROM:1C51 20 03                    jr      nz, loc_1C56    ; Jump relative (conditional & unconditional)
ROM:1C51
ROM:1C53
ROM:1C53          loc_1C53:                               ; CODE XREF: sub_1C47+1E↓j
ROM:1C53 3E 08                    ld      a, 8            ; Move o1 <- o2
ROM:1C55 C9                       ret                     ; Return (cond & uncond)
ROM:1C55
ROM:1C56          ; ---------------------------------------------------------------------------
ROM:1C56
ROM:1C56          loc_1C56:                               ; CODE XREF: sub_1C47+A↑j
ROM:1C56 FE 2D                    cp      2Dh ; '-'       ; Compare with accumulator
ROM:1C58 C0                       ret     nz              ; Return (cond & uncond)
ROM:1C59 CD AD 1C                 call    sub_1CAD        ; call (cond & uncond)
ROM:1C59
ROM:1C5C 30 04                    jr      nc, loc_1C62    ; Jump relative (conditional & unconditional)
ROM:1C5C
ROM:1C5E CD 4A 16                 call    test_4156_bit1  ; call (cond & uncond)
ROM:1C5E
ROM:1C61 C8                       ret     z               ; Return (cond & uncond)
ROM:1C61
ROM:1C62
ROM:1C62          loc_1C62:                               ; CODE XREF: sub_1C47+15↑j
ROM:1C62 CD D6 1B                 call    sub_1BD6        ; call (cond & uncond)
ROM:1C62
ROM:1C65 18 EC                    jr      loc_1C53        ; Jump relative (conditional & unconditional)
ROM:1C65
ROM:1C65          ; End of function sub_1C47
ROM:1C65
ROM:1C67
ROM:1C67          ; =============== S U B R O U T I N E =======================================
ROM:1C67
ROM:1C67
ROM:1C67          sub_1C67:                               ; CODE XREF: sub_1B5B+39↑p
ROM:1C67 CD 1E 25                 call    sub_251E        ; call (cond & uncond)
ROM:1C67
ROM:1C6A 3A 2D 42                 ld      a, (byte_422D)  ; Move o1 <- o2
ROM:1C6D FE 0D                    cp      0Dh             ; Compare with accumulator
ROM:1C6F 28 2A                    jr      z, loc_1C9B     ; Jump relative (conditional & unconditional)
ROM:1C6F
ROM:1C71 CD AD 1C                 call    sub_1CAD        ; call (cond & uncond)
ROM:1C71
ROM:1C74 38 25                    jr      c, loc_1C9B     ; Jump relative (conditional & unconditional)
ROM:1C74
ROM:1C76 ED 4B 10                 ld      bc, (word_110)  ; Move o1 <- o2
ROM:1C76 01
ROM:1C7A ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:1C7C 38 1D                    jr      c, loc_1C9B     ; Jump relative (conditional & unconditional)
ROM:1C7C
ROM:1C7E 3E 0D                    ld      a, 0Dh          ; Move o1 <- o2
ROM:1C80 CD 65 16                 call    test_4157_bit0  ; call (cond & uncond)
ROM:1C80
ROM:1C83 28 16                    jr      z, loc_1C9B     ; Jump relative (conditional & unconditional)
ROM:1C83
ROM:1C85 CD DB 16                 call    test_4157_bit2  ; call (cond & uncond)
ROM:1C85
ROM:1C88 28 11                    jr      z, loc_1C9B     ; Jump relative (conditional & unconditional)
ROM:1C88
ROM:1C8A 2A 6D 41                 ld      hl, (word_416D) ; Move o1 <- o2
ROM:1C8D CD 0E 28                 call    sub_280E        ; call (cond & uncond)
ROM:1C8D
ROM:1C90 2B                       dec     hl              ; Decrement operand
ROM:1C91 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:1C92 FE 0F                    cp      0Fh             ; Compare with accumulator
ROM:1C94 C8                       ret     z               ; Return (cond & uncond)
ROM:1C95 00                       nop                     ; No Operation
ROM:1C96 3E 0F                    ld      a, 0Fh          ; Move o1 <- o2
ROM:1C98 C3 D6 1B                 jp      sub_1BD6        ; Jump (conditional & unconditional)
ROM:1C98
ROM:1C9B          ; ---------------------------------------------------------------------------
ROM:1C9B
ROM:1C9B          loc_1C9B:                               ; CODE XREF: sub_1C67+8↑j
ROM:1C9B                                                  ; sub_1C67+D↑j ...
ROM:1C9B ED 5B 7B                 ld      de, (word_417B) ; Move o1 <- o2
ROM:1C9B 41
ROM:1C9F CD AD 16                 call    rst_4156_bit3   ; call (cond & uncond)
ROM:1C9F
ROM:1CA2 CD 57 16                 call    sub_1657        ; call (cond & uncond)
ROM:1CA2
ROM:1CA5 CD 4E 20                 call    sub_204E        ; call (cond & uncond)
ROM:1CA5
ROM:1CA8 3E 08                    ld      a, 8            ; Move o1 <- o2
ROM:1CAA C3 5D 28                 jp      sub_285D        ; Jump (conditional & unconditional)
ROM:1CAA
ROM:1CAA          ; End of function sub_1C67
ROM:1CAA
ROM:1CAD
ROM:1CAD          ; =============== S U B R O U T I N E =======================================
ROM:1CAD
ROM:1CAD
ROM:1CAD          sub_1CAD:                               ; CODE XREF: sub_1B5B+47↑p
ROM:1CAD                                                  ; sub_1C47+12↑p ...
ROM:1CAD 2A CA 40                 ld      hl, (word_40CA) ; Move o1 <- o2
ROM:1CB0 2B                       dec     hl              ; Decrement operand
ROM:1CB1 ED 4B 7B                 ld      bc, (word_417B) ; Move o1 <- o2
ROM:1CB1 41
ROM:1CB5 B7                       or      a               ; Or with accumulator
ROM:1CB6 ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:1CB8 23                       inc     hl              ; Increment operand
ROM:1CB9 C9                       ret                     ; Return (cond & uncond)
ROM:1CB9
ROM:1CB9          ; End of function sub_1CAD
ROM:1CB9
ROM:1CBA
ROM:1CBA          ; =============== S U B R O U T I N E =======================================
ROM:1CBA
ROM:1CBA
ROM:1CBA          sub_1CBA:                               ; CODE XREF: sub_19FC+49↑p
ROM:1CBA                                                  ; sub_1E2F+3↓j ...
ROM:1CBA CD 43 17                 call    sub_1743        ; call (cond & uncond)
ROM:1CBA
ROM:1CBD C0                       ret     nz              ; Return (cond & uncond)
ROM:1CBE CD A1 16                 call    rst_4156_bit7   ; call (cond & uncond)
ROM:1CBE
ROM:1CBE          ; End of function sub_1CBA
ROM:1CBE
ROM:1CC1
ROM:1CC1          ; =============== S U B R O U T I N E =======================================
ROM:1CC1
ROM:1CC1
ROM:1CC1          sub_1CC1:                               ; CODE XREF: sub_1CC1+7↓j
ROM:1CC1                                                  ; sub_3612+9↓p
ROM:1CC1 CD CF 1C                 call    sub_1CCF        ; call (cond & uncond)
ROM:1CC1
ROM:1CC4 C8                       ret     z               ; Return (cond & uncond)
ROM:1CC5 CD 1B 1D                 call    sub_1D1B        ; call (cond & uncond)
ROM:1CC5
ROM:1CC8 18 F7                    jr      sub_1CC1        ; Jump relative (conditional & unconditional)
ROM:1CC8
ROM:1CC8          ; End of function sub_1CC1
ROM:1CC8
ROM:1CCA
ROM:1CCA          ; =============== S U B R O U T I N E =======================================
ROM:1CCA
ROM:1CCA
ROM:1CCA          sub_1CCA:                               ; CODE XREF: sub_19FC+6E↑p
ROM:1CCA                                                  ; sub_2EDB:loc_24AE↓p ...
ROM:1CCA 2A 5F 41                 ld      hl, (word_415F) ; Move o1 <- o2
ROM:1CCD 18 03                    jr      loc_1CD2        ; Jump relative (conditional & unconditional)
ROM:1CCD
ROM:1CCD          ; End of function sub_1CCA
ROM:1CCD
ROM:1CCF
ROM:1CCF          ; =============== S U B R O U T I N E =======================================
ROM:1CCF
ROM:1CCF
ROM:1CCF          sub_1CCF:                               ; CODE XREF: sub_19FC+78↑p
ROM:1CCF                                                  ; sub_1CC1↑p ...
ROM:1CCF 2A 61 41                 ld      hl, (word_4161) ; Move o1 <- o2
ROM:1CCF
ROM:1CD2
ROM:1CD2          loc_1CD2:                               ; CODE XREF: sub_1CCA+3↑j
ROM:1CD2 ED 5B 63                 ld      de, (word_4163) ; Move o1 <- o2
ROM:1CD2 41
ROM:1CD6 E5                       push    hl              ; Push register pair onto stack
ROM:1CD7 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:1CD7
ROM:1CD8 E1                       pop     hl              ; Pop register pair from stack
ROM:1CD9 C9                       ret                     ; Return (cond & uncond)
ROM:1CD9
ROM:1CD9          ; End of function sub_1CCF
ROM:1CD9
ROM:1CDA
ROM:1CDA          ; =============== S U B R O U T I N E =======================================
ROM:1CDA
ROM:1CDA
ROM:1CDA          sub_1CDA:                               ; CODE XREF: sub_1B5B+75↑p
ROM:1CDA EB                       ex      de, hl          ; Exchange operands
ROM:1CDB CD A7 16                 call    test_4156_bit3  ; call (cond & uncond)
ROM:1CDB
ROM:1CDE C0                       ret     nz              ; Return (cond & uncond)
ROM:1CDF CB DE                    set     3, (hl)         ; Set bit
ROM:1CDF
ROM:1CE1
ROM:1CE1          loc_1CE1:                               ; CODE XREF: sub_1CDA+36↓j
ROM:1CE1 CD 8D 27                 call    sub_278D        ; call (cond & uncond)
ROM:1CE1
ROM:1CE4 CD 77 16                 call    test_4157_bit3  ; call (cond & uncond)
ROM:1CE4
ROM:1CE7 C8                       ret     z               ; Return (cond & uncond)
ROM:1CE8 CD A7 06                 call    sub_6A7         ; call (cond & uncond)
ROM:1CE8
ROM:1CEB 13                       inc     de              ; Increment operand
ROM:1CEC C5                       push    bc              ; Push register pair onto stack
ROM:1CED ED 4B 6D                 ld      bc, (word_416D) ; Move o1 <- o2
ROM:1CED 41
ROM:1CED
ROM:1CF1
ROM:1CF1          loc_1CF1:                               ; CODE XREF: sub_1CDA+2E↓j
ROM:1CF1 0A                       ld      a, (bc)         ; Move o1 <- o2
ROM:1CF2 03                       inc     bc              ; Increment operand
ROM:1CF3 FE 10                    cp      10h             ; Compare with accumulator
ROM:1CF5 38 13                    jr      c, loc_1D0A     ; Jump relative (conditional & unconditional)
ROM:1CF5
ROM:1CF7 FE 2D                    cp      2Dh ; '-'       ; Compare with accumulator
ROM:1CF9 28 0F                    jr      z, loc_1D0A     ; Jump relative (conditional & unconditional)
ROM:1CF9
ROM:1CFB FE 80                    cp      80h             ; Compare with accumulator
ROM:1CFD 30 0B                    jr      nc, loc_1D0A    ; Jump relative (conditional & unconditional)
ROM:1CFD
ROM:1CFF C5                       push    bc              ; Push register pair onto stack
ROM:1D00 D5                       push    de              ; Push register pair onto stack
ROM:1D01 CD 2E 13                 call    sub_132E        ; call (cond & uncond)
ROM:1D01
ROM:1D04 D1                       pop     de              ; Pop register pair from stack
ROM:1D05 C1                       pop     bc              ; Pop register pair from stack
ROM:1D06 19                       add     hl, de          ; Add <reg> to A
ROM:1D07 EB                       ex      de, hl          ; Exchange operands
ROM:1D08 18 E7                    jr      loc_1CF1        ; Jump relative (conditional & unconditional)
ROM:1D08
ROM:1D0A          ; ---------------------------------------------------------------------------
ROM:1D0A
ROM:1D0A          loc_1D0A:                               ; CODE XREF: sub_1CDA+1B↑j
ROM:1D0A                                                  ; sub_1CDA+1F↑j ...
ROM:1D0A E1                       pop     hl              ; Pop register pair from stack
ROM:1D0B D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:1D0B
ROM:1D0C D0                       ret     nc              ; Return (cond & uncond)
ROM:1D0D CD 83 16                 call    rst_4157_bit3   ; call (cond & uncond)
ROM:1D0D
ROM:1D10 18 CF                    jr      loc_1CE1        ; Jump relative (conditional & unconditional)
ROM:1D10
ROM:1D10          ; End of function sub_1CDA
ROM:1D10
ROM:1D12
ROM:1D12          ; =============== S U B R O U T I N E =======================================
ROM:1D12
ROM:1D12
ROM:1D12          sub_1D12:                               ; CODE XREF: sub_19FC:loc_1A5D↑p
ROM:1D12 CD 8F 16                 call    test_4156_bit7  ; call (cond & uncond)
ROM:1D12
ROM:1D15 C0                       ret     nz              ; Return (cond & uncond)
ROM:1D16 3A 6F 40                 ld      a, (word_406F)  ; Bit2: Set: 91Bh
ROM:1D19 B7                       or      a               ; Or with accumulator
ROM:1D1A C0                       ret     nz              ; Return (cond & uncond)
ROM:1D1A
ROM:1D1A          ; End of function sub_1D12
ROM:1D1A
ROM:1D1B
ROM:1D1B          ; =============== S U B R O U T I N E =======================================
ROM:1D1B
ROM:1D1B
ROM:1D1B          sub_1D1B:                               ; CODE XREF: sub_1CC1+4↑p
ROM:1D1B                                                  ; sub_251E+50↓p
ROM:1D1B CD CF 1C                 call    sub_1CCF        ; call (cond & uncond)
ROM:1D1B
ROM:1D1E C8                       ret     z               ; Return (cond & uncond)
ROM:1D1F 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:1D1F
ROM:1D1F          ; End of function sub_1D1B
ROM:1D1F
ROM:1D20
ROM:1D20          ; =============== S U B R O U T I N E =======================================
ROM:1D20
ROM:1D20
ROM:1D20          sub_1D20:                               ; CODE XREF: sub_251E+6D↓p
ROM:1D20                                                  ; sub_2F33+65↓p
ROM:1D20 CD 2D 1D                 call    sub_1D2D        ; call (cond & uncond)
ROM:1D20
ROM:1D23
ROM:1D23          loc_1D23:                               ; CODE XREF: sub_2FAE+3↓j
ROM:1D23 2A 61 41                 ld      hl, (word_4161) ; Move o1 <- o2
ROM:1D26 CD E6 27                 call    sub_27E6        ; call (cond & uncond)
ROM:1D26
ROM:1D29 22 61 41                 ld      (word_4161), hl ; Move o1 <- o2
ROM:1D2C C9                       ret                     ; Return (cond & uncond)
ROM:1D2C
ROM:1D2C          ; End of function sub_1D20
ROM:1D2C
ROM:1D2D
ROM:1D2D          ; =============== S U B R O U T I N E =======================================
ROM:1D2D
ROM:1D2D
ROM:1D2D          sub_1D2D:                               ; CODE XREF: sub_1D20↑p
ROM:1D2D FE AD                    cp      0ADh            ; Compare with accumulator
ROM:1D2F C8                       ret     z               ; Return (cond & uncond)
ROM:1D30 FE AE                    cp      0AEh            ; Compare with accumulator
ROM:1D32 C8                       ret     z               ; Return (cond & uncond)
ROM:1D33 FE 8D                    cp      8Dh             ; Compare with accumulator
ROM:1D35 C8                       ret     z               ; Return (cond & uncond)
ROM:1D36 FE 06                    cp      6               ; Compare with accumulator
ROM:1D38 28 3A                    jr      z, loc_1D74     ; Jump relative (conditional & unconditional)
ROM:1D38
ROM:1D3A FE 87                    cp      87h             ; Compare with accumulator
ROM:1D3C 28 36                    jr      z, loc_1D74     ; Jump relative (conditional & unconditional)
ROM:1D3C
ROM:1D3E FE 80                    cp      80h             ; Compare with accumulator
ROM:1D40 20 02                    jr      nz, loc_1D44    ; Jump relative (conditional & unconditional)
ROM:1D40
ROM:1D42 3E 2D                    ld      a, 2Dh ; '-'    ; Move o1 <- o2
ROM:1D42
ROM:1D44
ROM:1D44          loc_1D44:                               ; CODE XREF: sub_1D2D+13↑j
ROM:1D44 FE 8E                    cp      8Eh             ; Compare with accumulator
ROM:1D46 28 47                    jr      z, loc_1D8F     ; Jump relative (conditional & unconditional)
ROM:1D46
ROM:1D48 FE 8F                    cp      8Fh             ; Compare with accumulator
ROM:1D4A 28 48                    jr      z, loc_1D94     ; Jump relative (conditional & unconditional)
ROM:1D4A
ROM:1D4C FE 07                    cp      7               ; Compare with accumulator
ROM:1D4E 28 2A                    jr      z, loc_1D7A     ; Jump relative (conditional & unconditional)
ROM:1D4E
ROM:1D50 FE 9C                    cp      9Ch             ; Compare with accumulator
ROM:1D52 28 2C                    jr      z, loc_1D80     ; Jump relative (conditional & unconditional)
ROM:1D52
ROM:1D54 FE 9D                    cp      9Dh             ; Compare with accumulator
ROM:1D56 28 2F                    jr      z, loc_1D87     ; Jump relative (conditional & unconditional)
ROM:1D56
ROM:1D58 2A 61 41                 ld      hl, (word_4161) ; Move o1 <- o2
ROM:1D5B CD 42 28                 call    sub_2842        ; call (cond & uncond)
ROM:1D5B
ROM:1D5E FE 9E                    cp      9Eh             ; Compare with accumulator
ROM:1D60 38 0A                    jr      c, loc_1D6C     ; Jump relative (conditional & unconditional)
ROM:1D60
ROM:1D62 FE A0                    cp      0A0h            ; Compare with accumulator
ROM:1D64 D8                       ret     c               ; Return (cond & uncond)
ROM:1D65 FE A2                    cp      0A2h            ; Compare with accumulator
ROM:1D67 38 03                    jr      c, loc_1D6C     ; Jump relative (conditional & unconditional)
ROM:1D67
ROM:1D69 FE A5                    cp      0A5h            ; Compare with accumulator
ROM:1D6B D8                       ret     c               ; Return (cond & uncond)
ROM:1D6B
ROM:1D6C
ROM:1D6C          loc_1D6C:                               ; CODE XREF: sub_1D2D+33↑j
ROM:1D6C                                                  ; sub_1D2D+3A↑j
ROM:1D6C FE 0D                    cp      0Dh             ; Compare with accumulator
ROM:1D6E 20 02                    jr      nz, loc_1D72    ; Jump relative (conditional & unconditional)
ROM:1D6E
ROM:1D70 3E 08                    ld      a, 8            ; Move o1 <- o2
ROM:1D70
ROM:1D72
ROM:1D72          loc_1D72:                               ; CODE XREF: sub_1D2D+41↑j
ROM:1D72 E7                       rst     20h             ; Restart at vector <int>
ROM:1D72
ROM:1D73 C9                       ret                     ; Return (cond & uncond)
ROM:1D73
ROM:1D74          ; ---------------------------------------------------------------------------
ROM:1D74
ROM:1D74          loc_1D74:                               ; CODE XREF: sub_1D2D+B↑j
ROM:1D74                                                  ; sub_1D2D+F↑j
ROM:1D74 CD 4C 28                 call    sub_284C        ; call (cond & uncond)
ROM:1D74
ROM:1D77 C3 19 0B                 jp      sub_B19         ; Jump (conditional & unconditional)
ROM:1D77
ROM:1D7A          ; ---------------------------------------------------------------------------
ROM:1D7A
ROM:1D7A          loc_1D7A:                               ; CODE XREF: sub_1D2D+21↑j
ROM:1D7A CD 4C 28                 call    sub_284C        ; call (cond & uncond)
ROM:1D7A
ROM:1D7D
ROM:1D7D          loc_1D7D:                               ; CODE XREF: sub_1D2D+65↓j
ROM:1D7D                                                  ; sub_1D2D+6A↓j
ROM:1D7D C3 5D 0B                 jp      sub_B5D         ; Jump (conditional & unconditional)
ROM:1D7D
ROM:1D80          ; ---------------------------------------------------------------------------
ROM:1D80
ROM:1D80          loc_1D80:                               ; CODE XREF: sub_1D2D+25↑j
ROM:1D80 21 CE 40                 ld      hl, 40CEh       ; Move o1 <- o2
ROM:1D83 06 32                    ld      b, 32h ; '2'    ; Move o1 <- o2
ROM:1D85 18 05                    jr      loc_1D8C        ; Jump relative (conditional & unconditional)
ROM:1D85
ROM:1D87          ; ---------------------------------------------------------------------------
ROM:1D87
ROM:1D87          loc_1D87:                               ; CODE XREF: sub_1D2D+29↑j
ROM:1D87 21 00 41                 ld      hl, 4100h       ; Move o1 <- o2
ROM:1D8A 06 1E                    ld      b, 1Eh          ; Move o1 <- o2
ROM:1D8A
ROM:1D8C
ROM:1D8C          loc_1D8C:                               ; CODE XREF: sub_1D2D+58↑j
ROM:1D8C C3 F4 26                 jp      Array_clear     ; HL - Base Address
ROM:1D8C                                                  ; B - Count
ROM:1D8C
ROM:1D8F          ; ---------------------------------------------------------------------------
ROM:1D8F
ROM:1D8F          loc_1D8F:                               ; CODE XREF: sub_1D2D+19↑j
ROM:1D8F                                                  ; ROM:1E6B↓p
ROM:1D8F 21 01 00                 ld      hl, 1           ; Move o1 <- o2
ROM:1D92 18 E9                    jr      loc_1D7D        ; Jump relative (conditional & unconditional)
ROM:1D92
ROM:1D94          ; ---------------------------------------------------------------------------
ROM:1D94
ROM:1D94          loc_1D94:                               ; CODE XREF: sub_1D2D+1D↑j
ROM:1D94                                                  ; ROM:1E71↓p
ROM:1D94 21 FF FF                 ld      hl, 0FFFFh      ; Move o1 <- o2
ROM:1D97 18 E4                    jr      loc_1D7D        ; Jump relative (conditional & unconditional)
ROM:1D97
ROM:1D97          ; End of function sub_1D2D
ROM:1D97
ROM:1D99          ; ---------------------------------------------------------------------------
ROM:1D99 3A BF 40                 ld      a, (byte_40BF)  ; Move o1 <- o2
ROM:1D9C E6 07                    and     7               ; And with accumulator
ROM:1D9E FE 07                    cp      7               ; Compare with accumulator
ROM:1DA0 28 0E                    jr      z, loc_1DB0     ; Jump relative (conditional & unconditional)
ROM:1DA0
ROM:1DA2 1F                       rra                     ; Rotate right through carry accumulator
ROM:1DA3 38 0F                    jr      c, loc_1DB4     ; Jump relative (conditional & unconditional)
ROM:1DA3
ROM:1DA5 1F                       rra                     ; Rotate right through carry accumulator
ROM:1DA6 30 04                    jr      nc, loc_1DAC    ; Jump relative (conditional & unconditional)
ROM:1DA6
ROM:1DA8 3E AA                    ld      a, 0AAh         ; Move o1 <- o2
ROM:1DAA 18 0A                    jr      loc_1DB6        ; Jump relative (conditional & unconditional)
ROM:1DAA
ROM:1DAC          ; ---------------------------------------------------------------------------
ROM:1DAC
ROM:1DAC          loc_1DAC:                               ; CODE XREF: ROM:1DA6↑j
ROM:1DAC 3E A9                    ld      a, 0A9h         ; Move o1 <- o2
ROM:1DAE 18 06                    jr      loc_1DB6        ; Jump relative (conditional & unconditional)
ROM:1DAE
ROM:1DB0          ; ---------------------------------------------------------------------------
ROM:1DB0
ROM:1DB0          loc_1DB0:                               ; CODE XREF: ROM:1DA0↑j
ROM:1DB0 3E A8                    ld      a, 0A8h         ; Move o1 <- o2
ROM:1DB2 18 02                    jr      loc_1DB6        ; Jump relative (conditional & unconditional)
ROM:1DB2
ROM:1DB4          ; ---------------------------------------------------------------------------
ROM:1DB4
ROM:1DB4          loc_1DB4:                               ; CODE XREF: ROM:1DA3↑j
ROM:1DB4 3E AB                    ld      a, 0ABh         ; Move o1 <- o2
ROM:1DB4
ROM:1DB6
ROM:1DB6          loc_1DB6:                               ; CODE XREF: ROM:1DAA↑j
ROM:1DB6                                                  ; ROM:1DAE↑j ...
ROM:1DB6 CD 2F 1E                 call    sub_1E2F        ; call (cond & uncond)
ROM:1DB6
ROM:1DB9 CD 65 16                 call    test_4157_bit0  ; call (cond & uncond)
ROM:1DB9
ROM:1DBC C0                       ret     nz              ; Return (cond & uncond)
ROM:1DBD C3 6F 18                 jp      loc_186F        ; Jump (conditional & unconditional)
ROM:1DBD
ROM:1DC0          ; ---------------------------------------------------------------------------
ROM:1DC0 21 71 40                 ld      hl, 4071h       ; Move o1 <- o2
ROM:1DC3 CB 46                    bit     0, (hl)         ; Test <bit> in operand
ROM:1DC5 CB C6                    set     0, (hl)         ; Set bit
ROM:1DC7 28 02                    jr      z, loc_1DCB     ; Jump relative (conditional & unconditional)
ROM:1DC7
ROM:1DC9 CB 86                    res     0, (hl)         ; Reset bit
ROM:1DC9
ROM:1DCB
ROM:1DCB          loc_1DCB:                               ; CODE XREF: ROM:1DC7↑j
ROM:1DCB C3 8D 18                 jp      loc_188D        ; Jump (conditional & unconditional)
ROM:1DCB
ROM:1DCE          ; ---------------------------------------------------------------------------
ROM:1DCE 21 6B 40                 ld      hl, 406Bh       ; Move o1 <- o2
ROM:1DD1 CB 56                    bit     2, (hl)         ; Test <bit> in operand
ROM:1DD3 CB D6                    set     2, (hl)         ; Set bit
ROM:1DD5 11 7B 01                 ld      de, 17Bh        ; Move o1 <- o2
ROM:1DD8 3E 01                    ld      a, 1            ; Move o1 <- o2
ROM:1DDA 28 06                    jr      z, loc_1DE2     ; Jump relative (conditional & unconditional)
ROM:1DDA
ROM:1DDC CB 96                    res     2, (hl)         ; Reset bit
ROM:1DDE 11 08 01                 ld      de, 108h        ; Move o1 <- o2
ROM:1DE1 AF                       xor     a               ; Exclusive or with accumulator
ROM:1DE1
ROM:1DE2
ROM:1DE2          loc_1DE2:                               ; CODE XREF: ROM:1DDA↑j
ROM:1DE2 ED 53 6C                 ld      (word_406C), de ; Move o1 <- o2
ROM:1DE2 40
ROM:1DE6 CD E6 12                 call    loc_12E6        ; call (cond & uncond)
ROM:1DE6
ROM:1DE9 CD 22 26                 call    sub_2622        ; call (cond & uncond)
ROM:1DE9
ROM:1DEC C3 A4 18                 jp      loc_18A4        ; Jump (conditional & unconditional)
ROM:1DEC
ROM:1DEF          ; ---------------------------------------------------------------------------
ROM:1DEF CD DB 16                 call    test_4157_bit2  ; call (cond & uncond)
ROM:1DEF
ROM:1DF2 C2 EA 16                 jp      nz, sub_16EA    ; Jump (conditional & unconditional)
ROM:1DF2
ROM:1DF5 CD 43 17                 call    sub_1743        ; call (cond & uncond)
ROM:1DF5
ROM:1DF8 C0                       ret     nz              ; Return (cond & uncond)
ROM:1DF9 C3 E1 16                 jp      loc_16E1        ; Jump (conditional & unconditional)
ROM:1DF9
ROM:1DFC          ; ---------------------------------------------------------------------------
ROM:1DFC 5F                       ld      e, a            ; Move o1 <- o2
ROM:1DFD 21 BF 40                 ld      hl, 40BFh       ; Move o1 <- o2
ROM:1E00 56                       ld      d, (hl)         ; Move o1 <- o2
ROM:1E01 E5                       push    hl              ; Push register pair onto stack
ROM:1E02 E7                       rst     20h             ; Restart at vector <int>
ROM:1E02
ROM:1E03 E1                       pop     hl              ; Pop register pair from stack
ROM:1E04 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:1E05 BA                       cp      d               ; Compare with accumulator
ROM:1E06 C8                       ret     z               ; Return (cond & uncond)
ROM:1E07 7B                       ld      a, e            ; Move o1 <- o2
ROM:1E08 18 25                    jr      sub_1E2F        ; Jump relative (conditional & unconditional)
ROM:1E08
ROM:1E0A          ; ---------------------------------------------------------------------------
ROM:1E0A 21 BF 40                 ld      hl, 40BFh       ; Move o1 <- o2
ROM:1E0D CB 66                    bit     4, (hl)         ; Test <bit> in operand
ROM:1E0F 3E 91                    ld      a, 91h          ; Move o1 <- o2
ROM:1E11 20 1C                    jr      nz, sub_1E2F    ; Jump relative (conditional & unconditional)
ROM:1E11
ROM:1E13 3E 81                    ld      a, 81h          ; Move o1 <- o2
ROM:1E15 18 18                    jr      sub_1E2F        ; Jump relative (conditional & unconditional)
ROM:1E15
ROM:1E17          ; ---------------------------------------------------------------------------
ROM:1E17 21 BF 40                 ld      hl, 40BFh       ; Move o1 <- o2
ROM:1E1A CB 5E                    bit     3, (hl)         ; Test <bit> in operand
ROM:1E1C 3E 92                    ld      a, 92h          ; Move o1 <- o2
ROM:1E1E 20 0F                    jr      nz, sub_1E2F    ; Jump relative (conditional & unconditional)
ROM:1E1E
ROM:1E20 3E 82                    ld      a, 82h          ; Move o1 <- o2
ROM:1E22 18 0B                    jr      sub_1E2F        ; Jump relative (conditional & unconditional)
ROM:1E22
ROM:1E24          ; ---------------------------------------------------------------------------
ROM:1E24 21 BF 40                 ld      hl, 40BFh       ; Move o1 <- o2
ROM:1E27 CB 76                    bit     6, (hl)         ; Test <bit> in operand
ROM:1E29 3E 93                    ld      a, 93h          ; Move o1 <- o2
ROM:1E2B 20 02                    jr      nz, sub_1E2F    ; Jump relative (conditional & unconditional)
ROM:1E2B
ROM:1E2D 3E 83                    ld      a, 83h          ; Move o1 <- o2
ROM:1E2D
ROM:1E2F
ROM:1E2F          ; =============== S U B R O U T I N E =======================================
ROM:1E2F
ROM:1E2F
ROM:1E2F          sub_1E2F:                               ; CODE XREF: sub_1B5B+13↑j
ROM:1E2F                                                  ; ROM:loc_1DB6↑p ...
ROM:1E2F CD DC 1B                 call    sub_1BDC        ; call (cond & uncond)
ROM:1E2F
ROM:1E32 C3 BA 1C                 jp      sub_1CBA        ; Jump (conditional & unconditional)
ROM:1E32
ROM:1E32          ; End of function sub_1E2F
ROM:1E32
ROM:1E35          ; ---------------------------------------------------------------------------
ROM:1E35 21 BF 40                 ld      hl, 40BFh       ; Move o1 <- o2
ROM:1E38 CB 7E                    bit     7, (hl)         ; Test <bit> in operand
ROM:1E3A 3E 95                    ld      a, 95h          ; Move o1 <- o2
ROM:1E3C 20 F1                    jr      nz, sub_1E2F    ; Jump relative (conditional & unconditional)
ROM:1E3C
ROM:1E3E 3E 85                    ld      a, 85h          ; Move o1 <- o2
ROM:1E40 18 ED                    jr      sub_1E2F        ; Jump relative (conditional & unconditional)
ROM:1E40
ROM:1E42          ; ---------------------------------------------------------------------------
ROM:1E42 3E 95                    ld      a, 95h          ; Move o1 <- o2
ROM:1E44 18 E9                    jr      sub_1E2F        ; Jump relative (conditional & unconditional)
ROM:1E44
ROM:1E46          ; ---------------------------------------------------------------------------
ROM:1E46 3A BE 40                 ld      a, (byte_40BE)  ; Move o1 <- o2
ROM:1E49 CB 6F                    bit     5, a            ; Test <bit> in operand
ROM:1E4B 20 0D                    jr      nz, loc_1E5A    ; Jump relative (conditional & unconditional)
ROM:1E4B
ROM:1E4D 06 A5                    ld      b, 0A5h         ; Move o1 <- o2
ROM:1E4F CB 67                    bit     4, a            ; Test <bit> in operand
ROM:1E51 20 04                    jr      nz, loc_1E57    ; Jump relative (conditional & unconditional)
ROM:1E51
ROM:1E53
ROM:1E53          loc_1E53:                               ; CODE XREF: ROM:1E55↓j
ROM:1E53 04                       inc     b               ; Increment operand
ROM:1E54 17                       rla                     ; Rotate left through carry accumulator
ROM:1E55 30 FC                    jr      nc, loc_1E53    ; Jump relative (conditional & unconditional)
ROM:1E55
ROM:1E57
ROM:1E57          loc_1E57:                               ; CODE XREF: ROM:1E51↑j
ROM:1E57 78                       ld      a, b            ; Move o1 <- o2
ROM:1E58 18 D5                    jr      sub_1E2F        ; Jump relative (conditional & unconditional)
ROM:1E58
ROM:1E5A          ; ---------------------------------------------------------------------------
ROM:1E5A
ROM:1E5A          loc_1E5A:                               ; CODE XREF: ROM:1E4B↑j
ROM:1E5A 3E AC                    ld      a, 0ACh         ; Move o1 <- o2
ROM:1E5C E7                       rst     20h             ; Restart at vector <int>
ROM:1E5C
ROM:1E5D 2A AA 40                 ld      hl, (word_40AA) ; Move o1 <- o2
ROM:1E60 22 20 42                 ld      (word_4220), hl ; Move o1 <- o2
ROM:1E60
ROM:1E63
ROM:1E63          loc_1E63:                               ; CODE XREF: ROM:1E79↓j
ROM:1E63 3E 98                    ld      a, 98h          ; Move o1 <- o2
ROM:1E65 DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:1E65                                                  ; A - if < 10h is 0000xxxx read mask
ROM:1E65                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:1E65                                                  ;         A[5:3] - bit index for...
ROM:1E65                                                  ;         A[2:0] - bit index for...
ROM:1E65                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:1E65
ROM:1E66 28 13                    jr      z, loc_1E7B     ; Jump relative (conditional & unconditional)
ROM:1E66
ROM:1E68 3E 72                    ld      a, 72h ; 'r'    ; Move o1 <- o2
ROM:1E6A DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:1E6A                                                  ; A - if < 10h is 0000xxxx read mask
ROM:1E6A                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:1E6A                                                  ;         A[5:3] - bit index for...
ROM:1E6A                                                  ;         A[2:0] - bit index for...
ROM:1E6A                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:1E6A
ROM:1E6B C4 8F 1D                 call    nz, loc_1D8F    ; call (cond & uncond)
ROM:1E6B
ROM:1E6E 3E 73                    ld      a, 73h ; 's'    ; Move o1 <- o2
ROM:1E70 DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:1E70                                                  ; A - if < 10h is 0000xxxx read mask
ROM:1E70                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:1E70                                                  ;         A[5:3] - bit index for...
ROM:1E70                                                  ;         A[2:0] - bit index for...
ROM:1E70                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:1E70
ROM:1E71 C4 94 1D                 call    nz, loc_1D94    ; call (cond & uncond)
ROM:1E71
ROM:1E74 0E 32                    ld      c, 32h ; '2'    ; Move o1 <- o2
ROM:1E76 CD DE 27                 call    sub_27DE        ; call (cond & uncond)
ROM:1E76
ROM:1E79 18 E8                    jr      loc_1E63        ; Jump relative (conditional & unconditional)
ROM:1E79
ROM:1E7B          ; ---------------------------------------------------------------------------
ROM:1E7B
ROM:1E7B          loc_1E7B:                               ; CODE XREF: ROM:1E66↑j
ROM:1E7B 2A AA 40                 ld      hl, (word_40AA) ; Move o1 <- o2
ROM:1E7E ED 5B 20                 ld      de, (word_4220) ; Move o1 <- o2
ROM:1E7E 42
ROM:1E82 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:1E82
ROM:1E83 28 0C                    jr      z, loc_1E91     ; Jump relative (conditional & unconditional)
ROM:1E83
ROM:1E85          ; START OF FUNCTION CHUNK FOR sub_2188
ROM:1E85
ROM:1E85          loc_1E85:                               ; CODE XREF: sub_2188+72↓j
ROM:1E85 22 C4 40                 ld      (word_40C4), hl ; Move o1 <- o2
ROM:1E88 CD 11 22                 call    sub_2211        ; call (cond & uncond)
ROM:1E88
ROM:1E8B 2A 63 41                 ld      hl, (word_4163) ; Move o1 <- o2
ROM:1E8E 22 61 41                 ld      (word_4161), hl ; Move o1 <- o2
ROM:1E8E
ROM:1E91
ROM:1E91          loc_1E91:                               ; CODE XREF: ROM:1E83↑j
ROM:1E91 3E AC                    ld      a, 0ACh         ; Move o1 <- o2
ROM:1E93 18 9A                    jr      sub_1E2F        ; Jump relative (conditional & unconditional)
ROM:1E93
ROM:1E93          ; END OF FUNCTION CHUNK FOR sub_2188
ROM:1E95
ROM:1E95          ; =============== S U B R O U T I N E =======================================
ROM:1E95
ROM:1E95
ROM:1E95          sub_1E95:                               ; CODE XREF: sub_1EB2+8↓p
ROM:1E95                                                  ; Setup_all+8↓p
ROM:1E95 3E 99                    ld      a, 99h          ; Move o1 <- o2
ROM:1E97 DF                       rst     18h             ;  call kbReadColumn
ROM:1E97
ROM:1E98 C8                       ret     z               ; Return (cond & uncond)
ROM:1E99 CD 8C 0A                 call    FBS_Clear       ; call (cond & uncond)
ROM:1E99
ROM:1E9C
ROM:1E9C          loc_1E9C:                               ; CODE XREF: sub_1E95+A↓j
ROM:1E9C 3E 99                    ld      a, 99h          ; we are stuck here
ROM:1E9E DF                       rst     18h             ;  call kbReadColumn
ROM:1E9E
ROM:1E9F 20 FB                    jr      nz, loc_1E9C    ; We need Zero flag to go further
ROM:1E9F
ROM:1EA1 CD 08 0F                 call    sub_F08         ; call (cond & uncond)
ROM:1EA1
ROM:1EA4 C3 34 0C                 jp      sub_C34         ; Jump (conditional & unconditional)
ROM:1EA4
ROM:1EA4          ; End of function sub_1E95
ROM:1EA4
ROM:1EA7
ROM:1EA7          ; =============== S U B R O U T I N E =======================================
ROM:1EA7
ROM:1EA7
ROM:1EA7          sub_1EA7:                               ; CODE XREF: sub_19FC:loc_1A02↑p
ROM:1EA7                                                  ; sub_19FC:loc_1A49↑p
ROM:1EA7 21 72 40                 ld      hl, 4072h       ; Move o1 <- o2
ROM:1EAA CB 56                    bit     2, (hl)         ; Test <bit> in operand
ROM:1EAC C8                       ret     z               ; Return (cond & uncond)
ROM:1EAD CB 96                    res     2, (hl)         ; Reset bit
ROM:1EAF C3 4C 26                 jp      sub_264C        ; Jump (conditional & unconditional)
ROM:1EAF
ROM:1EAF          ; End of function sub_1EA7
ROM:1EAF
ROM:1EB2
ROM:1EB2          ; =============== S U B R O U T I N E =======================================
ROM:1EB2
ROM:1EB2
ROM:1EB2          sub_1EB2:                               ; CODE XREF: CleanupMemory:loc_19F4↑p
ROM:1EB2                                                  ; sub_1EB2+17↓j
ROM:1EB2 CD 94 26                 call    sub_2694        ; call (cond & uncond)
ROM:1EB2
ROM:1EB5 3E 9B                    ld      a, 9Bh          ; Move o1 <- o2
ROM:1EB7 DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:1EB7                                                  ; A - if < 10h is 0000xxxx read mask
ROM:1EB7                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:1EB7                                                  ;         A[5:3] - bit index for...
ROM:1EB7                                                  ;         A[2:0] - bit index for...
ROM:1EB7                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:1EB7
ROM:1EB8 20 11                    jr      nz, loc_1ECB    ; Jump relative (conditional & unconditional)
ROM:1EB8
ROM:1EBA CD 95 1E                 call    sub_1E95        ; call (cond & uncond)
ROM:1EBA
ROM:1EBD 3E 82                    ld      a, 82h          ; Move o1 <- o2
ROM:1EBF DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:1EBF                                                  ; A - if < 10h is 0000xxxx read mask
ROM:1EBF                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:1EBF                                                  ;         A[5:3] - bit index for...
ROM:1EBF                                                  ;         A[2:0] - bit index for...
ROM:1EBF                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:1EBF
ROM:1EC0 C4 E4 17                 call    nz, sub_17E4    ; call (cond & uncond)
ROM:1EC0
ROM:1EC3 3E 8E                    ld      a, 8Eh          ; Move o1 <- o2
ROM:1EC5 DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:1EC5                                                  ; A - if < 10h is 0000xxxx read mask
ROM:1EC5                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:1EC5                                                  ;         A[5:3] - bit index for...
ROM:1EC5                                                  ;         A[2:0] - bit index for...
ROM:1EC5                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:1EC5
ROM:1EC6 C4 A1 2B                 call    nz, sub_2BA1    ; call (cond & uncond)
ROM:1EC6
ROM:1EC9 18 E7                    jr      sub_1EB2        ; Jump relative (conditional & unconditional)
ROM:1EC9
ROM:1ECB          ; ---------------------------------------------------------------------------
ROM:1ECB
ROM:1ECB          loc_1ECB:                               ; CODE XREF: sub_1EB2+6↑j
ROM:1ECB CD 3C 24                 call    sub_243C        ; call (cond & uncond)
ROM:1ECB
ROM:1ECE 21 72 40                 ld      hl, 4072h       ; Move o1 <- o2
ROM:1ED1 CB E6                    set     4, (hl)         ; Set bit
ROM:1ED3 2A 5D 41                 ld      hl, (word_415D) ; Move o1 <- o2
ROM:1ED6 22 5F 41                 ld      (word_415F), hl ; Move o1 <- o2
ROM:1ED9 22 61 41                 ld      (word_4161), hl ; Move o1 <- o2
ROM:1EDC 22 63 41                 ld      (word_4163), hl ; Move o1 <- o2
ROM:1EDF C9                       ret                     ; Return (cond & uncond)
ROM:1EDF
ROM:1EDF          ; End of function sub_1EB2
ROM:1EDF
ROM:1EE0
ROM:1EE0          ; =============== S U B R O U T I N E =======================================
ROM:1EE0
ROM:1EE0
ROM:1EE0          Setup_all:                              ; CODE XREF: CleanupMemory:Start↑p
ROM:1EE0 CD 57 02                 call    IOnVarInit      ; call (cond & uncond)
ROM:1EE0
ROM:1EE3 3E 82                    ld      a, 82h          ; Move o1 <- o2
ROM:1EE5 DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:1EE5                                                  ; A - if < 10h is 0000xxxx read mask
ROM:1EE5                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:1EE5                                                  ;         A[5:3] - bit index for...
ROM:1EE5                                                  ;         A[2:0] - bit index for...
ROM:1EE5                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:1EE5
ROM:1EE6 20 6C                    jr      nz, loc_1F54    ; Jump relative (conditional & unconditional)
ROM:1EE6
ROM:1EE8 CD 95 1E                 call    sub_1E95        ; call (cond & uncond)
ROM:1EE8
ROM:1EEB 2A 22 42                 ld      hl, (word_4222) ; Move o1 <- o2
ROM:1EEE 11 AA 55                 ld      de, 55AAh       ; Move o1 <- o2
ROM:1EF1 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:1EF1
ROM:1EF2 20 69                    jr      nz, loc_1F5D    ; Jump relative (conditional & unconditional)
ROM:1EF2
ROM:1EF4 CD 51 02                 call    InitTimers      ; call (cond & uncond)
ROM:1EF4
ROM:1EF7 21 00 00                 ld      hl, 0           ; Move o1 <- o2
ROM:1EFA 22 6F 40                 ld      (word_406F), hl ; load zero
ROM:1EFD 22 85 40                 ld      (word_4085), hl ; Move o1 <- o2
ROM:1F00 22 70 40                 ld      (word_406F+1), hl ; load zero also here
ROM:1F03 2A 7B 41                 ld      hl, (word_417B) ; Move o1 <- o2
ROM:1F06 22 26 42                 ld      (word_4226), hl ; Move o1 <- o2
ROM:1F09 2A A8 40                 ld      hl, (word_40A8) ; Move o1 <- o2
ROM:1F0C 22 24 42                 ld      (word_4224), hl ; Move o1 <- o2
ROM:1F0F FB                       ei                      ; Enable interrupts
ROM:1F10 CD EC 30                 call    sub_30EC        ; call (cond & uncond)
ROM:1F10
ROM:1F13 CD 9F 0B                 call    sub_B9F         ; call (cond & uncond)
ROM:1F13
ROM:1F16 F3                       di                      ; Disable interrupts
ROM:1F17 CD B2 0B                 call    sub_BB2         ; call (cond & uncond)
ROM:1F17
ROM:1F1A CD D3 33                 call    UsartCtrl       ; call (cond & uncond)
ROM:1F1A
ROM:1F1D CD 0A 25                 call    sub_250A        ; call (cond & uncond)
ROM:1F1D
ROM:1F20 C8                       ret     z               ; Return (cond & uncond)
ROM:1F21 F5                       push    af              ; Push register pair onto stack
ROM:1F22 CD 79 24                 call    sub_2479        ; call (cond & uncond)
ROM:1F22
ROM:1F25 2A 24 42                 ld      hl, (word_4224) ; Move o1 <- o2
ROM:1F28 ED 5B A8                 ld      de, (word_40A8) ; Move o1 <- o2
ROM:1F28 40
ROM:1F2C CD F0 30                 call    sub_30F0        ; call (cond & uncond)
ROM:1F2C
ROM:1F2F 2A 26 42                 ld      hl, (word_4226) ; Move o1 <- o2
ROM:1F32 22 7B 41                 ld      (word_417B), hl ; Move o1 <- o2
ROM:1F35 21 58 41                 ld      hl, 4158h       ; Move o1 <- o2
ROM:1F38 CB 66                    bit     4, (hl)         ; Test <bit> in operand
ROM:1F3A 28 05                    jr      z, loc_1F41     ; Jump relative (conditional & unconditional)
ROM:1F3A
ROM:1F3C CD 05 29                 call    sub_2905        ; call (cond & uncond)
ROM:1F3C
ROM:1F3F 18 11                    jr      loc_1F52        ; Jump relative (conditional & unconditional)
ROM:1F3F
ROM:1F41          ; ---------------------------------------------------------------------------
ROM:1F41
ROM:1F41          loc_1F41:                               ; CODE XREF: Setup_all+5A↑j
ROM:1F41 CB 76                    bit     6, (hl)         ; Test <bit> in operand
ROM:1F43 28 05                    jr      z, loc_1F4A     ; Jump relative (conditional & unconditional)
ROM:1F43
ROM:1F45 C4 D9 25                 call    nz, sub_25D9    ; call (cond & uncond)
ROM:1F45
ROM:1F48 18 08                    jr      loc_1F52        ; Jump relative (conditional & unconditional)
ROM:1F48
ROM:1F4A          ; ---------------------------------------------------------------------------
ROM:1F4A
ROM:1F4A          loc_1F4A:                               ; CODE XREF: Setup_all+63↑j
ROM:1F4A 21 56 41                 ld      hl, 4156h       ; Move o1 <- o2
ROM:1F4D CB 6E                    bit     5, (hl)         ; Test <bit> in operand
ROM:1F4F C4 DB 2E                 call    nz, sub_2EDB    ; call (cond & uncond)
ROM:1F4F
ROM:1F52
ROM:1F52          loc_1F52:                               ; CODE XREF: Setup_all+5F↑j
ROM:1F52                                                  ; Setup_all+68↑j
ROM:1F52 F1                       pop     af              ; Pop register pair from stack
ROM:1F53 C9                       ret                     ; Return (cond & uncond)
ROM:1F53
ROM:1F54          ; ---------------------------------------------------------------------------
ROM:1F54
ROM:1F54          loc_1F54:                               ; CODE XREF: Setup_all+6↑j
ROM:1F54 21 00 40                 ld      hl, 4000h       ; Move o1 <- o2
ROM:1F57 36 01                    ld      (hl), 1         ; Move o1 <- o2
ROM:1F57
ROM:1F59
ROM:1F59          loc_1F59:                               ; CODE XREF: sub_17E4+29↑j
ROM:1F59 21 F4 19                 ld      hl, 19F4h       ; Move o1 <- o2
ROM:1F5C E3                       ex      (sp), hl        ; Exchange operands
ROM:1F5C
ROM:1F5D
ROM:1F5D          loc_1F5D:                               ; CODE XREF: Setup_all+12↑j
ROM:1F5D F3                       di                      ; Disable interrupts
ROM:1F5E 21 56 41                 ld      hl, 4156h       ; Move o1 <- o2
ROM:1F61 01 A9 1E                 ld      bc, 1EA9h       ; Move o1 <- o2
ROM:1F64 36 00                    ld      (hl), 0         ; Move o1 <- o2
ROM:1F66 11 57 41                 ld      de, 4157h       ; Move o1 <- o2
ROM:1F69 ED B0                    ldir                    ; Transfer data (DE)->(HL) until byte
ROM:1F69                                                  ; counter is zero, increment destination
ROM:1F69                                                  ; and source addresses
ROM:1F6B AF                       xor     a               ; Exclusive or with accumulator
ROM:1F6C CD C7 12                 call    sub_12C7        ; call (cond & uncond)
ROM:1F6C
ROM:1F6F CD 0A 11                 call    Display_Clear_40AC ; call (cond & uncond)
ROM:1F6F
ROM:1F72 CD B2 0B                 call    sub_BB2         ; call (cond & uncond)
ROM:1F72
ROM:1F75 21 91 41                 ld      hl, 4191h       ; Move o1 <- o2
ROM:1F78 CD 01 27                 call    Display_fill_with_0Fh ; call (cond & uncond)
ROM:1F78
ROM:1F7B CD 0A 25                 call    sub_250A        ; call (cond & uncond)
ROM:1F7B
ROM:1F7E C4 E7 24                 call    nz, sub_24E7    ; call (cond & uncond)
ROM:1F7E
ROM:1F81 21 FF 5F                 ld      hl, 5FFFh       ; Move o1 <- o2
ROM:1F84 22 FA 43                 ld      (data_for_40bd_ptr_5fffh), hl ; Move o1 <- o2
ROM:1F87 21 FC 43                 ld      hl, 43FCh       ; Move o1 <- o2
ROM:1F8A 22 6B 41                 ld      (word_416B), hl ; Move o1 <- o2
ROM:1F8D CD 15 1B                 call    sub_1B15        ; call (cond & uncond)
ROM:1F8D
ROM:1F90 21 35 42                 ld      hl, 4235h       ; Move o1 <- o2
ROM:1F93 06 41                    ld      b, 41h ; 'A'    ; Move o1 <- o2
ROM:1F95 CD F4 26                 call    Array_clear     ; HL - Base Address
ROM:1F95                                                  ; B - Count
ROM:1F95
ROM:1F98 CD 35 26                 call    sub_2635        ; call (cond & uncond)
ROM:1F98
ROM:1F9B
ROM:1F9B          loc_1F9B:                               ; CODE XREF: ROM:loc_18A4↑p
ROM:1F9B 21 6B 40                 ld      hl, 406Bh       ; Move o1 <- o2
ROM:1F9E CB 56                    bit     2, (hl)         ; Test <bit> in operand
ROM:1FA0 21 FC 00                 ld      hl, 0FCh        ; Move o1 <- o2
ROM:1FA3 28 03                    jr      z, loc_1FA8     ; Jump relative (conditional & unconditional)
ROM:1FA3
ROM:1FA5 21 06 01                 ld      hl, 106h        ; Move o1 <- o2
ROM:1FA5
ROM:1FA8
ROM:1FA8          loc_1FA8:                               ; CODE XREF: Setup_all+C3↑j
ROM:1FA8 22 79 41                 ld      (word_4179), hl ; Move o1 <- o2
ROM:1FAB 21 44 42                 ld      hl, 4244h       ; Move o1 <- o2
ROM:1FAE ED 5B 79                 ld      de, (word_4179) ; Move o1 <- o2
ROM:1FAE 41
ROM:1FB2 06 0A                    ld      b, 0Ah          ; Move o1 <- o2
ROM:1FB2
ROM:1FB4
ROM:1FB4          loc_1FB4:                               ; CODE XREF: Setup_all+DE↓j
ROM:1FB4 1A                       ld      a, (de)         ; Move o1 <- o2
ROM:1FB5 17                       rla                     ; Rotate left through carry accumulator
ROM:1FB6 CB 06                    rlc     (hl)            ; Rotate left branch carry
ROM:1FB8 1F                       rra                     ; Rotate right through carry accumulator
ROM:1FB9 77                       ld      (hl), a         ; Move o1 <- o2
ROM:1FBA 13                       inc     de              ; Increment operand
ROM:1FBB CD 34 28                 call    sub_2834        ; call (cond & uncond)
ROM:1FBB
ROM:1FBE 10 F4                    djnz    loc_1FB4        ; Decrement reg B and jump relative if zero
ROM:1FBE
ROM:1FC0 21 AA 55                 ld      hl, 55AAh       ; Move o1 <- o2
ROM:1FC3 22 22 42                 ld      (word_4222), hl ; Move o1 <- o2
ROM:1FC6 C3 D3 33                 jp      UsartCtrl       ; Jump (conditional & unconditional)
ROM:1FC6
ROM:1FC6          ; End of function Setup_all
ROM:1FC6
ROM:1FC9          ; ---------------------------------------------------------------------------
ROM:1FC9          ; START OF FUNCTION CHUNK FOR sub_1B5B
ROM:1FC9
ROM:1FC9          loc_1FC9:                               ; CODE XREF: sub_1B5B+23↑j
ROM:1FC9 21 04 76                 ld      hl, 7604h       ; Move o1 <- o2
ROM:1FCC 18 03                    jr      loc_1FD1        ; Jump relative (conditional & unconditional)
ROM:1FCC
ROM:1FCE          ; ---------------------------------------------------------------------------
ROM:1FCE
ROM:1FCE          loc_1FCE:                               ; CODE XREF: sub_1B5B+28↑j
ROM:1FCE 21 05 77                 ld      hl, 7705h       ; Move o1 <- o2
ROM:1FCE
ROM:1FD1
ROM:1FD1          loc_1FD1:                               ; CODE XREF: sub_1B5B+471↑j
ROM:1FD1 11 A2 A3                 ld      de, 0A3A2h      ; Move o1 <- o2
ROM:1FD4 18 24                    jr      loc_1FFA        ; Jump relative (conditional & unconditional)
ROM:1FD4
ROM:1FD4          ; END OF FUNCTION CHUNK FOR sub_1B5B
ROM:1FD6          ; ---------------------------------------------------------------------------
ROM:1FD6          ; START OF FUNCTION CHUNK FOR sub_2905
ROM:1FD6
ROM:1FD6          loc_1FD6:                               ; CODE XREF: sub_2905+34↓j
ROM:1FD6 21 0C 8D                 ld      hl, 8D0Ch       ; Move o1 <- o2
ROM:1FD9 11 9F 9E                 ld      de, 9E9Fh       ; Move o1 <- o2
ROM:1FDC 18 1C                    jr      loc_1FFA        ; Jump relative (conditional & unconditional)
ROM:1FDC
ROM:1FDC          ; END OF FUNCTION CHUNK FOR sub_2905
ROM:1FDE          ; ---------------------------------------------------------------------------
ROM:1FDE CD EC 1F                 call    sub_1FEC        ; call (cond & uncond)
ROM:1FDE
ROM:1FE1 3A 2D 42                 ld      a, (byte_422D)  ; Move o1 <- o2
ROM:1FE4 B7                       or      a               ; Or with accumulator
ROM:1FE5 C8                       ret     z               ; Return (cond & uncond)
ROM:1FE6 3A A3 40                 ld      a, (byte_40A3)  ; Move o1 <- o2
ROM:1FE9 C3 60 1B                 jp      loc_1B60        ; Jump (conditional & unconditional)
ROM:1FE9
ROM:1FEC
ROM:1FEC          ; =============== S U B R O U T I N E =======================================
ROM:1FEC
ROM:1FEC
ROM:1FEC          sub_1FEC:                               ; CODE XREF: sub_1B5B+1E↑j
ROM:1FEC                                                  ; ROM:1FDE↑p
ROM:1FEC
ROM:1FEC          ; FUNCTION CHUNK AT ROM:1FFA SIZE 00000025 BYTES
ROM:1FEC
ROM:1FEC 21 0B 75                 ld      hl, 750Bh       ; Move o1 <- o2
ROM:1FEF 11 A0 A1                 ld      de, 0A1A0h      ; Move o1 <- o2
ROM:1FF2 18 06                    jr      loc_1FFA        ; Jump relative (conditional & unconditional)
ROM:1FF2
ROM:1FF2          ; End of function sub_1FEC
ROM:1FF2
ROM:1FF4          ; ---------------------------------------------------------------------------
ROM:1FF4 21 0A 85                 ld      hl, 850Ah       ; Move o1 <- o2
ROM:1FF7 11 A4 00                 ld      de, 0A4h        ; Move o1 <- o2
ROM:1FF7
ROM:1FFA          ; START OF FUNCTION CHUNK FOR sub_2905
ROM:1FFA          ;   ADDITIONAL PARENT FUNCTION sub_1B5B
ROM:1FFA          ;   ADDITIONAL PARENT FUNCTION sub_1FEC
ROM:1FFA
ROM:1FFA          loc_1FFA:                               ; CODE XREF: sub_1B5B+479↑j
ROM:1FFA                                                  ; sub_2905-929↑j ...
ROM:1FFA 22 1C 42                 ld      (word_421C), hl ; Move o1 <- o2
ROM:1FFD ED 53 1E                 ld      (word_421E), de ; Move o1 <- o2
ROM:1FFD 42
ROM:2001 2A AA 40                 ld      hl, (word_40AA) ; Move o1 <- o2
ROM:2004 22 81 41                 ld      (word_4181), hl ; Move o1 <- o2
ROM:2007 2A 7B 41                 ld      hl, (word_417B) ; Move o1 <- o2
ROM:200A 22 7F 41                 ld      (word_417F), hl ; Move o1 <- o2
ROM:200A
ROM:200D
ROM:200D          loc_200D:                               ; CODE XREF: sub_2905:loc_20CB↓j
ROM:200D 22 73 40                 ld      (word_4073), hl ; Move o1 <- o2
ROM:2010 CD 3A 22                 call    sub_223A        ; call (cond & uncond)
ROM:2010
ROM:2013
ROM:2013          loc_2013:                               ; CODE XREF: sub_2905-84E↓j
ROM:2013                                                  ; sub_2905-824↓j
ROM:2013 3A 1D 42                 ld      a, (word_421C+1) ; Move o1 <- o2
ROM:2016 DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:2016                                                  ; A - if < 10h is 0000xxxx read mask
ROM:2016                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:2016                                                  ;         A[5:3] - bit index for...
ROM:2016                                                  ;         A[2:0] - bit index for...
ROM:2016                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:2016
ROM:2017 C2 99 20                 jp      nz, loc_2099    ; Jump (conditional & unconditional)
ROM:2017
ROM:201A CD 28 20                 call    sub_2028        ; call (cond & uncond)
ROM:201A
ROM:201D 18 03                    jr      loc_2022        ; Jump relative (conditional & unconditional)
ROM:201D
ROM:201D          ; END OF FUNCTION CHUNK FOR sub_2905
ROM:201F          ; ---------------------------------------------------------------------------
ROM:201F          ; START OF FUNCTION CHUNK FOR sub_17E4
ROM:201F          ;   ADDITIONAL PARENT FUNCTION sub_2905
ROM:201F
ROM:201F          loc_201F:                               ; CODE XREF: sub_17E4+23↑j
ROM:201F                                                  ; sub_2905-7E9↓j ...
ROM:201F CD 8D 27                 call    sub_278D        ; call (cond & uncond)
ROM:201F
ROM:2022
ROM:2022          loc_2022:                               ; CODE XREF: sub_2905-8E8↑j
ROM:2022                                                  ; sub_2905-848↓j
ROM:2022 CD 94 26                 call    sub_2694        ; call (cond & uncond)
ROM:2022
ROM:2025 C3 BE 28                 jp      sub_28BE        ; Jump (conditional & unconditional)
ROM:2025
ROM:2025          ; END OF FUNCTION CHUNK FOR sub_17E4
ROM:2028
ROM:2028          ; =============== S U B R O U T I N E =======================================
ROM:2028
ROM:2028
ROM:2028          sub_2028:                               ; CODE XREF: sub_2905-8EB↑p
ROM:2028
ROM:2028          ; FUNCTION CHUNK AT ROM:206D SIZE 0000002C BYTES
ROM:2028          ; FUNCTION CHUNK AT ROM:263C SIZE 00000004 BYTES
ROM:2028          ; FUNCTION CHUNK AT ROM:2972 SIZE 0000004D BYTES
ROM:2028
ROM:2028 3A 1C 42                 ld      a, (word_421C)  ; Move o1 <- o2
ROM:202B FE 04                    cp      4               ; Compare with accumulator
ROM:202D 28 48                    jr      z, loc_2077     ; Jump relative (conditional & unconditional)
ROM:202D
ROM:202F FE 05                    cp      5               ; Compare with accumulator
ROM:2031 28 4C                    jr      z, loc_207F     ; Jump relative (conditional & unconditional)
ROM:2031
ROM:2033 FE 0A                    cp      0Ah             ; Compare with accumulator
ROM:2035 28 4F                    jr      z, loc_2086     ; Jump relative (conditional & unconditional)
ROM:2035
ROM:2037 FE 0C                    cp      0Ch             ; Compare with accumulator
ROM:2039 CA 72 29                 jp      z, loc_2972     ; Jump (conditional & unconditional)
ROM:2039
ROM:203C CD 59 14                 call    sub_1459        ; call (cond & uncond)
ROM:203C
ROM:203F 30 2C                    jr      nc, loc_206D    ; Jump relative (conditional & unconditional)
ROM:203F
ROM:2041 E5                       push    hl              ; Push register pair onto stack
ROM:2042 ED 5B 7F                 ld      de, (word_417F) ; Move o1 <- o2
ROM:2042 41
ROM:2046 19                       add     hl, de          ; Add <reg> to A
ROM:2047 22 7B 41                 ld      (word_417B), hl ; Move o1 <- o2
ROM:2047
ROM:204A
ROM:204A          loc_204A:                               ; CODE XREF: sub_2028+55↓j
ROM:204A D1                       pop     de              ; Pop register pair from stack
ROM:204B 3A 1C 42                 ld      a, (word_421C)  ; Move o1 <- o2
ROM:204B
ROM:204B          ; End of function sub_2028
ROM:204B
ROM:204E
ROM:204E          ; =============== S U B R O U T I N E =======================================
ROM:204E
ROM:204E
ROM:204E          sub_204E:                               ; CODE XREF: sub_1C67+3E↑p
ROM:204E                                                  ; sub_2028+6F↓j ...
ROM:204E CD 0A 1B                 call    sub_1B0A        ; call (cond & uncond)
ROM:204E
ROM:2051 E5                       push    hl              ; Push register pair onto stack
ROM:2052 CD 43 17                 call    sub_1743        ; call (cond & uncond)
ROM:2052
ROM:2055
ROM:2055          loc_2055:
ROM:2055 28 08                    jr      z, loc_205F     ; Jump relative (conditional & unconditional)
ROM:2055
ROM:2057 CD 58 17                 call    sub_1758        ; call (cond & uncond)
ROM:2057
ROM:205A 21 1B 42                 ld      hl, 421Bh       ; Move o1 <- o2
ROM:205D 36 FF                    ld      (hl), 0FFh      ; Move o1 <- o2
ROM:205D
ROM:205F
ROM:205F          loc_205F:                               ; CODE XREF: sub_204E:loc_2055↑j
ROM:205F E1                       pop     hl              ; Pop register pair from stack
ROM:2060 77                       ld      (hl), a         ; Move o1 <- o2
ROM:2061 CD 47 28                 call    sub_2847        ; call (cond & uncond)
ROM:2061
ROM:2064 23                       inc     hl              ; Increment operand
ROM:2064
ROM:2064          ; End of function sub_204E
ROM:2064
ROM:2065
ROM:2065          ; =============== S U B R O U T I N E =======================================
ROM:2065
ROM:2065
ROM:2065          sub_2065:                               ; CODE XREF: sub_1BDC+3↑p
ROM:2065
ROM:2065          ; FUNCTION CHUNK AT ROM:1B3C SIZE 0000001F BYTES
ROM:2065          ; FUNCTION CHUNK AT ROM:2658 SIZE 00000004 BYTES
ROM:2065
ROM:2065 77                       ld      (hl), a         ; Move o1 <- o2
ROM:2066 23                       inc     hl              ; Increment operand
ROM:2067 CD 2D 28                 call    sub_282D        ; call (cond & uncond)
ROM:2067
ROM:206A C3 3C 1B                 jp      loc_1B3C        ; Jump (conditional & unconditional)
ROM:206A
ROM:206A          ; End of function sub_2065
ROM:206A
ROM:206D          ; ---------------------------------------------------------------------------
ROM:206D          ; START OF FUNCTION CHUNK FOR sub_2028
ROM:206D
ROM:206D          loc_206D:                               ; CODE XREF: sub_2028+17↑j
ROM:206D                                                  ; sub_2028+52↓j ...
ROM:206D AF                       xor     a               ; Exclusive or with accumulator
ROM:206E 32 2D 42                 ld      (byte_422D), a  ; Move o1 <- o2
ROM:2071 CD 6D 21                 call    sub_216D        ; call (cond & uncond)
ROM:2071
ROM:2074 C3 3C 26                 jp      loc_263C        ; Jump (conditional & unconditional)
ROM:2074
ROM:2077          ; ---------------------------------------------------------------------------
ROM:2077
ROM:2077          loc_2077:                               ; CODE XREF: sub_2028+5↑j
ROM:2077 CD 92 14                 call    sub_1492        ; call (cond & uncond)
ROM:2077
ROM:207A 30 F1                    jr      nc, loc_206D    ; Jump relative (conditional & unconditional)
ROM:207A
ROM:207C
ROM:207C          loc_207C:                               ; CODE XREF: sub_2028+5C↓j
ROM:207C E5                       push    hl              ; Push register pair onto stack
ROM:207D 18 CB                    jr      loc_204A        ; Jump relative (conditional & unconditional)
ROM:207D
ROM:207F          ; ---------------------------------------------------------------------------
ROM:207F
ROM:207F          loc_207F:                               ; CODE XREF: sub_2028+9↑j
ROM:207F CD 97 14                 call    sub_1497        ; call (cond & uncond)
ROM:207F
ROM:2082 28 E9                    jr      z, loc_206D     ; Jump relative (conditional & unconditional)
ROM:2082
ROM:2084 18 F6                    jr      loc_207C        ; Jump relative (conditional & unconditional)
ROM:2084
ROM:2086          ; ---------------------------------------------------------------------------
ROM:2086
ROM:2086          loc_2086:                               ; CODE XREF: sub_2028+D↑j
ROM:2086 CD 3B 17                 call    sub_173B        ; call (cond & uncond)
ROM:2086
ROM:2089 ED 5B 7B                 ld      de, (word_417B) ; Move o1 <- o2
ROM:2089 41
ROM:208D 2A CC 40                 ld      hl, (word_40CC) ; Move o1 <- o2
ROM:2090 22 7B 41                 ld      (word_417B), hl ; Move o1 <- o2
ROM:2093 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:2093
ROM:2094 3E 0A                    ld      a, 0Ah          ; Move o1 <- o2
ROM:2096 EB                       ex      de, hl          ; Exchange operands
ROM:2097 18 B5                    jr      sub_204E        ; Jump relative (conditional & unconditional)
ROM:2097
ROM:2097          ; END OF FUNCTION CHUNK FOR sub_2028
ROM:2099          ; ---------------------------------------------------------------------------
ROM:2099          ; START OF FUNCTION CHUNK FOR sub_2905
ROM:2099
ROM:2099          loc_2099:                               ; CODE XREF: sub_2905-8EE↑j
ROM:2099 3A 1C 42                 ld      a, (word_421C)  ; Move o1 <- o2
ROM:209C FE 06                    cp      6               ; Compare with accumulator
ROM:209E 38 2E                    jr      c, loc_20CE     ; Jump relative (conditional & unconditional)
ROM:209E
ROM:20A0 F7                       rst     30h             ; Restart at vector <int>
ROM:20A0
ROM:20A1 FE 0E                    cp      0Eh             ; Compare with accumulator
ROM:20A3 28 1B                    jr      z, loc_20C0     ; Jump relative (conditional & unconditional)
ROM:20A3
ROM:20A5 FE 0F                    cp      0Fh             ; Compare with accumulator
ROM:20A7 28 17                    jr      z, loc_20C0     ; Jump relative (conditional & unconditional)
ROM:20A7
ROM:20A9 3E 9C                    ld      a, 9Ch          ; Move o1 <- o2
ROM:20AB DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:20AB                                                  ; A - if < 10h is 0000xxxx read mask
ROM:20AB                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:20AB                                                  ;         A[5:3] - bit index for...
ROM:20AB                                                  ;         A[2:0] - bit index for...
ROM:20AB                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:20AB
ROM:20AC 20 5B                    jr      nz, loc_2109    ; Jump relative (conditional & unconditional)
ROM:20AC
ROM:20AE 3E 9E                    ld      a, 9Eh          ; Move o1 <- o2
ROM:20B0 DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:20B0                                                  ; A - if < 10h is 0000xxxx read mask
ROM:20B0                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:20B0                                                  ;         A[5:3] - bit index for...
ROM:20B0                                                  ;         A[2:0] - bit index for...
ROM:20B0                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:20B0
ROM:20B1 C2 4B 21                 jp      nz, loc_214B    ; Jump (conditional & unconditional)
ROM:20B1
ROM:20B4 3E 97                    ld      a, 97h          ; Move o1 <- o2
ROM:20B6 DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:20B6                                                  ; A - if < 10h is 0000xxxx read mask
ROM:20B6                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:20B6                                                  ;         A[5:3] - bit index for...
ROM:20B6                                                  ;         A[2:0] - bit index for...
ROM:20B6                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:20B6
ROM:20B7 CA 13 20                 jp      z, loc_2013     ; Jump (conditional & unconditional)
ROM:20B7
ROM:20BA
ROM:20BA          loc_20BA:                               ; CODE XREF: sub_2905-81E↓j
ROM:20BA                                                  ; sub_2905-7B5↓j
ROM:20BA CD 6D 21                 call    sub_216D        ; call (cond & uncond)
ROM:20BA
ROM:20BD C3 22 20                 jp      loc_2022        ; Jump (conditional & unconditional)
ROM:20BD
ROM:20C0          ; ---------------------------------------------------------------------------
ROM:20C0
ROM:20C0          loc_20C0:                               ; CODE XREF: sub_2905-862↑j
ROM:20C0                                                  ; sub_2905-85E↑j
ROM:20C0 47                       ld      b, a            ; Move o1 <- o2
ROM:20C1 CD 5D 28                 call    sub_285D        ; call (cond & uncond)
ROM:20C1
ROM:20C4 78                       ld      a, b            ; Move o1 <- o2
ROM:20C5 28 04                    jr      z, loc_20CB     ; Jump relative (conditional & unconditional)
ROM:20C5
ROM:20C7
ROM:20C7          loc_20C7:                               ; CODE XREF: sub_2905-831↓j
ROM:20C7 E7                       rst     20h             ; Restart at vector <int>
ROM:20C7
ROM:20C8 2A 7B 41                 ld      hl, (word_417B) ; Move o1 <- o2
ROM:20C8
ROM:20CB
ROM:20CB          loc_20CB:                               ; CODE XREF: sub_2905-840↑j
ROM:20CB C3 0D 20                 jp      loc_200D        ; Jump (conditional & unconditional)
ROM:20CB
ROM:20CE          ; ---------------------------------------------------------------------------
ROM:20CE
ROM:20CE          loc_20CE:                               ; CODE XREF: sub_2905-867↑j
ROM:20CE F7                       rst     30h             ; Restart at vector <int>
ROM:20CE
ROM:20CF B7                       or      a               ; Or with accumulator
ROM:20D0 28 04                    jr      z, loc_20D6     ; Jump relative (conditional & unconditional)
ROM:20D0
ROM:20D2 FE 03                    cp      3               ; Compare with accumulator
ROM:20D4 38 F1                    jr      c, loc_20C7     ; Jump relative (conditional & unconditional)
ROM:20D4
ROM:20D6
ROM:20D6          loc_20D6:                               ; CODE XREF: sub_2905-835↑j
ROM:20D6 EF                       rst     28h             ; Restart at vector <int>
ROM:20D6
ROM:20D7 FE 9C                    cp      9Ch             ; Compare with accumulator
ROM:20D9 28 1A                    jr      z, loc_20F5     ; Jump relative (conditional & unconditional)
ROM:20D9
ROM:20DB FE 9E                    cp      9Eh             ; Compare with accumulator
ROM:20DD 28 1E                    jr      z, loc_20FD     ; Jump relative (conditional & unconditional)
ROM:20DD
ROM:20DF FE 97                    cp      97h             ; Compare with accumulator
ROM:20E1 C2 13 20                 jp      nz, loc_2013    ; Jump (conditional & unconditional)
ROM:20E1
ROM:20E4 CD E9 20                 call    sub_20E9        ; call (cond & uncond)
ROM:20E4
ROM:20E7 18 D1                    jr      loc_20BA        ; Jump relative (conditional & unconditional)
ROM:20E7
ROM:20E7          ; END OF FUNCTION CHUNK FOR sub_2905
ROM:20E9
ROM:20E9          ; =============== S U B R O U T I N E =======================================
ROM:20E9
ROM:20E9
ROM:20E9          sub_20E9:                               ; CODE XREF: sub_2905-821↑p
ROM:20E9                                                  ; sub_2905:loc_20F5↓p ...
ROM:20E9 ED 5B 81                 ld      de, (word_4181) ; Move o1 <- o2
ROM:20E9 41
ROM:20ED 2A AA 40                 ld      hl, (word_40AA) ; Move o1 <- o2
ROM:20F0 3E 07                    ld      a, 7            ; Move o1 <- o2
ROM:20F2 C3 79 21                 jp      loc_2179        ; Jump (conditional & unconditional)
ROM:20F2
ROM:20F2          ; End of function sub_20E9
ROM:20F2
ROM:20F5          ; ---------------------------------------------------------------------------
ROM:20F5          ; START OF FUNCTION CHUNK FOR sub_2905
ROM:20F5
ROM:20F5          loc_20F5:                               ; CODE XREF: sub_2905-82C↑j
ROM:20F5 CD E9 20                 call    sub_20E9        ; call (cond & uncond)
ROM:20F5
ROM:20F8 CD 2B 14                 call    sub_142B        ; call (cond & uncond)
ROM:20F8
ROM:20FB 18 19                    jr      loc_2116        ; Jump relative (conditional & unconditional)
ROM:20FB
ROM:20FD          ; ---------------------------------------------------------------------------
ROM:20FD
ROM:20FD          loc_20FD:                               ; CODE XREF: sub_2905-828↑j
ROM:20FD CD E9 20                 call    sub_20E9        ; call (cond & uncond)
ROM:20FD
ROM:2100 CD 54 14                 call    sub_1454        ; call (cond & uncond)
ROM:2100
ROM:2103 ED 5B AA                 ld      de, (word_40AA) ; Move o1 <- o2
ROM:2103 40
ROM:2107 18 54                    jr      loc_215D        ; Jump relative (conditional & unconditional)
ROM:2107
ROM:2109          ; ---------------------------------------------------------------------------
ROM:2109
ROM:2109          loc_2109:                               ; CODE XREF: sub_2905-859↑j
ROM:2109 CD 6D 21                 call    sub_216D        ; call (cond & uncond)
ROM:2109
ROM:210C 3A 1E 42                 ld      a, (word_421E)  ; Move o1 <- o2
ROM:210F FE A4                    cp      0A4h            ; Compare with accumulator
ROM:2111 20 0C                    jr      nz, loc_211F    ; Jump relative (conditional & unconditional)
ROM:2111
ROM:2113
ROM:2113          loc_2113:                               ; CODE XREF: ROM:2132↓j
ROM:2113 CD 33 14                 call    sub_1433        ; call (cond & uncond)
ROM:2113
ROM:2116
ROM:2116          loc_2116:                               ; CODE XREF: sub_2905-80A↑j
ROM:2116                                                  ; sub_2905-7DF↓j ...
ROM:2116 3A 1E 42                 ld      a, (word_421E)  ; Move o1 <- o2
ROM:2116
ROM:2119
ROM:2119          loc_2119:                               ; CODE XREF: sub_2905-7A5↓j
ROM:2119 DC 4E 20                 call    c, sub_204E     ; call (cond & uncond)
ROM:2119
ROM:211C C3 1F 20                 jp      loc_201F        ; Jump (conditional & unconditional)
ROM:211C
ROM:211F          ; ---------------------------------------------------------------------------
ROM:211F
ROM:211F          loc_211F:                               ; CODE XREF: sub_2905-7F4↑j
ROM:211F FE 9F                    cp      9Fh             ; Compare with accumulator
ROM:2121 28 05                    jr      z, loc_2128     ; Jump relative (conditional & unconditional)
ROM:2121
ROM:2123
ROM:2123          loc_2123:                               ; CODE XREF: ROM:2137↓j
ROM:2123 CD 11 14                 call    sub_1411        ; call (cond & uncond)
ROM:2123
ROM:2126 18 EE                    jr      loc_2116        ; Jump relative (conditional & unconditional)
ROM:2126
ROM:2128          ; ---------------------------------------------------------------------------
ROM:2128
ROM:2128          loc_2128:                               ; CODE XREF: sub_2905-7E4↑j
ROM:2128                                                  ; ROM:213C↓j
ROM:2128 CD 26 14                 call    sub_1426        ; call (cond & uncond)
ROM:2128
ROM:212B CB BA                    res     7, d            ; Reset bit
ROM:212D 18 E7                    jr      loc_2116        ; Jump relative (conditional & unconditional)
ROM:212D
ROM:212D          ; END OF FUNCTION CHUNK FOR sub_2905
ROM:212F          ; ---------------------------------------------------------------------------
ROM:212F CD 43 21                 call    sub_2143        ; call (cond & uncond)
ROM:212F
ROM:2132 18 DF                    jr      loc_2113        ; Jump relative (conditional & unconditional)
ROM:2132
ROM:2134          ; ---------------------------------------------------------------------------
ROM:2134 CD 43 21                 call    sub_2143        ; call (cond & uncond)
ROM:2134
ROM:2137 18 EA                    jr      loc_2123        ; Jump relative (conditional & unconditional)
ROM:2137
ROM:2139          ; ---------------------------------------------------------------------------
ROM:2139 CD 43 21                 call    sub_2143        ; call (cond & uncond)
ROM:2139
ROM:213C 18 EA                    jr      loc_2128        ; Jump relative (conditional & unconditional)
ROM:213C
ROM:213E          ; ---------------------------------------------------------------------------
ROM:213E CD 43 21                 call    sub_2143        ; call (cond & uncond)
ROM:213E
ROM:2141 18 13                    jr      loc_2156        ; Jump relative (conditional & unconditional)
ROM:2141
ROM:2143
ROM:2143          ; =============== S U B R O U T I N E =======================================
ROM:2143
ROM:2143
ROM:2143          sub_2143:                               ; CODE XREF: ROM:212F↑p
ROM:2143                                                  ; ROM:2134↑p ...
ROM:2143 CD 54 28                 call    sub_2854        ; call (cond & uncond)
ROM:2143
ROM:2146 ED 53 73                 ld      (word_4073), de ; Move o1 <- o2
ROM:2146 40
ROM:214A C9                       ret                     ; Return (cond & uncond)
ROM:214A
ROM:214A          ; End of function sub_2143
ROM:214A
ROM:214B          ; ---------------------------------------------------------------------------
ROM:214B          ; START OF FUNCTION CHUNK FOR sub_2905
ROM:214B
ROM:214B          loc_214B:                               ; CODE XREF: sub_2905-854↑j
ROM:214B 3A 1C 42                 ld      a, (word_421C)  ; Move o1 <- o2
ROM:214E FE 0A                    cp      0Ah             ; Compare with accumulator
ROM:2150 CA BA 20                 jp      z, loc_20BA     ; Jump (conditional & unconditional)
ROM:2150
ROM:2153 CD 6D 21                 call    sub_216D        ; call (cond & uncond)
ROM:2153
ROM:2156
ROM:2156          loc_2156:                               ; CODE XREF: ROM:2141↑j
ROM:2156 CD 62 21                 call    sub_2162        ; call (cond & uncond)
ROM:2156
ROM:2159 ED 5B 7B                 ld      de, (word_417B) ; Move o1 <- o2
ROM:2159 41
ROM:2159
ROM:215D
ROM:215D          loc_215D:                               ; CODE XREF: sub_2905-7FE↑j
ROM:215D 3A 1F 42                 ld      a, (word_421E+1) ; Move o1 <- o2
ROM:2160 18 B7                    jr      loc_2119        ; Jump relative (conditional & unconditional)
ROM:2160
ROM:2160          ; END OF FUNCTION CHUNK FOR sub_2905
ROM:2162
ROM:2162          ; =============== S U B R O U T I N E =======================================
ROM:2162
ROM:2162
ROM:2162          sub_2162:                               ; CODE XREF: sub_2905:loc_2156↑p
ROM:2162 3A 1F 42                 ld      a, (word_421E+1) ; Move o1 <- o2
ROM:2165 FE 9E                    cp      9Eh             ; Compare with accumulator
ROM:2167 CA 4F 14                 jp      z, sub_144F     ; Jump (conditional & unconditional)
ROM:2167
ROM:216A C3 42 14                 jp      sub_1442        ; Jump (conditional & unconditional)
ROM:216A
ROM:216A          ; End of function sub_2162
ROM:216A
ROM:216D
ROM:216D          ; =============== S U B R O U T I N E =======================================
ROM:216D
ROM:216D
ROM:216D          sub_216D:                               ; CODE XREF: sub_2028+49↑p
ROM:216D                                                  ; sub_2905:loc_20BA↑p ...
ROM:216D ED 5B 7F                 ld      de, (word_417F) ; Move o1 <- o2
ROM:216D 41
ROM:2171 2A 7B 41                 ld      hl, (word_417B) ; Move o1 <- o2
ROM:2174 22 73 40                 ld      (word_4073), hl ; Move o1 <- o2
ROM:2177 3E 06                    ld      a, 6            ; Move o1 <- o2
ROM:2177
ROM:2179
ROM:2179          loc_2179:                               ; CODE XREF: sub_20E9+9↑j
ROM:2179 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:2179
ROM:217A C8                       ret     z               ; Return (cond & uncond)
ROM:217B EB                       ex      de, hl          ; Exchange operands
ROM:217C 2A 61 41                 ld      hl, (word_4161) ; Move o1 <- o2
ROM:217F CD 35 28                 call    sub_2835        ; call (cond & uncond)
ROM:217F
ROM:2182 22 61 41                 ld      (word_4161), hl ; Move o1 <- o2
ROM:2182
ROM:2185
ROM:2185          loc_2185:                               ; CODE XREF: sub_21DA+1↓j
ROM:2185                                                  ; sub_2211-F↓j
ROM:2185 C3 4E 20                 jp      sub_204E        ; Jump (conditional & unconditional)
ROM:2185
ROM:2185          ; End of function sub_216D
ROM:2185
ROM:2188
ROM:2188          ; =============== S U B R O U T I N E =======================================
ROM:2188
ROM:2188
ROM:2188          sub_2188:                               ; CODE XREF: sub_2188:loc_236F↓p
ROM:2188
ROM:2188          ; FUNCTION CHUNK AT ROM:1E85 SIZE 00000010 BYTES
ROM:2188          ; FUNCTION CHUNK AT ROM:21DD SIZE 00000023 BYTES
ROM:2188          ; FUNCTION CHUNK AT ROM:2204 SIZE 0000000D BYTES
ROM:2188          ; FUNCTION CHUNK AT ROM:22F4 SIZE 00000086 BYTES
ROM:2188          ; FUNCTION CHUNK AT ROM:239A SIZE 0000000D BYTES
ROM:2188          ; FUNCTION CHUNK AT ROM:23E2 SIZE 0000000F BYTES
ROM:2188          ; FUNCTION CHUNK AT ROM:2405 SIZE 00000037 BYTES
ROM:2188          ; FUNCTION CHUNK AT ROM:25F7 SIZE 0000002B BYTES
ROM:2188          ; FUNCTION CHUNK AT ROM:262A SIZE 0000000B BYTES
ROM:2188          ; FUNCTION CHUNK AT ROM:265C SIZE 00000004 BYTES
ROM:2188          ; FUNCTION CHUNK AT ROM:312C SIZE 0000005C BYTES
ROM:2188
ROM:2188 2A 6D 41                 ld      hl, (word_416D) ; Move o1 <- o2
ROM:218B 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:218C FE 9E                    cp      9Eh             ; Compare with accumulator
ROM:218E 38 08                    jr      c, loc_2198     ; Jump relative (conditional & unconditional)
ROM:218E
ROM:2190 FE A5                    cp      0A5h            ; Compare with accumulator
ROM:2192 38 39                    jr      c, loc_21CD     ; Jump relative (conditional & unconditional)
ROM:2192
ROM:2194 FE AD                    cp      0ADh            ; Compare with accumulator
ROM:2196 30 35                    jr      nc, loc_21CD    ; Jump relative (conditional & unconditional)
ROM:2196
ROM:2198
ROM:2198          loc_2198:                               ; CODE XREF: sub_2188+6↑j
ROM:2198 CD 57 28                 call    sub_2857        ; call (cond & uncond)
ROM:2198
ROM:219B CD 50 16                 call    sub_1650        ; call (cond & uncond)
ROM:219B
ROM:219E 20 17                    jr      nz, loc_21B7    ; Jump relative (conditional & unconditional)
ROM:219E
ROM:21A0 CB 7A                    bit     7, d            ; Test <bit> in operand
ROM:21A2 C2 E2 23                 jp      nz, loc_23E2    ; Jump (conditional & unconditional)
ROM:21A2
ROM:21A5 7A                       ld      a, d            ; Move o1 <- o2
ROM:21A6 B3                       or      e               ; Or with accumulator
ROM:21A7 C2 9A 23                 jp      nz, loc_239A    ; Jump (conditional & unconditional)
ROM:21A7
ROM:21AA CD FC 23                 call    sub_23FC        ; call (cond & uncond)
ROM:21AA
ROM:21AD D2 9A 23                 jp      nc, loc_239A    ; Jump (conditional & unconditional)
ROM:21AD
ROM:21B0 CD F1 23                 call    sub_23F1        ; call (cond & uncond)
ROM:21B0
ROM:21B3 C0                       ret     nz              ; Return (cond & uncond)
ROM:21B4 C3 E7 23                 jp      loc_23E7        ; Jump (conditional & unconditional)
ROM:21B4
ROM:21B7          ; ---------------------------------------------------------------------------
ROM:21B7
ROM:21B7          loc_21B7:                               ; CODE XREF: sub_2188+16↑j
ROM:21B7 2A 7B 41                 ld      hl, (word_417B) ; Move o1 <- o2
ROM:21BA B7                       or      a               ; Or with accumulator
ROM:21BB ED 5A                    adc     hl, de          ; Add reg to A with carry
ROM:21BD FA 5C 26                 jp      m, loc_265C     ; Jump (conditional & unconditional)
ROM:21BD
ROM:21C0 E5                       push    hl              ; Push register pair onto stack
ROM:21C1 ED 4B AB                 ld      bc, (word_AB)   ; Move o1 <- o2
ROM:21C1 00
ROM:21C5 ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:21C7 E1                       pop     hl              ; Pop register pair from stack
ROM:21C8 D2 5C 26                 jp      nc, loc_265C    ; Jump (conditional & unconditional)
ROM:21C8
ROM:21CB 18 03                    jr      loc_21D0        ; Jump relative (conditional & unconditional)
ROM:21CB
ROM:21CD          ; ---------------------------------------------------------------------------
ROM:21CD
ROM:21CD          loc_21CD:                               ; CODE XREF: sub_2188+A↑j
ROM:21CD                                                  ; sub_2188+E↑j
ROM:21CD CD 4C 28                 call    sub_284C        ; call (cond & uncond)
ROM:21CD
ROM:21D0
ROM:21D0          loc_21D0:                               ; CODE XREF: sub_2188+43↑j
ROM:21D0 ED 5B 7B                 ld      de, (word_417B) ; Move o1 <- o2
ROM:21D0 41
ROM:21D4 22 7B 41                 ld      (word_417B), hl ; Move o1 <- o2
ROM:21D7 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:21D7
ROM:21D7          ; End of function sub_2188
ROM:21D7
ROM:21D8
ROM:21D8          ; =============== S U B R O U T I N E =======================================
ROM:21D8
ROM:21D8
ROM:21D8          sub_21D8:                               ; CODE XREF: sub_22E8+9↓j
ROM:21D8                                                  ; sub_237A+17↓j ...
ROM:21D8 3E 06                    ld      a, 6            ; Move o1 <- o2
ROM:21D8
ROM:21D8          ; End of function sub_21D8
ROM:21D8
ROM:21DA
ROM:21DA          ; =============== S U B R O U T I N E =======================================
ROM:21DA
ROM:21DA
ROM:21DA          sub_21DA:                               ; CODE XREF: sub_2188:loc_242E↓p
ROM:21DA EB                       ex      de, hl          ; Exchange operands
ROM:21DB 18 A8                    jr      loc_2185        ; Jump relative (conditional & unconditional)
ROM:21DB
ROM:21DB          ; End of function sub_21DA
ROM:21DB
ROM:21DD          ; ---------------------------------------------------------------------------
ROM:21DD          ; START OF FUNCTION CHUNK FOR sub_2188
ROM:21DD
ROM:21DD          loc_21DD:                               ; CODE XREF: sub_2188+1C4↓j
ROM:21DD 2A 6D 41                 ld      hl, (word_416D) ; Move o1 <- o2
ROM:21E0 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:21E1 FE A2                    cp      0A2h            ; Compare with accumulator
ROM:21E3 28 1F                    jr      z, loc_2204     ; Jump relative (conditional & unconditional)
ROM:21E3
ROM:21E5 FE A3                    cp      0A3h            ; Compare with accumulator
ROM:21E7 28 1B                    jr      z, loc_2204     ; Jump relative (conditional & unconditional)
ROM:21E7
ROM:21E9 FE AC                    cp      0ACh            ; Compare with accumulator
ROM:21EB 20 10                    jr      nz, loc_21FD    ; Jump relative (conditional & unconditional)
ROM:21EB
ROM:21ED 23                       inc     hl              ; Increment operand
ROM:21EE 22 6D 41                 ld      (word_416D), hl ; Move o1 <- o2
ROM:21F1 2B                       dec     hl              ; Decrement operand
ROM:21F2 CD 57 28                 call    sub_2857        ; call (cond & uncond)
ROM:21F2
ROM:21F5 D5                       push    de              ; Push register pair onto stack
ROM:21F6 E1                       pop     hl              ; Pop register pair from stack
ROM:21F7 CD 5D 0B                 call    sub_B5D         ; call (cond & uncond)
ROM:21F7
ROM:21FA C3 85 1E                 jp      loc_1E85        ; Jump (conditional & unconditional)
ROM:21FA
ROM:21FD          ; ---------------------------------------------------------------------------
ROM:21FD
ROM:21FD          loc_21FD:                               ; CODE XREF: sub_2188+63↑j
ROM:21FD CD 57 28                 call    sub_2857        ; call (cond & uncond)
ROM:21FD
ROM:21FD          ; END OF FUNCTION CHUNK FOR sub_2188
ROM:2200          ; START OF FUNCTION CHUNK FOR sub_2211
ROM:2200
ROM:2200          loc_2200:                               ; CODE XREF: sub_2211+1↓j
ROM:2200 3E 07                    ld      a, 7            ; Move o1 <- o2
ROM:2202 18 81                    jr      loc_2185        ; Jump relative (conditional & unconditional)
ROM:2202
ROM:2202          ; END OF FUNCTION CHUNK FOR sub_2211
ROM:2204          ; ---------------------------------------------------------------------------
ROM:2204          ; START OF FUNCTION CHUNK FOR sub_2188
ROM:2204
ROM:2204          loc_2204:                               ; CODE XREF: sub_2188+5B↑j
ROM:2204                                                  ; sub_2188+5F↑j
ROM:2204 CD 4C 28                 call    sub_284C        ; call (cond & uncond)
ROM:2204
ROM:2207 ED 5B AA                 ld      de, (word_40AA) ; Move o1 <- o2
ROM:2207 40
ROM:220B D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:220B
ROM:220C 30 03                    jr      nc, sub_2211    ; Jump relative (conditional & unconditional)
ROM:220C
ROM:220E 21 00 00                 ld      hl, 0           ; Move o1 <- o2
ROM:220E
ROM:220E          ; END OF FUNCTION CHUNK FOR sub_2188
ROM:2211
ROM:2211          ; =============== S U B R O U T I N E =======================================
ROM:2211
ROM:2211
ROM:2211          sub_2211:                               ; CODE XREF: sub_2188-300↑p
ROM:2211                                                  ; sub_2188+84↑j
ROM:2211
ROM:2211          ; FUNCTION CHUNK AT ROM:2200 SIZE 00000004 BYTES
ROM:2211
ROM:2211 EB                       ex      de, hl          ; Exchange operands
ROM:2212 18 EC                    jr      loc_2200        ; Jump relative (conditional & unconditional)
ROM:2212
ROM:2212          ; End of function sub_2211
ROM:2212
ROM:2214
ROM:2214          ; =============== S U B R O U T I N E =======================================
ROM:2214
ROM:2214
ROM:2214          sub_2214:                               ; CODE XREF: sub_223A:loc_22D2↓p
ROM:2214                                                  ; sub_223A+9C↓p ...
ROM:2214 D5                       push    de              ; Push register pair onto stack
ROM:2215 3E 0F                    ld      a, 0Fh          ; Move o1 <- o2
ROM:2217 E5                       push    hl              ; Push register pair onto stack
ROM:2218 CD 2E 13                 call    sub_132E        ; call (cond & uncond)
ROM:2218
ROM:221B EB                       ex      de, hl          ; Exchange operands
ROM:221C E1                       pop     hl              ; Pop register pair from stack
ROM:221C
ROM:221D
ROM:221D          loc_221D:                               ; CODE XREF: sub_2230+8↓j
ROM:221D 01 00 00                 ld      bc, 0           ; Move o1 <- o2
ROM:2220 51                       ld      d, c            ; Move o1 <- o2
ROM:2221 CB 7C                    bit     7, h            ; Test <bit> in operand
ROM:2223 20 07                    jr      nz, loc_222C    ; Jump relative (conditional & unconditional)
ROM:2223
ROM:2225
ROM:2225          loc_2225:                               ; CODE XREF: sub_2214+15↓j
ROM:2225 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:2225
ROM:2226 38 03                    jr      c, loc_222B     ; Jump relative (conditional & unconditional)
ROM:2226
ROM:2228 03                       inc     bc              ; Increment operand
ROM:2229 20 FA                    jr      nz, loc_2225    ; Jump relative (conditional & unconditional)
ROM:2229
ROM:222B
ROM:222B          loc_222B:                               ; CODE XREF: sub_2214+12↑j
ROM:222B 03                       inc     bc              ; Increment operand
ROM:222B
ROM:222C
ROM:222C          loc_222C:                               ; CODE XREF: sub_2214+F↑j
ROM:222C 69                       ld      l, c            ; Move o1 <- o2
ROM:222D 60                       ld      h, b            ; Move o1 <- o2
ROM:222E D1                       pop     de              ; Pop register pair from stack
ROM:222F C9                       ret                     ; Return (cond & uncond)
ROM:222F
ROM:222F          ; End of function sub_2214
ROM:222F
ROM:2230
ROM:2230          ; =============== S U B R O U T I N E =======================================
ROM:2230
ROM:2230
ROM:2230          sub_2230:                               ; CODE XREF: sub_223A:loc_22A2↓p
ROM:2230                                                  ; sub_223A+6C↓p
ROM:2230 D5                       push    de              ; Push register pair onto stack
ROM:2231 E5                       push    hl              ; Push register pair onto stack
ROM:2232 CD F2 13                 call    sub_13F2        ; call (cond & uncond)
ROM:2232
ROM:2235 E5                       push    hl              ; Push register pair onto stack
ROM:2236 D1                       pop     de              ; Pop register pair from stack
ROM:2237 E1                       pop     hl              ; Pop register pair from stack
ROM:2238 18 E3                    jr      loc_221D        ; Jump relative (conditional & unconditional)
ROM:2238
ROM:2238          ; End of function sub_2230
ROM:2238
ROM:223A
ROM:223A          ; =============== S U B R O U T I N E =======================================
ROM:223A
ROM:223A
ROM:223A          sub_223A:                               ; CODE XREF: sub_2905-8F5↑p
ROM:223A
ROM:223A          ; FUNCTION CHUNK AT ROM:2289 SIZE 00000039 BYTES
ROM:223A          ; FUNCTION CHUNK AT ROM:22D2 SIZE 0000000A BYTES
ROM:223A
ROM:223A 3A 1C 42                 ld      a, (word_421C)  ; Move o1 <- o2
ROM:223D D6 04                    sub     4               ; Subtract from A
ROM:223F 28 48                    jr      z, loc_2289     ; Jump relative (conditional & unconditional)
ROM:223F
ROM:2241 3D                       dec     a               ; Decrement operand
ROM:2242 28 52                    jr      z, loc_2296     ; Jump relative (conditional & unconditional)
ROM:2242
ROM:2244 D6 05                    sub     5               ; Subtract from A
ROM:2246 28 1B                    jr      z, loc_2263     ; Jump relative (conditional & unconditional)
ROM:2246
ROM:2248 3D                       dec     a               ; Decrement operand
ROM:2249 28 21                    jr      z, loc_226C     ; Jump relative (conditional & unconditional)
ROM:2249
ROM:224B 3D                       dec     a               ; Decrement operand
ROM:224C C0                       ret     nz              ; Return (cond & uncond)
ROM:224D CD 8A 14                 call    sub_148A        ; call (cond & uncond)
ROM:224D
ROM:2250
ROM:2250          loc_2250:                               ; CODE XREF: sub_223A+35↓j
ROM:2250 38 08                    jr      c, loc_225A     ; Jump relative (conditional & unconditional)
ROM:2250
ROM:2252 11 FF FF                 ld      de, 0FFFFh      ; Move o1 <- o2
ROM:2255 2A 7B 41                 ld      hl, (word_417B) ; Move o1 <- o2
ROM:2258 18 07                    jr      loc_2261        ; Jump relative (conditional & unconditional)
ROM:2258
ROM:225A          ; ---------------------------------------------------------------------------
ROM:225A
ROM:225A          loc_225A:                               ; CODE XREF: sub_223A:loc_2250↑j
ROM:225A EB                       ex      de, hl          ; Exchange operands
ROM:225B 2A 7B 41                 ld      hl, (word_417B) ; Move o1 <- o2
ROM:225E CD 71 22                 call    sub_2271        ; call (cond & uncond)
ROM:225E
ROM:2261
ROM:2261          loc_2261:                               ; CODE XREF: sub_223A+1E↑j
ROM:2261                                                  ; sub_223A+30↓j
ROM:2261 18 6F                    jr      loc_22D2        ; Jump relative (conditional & unconditional)
ROM:2261
ROM:2263          ; ---------------------------------------------------------------------------
ROM:2263
ROM:2263          loc_2263:                               ; CODE XREF: sub_223A+C↑j
ROM:2263 ED 5B CC                 ld      de, (word_40CC) ; Move o1 <- o2
ROM:2263 40
ROM:2263
ROM:2267
ROM:2267          loc_2267:                               ; CODE XREF: sub_227E+9↓j
ROM:2267 2A 7B 41                 ld      hl, (word_417B) ; Move o1 <- o2
ROM:226A 18 F5                    jr      loc_2261        ; Jump relative (conditional & unconditional)
ROM:226A
ROM:226C          ; ---------------------------------------------------------------------------
ROM:226C
ROM:226C          loc_226C:                               ; CODE XREF: sub_223A+F↑j
ROM:226C CD 59 14                 call    sub_1459        ; call (cond & uncond)
ROM:226C
ROM:226F 18 DF                    jr      loc_2250        ; Jump relative (conditional & unconditional)
ROM:226F
ROM:226F          ; End of function sub_223A
ROM:226F
ROM:2271
ROM:2271          ; =============== S U B R O U T I N E =======================================
ROM:2271
ROM:2271
ROM:2271          sub_2271:                               ; CODE XREF: sub_223A+24↑p
ROM:2271                                                  ; sub_223A+65↓p
ROM:2271 E5                       push    hl              ; Push register pair onto stack
ROM:2272 19                       add     hl, de          ; Add <reg> to A
ROM:2273 EB                       ex      de, hl          ; Exchange operands
ROM:2274 E1                       pop     hl              ; Pop register pair from stack
ROM:2275 C9                       ret                     ; Return (cond & uncond)
ROM:2275
ROM:2275          ; End of function sub_2271
ROM:2275
ROM:2276
ROM:2276          ; =============== S U B R O U T I N E =======================================
ROM:2276
ROM:2276
ROM:2276          sub_2276:                               ; CODE XREF: sub_26A1+D↓p
ROM:2276 ED 5B C8                 ld      de, (word_40C8) ; Move o1 <- o2
ROM:2276 40
ROM:227A 3E AD                    ld      a, 0ADh         ; Move o1 <- o2
ROM:227C 18 06                    jr      loc_2284        ; Jump relative (conditional & unconditional)
ROM:227C
ROM:227C          ; End of function sub_2276
ROM:227C
ROM:227E
ROM:227E          ; =============== S U B R O U T I N E =======================================
ROM:227E
ROM:227E
ROM:227E          sub_227E:                               ; CODE XREF: sub_26A1+5↓p
ROM:227E ED 5B CA                 ld      de, (word_40CA) ; Move o1 <- o2
ROM:227E 40
ROM:2282 3E AE                    ld      a, 0AEh         ; Move o1 <- o2
ROM:2282
ROM:2284
ROM:2284          loc_2284:                               ; CODE XREF: sub_2276+6↑j
ROM:2284 32 1C 42                 ld      (word_421C), a  ; Move o1 <- o2
ROM:2287 18 DE                    jr      loc_2267        ; Jump relative (conditional & unconditional)
ROM:2287
ROM:2287          ; End of function sub_227E
ROM:2287
ROM:2289          ; ---------------------------------------------------------------------------
ROM:2289          ; START OF FUNCTION CHUNK FOR sub_223A
ROM:2289
ROM:2289          loc_2289:                               ; CODE XREF: sub_223A+5↑j
ROM:2289 CD 92 14                 call    sub_1492        ; call (cond & uncond)
ROM:2289
ROM:228C 38 0D                    jr      c, loc_229B     ; Jump relative (conditional & unconditional)
ROM:228C
ROM:228E
ROM:228E          loc_228E:                               ; CODE XREF: sub_223A+5F↓j
ROM:228E 11 FF FF                 ld      de, 0FFFFh      ; Move o1 <- o2
ROM:2291 2A AA 40                 ld      hl, (word_40AA) ; Move o1 <- o2
ROM:2294 18 0C                    jr      loc_22A2        ; Jump relative (conditional & unconditional)
ROM:2294
ROM:2296          ; ---------------------------------------------------------------------------
ROM:2296
ROM:2296          loc_2296:                               ; CODE XREF: sub_223A+8↑j
ROM:2296 CD 97 14                 call    sub_1497        ; call (cond & uncond)
ROM:2296
ROM:2299 28 F3                    jr      z, loc_228E     ; Jump relative (conditional & unconditional)
ROM:2299
ROM:229B
ROM:229B          loc_229B:                               ; CODE XREF: sub_223A+52↑j
ROM:229B EB                       ex      de, hl          ; Exchange operands
ROM:229C 2A AA 40                 ld      hl, (word_40AA) ; Move o1 <- o2
ROM:229F CD 71 22                 call    sub_2271        ; call (cond & uncond)
ROM:229F
ROM:22A2
ROM:22A2          loc_22A2:                               ; CODE XREF: sub_223A+5A↑j
ROM:22A2 CD 30 22                 call    sub_2230        ; call (cond & uncond)
ROM:22A2
ROM:22A5 EB                       ex      de, hl          ; Exchange operands
ROM:22A6 CD 30 22                 call    sub_2230        ; call (cond & uncond)
ROM:22A6
ROM:22A9 EB                       ex      de, hl          ; Exchange operands
ROM:22A9
ROM:22AA
ROM:22AA          loc_22AA:                               ; CODE XREF: sub_223A+A0↓j
ROM:22AA E5                       push    hl              ; Push register pair onto stack
ROM:22AB CD FE 26                 call    Display_Clear_419D ; call (cond & uncond)
ROM:22AB
ROM:22AE E1                       pop     hl              ; Pop register pair from stack
ROM:22AF D5                       push    de              ; Push register pair onto stack
ROM:22B0 11 9D 41                 ld      de, 419Dh       ; Move o1 <- o2
ROM:22B3 CD C2 22                 call    sub_22C2        ; call (cond & uncond)
ROM:22B3
ROM:22B6 3A 1C 42                 ld      a, (word_421C)  ; Move o1 <- o2
ROM:22B9 13                       inc     de              ; Increment operand
ROM:22BA 12                       ld      (de), a         ; Move o1 <- o2
ROM:22BB 13                       inc     de              ; Increment operand
ROM:22BC 3E 3A                    ld      a, 3Ah ; ':'    ; Move o1 <- o2
ROM:22BE 12                       ld      (de), a         ; Move o1 <- o2
ROM:22BF 13                       inc     de              ; Increment operand
ROM:22C0 13                       inc     de              ; Increment operand
ROM:22C1 E1                       pop     hl              ; Pop register pair from stack
ROM:22C1
ROM:22C1          ; END OF FUNCTION CHUNK FOR sub_223A
ROM:22C2
ROM:22C2          ; =============== S U B R O U T I N E =======================================
ROM:22C2
ROM:22C2
ROM:22C2          sub_22C2:                               ; CODE XREF: sub_223A+79↑p
ROM:22C2 D5                       push    de              ; Push register pair onto stack
ROM:22C3 CD AC 27                 call    sub_27AC        ; call (cond & uncond)
ROM:22C3
ROM:22C6 21 2A 42                 ld      hl, 422Ah       ; Move o1 <- o2
ROM:22C9 D1                       pop     de              ; Pop register pair from stack
ROM:22CA 01 03 00                 ld      bc, 3           ; Move o1 <- o2
ROM:22CD ED B0                    ldir                    ; Transfer data (DE)->(HL) until byte
ROM:22CD                                                  ; counter is zero, increment destination
ROM:22CD                                                  ; and source addresses
ROM:22CF C3 B1 26                 jp      Display_copy_419D_to40AC ; Jump (conditional & unconditional)
ROM:22CF
ROM:22CF          ; End of function sub_22C2
ROM:22CF
ROM:22D2          ; ---------------------------------------------------------------------------
ROM:22D2          ; START OF FUNCTION CHUNK FOR sub_223A
ROM:22D2
ROM:22D2          loc_22D2:                               ; CODE XREF: sub_223A:loc_2261↑j
ROM:22D2 CD 14 22                 call    sub_2214        ; call (cond & uncond)
ROM:22D2
ROM:22D5 EB                       ex      de, hl          ; Exchange operands
ROM:22D6 CD 14 22                 call    sub_2214        ; call (cond & uncond)
ROM:22D6
ROM:22D9 EB                       ex      de, hl          ; Exchange operands
ROM:22DA 18 CE                    jr      loc_22AA        ; Jump relative (conditional & unconditional)
ROM:22DA
ROM:22DA          ; END OF FUNCTION CHUNK FOR sub_223A
ROM:22DC          ; ---------------------------------------------------------------------------
ROM:22DC 3E 9C                    ld      a, 9Ch          ; Move o1 <- o2
ROM:22DE 18 02                    jr      loc_22E2        ; Jump relative (conditional & unconditional)
ROM:22DE
ROM:22E0          ; ---------------------------------------------------------------------------
ROM:22E0 3E 9D                    ld      a, 9Dh          ; Move o1 <- o2
ROM:22E0
ROM:22E2
ROM:22E2          loc_22E2:                               ; CODE XREF: ROM:22DE↑j
ROM:22E2 CD DC 1B                 call    sub_1BDC        ; call (cond & uncond)
ROM:22E2
ROM:22E5 C3 1F 20                 jp      loc_201F        ; Jump (conditional & unconditional)
ROM:22E5
ROM:22E8
ROM:22E8          ; =============== S U B R O U T I N E =======================================
ROM:22E8
ROM:22E8
ROM:22E8          sub_22E8:                               ; CODE XREF: sub_2188:loc_22F4↓p
ROM:22E8 CD 5F 16                 call    test_4156_bit2  ; call (cond & uncond)
ROM:22E8
ROM:22EB C0                       ret     nz              ; Return (cond & uncond)
ROM:22EC CB D6                    set     2, (hl)         ; Set bit
ROM:22EE 2A 7B 41                 ld      hl, (word_417B) ; Move o1 <- o2
ROM:22F1 C3 D8 21                 jp      sub_21D8        ; Jump (conditional & unconditional)
ROM:22F1
ROM:22F1          ; End of function sub_22E8
ROM:22F1
ROM:22F4          ; ---------------------------------------------------------------------------
ROM:22F4          ; START OF FUNCTION CHUNK FOR sub_2188
ROM:22F4
ROM:22F4          loc_22F4:                               ; CODE XREF: sub_2188+1AE↓j
ROM:22F4                                                  ; sub_2188+1B2↓j ...
ROM:22F4 CD E8 22                 call    sub_22E8        ; call (cond & uncond)
ROM:22F4
ROM:22F7 3A 2D 42                 ld      a, (byte_422D)  ; Move o1 <- o2
ROM:22FA FE 83                    cp      83h             ; Compare with accumulator
ROM:22FC 0E 0E                    ld      c, 0Eh          ; Move o1 <- o2
ROM:22FE 28 02                    jr      z, loc_2302     ; Jump relative (conditional & unconditional)
ROM:22FE
ROM:2300 0E 0F                    ld      c, 0Fh          ; Move o1 <- o2
ROM:2300
ROM:2302
ROM:2302          loc_2302:                               ; CODE XREF: sub_2188+176↑j
ROM:2302 06 05                    ld      b, 5            ; Move o1 <- o2
ROM:2302
ROM:2304
ROM:2304          loc_2304:                               ; CODE XREF: sub_2188+19A↓j
ROM:2304 C5                       push    bc              ; Push register pair onto stack
ROM:2305 79                       ld      a, c            ; Move o1 <- o2
ROM:2306 CD 5D 28                 call    sub_285D        ; call (cond & uncond)
ROM:2306
ROM:2309 28 16                    jr      z, loc_2321     ; Jump relative (conditional & unconditional)
ROM:2309
ROM:230B CD 4A 16                 call    test_4156_bit1  ; call (cond & uncond)
ROM:230B
ROM:230E 28 05                    jr      z, loc_2315     ; Jump relative (conditional & unconditional)
ROM:230E
ROM:2310 CD F1 23                 call    sub_23F1        ; call (cond & uncond)
ROM:2310
ROM:2313 18 03                    jr      loc_2318        ; Jump relative (conditional & unconditional)
ROM:2313
ROM:2315          ; ---------------------------------------------------------------------------
ROM:2315
ROM:2315          loc_2315:                               ; CODE XREF: sub_2188+186↑j
ROM:2315 CD FC 23                 call    sub_23FC        ; call (cond & uncond)
ROM:2315
ROM:2318
ROM:2318          loc_2318:                               ; CODE XREF: sub_2188+18B↑j
ROM:2318 38 04                    jr      c, loc_231E     ; Jump relative (conditional & unconditional)
ROM:2318
ROM:231A CD B0 28                 call    sub_28B0        ; call (cond & uncond)
ROM:231A
ROM:231D AF                       xor     a               ; Exclusive or with accumulator
ROM:231D
ROM:231E
ROM:231E          loc_231E:                               ; CODE XREF: sub_2188:loc_2318↑j
ROM:231E C4 6C 11                 call    nz, sub_116C    ; call (cond & uncond)
ROM:231E
ROM:2321
ROM:2321          loc_2321:                               ; CODE XREF: sub_2188+181↑j
ROM:2321 C1                       pop     bc              ; Pop register pair from stack
ROM:2322 10 E0                    djnz    loc_2304        ; Decrement reg B and jump relative if zero
ROM:2322
ROM:2324
ROM:2324          loc_2324:                               ; CODE XREF: sub_2188+1DD↓j
ROM:2324                                                  ; sub_2188:loc_236D↓j
ROM:2324 CD A1 26                 call    sub_26A1        ; call (cond & uncond)
ROM:2324
ROM:2327 CD BC 10                 call    sub_10BC        ; call (cond & uncond)
ROM:2327
ROM:232A CD CD 28                 call    sub_28CD        ; call (cond & uncond)
ROM:232A
ROM:232D 32 2D 42                 ld      (byte_422D), a  ; Move o1 <- o2
ROM:2330 FE 97                    cp      97h             ; Compare with accumulator
ROM:2332 28 40                    jr      z, loc_2374     ; Jump relative (conditional & unconditional)
ROM:2332
ROM:2334 FE 83                    cp      83h             ; Compare with accumulator
ROM:2336 28 BC                    jr      z, loc_22F4     ; Jump relative (conditional & unconditional)
ROM:2336
ROM:2338 FE 86                    cp      86h             ; Compare with accumulator
ROM:233A 28 B8                    jr      z, loc_22F4     ; Jump relative (conditional & unconditional)
ROM:233A
ROM:233C FE 9C                    cp      9Ch             ; Compare with accumulator
ROM:233E CA 05 24                 jp      z, loc_2405     ; Jump (conditional & unconditional)
ROM:233E
ROM:2341 FE AD                    cp      0ADh            ; Compare with accumulator
ROM:2343 D2 05 24                 jp      nc, loc_2405    ; Jump (conditional & unconditional)
ROM:2343
ROM:2346 FE 06                    cp      6               ; Compare with accumulator
ROM:2348 28 25                    jr      z, loc_236F     ; Jump relative (conditional & unconditional)
ROM:2348
ROM:234A FE 07                    cp      7               ; Compare with accumulator
ROM:234C CA DD 21                 jp      z, loc_21DD     ; Jump (conditional & unconditional)
ROM:234C
ROM:234F CB 7F                    bit     7, a            ; Test <bit> in operand
ROM:2351 20 10                    jr      nz, loc_2363    ; Jump relative (conditional & unconditional)
ROM:2351
ROM:2353 FE 0D                    cp      0Dh             ; Compare with accumulator
ROM:2355 20 02                    jr      nz, loc_2359    ; Jump relative (conditional & unconditional)
ROM:2355
ROM:2357 3E 08                    ld      a, 8            ; Move o1 <- o2
ROM:2357
ROM:2359
ROM:2359          loc_2359:                               ; CODE XREF: sub_2188+1CD↑j
ROM:2359 CD 5B 1B                 call    sub_1B5B        ; call (cond & uncond)
ROM:2359
ROM:235C
ROM:235C          loc_235C:                               ; CODE XREF: sub_2188+1EA↓j
ROM:235C CD BA 1C                 call    sub_1CBA        ; call (cond & uncond)
ROM:235C
ROM:235F CD 50 16                 call    sub_1650        ; call (cond & uncond)
ROM:235F
ROM:2362 C8                       ret     z               ; Return (cond & uncond)
ROM:2362
ROM:2363
ROM:2363          loc_2363:                               ; CODE XREF: sub_2188+1C9↑j
ROM:2363 FE 81                    cp      81h             ; Compare with accumulator
ROM:2365 20 BD                    jr      nz, loc_2324    ; Jump relative (conditional & unconditional)
ROM:2365
ROM:2367 CD 7A 23                 call    sub_237A        ; call (cond & uncond)
ROM:2367
ROM:236A CD 1D 2F                 call    sub_2F1D        ; call (cond & uncond)
ROM:236A
ROM:236D
ROM:236D          loc_236D:                               ; CODE XREF: sub_2188+21D↓j
ROM:236D 18 B5                    jr      loc_2324        ; Jump relative (conditional & unconditional)
ROM:236D
ROM:236F          ; ---------------------------------------------------------------------------
ROM:236F
ROM:236F          loc_236F:                               ; CODE XREF: sub_2188+1C0↑j
ROM:236F CD 88 21                 call    sub_2188        ; call (cond & uncond)
ROM:236F
ROM:2372 18 E8                    jr      loc_235C        ; Jump relative (conditional & unconditional)
ROM:2372
ROM:2374          ; ---------------------------------------------------------------------------
ROM:2374
ROM:2374          loc_2374:                               ; CODE XREF: sub_2188+1AA↑j
ROM:2374 CD 7A 23                 call    sub_237A        ; call (cond & uncond)
ROM:2374
ROM:2377 C3 F7 25                 jp      loc_25F7        ; Jump (conditional & unconditional)
ROM:2377
ROM:2377          ; END OF FUNCTION CHUNK FOR sub_2188
ROM:237A
ROM:237A          ; =============== S U B R O U T I N E =======================================
ROM:237A
ROM:237A
ROM:237A          sub_237A:                               ; CODE XREF: sub_1A7B+22↑p
ROM:237A                                                  ; sub_1B5B+1↑p ...
ROM:237A CD 5F 16                 call    test_4156_bit2  ; call (cond & uncond)
ROM:237A
ROM:237D C8                       ret     z               ; Return (cond & uncond)
ROM:237E CB 96                    res     2, (hl)         ; Reset bit
ROM:2380 2A 63 41                 ld      hl, (word_4163) ; Move o1 <- o2
ROM:2383 22 61 41                 ld      (word_4161), hl ; Move o1 <- o2
ROM:2386 CD 57 28                 call    sub_2857        ; call (cond & uncond)
ROM:2386
ROM:2389 2B                       dec     hl              ; Decrement operand
ROM:238A 22 63 41                 ld      (word_4163), hl ; Move o1 <- o2
ROM:238D CD 06 14                 call    sub_1406        ; call (cond & uncond)
ROM:238D
ROM:2390 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:2390
ROM:2391 C3 D8 21                 jp      sub_21D8        ; Jump (conditional & unconditional)
ROM:2391
ROM:2391          ; End of function sub_237A
ROM:2391
ROM:2391          ; ---------------------------------------------------------------------------
ROM:2394 CD                       db 0CDh
ROM:2395 50                       db  50h ; P
ROM:2396 16                       db  16h
ROM:2397          ; ---------------------------------------------------------------------------
ROM:2397
ROM:2397          loc_2397:                               ; CODE XREF: ROM:23DB↓j
ROM:2397 C2 F4 22                 jp      nz, loc_22F4    ; Jump (conditional & unconditional)
ROM:2397
ROM:239A          ; START OF FUNCTION CHUNK FOR sub_2188
ROM:239A
ROM:239A          loc_239A:                               ; CODE XREF: sub_2188+1F↑j
ROM:239A                                                  ; sub_2188+25↑j
ROM:239A 21 56 41                 ld      hl, 4156h       ; Move o1 <- o2
ROM:239D CB CE                    set     1, (hl)         ; Set bit
ROM:239F 2A CA 40                 ld      hl, (word_40CA) ; Move o1 <- o2
ROM:239F
ROM:23A2
ROM:23A2          loc_23A2:                               ; CODE XREF: sub_2188+267↓j
ROM:23A2 CD A7 23                 call    sub_23A7        ; call (cond & uncond)
ROM:23A2
ROM:23A5 18 C6                    jr      loc_236D        ; Jump relative (conditional & unconditional)
ROM:23A5
ROM:23A5          ; END OF FUNCTION CHUNK FOR sub_2188
ROM:23A7
ROM:23A7          ; =============== S U B R O U T I N E =======================================
ROM:23A7
ROM:23A7
ROM:23A7          sub_23A7:                               ; CODE XREF: sub_2188:loc_23A2↑p
ROM:23A7                                                  ; sub_2188+25D↓j
ROM:23A7
ROM:23A7          ; FUNCTION CHUNK AT ROM:23C5 SIZE 0000000E BYTES
ROM:23A7
ROM:23A7 E5                       push    hl              ; Push register pair onto stack
ROM:23A8 ED 4B 7B                 ld      bc, (word_417B) ; Move o1 <- o2
ROM:23A8 41
ROM:23AC B7                       or      a               ; Or with accumulator
ROM:23AD ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:23AF EB                       ex      de, hl          ; Exchange operands
ROM:23B0 E1                       pop     hl              ; Pop register pair from stack
ROM:23B1 38 12                    jr      c, loc_23C5     ; Jump relative (conditional & unconditional)
ROM:23B1
ROM:23B3
ROM:23B3          loc_23B3:                               ; CODE XREF: sub_23A7+25↓j
ROM:23B3                                                  ; sub_23A7+2A↓j
ROM:23B3 CD BD 23                 call    sub_23BD        ; call (cond & uncond)
ROM:23B3
ROM:23B6 EB                       ex      de, hl          ; Exchange operands
ROM:23B7 CD D8 21                 call    sub_21D8        ; call (cond & uncond)
ROM:23B7
ROM:23BA C3 BA 1C                 jp      sub_1CBA        ; Jump (conditional & unconditional)
ROM:23BA
ROM:23BA          ; End of function sub_23A7
ROM:23BA
ROM:23BD
ROM:23BD          ; =============== S U B R O U T I N E =======================================
ROM:23BD
ROM:23BD
ROM:23BD          sub_23BD:                               ; CODE XREF: sub_23A7:loc_23B3↑p
ROM:23BD                                                  ; sub_2905+1A↓p ...
ROM:23BD 2A 7B 41                 ld      hl, (word_417B) ; Move o1 <- o2
ROM:23C0 19                       add     hl, de          ; Add <reg> to A
ROM:23C1 22 7B 41                 ld      (word_417B), hl ; Move o1 <- o2
ROM:23C4 C9                       ret                     ; Return (cond & uncond)
ROM:23C4
ROM:23C4          ; End of function sub_23BD
ROM:23C4
ROM:23C5          ; ---------------------------------------------------------------------------
ROM:23C5          ; START OF FUNCTION CHUNK FOR sub_23A7
ROM:23C5
ROM:23C5          loc_23C5:                               ; CODE XREF: sub_23A7+A↑j
ROM:23C5 ED 4B C0                 ld      bc, (word_40C0) ; Move o1 <- o2
ROM:23C5 40
ROM:23C9 B7                       or      a               ; Or with accumulator
ROM:23CA ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:23CC 28 E5                    jr      z, loc_23B3     ; Jump relative (conditional & unconditional)
ROM:23CC
ROM:23CE 11 00 00                 ld      de, 0           ; Move o1 <- o2
ROM:23D1 18 E0                    jr      loc_23B3        ; Jump relative (conditional & unconditional)
ROM:23D1
ROM:23D1          ; END OF FUNCTION CHUNK FOR sub_23A7
ROM:23D3          ; ---------------------------------------------------------------------------
ROM:23D3 3E 83                    ld      a, 83h          ; Move o1 <- o2
ROM:23D5 32 2D 42                 ld      (byte_422D), a  ; Move o1 <- o2
ROM:23D8 CD 50 16                 call    sub_1650        ; call (cond & uncond)
ROM:23D8
ROM:23DB 20 BA                    jr      nz, loc_2397    ; Jump relative (conditional & unconditional)
ROM:23DB
ROM:23DD CD F1 23                 call    sub_23F1        ; call (cond & uncond)
ROM:23DD
ROM:23E0 28 05                    jr      z, loc_23E7     ; Jump relative (conditional & unconditional)
ROM:23E0
ROM:23E2          ; START OF FUNCTION CHUNK FOR sub_2188
ROM:23E2
ROM:23E2          loc_23E2:                               ; CODE XREF: sub_2188+1A↑j
ROM:23E2 2A C0 40                 ld      hl, (word_40C0) ; Move o1 <- o2
ROM:23E5 18 C0                    jr      sub_23A7        ; Jump relative (conditional & unconditional)
ROM:23E5
ROM:23E7          ; ---------------------------------------------------------------------------
ROM:23E7
ROM:23E7          loc_23E7:                               ; CODE XREF: sub_2188+2C↑j
ROM:23E7                                                  ; ROM:23E0↑j
ROM:23E7 21 56 41                 ld      hl, 4156h       ; Move o1 <- o2
ROM:23EA CB C6                    set     0, (hl)         ; Set bit
ROM:23EC 2A C0 40                 ld      hl, (word_40C0) ; Move o1 <- o2
ROM:23EF 18 B1                    jr      loc_23A2        ; Jump relative (conditional & unconditional)
ROM:23EF
ROM:23EF          ; END OF FUNCTION CHUNK FOR sub_2188
ROM:23F1
ROM:23F1          ; =============== S U B R O U T I N E =======================================
ROM:23F1
ROM:23F1
ROM:23F1          sub_23F1:                               ; CODE XREF: sub_2188+28↑p
ROM:23F1                                                  ; sub_2188+188↑p ...
ROM:23F1 2A C0 40                 ld      hl, (word_40C0) ; Move o1 <- o2
ROM:23F4 ED 4B 7B                 ld      bc, (word_417B) ; Move o1 <- o2
ROM:23F4 41
ROM:23F4
ROM:23F8
ROM:23F8          loc_23F8:                               ; CODE XREF: sub_23FC+7↓j
ROM:23F8 B7                       or      a               ; Or with accumulator
ROM:23F9 ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:23FB C9                       ret                     ; Return (cond & uncond)
ROM:23FB
ROM:23FB          ; End of function sub_23F1
ROM:23FB
ROM:23FC
ROM:23FC          ; =============== S U B R O U T I N E =======================================
ROM:23FC
ROM:23FC
ROM:23FC          sub_23FC:                               ; CODE XREF: sub_2188+22↑p
ROM:23FC                                                  ; sub_2188:loc_2315↑p
ROM:23FC 2A 7B 41                 ld      hl, (word_417B) ; Move o1 <- o2
ROM:23FF ED 4B CA                 ld      bc, (word_40CA) ; Move o1 <- o2
ROM:23FF 40
ROM:2403 18 F3                    jr      loc_23F8        ; Jump relative (conditional & unconditional)
ROM:2403
ROM:2403          ; End of function sub_23FC
ROM:2403
ROM:2405          ; ---------------------------------------------------------------------------
ROM:2405          ; START OF FUNCTION CHUNK FOR sub_2188
ROM:2405
ROM:2405          loc_2405:                               ; CODE XREF: sub_2188+1B6↑j
ROM:2405                                                  ; sub_2188+1BB↑j
ROM:2405 3E AE                    ld      a, 0AEh         ; Move o1 <- o2
ROM:2407 CD 4A 16                 call    test_4156_bit1  ; call (cond & uncond)
ROM:2407
ROM:240A 20 04                    jr      nz, loc_2410    ; Jump relative (conditional & unconditional)
ROM:240A
ROM:240C 3E AD                    ld      a, 0ADh         ; Move o1 <- o2
ROM:240E CB 46                    bit     0, (hl)         ; Test <bit> in operand
ROM:240E
ROM:2410
ROM:2410          loc_2410:                               ; CODE XREF: sub_2188+282↑j
ROM:2410 CD 94 26                 call    sub_2694        ; call (cond & uncond)
ROM:2410
ROM:2413 CD 57 16                 call    sub_1657        ; call (cond & uncond)
ROM:2413
ROM:2416 C8                       ret     z               ; Return (cond & uncond)
ROM:2417 F5                       push    af              ; Push register pair onto stack
ROM:2418 CD 7A 23                 call    sub_237A        ; call (cond & uncond)
ROM:2418
ROM:241B F1                       pop     af              ; Pop register pair from stack
ROM:241C 2A 7B 41                 ld      hl, (word_417B) ; Move o1 <- o2
ROM:241F FE AD                    cp      0ADh            ; Compare with accumulator
ROM:2421 20 14                    jr      nz, loc_2437    ; Jump relative (conditional & unconditional)
ROM:2421
ROM:2423 E5                       push    hl              ; Push register pair onto stack
ROM:2424 CD 3F 17                 call    sub_173F        ; call (cond & uncond)
ROM:2424
ROM:2427 E1                       pop     hl              ; Pop register pair from stack
ROM:2428 22 C8 40                 ld      (word_40C8), hl ; Move o1 <- o2
ROM:242B 22 C0 40                 ld      (word_40C0), hl ; Move o1 <- o2
ROM:242B
ROM:242E
ROM:242E          loc_242E:                               ; CODE XREF: sub_2188+2B2↓j
ROM:242E CD DA 21                 call    sub_21DA        ; call (cond & uncond)
ROM:242E
ROM:2431 CD 57 16                 call    sub_1657        ; call (cond & uncond)
ROM:2431
ROM:2434 C3 8D 27                 jp      sub_278D        ; Jump (conditional & unconditional)
ROM:2434
ROM:2437          ; ---------------------------------------------------------------------------
ROM:2437
ROM:2437          loc_2437:                               ; CODE XREF: sub_2188+299↑j
ROM:2437 22 CA 40                 ld      (word_40CA), hl ; Move o1 <- o2
ROM:243A 18 F2                    jr      loc_242E        ; Jump relative (conditional & unconditional)
ROM:243A
ROM:243A          ; END OF FUNCTION CHUNK FOR sub_2188
ROM:243C
ROM:243C          ; =============== S U B R O U T I N E =======================================
ROM:243C
ROM:243C
ROM:243C          sub_243C:                               ; CODE XREF: sub_1EB2:loc_1ECB↑p
ROM:243C
ROM:243C          ; FUNCTION CHUNK AT ROM:2648 SIZE 00000004 BYTES
ROM:243C
ROM:243C 11 D0 02                 ld      de, 2D0h        ; Move o1 <- o2
ROM:243F 21 1E 00                 ld      hl, 1Eh         ; Move o1 <- o2
ROM:243F
ROM:2442
ROM:2442          loc_2442:                               ; CODE XREF: sub_243C+1E↓j
ROM:2442 D5                       push    de              ; Push register pair onto stack
ROM:2443 CD 5D 0B                 call    sub_B5D         ; call (cond & uncond)
ROM:2443
ROM:2446 3E 02                    ld      a, 2            ; Move o1 <- o2
ROM:2448 DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:2448                                                  ; A - if < 10h is 0000xxxx read mask
ROM:2448                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:2448                                                  ;         A[5:3] - bit index for...
ROM:2448                                                  ;         A[2:0] - bit index for...
ROM:2448                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:2448
ROM:2449 D1                       pop     de              ; Pop register pair from stack
ROM:244A 20 12                    jr      nz, loc_245E    ; Jump relative (conditional & unconditional)
ROM:244A
ROM:244C 1B                       dec     de              ; Decrement operand
ROM:244D 7B                       ld      a, e            ; Move o1 <- o2
ROM:244E B2                       or      d               ; Or with accumulator
ROM:244E
ROM:244F
ROM:244F          loc_244F:                               ; CODE XREF: sub_243C+20↓j
ROM:244F CA 48 26                 jp      z, loc_2648     ; Jump (conditional & unconditional)
ROM:244F
ROM:2452 3E 9B                    ld      a, 9Bh          ; Move o1 <- o2
ROM:2454 D5                       push    de              ; Push register pair onto stack
ROM:2455 DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:2455                                                  ; A - if < 10h is 0000xxxx read mask
ROM:2455                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:2455                                                  ;         A[5:3] - bit index for...
ROM:2455                                                  ;         A[2:0] - bit index for...
ROM:2455                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:2455
ROM:2456 D1                       pop     de              ; Pop register pair from stack
ROM:2457 21 03 00                 ld      hl, 3           ; Move o1 <- o2
ROM:245A 20 E6                    jr      nz, loc_2442    ; Jump relative (conditional & unconditional)
ROM:245A
ROM:245C 18 F1                    jr      loc_244F        ; Jump relative (conditional & unconditional)
ROM:245C
ROM:245E          ; ---------------------------------------------------------------------------
ROM:245E
ROM:245E          loc_245E:                               ; CODE XREF: sub_243C+E↑j
ROM:245E 21 00 00                 ld      hl, 0           ; Move o1 <- o2
ROM:2461 22 AA 40                 ld      (word_40AA), hl ; Move o1 <- o2
ROM:2464 2A C6 40                 ld      hl, (word_40C6) ; Move o1 <- o2
ROM:2467 CD 5D 0B                 call    sub_B5D         ; call (cond & uncond)
ROM:2467
ROM:246A CD BC 10                 call    sub_10BC        ; call (cond & uncond)
ROM:246A
ROM:246D 2A A8 40                 ld      hl, (word_40A8) ; Move o1 <- o2
ROM:2470 CD EC 30                 call    sub_30EC        ; call (cond & uncond)
ROM:2470
ROM:2473 CD 9F 0B                 call    sub_B9F         ; call (cond & uncond)
ROM:2473
ROM:2476 CD 0A 25                 call    sub_250A        ; call (cond & uncond)
ROM:2476
ROM:2476          ; End of function sub_243C
ROM:2476
ROM:2479
ROM:2479          ; =============== S U B R O U T I N E =======================================
ROM:2479
ROM:2479
ROM:2479          sub_2479:                               ; CODE XREF: Setup_all+42↑p
ROM:2479 2A A8 40                 ld      hl, (word_40A8) ; Move o1 <- o2
ROM:247C 11 CA 00                 ld      de, 0CAh        ; Move o1 <- o2
ROM:247F AF                       xor     a               ; Exclusive or with accumulator
ROM:2480 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:2480
ROM:2481 11 36 FF                 ld      de, 0FF36h      ; Move o1 <- o2
ROM:2484 F2 8D 24                 jp      p, loc_248D     ; Jump (conditional & unconditional)
ROM:2484
ROM:2487 EB                       ex      de, hl          ; Exchange operands
ROM:2488 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:2488
ROM:2489 EB                       ex      de, hl          ; Exchange operands
ROM:248A 21 00 00                 ld      hl, 0           ; Move o1 <- o2
ROM:248A
ROM:248D
ROM:248D          loc_248D:                               ; CODE XREF: sub_2479+B↑j
ROM:248D 22 A6 40                 ld      (word_40A6), hl ; Move o1 <- o2
ROM:2490 2A C8 40                 ld      hl, (word_40C8) ; Move o1 <- o2
ROM:2493 22 C0 40                 ld      (word_40C0), hl ; Move o1 <- o2
ROM:2496 22 7B 41                 ld      (word_417B), hl ; Move o1 <- o2
ROM:2499 19                       add     hl, de          ; Add <reg> to A
ROM:249A C3 19 0B                 jp      sub_B19         ; Jump (conditional & unconditional)
ROM:249A
ROM:249A          ; End of function sub_2479
ROM:249A
ROM:249D          ; ---------------------------------------------------------------------------
ROM:249D E5                       push    hl              ; Push register pair onto stack
ROM:249E CD E7 24                 call    sub_24E7        ; call (cond & uncond)
ROM:249E
ROM:24A1 18 21                    jr      loc_24C4        ; Jump relative (conditional & unconditional)
ROM:24A1
ROM:24A3          ; ---------------------------------------------------------------------------
ROM:24A3          ; START OF FUNCTION CHUNK FOR sub_2EDB
ROM:24A3          ;   ADDITIONAL PARENT FUNCTION sub_34CA
ROM:24A3
ROM:24A3          loc_24A3:                               ; CODE XREF: sub_2EDB+3C↓j
ROM:24A3                                                  ; sub_34CA+9D↓j ...
ROM:24A3 CD BA 1C                 call    sub_1CBA        ; call (cond & uncond)
ROM:24A3
ROM:24A6 CD E7 24                 call    sub_24E7        ; call (cond & uncond)
ROM:24A6
ROM:24A9 CD B7 16                 call    test_4068_b1    ; call (cond & uncond)
ROM:24A9
ROM:24AC 28 16                    jr      z, loc_24C4     ; Jump relative (conditional & unconditional)
ROM:24AC
ROM:24AE
ROM:24AE          loc_24AE:                               ; CODE XREF: sub_2EDB-A25↓j
ROM:24AE CD CA 1C                 call    sub_1CCA        ; call (cond & uncond)
ROM:24AE
ROM:24B1 28 05                    jr      z, loc_24B8     ; Jump relative (conditional & unconditional)
ROM:24B1
ROM:24B3 CD 97 35                 call    sub_3597        ; call (cond & uncond)
ROM:24B3
ROM:24B6 18 F6                    jr      loc_24AE        ; Jump relative (conditional & unconditional)
ROM:24B6
ROM:24B8          ; ---------------------------------------------------------------------------
ROM:24B8
ROM:24B8          loc_24B8:                               ; CODE XREF: sub_2EDB-A2A↑j
ROM:24B8 3E 03                    ld      a, 3            ; Move o1 <- o2
ROM:24BA CD 33 36                 call    sub_3633        ; call (cond & uncond)
ROM:24BA
ROM:24BD 06 0C                    ld      b, 0Ch          ; Move o1 <- o2
ROM:24BD
ROM:24BF
ROM:24BF          loc_24BF:                               ; CODE XREF: sub_2EDB-A19↓j
ROM:24BF CD 9A 35                 call    sub_359A        ; call (cond & uncond)
ROM:24BF
ROM:24C2 10 FB                    djnz    loc_24BF        ; Decrement reg B and jump relative if zero
ROM:24C2
ROM:24C4
ROM:24C4          loc_24C4:                               ; CODE XREF: ROM:24A1↑j
ROM:24C4                                                  ; sub_2EDB-A2F↑j
ROM:24C4 E1                       pop     hl              ; Pop register pair from stack
ROM:24C5 21 72 40                 ld      hl, 4072h       ; Move o1 <- o2
ROM:24C8 36 00                    ld      (hl), 0         ; Move o1 <- o2
ROM:24C8
ROM:24C8          ; END OF FUNCTION CHUNK FOR sub_2EDB
ROM:24CA
ROM:24CA          ; =============== S U B R O U T I N E =======================================
ROM:24CA
ROM:24CA
ROM:24CA          sub_24CA:                               ; CODE XREF: sub_2BED-8↓p
ROM:24CA                                                  ; where_our_40bd_filled+C↓p
ROM:24CA 21 58 41                 ld      hl, 4158h       ; Move o1 <- o2
ROM:24CD CB 86                    res     0, (hl)         ; Reset bit
ROM:24CF CD E5 13                 call    sub_13E5        ; call (cond & uncond)
ROM:24CF
ROM:24D2 CD 32 17                 call    sub_1732        ; call (cond & uncond)
ROM:24D2
ROM:24D5 CD 20 17                 call    sub_1720        ; call (cond & uncond)
ROM:24D5
ROM:24D8 CD FC 16                 call    sub_16FC        ; call (cond & uncond)
ROM:24D8
ROM:24DB CD 0E 17                 call    sub_170E        ; call (cond & uncond)
ROM:24DB
ROM:24DE CD BC 10                 call    sub_10BC        ; call (cond & uncond)
ROM:24DE
ROM:24E1
ROM:24E1          loc_24E1:                               ; CODE XREF: sub_1BFC+15↑j
ROM:24E1 CD ED 2B                 call    sub_2BED        ; call (cond & uncond)
ROM:24E1
ROM:24E4 C3 ED 2B                 jp      sub_2BED        ; Jump (conditional & unconditional)
ROM:24E4
ROM:24E4          ; End of function sub_24CA
ROM:24E4
ROM:24E7
ROM:24E7          ; =============== S U B R O U T I N E =======================================
ROM:24E7
ROM:24E7
ROM:24E7          sub_24E7:                               ; CODE XREF: Setup_all+9E↑p
ROM:24E7                                                  ; ROM:249E↑p ...
ROM:24E7 21 8D 01                 ld      hl, 18Dh        ; Move o1 <- o2
ROM:24EA ED 5B A8                 ld      de, (word_40A8) ; Move o1 <- o2
ROM:24EA 40
ROM:24EE CD F0 30                 call    sub_30F0        ; call (cond & uncond)
ROM:24EE
ROM:24F1 06 20                    ld      b, 20h ; ' '    ; Move o1 <- o2
ROM:24F1
ROM:24F3
ROM:24F3          loc_24F3:                               ; CODE XREF: sub_24E7+17↓j
ROM:24F3 21 50 00                 ld      hl, 50h ; 'P'   ; Move o1 <- o2
ROM:24F6 CD 5D 0B                 call    sub_B5D         ; call (cond & uncond)
ROM:24F6
ROM:24F9 3E 08                    ld      a, 8            ; Move o1 <- o2
ROM:24FB DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:24FB                                                  ; A - if < 10h is 0000xxxx read mask
ROM:24FB                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:24FB                                                  ;         A[5:3] - bit index for...
ROM:24FB                                                  ;         A[2:0] - bit index for...
ROM:24FB                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:24FB
ROM:24FC 28 03                    jr      z, loc_2501     ; Jump relative (conditional & unconditional)
ROM:24FC
ROM:24FE 10 F3                    djnz    loc_24F3        ; Decrement reg B and jump relative if zero
ROM:24FE
ROM:2500 C9                       ret                     ; Return (cond & uncond)
ROM:2500
ROM:2501          ; ---------------------------------------------------------------------------
ROM:2501
ROM:2501          loc_2501:                               ; CODE XREF: sub_24E7+15↑j
ROM:2501 21 60 01                 ld      hl, 160h        ; Move o1 <- o2
ROM:2504 CD 5D 0B                 call    sub_B5D         ; call (cond & uncond)
ROM:2504
ROM:2507 C3 9F 0B                 jp      sub_B9F         ; Jump (conditional & unconditional)
ROM:2507
ROM:2507          ; End of function sub_24E7
ROM:2507
ROM:250A
ROM:250A          ; =============== S U B R O U T I N E =======================================
ROM:250A
ROM:250A
ROM:250A          sub_250A:                               ; CODE XREF: Setup_all+3D↑p
ROM:250A                                                  ; Setup_all+9B↑p ...
ROM:250A 06 C0                    ld      b, 0C0h         ; Move o1 <- o2
ROM:250C 21 0F 00                 ld      hl, 0Fh         ; Move o1 <- o2
ROM:250C
ROM:250F
ROM:250F          loc_250F:                               ; CODE XREF: sub_250A+11↓j
ROM:250F C5                       push    bc              ; Push register pair onto stack
ROM:2510 CD 19 0B                 call    sub_B19         ; call (cond & uncond)
ROM:2510
ROM:2513 3E 02                    ld      a, 2            ; Move o1 <- o2
ROM:2515 DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:2515                                                  ; A - if < 10h is 0000xxxx read mask
ROM:2515                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:2515                                                  ;         A[5:3] - bit index for...
ROM:2515                                                  ;         A[2:0] - bit index for...
ROM:2515                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:2515
ROM:2516 C1                       pop     bc              ; Pop register pair from stack
ROM:2517 C0                       ret     nz              ; Return (cond & uncond)
ROM:2518 21 02 00                 ld      hl, 2           ; Move o1 <- o2
ROM:251B 10 F2                    djnz    loc_250F        ; Decrement reg B and jump relative if zero
ROM:251B
ROM:251D C9                       ret                     ; Return (cond & uncond)
ROM:251D
ROM:251D          ; End of function sub_250A
ROM:251D
ROM:251E
ROM:251E          ; =============== S U B R O U T I N E =======================================
ROM:251E
ROM:251E
ROM:251E          sub_251E:                               ; CODE XREF: sub_1C67↑p
ROM:251E CD 43 17                 call    sub_1743        ; call (cond & uncond)
ROM:251E
ROM:2521 C8                       ret     z               ; Return (cond & uncond)
ROM:2522 2A 63 41                 ld      hl, (word_4163) ; Move o1 <- o2
ROM:2525 36 08                    ld      (hl), 8         ; Move o1 <- o2
ROM:2527 E5                       push    hl              ; Push register pair onto stack
ROM:2528 CD 98 17                 call    set_4157_b4_to_1 ; call (cond & uncond)
ROM:2528
ROM:252B CC 58 17                 call    z, sub_1758     ; call (cond & uncond)
ROM:252B
ROM:252E CD A7 16                 call    test_4156_bit3  ; call (cond & uncond)
ROM:252E
ROM:2531 E1                       pop     hl              ; Pop register pair from stack
ROM:2532 28 2C                    jr      z, loc_2560     ; Jump relative (conditional & unconditional)
ROM:2532
ROM:2534 11 01 FF                 ld      de, 0FF01h      ; Move o1 <- o2
ROM:2534
ROM:2537
ROM:2537          loc_2537:                               ; CODE XREF: sub_251E+2C↓j
ROM:2537 14                       inc     d               ; Increment operand
ROM:2537
ROM:2538
ROM:2538          loc_2538:                               ; CODE XREF: sub_251E+29↓j
ROM:2538                                                  ; sub_251E+31↓j
ROM:2538 ED 4B 61                 ld      bc, (word_4161) ; Move o1 <- o2
ROM:2538 41
ROM:253C CD 05 28                 call    sub_2805        ; call (cond & uncond)
ROM:253C
ROM:253F 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:2540 38 0F                    jr      c, loc_2551     ; Jump relative (conditional & unconditional)
ROM:2540
ROM:2542 FE 0F                    cp      0Fh             ; Compare with accumulator
ROM:2544 43                       ld      b, e            ; Move o1 <- o2
ROM:2545 1E 00                    ld      e, 0            ; Move o1 <- o2
ROM:2547 20 EF                    jr      nz, loc_2538    ; Jump relative (conditional & unconditional)
ROM:2547
ROM:2549 58                       ld      e, b            ; Move o1 <- o2
ROM:254A 10 EB                    djnz    loc_2537        ; Decrement reg B and jump relative if zero
ROM:254A
ROM:254C CD B0 28                 call    sub_28B0        ; call (cond & uncond)
ROM:254C
ROM:254F 18 E7                    jr      loc_2538        ; Jump relative (conditional & unconditional)
ROM:254F
ROM:2551          ; ---------------------------------------------------------------------------
ROM:2551
ROM:2551          loc_2551:                               ; CODE XREF: sub_251E+22↑j
ROM:2551 CD AD 1C                 call    sub_1CAD        ; call (cond & uncond)
ROM:2551
ROM:2554 38 0A                    jr      c, loc_2560     ; Jump relative (conditional & unconditional)
ROM:2554
ROM:2556 5D                       ld      e, l            ; Move o1 <- o2
ROM:2557 D5                       push    de              ; Push register pair onto stack
ROM:2558 ED 5B 10                 ld      de, (word_110)  ; Move o1 <- o2
ROM:2558 01
ROM:255C D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:255C
ROM:255D D1                       pop     de              ; Pop register pair from stack
ROM:255E 38 05                    jr      c, loc_2565     ; Jump relative (conditional & unconditional)
ROM:255E
ROM:2560
ROM:2560          loc_2560:                               ; CODE XREF: sub_251E+14↑j
ROM:2560                                                  ; sub_251E+36↑j
ROM:2560 01 00 00                 ld      bc, 0           ; Move o1 <- o2
ROM:2563 18 1D                    jr      loc_2582        ; Jump relative (conditional & unconditional)
ROM:2563
ROM:2565          ; ---------------------------------------------------------------------------
ROM:2565
ROM:2565          loc_2565:                               ; CODE XREF: sub_251E+40↑j
ROM:2565 CD 68 17                 call    sub_1768        ; call (cond & uncond)
ROM:2565
ROM:2568
ROM:2568          loc_2568:                               ; CODE XREF: sub_251E+55↓j
ROM:2568 FE 0F                    cp      0Fh             ; Compare with accumulator
ROM:256A 20 09                    jr      nz, loc_2575    ; Jump relative (conditional & unconditional)
ROM:256A
ROM:256C 15                       dec     d               ; Decrement operand
ROM:256D D5                       push    de              ; Push register pair onto stack
ROM:256E CD 1B 1D                 call    sub_1D1B        ; call (cond & uncond)
ROM:256E
ROM:2571 D1                       pop     de              ; Pop register pair from stack
ROM:2572 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:2573 18 F3                    jr      loc_2568        ; Jump relative (conditional & unconditional)
ROM:2573
ROM:2575          ; ---------------------------------------------------------------------------
ROM:2575
ROM:2575          loc_2575:                               ; CODE XREF: sub_251E+4C↑j
ROM:2575 0E FF                    ld      c, 0FFh         ; Move o1 <- o2
ROM:2577 7B                       ld      a, e            ; Move o1 <- o2
ROM:2577
ROM:2578
ROM:2578          loc_2578:                               ; CODE XREF: sub_251E+60↓j
ROM:2578 0C                       inc     c               ; Increment operand
ROM:2579 14                       inc     d               ; Increment operand
ROM:257A 15                       dec     d               ; Decrement operand
ROM:257B 28 08                    jr      z, loc_2585     ; Jump relative (conditional & unconditional)
ROM:257B
ROM:257D 92                       sub     d               ; Subtract from A
ROM:257E 30 F8                    jr      nc, loc_2578    ; Jump relative (conditional & unconditional)
ROM:257E
ROM:2580 82                       add     a, d            ; Add <reg> to A
ROM:2581 47                       ld      b, a            ; Move o1 <- o2
ROM:2581
ROM:2582
ROM:2582          loc_2582:                               ; CODE XREF: sub_251E+45↑j
ROM:2582 CD 68 17                 call    sub_1768        ; call (cond & uncond)
ROM:2582
ROM:2585
ROM:2585          loc_2585:                               ; CODE XREF: sub_251E+5D↑j
ROM:2585                                                  ; sub_251E+79↓j ...
ROM:2585 2A 61 41                 ld      hl, (word_4161) ; Move o1 <- o2
ROM:2588 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:2589 F5                       push    af              ; Push register pair onto stack
ROM:258A C5                       push    bc              ; Push register pair onto stack
ROM:258B CD 20 1D                 call    sub_1D20        ; call (cond & uncond)
ROM:258B
ROM:258E C1                       pop     bc              ; Pop register pair from stack
ROM:258F F1                       pop     af              ; Pop register pair from stack
ROM:2590 FE 08                    cp      8               ; Compare with accumulator
ROM:2592 CA 9A 16                 jp      z, loc_169A     ; Jump (conditional & unconditional)
ROM:2592
ROM:2595 FE 0F                    cp      0Fh             ; Compare with accumulator
ROM:2597 20 EC                    jr      nz, loc_2585    ; Jump relative (conditional & unconditional)
ROM:2597
ROM:2599 21 BF 40                 ld      hl, 40BFh       ; Move o1 <- o2
ROM:259C CB 76                    bit     6, (hl)         ; Test <bit> in operand
ROM:259E 28 05                    jr      z, loc_25A5     ; Jump relative (conditional & unconditional)
ROM:259E
ROM:25A0 3E 17                    ld      a, 17h          ; Move o1 <- o2
ROM:25A2 C5                       push    bc              ; Push register pair onto stack
ROM:25A3 E7                       rst     20h             ; Restart at vector <int>
ROM:25A3
ROM:25A4 C1                       pop     bc              ; Pop register pair from stack
ROM:25A4
ROM:25A5
ROM:25A5          loc_25A5:                               ; CODE XREF: sub_251E+80↑j
ROM:25A5 AF                       xor     a               ; Exclusive or with accumulator
ROM:25A6 67                       ld      h, a            ; Move o1 <- o2
ROM:25A7 69                       ld      l, c            ; Move o1 <- o2
ROM:25A8 B0                       or      b               ; Or with accumulator
ROM:25A9 28 02                    jr      z, loc_25AD     ; Jump relative (conditional & unconditional)
ROM:25A9
ROM:25AB 05                       dec     b               ; Decrement operand
ROM:25AC 2C                       inc     l               ; Increment operand
ROM:25AC
ROM:25AD
ROM:25AD          loc_25AD:                               ; CODE XREF: sub_251E+8B↑j
ROM:25AD C5                       push    bc              ; Push register pair onto stack
ROM:25AE CD 19 0B                 call    sub_B19         ; call (cond & uncond)
ROM:25AE
ROM:25B1 C1                       pop     bc              ; Pop register pair from stack
ROM:25B2 18 D1                    jr      loc_2585        ; Jump relative (conditional & unconditional)
ROM:25B2
ROM:25B2          ; End of function sub_251E
ROM:25B2
ROM:25B4          ; ---------------------------------------------------------------------------
ROM:25B4 21 58 41                 ld      hl, 4158h       ; Move o1 <- o2
ROM:25B7 CB F6                    set     6, (hl)         ; Set bit
ROM:25B9 06 11                    ld      b, 11h          ; Move o1 <- o2
ROM:25B9
ROM:25BB
ROM:25BB          loc_25BB:                               ; CODE XREF: ROM:25CA↓j
ROM:25BB 21 72 40                 ld      hl, 4072h       ; Move o1 <- o2
ROM:25BE CB 56                    bit     2, (hl)         ; Test <bit> in operand
ROM:25C0 CB 96                    res     2, (hl)         ; Reset bit
ROM:25C2 20 08                    jr      nz, loc_25CC    ; Jump relative (conditional & unconditional)
ROM:25C2
ROM:25C4 21 11 00                 ld      hl, 11h         ; Move o1 <- o2
ROM:25C7 CD 5D 0B                 call    sub_B5D         ; call (cond & uncond)
ROM:25C7
ROM:25CA 10 EF                    djnz    loc_25BB        ; Decrement reg B and jump relative if zero
ROM:25CA
ROM:25CC
ROM:25CC          loc_25CC:                               ; CODE XREF: ROM:25C2↑j
ROM:25CC ED 43 85                 ld      (word_4185), bc ; Move o1 <- o2
ROM:25CC 41
ROM:25D0 C4 4C 26                 call    nz, sub_264C    ; call (cond & uncond)
ROM:25D0
ROM:25D3 CD 71 17                 call    sub_1771        ; call (cond & uncond)
ROM:25D3
ROM:25D6 CD 04 18                 call    loc_1804        ; call (cond & uncond)
ROM:25D6
ROM:25D9
ROM:25D9          ; =============== S U B R O U T I N E =======================================
ROM:25D9
ROM:25D9
ROM:25D9          sub_25D9:                               ; CODE XREF: Setup_all+65↑p
ROM:25D9                                                  ; sub_25D9+3↓j
ROM:25D9 3E 84                    ld      a, 84h          ; Move o1 <- o2
ROM:25DB DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:25DB                                                  ; A - if < 10h is 0000xxxx read mask
ROM:25DB                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:25DB                                                  ;         A[5:3] - bit index for...
ROM:25DB                                                  ;         A[2:0] - bit index for...
ROM:25DB                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:25DB
ROM:25DC 28 FB                    jr      z, sub_25D9     ; Jump relative (conditional & unconditional)
ROM:25DC
ROM:25DE ED 4B 85                 ld      bc, (word_4185) ; Move o1 <- o2
ROM:25DE 41
ROM:25E2 3E 11                    ld      a, 11h          ; Move o1 <- o2
ROM:25E4 90                       sub     b               ; Subtract from A
ROM:25E5 47                       ld      b, a            ; Move o1 <- o2
ROM:25E6 21 EF FF                 ld      hl, 0FFEFh      ; Move o1 <- o2
ROM:25E6
ROM:25E9
ROM:25E9          loc_25E9:                               ; CODE XREF: sub_25D9+13↓j
ROM:25E9 CD 5D 0B                 call    sub_B5D         ; call (cond & uncond)
ROM:25E9
ROM:25EC 10 FB                    djnz    loc_25E9        ; Decrement reg B and jump relative if zero
ROM:25EC
ROM:25EE CD 75 17                 call    sub_1775        ; call (cond & uncond)
ROM:25EE
ROM:25F1 21 58 41                 ld      hl, 4158h       ; Move o1 <- o2
ROM:25F4 CB B6                    res     6, (hl)         ; Reset bit
ROM:25F6 C9                       ret                     ; Return (cond & uncond)
ROM:25F6
ROM:25F6          ; End of function sub_25D9
ROM:25F6
ROM:25F7          ; ---------------------------------------------------------------------------
ROM:25F7          ; START OF FUNCTION CHUNK FOR sub_2188
ROM:25F7
ROM:25F7          loc_25F7:                               ; CODE XREF: sub_2188+1EF↑j
ROM:25F7 CD 50 16                 call    sub_1650        ; call (cond & uncond)
ROM:25F7
ROM:25FA 28 05                    jr      z, loc_2601     ; Jump relative (conditional & unconditional)
ROM:25FA
ROM:25FC CD 57 16                 call    sub_1657        ; call (cond & uncond)
ROM:25FC
ROM:25FF 18 21                    jr      sub_2622        ; Jump relative (conditional & unconditional)
ROM:25FF
ROM:2601          ; ---------------------------------------------------------------------------
ROM:2601
ROM:2601          loc_2601:                               ; CODE XREF: sub_2188+472↑j
ROM:2601 CD 77 16                 call    test_4157_bit3  ; call (cond & uncond)
ROM:2601
ROM:2604 C2 83 16                 jp      nz, rst_4157_bit3 ; Jump (conditional & unconditional)
ROM:2604
ROM:2607
ROM:2607          loc_2607:                               ; CODE XREF: sub_2188+498↓j
ROM:2607 3E 97                    ld      a, 97h          ; Move o1 <- o2
ROM:2609 DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:2609                                                  ; A - if < 10h is 0000xxxx read mask
ROM:2609                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:2609                                                  ;         A[5:3] - bit index for...
ROM:2609                                                  ;         A[2:0] - bit index for...
ROM:2609                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:2609
ROM:260A C8                       ret     z               ; Return (cond & uncond)
ROM:260B 3A A4 40                 ld      a, (byte_40A4)  ; Move o1 <- o2
ROM:260E DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:260E                                                  ; A - if < 10h is 0000xxxx read mask
ROM:260E                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:260E                                                  ;         A[5:3] - bit index for...
ROM:260E                                                  ;         A[2:0] - bit index for...
ROM:260E                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:260E
ROM:260F 20 19                    jr      nz, loc_262A    ; Jump relative (conditional & unconditional)
ROM:260F
ROM:2611 3E 9D                    ld      a, 9Dh          ; Move o1 <- o2
ROM:2613 DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:2613                                                  ; A - if < 10h is 0000xxxx read mask
ROM:2613                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:2613                                                  ;         A[5:3] - bit index for...
ROM:2613                                                  ;         A[2:0] - bit index for...
ROM:2613                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:2613
ROM:2614 C2 2C 31                 jp      nz, loc_312C    ; Jump (conditional & unconditional)
ROM:2614
ROM:2617 3E 8C                    ld      a, 8Ch          ; Move o1 <- o2
ROM:2619 DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:2619                                                  ; A - if < 10h is 0000xxxx read mask
ROM:2619                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:2619                                                  ;         A[5:3] - bit index for...
ROM:2619                                                  ;         A[2:0] - bit index for...
ROM:2619                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:2619
ROM:261A C2 49 31                 jp      nz, loc_3149    ; Jump (conditional & unconditional)
ROM:261A
ROM:261D 3E 9C                    ld      a, 9Ch          ; Move o1 <- o2
ROM:261F DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:261F                                                  ; A - if < 10h is 0000xxxx read mask
ROM:261F                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:261F                                                  ;         A[5:3] - bit index for...
ROM:261F                                                  ;         A[2:0] - bit index for...
ROM:261F                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:261F
ROM:2620 28 E5                    jr      z, loc_2607     ; Jump relative (conditional & unconditional)
ROM:2620
ROM:2620          ; END OF FUNCTION CHUNK FOR sub_2188
ROM:2622
ROM:2622          ; =============== S U B R O U T I N E =======================================
ROM:2622
ROM:2622
ROM:2622          sub_2622:                               ; CODE XREF: ROM:1DE9↑p
ROM:2622                                                  ; sub_2188+477↑j
ROM:2622 3E 8D                    ld      a, 8Dh          ; Move o1 <- o2
ROM:2624 CD C0 1B                 call    loc_1BC0        ; call (cond & uncond)
ROM:2624
ROM:2627 C3 8D 27                 jp      sub_278D        ; Jump (conditional & unconditional)
ROM:2627
ROM:2627          ; End of function sub_2622
ROM:2627
ROM:262A          ; ---------------------------------------------------------------------------
ROM:262A          ; START OF FUNCTION CHUNK FOR sub_2188
ROM:262A
ROM:262A          loc_262A:                               ; CODE XREF: sub_2188+487↑j
ROM:262A 3E 15                    ld      a, 15h          ; Move o1 <- o2
ROM:262C CD 5B 1B                 call    sub_1B5B        ; call (cond & uncond)
ROM:262C
ROM:262F CD BC 10                 call    sub_10BC        ; call (cond & uncond)
ROM:262F
ROM:2632 C3 BE 28                 jp      sub_28BE        ; Jump (conditional & unconditional)
ROM:2632
ROM:2632          ; END OF FUNCTION CHUNK FOR sub_2188
ROM:2635
ROM:2635          ; =============== S U B R O U T I N E =======================================
ROM:2635
ROM:2635
ROM:2635          sub_2635:                               ; CODE XREF: Setup_all+B8↑p
ROM:2635 AF                       xor     a               ; Exclusive or with accumulator
ROM:2636 18 30                    jr      sub_2668        ; Jump relative (conditional & unconditional)
ROM:2636
ROM:2636          ; End of function sub_2635
ROM:2636
ROM:2636          ; ---------------------------------------------------------------------------
ROM:2638 3E                       db  3Eh ; >
ROM:2639 01                       db    1
ROM:263A 18                       db  18h
ROM:263B 2C                       db  2Ch ; ,
ROM:263C          ; ---------------------------------------------------------------------------
ROM:263C          ; START OF FUNCTION CHUNK FOR sub_2028
ROM:263C
ROM:263C          loc_263C:                               ; CODE XREF: sub_2028+4C↑j
ROM:263C 3E 02                    ld      a, 2            ; Move o1 <- o2
ROM:263C
ROM:263E
ROM:263E          loc_263E:                               ; DATA XREF: ROM:03ED↑w
ROM:263E 18 28                    jr      sub_2668        ; Jump relative (conditional & unconditional)
ROM:263E
ROM:263E          ; END OF FUNCTION CHUNK FOR sub_2028
ROM:2640          ; ---------------------------------------------------------------------------
ROM:2640          ; START OF FUNCTION CHUNK FOR sub_1411
ROM:2640
ROM:2640          loc_2640:                               ; CODE XREF: sub_1411+12↑j
ROM:2640 3E 03                    ld      a, 3            ; Move o1 <- o2
ROM:2642 18 24                    jr      sub_2668        ; Jump relative (conditional & unconditional)
ROM:2642
ROM:2642          ; END OF FUNCTION CHUNK FOR sub_1411
ROM:2644          ; ---------------------------------------------------------------------------
ROM:2644          ; START OF FUNCTION CHUNK FOR sub_28CD
ROM:2644          ;   ADDITIONAL PARENT FUNCTION sub_300A
ROM:2644
ROM:2644          loc_2644:                               ; CODE XREF: sub_28CD:loc_2E05↓j
ROM:2644                                                  ; sub_300A+11↓j
ROM:2644 3E 04                    ld      a, 4            ; Move o1 <- o2
ROM:2646 18 20                    jr      sub_2668        ; Jump relative (conditional & unconditional)
ROM:2646
ROM:2646          ; END OF FUNCTION CHUNK FOR sub_28CD
ROM:2648          ; ---------------------------------------------------------------------------
ROM:2648          ; START OF FUNCTION CHUNK FOR sub_243C
ROM:2648
ROM:2648          loc_2648:                               ; CODE XREF: sub_243C:loc_244F↑j
ROM:2648 3E 05                    ld      a, 5            ; Move o1 <- o2
ROM:264A 18 1C                    jr      sub_2668        ; Jump relative (conditional & unconditional)
ROM:264A
ROM:264A          ; END OF FUNCTION CHUNK FOR sub_243C
ROM:264C
ROM:264C          ; =============== S U B R O U T I N E =======================================
ROM:264C
ROM:264C
ROM:264C          sub_264C:                               ; CODE XREF: sub_1EA7+8↑j
ROM:264C                                                  ; ROM:25D0↑p
ROM:264C 3E 07                    ld      a, 7            ; Move o1 <- o2
ROM:264E 18 18                    jr      sub_2668        ; Jump relative (conditional & unconditional)
ROM:264E
ROM:264E          ; End of function sub_264C
ROM:264E
ROM:2650          ; ---------------------------------------------------------------------------
ROM:2650          ; START OF FUNCTION CHUNK FOR sub_1B5B
ROM:2650
ROM:2650          loc_2650:                               ; CODE XREF: sub_1B5B+9E↑j
ROM:2650 3E 08                    ld      a, 8            ; Move o1 <- o2
ROM:2652 18 14                    jr      sub_2668        ; Jump relative (conditional & unconditional)
ROM:2652
ROM:2652          ; END OF FUNCTION CHUNK FOR sub_1B5B
ROM:2654
ROM:2654          ; =============== S U B R O U T I N E =======================================
ROM:2654
ROM:2654
ROM:2654          sub_2654:                               ; CODE XREF: sub_1BFC+12↑p
ROM:2654                                                  ; sub_2BED+33↓j ...
ROM:2654 3E 09                    ld      a, 9            ; Move o1 <- o2
ROM:2656 18 10                    jr      sub_2668        ; Jump relative (conditional & unconditional)
ROM:2656
ROM:2656          ; End of function sub_2654
ROM:2656
ROM:2658          ; ---------------------------------------------------------------------------
ROM:2658          ; START OF FUNCTION CHUNK FOR sub_2065
ROM:2658
ROM:2658          loc_2658:                               ; CODE XREF: sub_2065-50D↑j
ROM:2658 3E 0A                    ld      a, 0Ah          ; Move o1 <- o2
ROM:265A 18 0C                    jr      sub_2668        ; Jump relative (conditional & unconditional)
ROM:265A
ROM:265A          ; END OF FUNCTION CHUNK FOR sub_2065
ROM:265C          ; ---------------------------------------------------------------------------
ROM:265C          ; START OF FUNCTION CHUNK FOR sub_2188
ROM:265C
ROM:265C          loc_265C:                               ; CODE XREF: sub_2188+35↑j
ROM:265C                                                  ; sub_2188+40↑j
ROM:265C 3E 0B                    ld      a, 0Bh          ; Move o1 <- o2
ROM:265E 18 08                    jr      sub_2668        ; Jump relative (conditional & unconditional)
ROM:265E
ROM:265E          ; END OF FUNCTION CHUNK FOR sub_2188
ROM:2660          ; ---------------------------------------------------------------------------
ROM:2660          ; START OF FUNCTION CHUNK FOR sub_2C92
ROM:2660
ROM:2660          loc_2660:                               ; CODE XREF: sub_2C92+7↓j
ROM:2660 3E 0C                    ld      a, 0Ch          ; Move o1 <- o2
ROM:2662 18 04                    jr      sub_2668        ; Jump relative (conditional & unconditional)
ROM:2662
ROM:2662          ; END OF FUNCTION CHUNK FOR sub_2C92
ROM:2664
ROM:2664          ; =============== S U B R O U T I N E =======================================
ROM:2664
ROM:2664
ROM:2664          sub_2664:                               ; CODE XREF: sub_329E+D↓p
ROM:2664                                                  ; ROM:loc_36F1↓j
ROM:2664 3E 0D                    ld      a, 0Dh          ; Move o1 <- o2
ROM:2666 18 00                    jr      sub_2668        ; Jump relative (conditional & unconditional)
ROM:2666
ROM:2666          ; End of function sub_2664
ROM:2666
ROM:2668
ROM:2668          ; =============== S U B R O U T I N E =======================================
ROM:2668
ROM:2668
ROM:2668          sub_2668:                               ; CODE XREF: sub_B81:loc_B9A↑p
ROM:2668                                                  ; sub_116C:loc_11A3↑j ...
ROM:2668 21 AC 40                 ld      hl, 40ACh       ; Move o1 <- o2
ROM:266B CD 01 27                 call    Display_fill_with_0Fh ; call (cond & uncond)
ROM:266B
ROM:266E 01 03 03                 ld      bc, 303h        ; Move o1 <- o2
ROM:2671 CD 05 27                 call    Array_fill_with_C ; HL - Base address
ROM:2671                                                  ; B - Count
ROM:2671                                                  ; C - Value
ROM:2671
ROM:2674 26 00                    ld      h, 0            ; Move o1 <- o2
ROM:2676 6F                       ld      l, a            ; Move o1 <- o2
ROM:2677 CD AC 27                 call    sub_27AC        ; call (cond & uncond)
ROM:2677
ROM:267A 2A 2B 42                 ld      hl, (word_422B) ; Move o1 <- o2
ROM:267D 22 B1 40                 ld      (Display_pos5_6), hl ; Display_pos5
ROM:2680 21 B5 40                 ld      hl, 40B5h       ; Move o1 <- o2
ROM:2683 06 03                    ld      b, 3            ; Move o1 <- o2
ROM:2685 CD 05 27                 call    Array_fill_with_C ; HL - Base address
ROM:2685                                                  ; B - Count
ROM:2685                                                  ; C - Value
ROM:2685
ROM:2688 CD 83 16                 call    rst_4157_bit3   ; call (cond & uncond)
ROM:2688
ROM:268B CD 8D 27                 call    sub_278D        ; call (cond & uncond)
ROM:268B
ROM:268E
ROM:268E          loc_268E:                               ; CODE XREF: sub_2668+29↓j
ROM:268E 3E 97                    ld      a, 97h          ; Move o1 <- o2
ROM:2690 DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:2690                                                  ; A - if < 10h is 0000xxxx read mask
ROM:2690                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:2690                                                  ;         A[5:3] - bit index for...
ROM:2690                                                  ;         A[2:0] - bit index for...
ROM:2690                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:2690
ROM:2691 28 FB                    jr      z, loc_268E     ; Jump relative (conditional & unconditional)
ROM:2691
ROM:2693 AF                       xor     a               ; Exclusive or with accumulator
ROM:2693
ROM:2693          ; End of function sub_2668
ROM:2693
ROM:2694
ROM:2694          ; =============== S U B R O U T I N E =======================================
ROM:2694
ROM:2694
ROM:2694          sub_2694:                               ; CODE XREF: sub_17B8+B↑j
ROM:2694                                                  ; sub_19FC:loc_19FF↑p ...
ROM:2694 21 91 41                 ld      hl, 4191h       ; Move o1 <- o2
ROM:2697 18 1B                    jr      loc_26B4        ; Jump relative (conditional & unconditional)
ROM:2697
ROM:2697          ; End of function sub_2694
ROM:2697
ROM:2699
ROM:2699          ; =============== S U B R O U T I N E =======================================
ROM:2699
ROM:2699
ROM:2699          sub_2699:                               ; CODE XREF: sub_182E:loc_2722↓p
ROM:2699 21 9D 41                 ld      hl, 419Dh       ; Move o1 <- o2
ROM:269C D5                       push    de              ; Push register pair onto stack
ROM:269D C5                       push    bc              ; Push register pair onto stack
ROM:269E F5                       push    af              ; Push register pair onto stack
ROM:269F 18 2B                    jr      loc_26CC        ; Display_pos0 start addr
ROM:269F
ROM:269F          ; End of function sub_2699
ROM:269F
ROM:26A1
ROM:26A1          ; =============== S U B R O U T I N E =======================================
ROM:26A1
ROM:26A1
ROM:26A1          sub_26A1:                               ; CODE XREF: sub_1BDC+6↑j
ROM:26A1                                                  ; sub_2188:loc_2324↑p
ROM:26A1 CD 4A 16                 call    test_4156_bit1  ; call (cond & uncond)
ROM:26A1
ROM:26A4 28 05                    jr      z, loc_26AB     ; Jump relative (conditional & unconditional)
ROM:26A4
ROM:26A6 CD 7E 22                 call    sub_227E        ; call (cond & uncond)
ROM:26A6
ROM:26A9 18 06                    jr      Display_copy_419D_to40AC ; Jump relative (conditional & unconditional)
ROM:26A9
ROM:26AB          ; ---------------------------------------------------------------------------
ROM:26AB
ROM:26AB          loc_26AB:                               ; CODE XREF: sub_26A1+3↑j
ROM:26AB CB 46                    bit     0, (hl)         ; Test <bit> in operand
ROM:26AD C8                       ret     z               ; Return (cond & uncond)
ROM:26AE CD 76 22                 call    sub_2276        ; call (cond & uncond)
ROM:26AE
ROM:26AE          ; End of function sub_26A1
ROM:26AE
ROM:26B1
ROM:26B1          ; =============== S U B R O U T I N E =======================================
ROM:26B1
ROM:26B1
ROM:26B1          Display_copy_419D_to40AC:               ; CODE XREF: sub_17E4:loc_17F6↑p
ROM:26B1                                                  ; sub_1AA8+38↑p ...
ROM:26B1 21 9D 41                 ld      hl, 419Dh       ; Move o1 <- o2
ROM:26B1
ROM:26B4
ROM:26B4          loc_26B4:                               ; CODE XREF: sub_2694+3↑j
ROM:26B4 D5                       push    de              ; Push register pair onto stack
ROM:26B5 C5                       push    bc              ; Push register pair onto stack
ROM:26B6 F5                       push    af              ; Push register pair onto stack
ROM:26B7 E5                       push    hl              ; Push register pair onto stack
ROM:26B8 CD 98 17                 call    set_4157_b4_to_1 ; call (cond & uncond)
ROM:26B8
ROM:26BB 2A 6D 41                 ld      hl, (word_416D) ; Move o1 <- o2
ROM:26BE 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:26BF E1                       pop     hl              ; Pop register pair from stack
ROM:26C0 28 0A                    jr      z, loc_26CC     ; Display_pos0 start addr
ROM:26C0
ROM:26C2 E5                       push    hl              ; Push register pair onto stack
ROM:26C3 01 0B 00                 ld      bc, 0Bh         ; Move o1 <- o2
ROM:26C6 09                       add     hl, bc          ; Add <reg> to A
ROM:26C7 77                       ld      (hl), a         ; Move o1 <- o2
ROM:26C8 2B                       dec     hl              ; Decrement operand
ROM:26C9 36 9B                    ld      (hl), 9Bh       ; Move o1 <- o2
ROM:26CB E1                       pop     hl              ; Pop register pair from stack
ROM:26CB
ROM:26CC
ROM:26CC          loc_26CC:                               ; CODE XREF: sub_2699+6↑j
ROM:26CC                                                  ; Display_copy_419D_to40AC+F↑j
ROM:26CC 11 AC 40                 ld      de, 40ACh       ; Display_pos0 start addr
ROM:26CF 06 0C                    ld      b, 0Ch          ; 12 digits
ROM:26CF
ROM:26D1
ROM:26D1          display_copy_A_B:                       ; CODE XREF: Display_copy_419D_to40AC+38↓j
ROM:26D1 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:26D2 CB 7F                    bit     7, a            ; Test <bit> in operand
ROM:26D4 20 10                    jr      nz, loc_26E6    ; Skip if (hl).bit7 is set
ROM:26D4
ROM:26D6 FE 10                    cp      10h             ; Compare with accumulator
ROM:26D8 38 0C                    jr      c, loc_26E6     ; A.bit7 == 0, A != 10h
ROM:26D8
ROM:26DA
ROM:26DA          A_is_eq_10h:
ROM:26DA E5                       push    hl              ; Push register pair onto stack
ROM:26DB C5                       push    bc              ; Push register pair onto stack
ROM:26DC 06 00                    ld      b, 0            ; Move o1 <- o2
ROM:26DE 4F                       ld      c, a            ; Move o1 <- o2
ROM:26DF 2A 6C 40                 ld      hl, (word_406C) ; Move o1 <- o2
ROM:26E2 09                       add     hl, bc          ; Add <reg> to A
ROM:26E3 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:26E4 C1                       pop     bc              ; Pop register pair from stack
ROM:26E5 E1                       pop     hl              ; Pop register pair from stack
ROM:26E5
ROM:26E6
ROM:26E6          loc_26E6:                               ; CODE XREF: Display_copy_419D_to40AC+23↑j
ROM:26E6                                                  ; Display_copy_419D_to40AC+27↑j
ROM:26E6 12                       ld      (de), a         ; A.bit7 == 0, A != 10h
ROM:26E7 13                       inc     de              ; Increment operand
ROM:26E8 23                       inc     hl              ; Increment operand
ROM:26E9 10 E6                    djnz    display_copy_A_B ; Decrement reg B and jump relative if zero
ROM:26E9
ROM:26EB F1                       pop     af              ; Pop register pair from stack
ROM:26EC C1                       pop     bc              ; Pop register pair from stack
ROM:26ED D1                       pop     de              ; Pop register pair from stack
ROM:26EE C9                       ret                     ; Return (cond & uncond)
ROM:26EE
ROM:26EE          ; End of function Display_copy_419D_to40AC
ROM:26EE
ROM:26EF
ROM:26EF          ; =============== S U B R O U T I N E =======================================
ROM:26EF
ROM:26EF
ROM:26EF          sub_26EF:                               ; CODE XREF: sub_2188+FAA↓p
ROM:26EF                                                  ; sub_31D1+2C↓p
ROM:26EF 21 CE 41                 ld      hl, 41CEh       ; Move o1 <- o2
ROM:26F2 06 20                    ld      b, 20h ; ' '    ; Move o1 <- o2
ROM:26F2
ROM:26F2          ; End of function sub_26EF
ROM:26F2
ROM:26F4
ROM:26F4          ; =============== S U B R O U T I N E =======================================
ROM:26F4
ROM:26F4          ; HL - Base Address
ROM:26F4          ; B - Count
ROM:26F4
ROM:26F4          Array_clear:                            ; CODE XREF: sub_12F7+B↑p
ROM:26F4                                                  ; sub_1D2D:loc_1D8C↑j ...
ROM:26F4 0E 00                    ld      c, 0            ; Move o1 <- o2
ROM:26F6 18 0D                    jr      Array_fill_with_C ; HL - Base address
ROM:26F6                                                  ; B - Count
ROM:26F6                                                  ; C - Value
ROM:26F6
ROM:26F6          ; End of function Array_clear
ROM:26F6
ROM:26F6          ; ---------------------------------------------------------------------------
ROM:26F8 CD                       db 0CDh
ROM:26F9 94                       db  94h
ROM:26FA 26                       db  26h ; &
ROM:26FB CD                       db 0CDh
ROM:26FC BC                       db 0BCh
ROM:26FD 10                       db  10h
ROM:26FE
ROM:26FE          ; =============== S U B R O U T I N E =======================================
ROM:26FE
ROM:26FE
ROM:26FE          Display_Clear_419D:                     ; CODE XREF: sub_182E+B↑p
ROM:26FE                                                  ; sub_223A+71↑p ...
ROM:26FE 21 9D 41                 ld      hl, 419Dh       ; Move o1 <- o2
ROM:26FE
ROM:26FE          ; End of function Display_Clear_419D
ROM:26FE
ROM:2701
ROM:2701          ; =============== S U B R O U T I N E =======================================
ROM:2701
ROM:2701
ROM:2701          Display_fill_with_0Fh:                  ; CODE XREF: Setup_all+98↑p
ROM:2701                                                  ; sub_2668+3↑p
ROM:2701 06 0C                    ld      b, 0Ch          ; Move o1 <- o2
ROM:2701
ROM:2701          ; End of function Display_fill_with_0Fh
ROM:2701
ROM:2703
ROM:2703          ; =============== S U B R O U T I N E =======================================
ROM:2703
ROM:2703
ROM:2703          Array_fill_with_0Fh:                    ; CODE XREF: Display_Clear_40AC+5↑j
ROM:2703 0E 0F                    ld      c, 0Fh          ; Move o1 <- o2
ROM:2703
ROM:2703          ; End of function Array_fill_with_0Fh
ROM:2703
ROM:2705
ROM:2705          ; =============== S U B R O U T I N E =======================================
ROM:2705
ROM:2705          ; HL - Base address
ROM:2705          ; B - Count
ROM:2705          ; C - Value
ROM:2705
ROM:2705          Array_fill_with_C:                      ; CODE XREF: sub_2668+9↑p
ROM:2705                                                  ; sub_2668+1D↑p ...
ROM:2705 E5                       push    hl              ; Push register pair onto stack
ROM:2705
ROM:2706
ROM:2706          loc_2706:                               ; CODE XREF: Array_fill_with_C+3↓j
ROM:2706 71                       ld      (hl), c         ; Move o1 <- o2
ROM:2707 23                       inc     hl              ; Increment operand
ROM:2708 10 FC                    djnz    loc_2706        ; Decrement reg B and jump relative if zero
ROM:2708
ROM:270A E1                       pop     hl              ; Pop register pair from stack
ROM:270B C9                       ret                     ; Return (cond & uncond)
ROM:270B
ROM:270B          ; End of function Array_fill_with_C
ROM:270B
ROM:270C
ROM:270C          ; =============== S U B R O U T I N E =======================================
ROM:270C
ROM:270C
ROM:270C          sub_270C:                               ; CODE XREF: sub_2F33↓p
ROM:270C                                                  ; sub_3188+1F↓p
ROM:270C 21 E9 15                 ld      hl, 15E9h       ; Move o1 <- o2
ROM:270F 06 06                    ld      b, 6            ; Move o1 <- o2
ROM:2711 18 01                    jr      loc_2714        ; Jump relative (conditional & unconditional)
ROM:2711
ROM:2711          ; End of function sub_270C
ROM:2711
ROM:2713
ROM:2713          ; =============== S U B R O U T I N E =======================================
ROM:2713
ROM:2713
ROM:2713          sub_2713:                               ; CODE XREF: sub_307B+2A↓p
ROM:2713 46                       ld      b, (hl)         ; Move o1 <- o2
ROM:2713
ROM:2714
ROM:2714          loc_2714:                               ; CODE XREF: sub_270C+5↑j
ROM:2714                                                  ; sub_2713+7↓j
ROM:2714 23                       inc     hl              ; Increment operand
ROM:2715 BE                       cp      (hl)            ; Compare with accumulator
ROM:2716 23                       inc     hl              ; Increment operand
ROM:2717 28 04                    jr      z, loc_271D     ; Jump relative (conditional & unconditional)
ROM:2717
ROM:2719 23                       inc     hl              ; Increment operand
ROM:271A 10 F8                    djnz    loc_2714        ; Decrement reg B and jump relative if zero
ROM:271A
ROM:271C C9                       ret                     ; Return (cond & uncond)
ROM:271C
ROM:271D          ; ---------------------------------------------------------------------------
ROM:271D
ROM:271D          loc_271D:                               ; CODE XREF: sub_2713+4↑j
ROM:271D 46                       ld      b, (hl)         ; Move o1 <- o2
ROM:271E 23                       inc     hl              ; Increment operand
ROM:271F 66                       ld      h, (hl)         ; Move o1 <- o2
ROM:2720 68                       ld      l, b            ; Move o1 <- o2
ROM:2721 C9                       ret                     ; Return (cond & uncond)
ROM:2721
ROM:2721          ; End of function sub_2713
ROM:2721
ROM:2722          ; ---------------------------------------------------------------------------
ROM:2722          ; START OF FUNCTION CHUNK FOR sub_182E
ROM:2722          ;   ADDITIONAL PARENT FUNCTION sub_2BA1
ROM:2722
ROM:2722          loc_2722:                               ; CODE XREF: sub_182E:loc_185F↑j
ROM:2722                                                  ; sub_2BA1-11E6↑j
ROM:2722 CD 99 26                 call    sub_2699        ; call (cond & uncond)
ROM:2722
ROM:2725 CD BC 10                 call    sub_10BC        ; call (cond & uncond)
ROM:2725
ROM:2728
ROM:2728          loc_2728:                               ; CODE XREF: sub_182E+F0E↓j
ROM:2728 21 A9 41                 ld      hl, 41A9h       ; Move o1 <- o2
ROM:272B 46                       ld      b, (hl)         ; Move o1 <- o2
ROM:272C 23                       inc     hl              ; Increment operand
ROM:272C
ROM:272D
ROM:272D          loc_272D:                               ; CODE XREF: sub_182E+F0C↓j
ROM:272D 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:272E 4F                       ld      c, a            ; Move o1 <- o2
ROM:272F E5                       push    hl              ; Push register pair onto stack
ROM:2730 C5                       push    bc              ; Push register pair onto stack
ROM:2731 DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:2731                                                  ; A - if < 10h is 0000xxxx read mask
ROM:2731                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:2731                                                  ;         A[5:3] - bit index for...
ROM:2731                                                  ;         A[2:0] - bit index for...
ROM:2731                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:2731
ROM:2732 C1                       pop     bc              ; Pop register pair from stack
ROM:2733 E1                       pop     hl              ; Pop register pair from stack
ROM:2734 CD 42 28                 call    sub_2842        ; call (cond & uncond)
ROM:2734
ROM:2737 23                       inc     hl              ; Increment operand
ROM:2738 20 04                    jr      nz, loc_273E    ; Jump relative (conditional & unconditional)
ROM:2738
ROM:273A 10 F1                    djnz    loc_272D        ; Decrement reg B and jump relative if zero
ROM:273A
ROM:273C 18 EA                    jr      loc_2728        ; Jump relative (conditional & unconditional)
ROM:273C
ROM:273E          ; ---------------------------------------------------------------------------
ROM:273E
ROM:273E          loc_273E:                               ; CODE XREF: sub_182E+F0A↑j
ROM:273E 79                       ld      a, c            ; Move o1 <- o2
ROM:273F EB                       ex      de, hl          ; Exchange operands
ROM:2740 E9                       jp      (hl)            ; Jump (conditional & unconditional)
ROM:2740
ROM:2740          ; END OF FUNCTION CHUNK FOR sub_182E
ROM:2741
ROM:2741          ; =============== S U B R O U T I N E =======================================
ROM:2741
ROM:2741
ROM:2741          sub_2741:                               ; CODE XREF: sub_17E4+2↑p
ROM:2741                                                  ; sub_17E4+33↑p ...
ROM:2741 C5                       push    bc              ; Push register pair onto stack
ROM:2742 CD 61 27                 call    Array_41A9_refil ; Return DE as address after last
ROM:2742
ROM:2745 CD FE 26                 call    Display_Clear_419D ; call (cond & uncond)
ROM:2745
ROM:2748 C1                       pop     bc              ; Pop register pair from stack
ROM:2749 77                       ld      (hl), a         ; Move o1 <- o2
ROM:274A 23                       inc     hl              ; Increment operand
ROM:274B 36 3A                    ld      (hl), 3Ah ; ':' ; Move o1 <- o2
ROM:274D 23                       inc     hl              ; Increment operand
ROM:274E C9                       ret                     ; Return (cond & uncond)
ROM:274E
ROM:274E          ; End of function sub_2741
ROM:274E
ROM:274F
ROM:274F          ; =============== S U B R O U T I N E =======================================
ROM:274F
ROM:274F
ROM:274F          sub_274F:                               ; CODE XREF: ROM:1979↑p
ROM:274F                                                  ; sub_2BA1-11F4↑p
ROM:274F E5                       push    hl              ; Push register pair onto stack
ROM:2750 2A 30 42                 ld      hl, (word_4230) ; Move o1 <- o2
ROM:2753 CD 58 27                 call    sub_2758        ; call (cond & uncond)
ROM:2753
ROM:2756 E1                       pop     hl              ; Pop register pair from stack
ROM:2757 C9                       ret                     ; Return (cond & uncond)
ROM:2757
ROM:2757          ; End of function sub_274F
ROM:2757
ROM:2758
ROM:2758          ; =============== S U B R O U T I N E =======================================
ROM:2758
ROM:2758
ROM:2758          sub_2758:                               ; CODE XREF: sub_17E4+40↑p
ROM:2758                                                  ; sub_182E:loc_185C↑p ...
ROM:2758 12                       ld      (de), a         ; Move o1 <- o2
ROM:2759 13                       inc     de              ; Increment operand
ROM:275A 7D                       ld      a, l            ; Move o1 <- o2
ROM:275B 12                       ld      (de), a         ; Move o1 <- o2
ROM:275C 13                       inc     de              ; Increment operand
ROM:275D 7C                       ld      a, h            ; Move o1 <- o2
ROM:275E 12                       ld      (de), a         ; Move o1 <- o2
ROM:275F 13                       inc     de              ; Increment operand
ROM:2760 C9                       ret                     ; Return (cond & uncond)
ROM:2760
ROM:2760          ; End of function sub_2758
ROM:2760
ROM:2761
ROM:2761          ; =============== S U B R O U T I N E =======================================
ROM:2761
ROM:2761          ; Return DE as address after last
ROM:2761
ROM:2761          Array_41A9_refil:                       ; CODE XREF: sub_182E↑p
ROM:2761                                                  ; sub_2741+1↑p
ROM:2761 E5                       push    hl              ; Push register pair onto stack
ROM:2762 21 A9 41                 ld      hl, 41A9h       ; Move o1 <- o2
ROM:2765 06 25                    ld      b, 25h ; '%'    ; Move o1 <- o2
ROM:2767 CD F4 26                 call    Array_clear     ; HL - Base Address
ROM:2767                                                  ; B - Count
ROM:2767
ROM:276A 36 0C                    ld      (hl), 0Ch       ; Move o1 <- o2
ROM:276C 23                       inc     hl              ; 41A9h = Ch
ROM:276D 36 99                    ld      (hl), 99h       ; Move o1 <- o2
ROM:276F 23                       inc     hl              ; 41AAh = 99h
ROM:2770 36 95                    ld      (hl), 95h       ; Move o1 <- o2
ROM:2772 23                       inc     hl              ; 41ABh = 95h
ROM:2773 36 1E                    ld      (hl), 1Eh       ; Move o1 <- o2
ROM:2775 23                       inc     hl              ; 41ACh = 1Eh
ROM:2776 36 97                    ld      (hl), 97h       ; Move o1 <- o2
ROM:2778 23                       inc     hl              ; 41ADh = 97h
ROM:2779 36 F8                    ld      (hl), 0F8h      ; Move o1 <- o2
ROM:277B 23                       inc     hl              ; 41AEh = F8h
ROM:277C 36 26                    ld      (hl), 26h ; '&' ; Move o1 <- o2
ROM:277E 23                       inc     hl              ; 41AFh = 26h
ROM:277F EB                       ex      de, hl          ; Exchange operands
ROM:2780 E1                       pop     hl              ; Pop register pair from stack
ROM:2781 C9                       ret                     ; Return (cond & uncond)
ROM:2781
ROM:2781          ; End of function Array_41A9_refil
ROM:2781
ROM:2781          ; ---------------------------------------------------------------------------
ROM:2782 21                       db  21h ; !
ROM:2783 6A                       db  6Ah ; j
ROM:2784 40                       db  40h ; @
ROM:2785 CB                       db 0CBh
ROM:2786 5E                       db  5Eh ; ^
ROM:2787 CB                       db 0CBh
ROM:2788 DE                       db 0DEh
ROM:2789 28                       db  28h ; (
ROM:278A 02                       db    2
ROM:278B CB                       db 0CBh
ROM:278C 9E                       db  9Eh
ROM:278D
ROM:278D          ; =============== S U B R O U T I N E =======================================
ROM:278D
ROM:278D
ROM:278D          sub_278D:                               ; CODE XREF: sub_1B5B+4C↑p
ROM:278D                                                  ; sub_1CDA:loc_1CE1↑p ...
ROM:278D CD 77 16                 call    test_4157_bit3  ; call (cond & uncond)
ROM:278D
ROM:2790 C0                       ret     nz              ; Return (cond & uncond)
ROM:2791 CD C9 16                 call    test_4068_b0    ; call (cond & uncond)
ROM:2791
ROM:2794 C0                       ret     nz              ; Return (cond & uncond)
ROM:2795 3E 04                    ld      a, 4            ; Move o1 <- o2
ROM:2797 32 69 40                 ld      (byte_4069), a  ; Move o1 <- o2
ROM:279A C9                       ret                     ; Return (cond & uncond)
ROM:279A
ROM:279A          ; End of function sub_278D
ROM:279A
ROM:279B
ROM:279B          ; =============== S U B R O U T I N E =======================================
ROM:279B
ROM:279B
ROM:279B          sub_279B:                               ; CODE XREF: sub_1AFF↑p
ROM:279B                                                  ; sub_285D↓p ...
ROM:279B B7                       or      a               ; Or with accumulator
ROM:279C C8                       ret     z               ; Return (cond & uncond)
ROM:279D FE 06                    cp      6               ; Compare with accumulator
ROM:279F C8                       ret     z               ; Return (cond & uncond)
ROM:27A0 FE 07                    cp      7               ; Compare with accumulator
ROM:27A2 C8                       ret     z               ; Return (cond & uncond)
ROM:27A3 FE 0C                    cp      0Ch             ; Compare with accumulator
ROM:27A5 C8                       ret     z               ; Return (cond & uncond)
ROM:27A6 FE 0A                    cp      0Ah             ; Compare with accumulator
ROM:27A8 C8                       ret     z               ; Return (cond & uncond)
ROM:27A9 FE 80                    cp      80h             ; Compare with accumulator
ROM:27AB C9                       ret                     ; Return (cond & uncond)
ROM:27AB
ROM:27AB          ; End of function sub_279B
ROM:27AB
ROM:27AC
ROM:27AC          ; =============== S U B R O U T I N E =======================================
ROM:27AC
ROM:27AC
ROM:27AC          sub_27AC:                               ; CODE XREF: sub_22C2+1↑p
ROM:27AC                                                  ; sub_2668+F↑p ...
ROM:27AC D5                       push    de              ; Push register pair onto stack
ROM:27AD C5                       push    bc              ; Push register pair onto stack
ROM:27AE F5                       push    af              ; Push register pair onto stack
ROM:27AF 11 28 42                 ld      de, 4228h       ; Move o1 <- o2
ROM:27B2 01 10 27                 ld      bc, 2710h       ; Move o1 <- o2
ROM:27B5 CD D1 27                 call    sub_27D1        ; call (cond & uncond)
ROM:27B5
ROM:27B8 01 E8 03                 ld      bc, 3E8h        ; Move o1 <- o2
ROM:27BB CD D1 27                 call    sub_27D1        ; call (cond & uncond)
ROM:27BB
ROM:27BE 01 64 00                 ld      bc, 64h ; 'd'   ; Move o1 <- o2
ROM:27C1 CD D1 27                 call    sub_27D1        ; call (cond & uncond)
ROM:27C1
ROM:27C4 0E 0A                    ld      c, 0Ah          ; Move o1 <- o2
ROM:27C6 CD D1 27                 call    sub_27D1        ; call (cond & uncond)
ROM:27C6
ROM:27C9 7D                       ld      a, l            ; Move o1 <- o2
ROM:27CA CD D9 27                 call    sub_27D9        ; call (cond & uncond)
ROM:27CA
ROM:27CD F1                       pop     af              ; Pop register pair from stack
ROM:27CE C1                       pop     bc              ; Pop register pair from stack
ROM:27CF D1                       pop     de              ; Pop register pair from stack
ROM:27D0 C9                       ret                     ; Return (cond & uncond)
ROM:27D0
ROM:27D0          ; End of function sub_27AC
ROM:27D0
ROM:27D1
ROM:27D1          ; =============== S U B R O U T I N E =======================================
ROM:27D1
ROM:27D1
ROM:27D1          sub_27D1:                               ; CODE XREF: sub_27AC+9↑p
ROM:27D1                                                  ; sub_27AC+F↑p ...
ROM:27D1 AF                       xor     a               ; Exclusive or with accumulator
ROM:27D1
ROM:27D2
ROM:27D2          loc_27D2:                               ; CODE XREF: sub_27D1+4↓j
ROM:27D2 3C                       inc     a               ; Increment operand
ROM:27D3 ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:27D5 30 FB                    jr      nc, loc_27D2    ; Jump relative (conditional & unconditional)
ROM:27D5
ROM:27D7 3D                       dec     a               ; Decrement operand
ROM:27D8 09                       add     hl, bc          ; Add <reg> to A
ROM:27D8
ROM:27D8          ; End of function sub_27D1
ROM:27D8
ROM:27D9
ROM:27D9          ; =============== S U B R O U T I N E =======================================
ROM:27D9
ROM:27D9
ROM:27D9          sub_27D9:                               ; CODE XREF: sub_27AC+1E↑p
ROM:27D9 F6 30                    or      30h ; '0'       ; Or with accumulator
ROM:27DB 12                       ld      (de), a         ; Move o1 <- o2
ROM:27DC 13                       inc     de              ; Increment operand
ROM:27DD C9                       ret                     ; Return (cond & uncond)
ROM:27DD
ROM:27DD          ; End of function sub_27D9
ROM:27DD
ROM:27DE
ROM:27DE          ; =============== S U B R O U T I N E =======================================
ROM:27DE
ROM:27DE
ROM:27DE          sub_27DE:                               ; CODE XREF: ROM:1E76↑p
ROM:27DE                                                  ; sub_27DE+5↓j ...
ROM:27DE 06 C0                    ld      b, 0C0h         ; Move o1 <- o2
ROM:27DE
ROM:27E0
ROM:27E0          loc_27E0:                               ; CODE XREF: sub_27DE:loc_27E0↓j
ROM:27E0 10 FE                    djnz    $               ; Decrement reg B and jump relative if zero
ROM:27E0
ROM:27E2 0D                       dec     c               ; Decrement operand
ROM:27E3 20 F9                    jr      nz, sub_27DE    ; Jump relative (conditional & unconditional)
ROM:27E3
ROM:27E5 C9                       ret                     ; Return (cond & uncond)
ROM:27E5
ROM:27E5          ; End of function sub_27DE
ROM:27E5
ROM:27E6
ROM:27E6          ; =============== S U B R O U T I N E =======================================
ROM:27E6
ROM:27E6
ROM:27E6          sub_27E6:                               ; CODE XREF: sub_1AA8+D↑p
ROM:27E6                                                  ; sub_1AA8+24↑p ...
ROM:27E6 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:27E7 23                       inc     hl              ; Increment operand
ROM:27E8 FE 0E                    cp      0Eh             ; Compare with accumulator
ROM:27EA 38 03                    jr      c, loc_27EF     ; Jump relative (conditional & unconditional)
ROM:27EA
ROM:27EC FE 87                    cp      87h             ; Compare with accumulator
ROM:27EE D8                       ret     c               ; Return (cond & uncond)
ROM:27EE
ROM:27EF
ROM:27EF          loc_27EF:                               ; CODE XREF: sub_27E6+4↑j
ROM:27EF CD 16 28                 call    sub_2816        ; call (cond & uncond)
ROM:27EF
ROM:27F2 28 42                    jr      z, loc_2836     ; Jump relative (conditional & unconditional)
ROM:27F2
ROM:27F4 C9                       ret                     ; Return (cond & uncond)
ROM:27F4
ROM:27F4          ; End of function sub_27E6
ROM:27F4
ROM:27F5
ROM:27F5          ; =============== S U B R O U T I N E =======================================
ROM:27F5
ROM:27F5
ROM:27F5          sub_27F5:                               ; CODE XREF: sub_28CD+535↓p
ROM:27F5                                                  ; sub_28CD+570↓p ...
ROM:27F5 ED 4B 71                 ld      bc, (word_4171) ; Move o1 <- o2
ROM:27F5 41
ROM:27F9 E5                       push    hl              ; Push register pair onto stack
ROM:27FA B7                       or      a               ; Or with accumulator
ROM:27FB ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:27FD E1                       pop     hl              ; Pop register pair from stack
ROM:27FE D0                       ret     nc              ; Return (cond & uncond)
ROM:27FF F5                       push    af              ; Push register pair onto stack
ROM:2800 CD E6 27                 call    sub_27E6        ; call (cond & uncond)
ROM:2800
ROM:2803 F1                       pop     af              ; Pop register pair from stack
ROM:2804 C9                       ret                     ; Return (cond & uncond)
ROM:2804
ROM:2804          ; End of function sub_27F5
ROM:2804
ROM:2805
ROM:2805          ; =============== S U B R O U T I N E =======================================
ROM:2805
ROM:2805
ROM:2805          sub_2805:                               ; CODE XREF: sub_251E+1E↑p
ROM:2805 E5                       push    hl              ; Push register pair onto stack
ROM:2806 B7                       or      a               ; Or with accumulator
ROM:2807 ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:2809 E1                       pop     hl              ; Pop register pair from stack
ROM:280A 20 02                    jr      nz, sub_280E    ; Jump relative (conditional & unconditional)
ROM:280A
ROM:280C 37                       scf                     ; Set carry flag
ROM:280D C9                       ret                     ; Return (cond & uncond)
ROM:280D
ROM:280D          ; End of function sub_2805
ROM:280D
ROM:280E
ROM:280E          ; =============== S U B R O U T I N E =======================================
ROM:280E
ROM:280E
ROM:280E          sub_280E:                               ; CODE XREF: sub_2065-513↑p
ROM:280E                                                  ; sub_1B5B+59↑p ...
ROM:280E
ROM:280E          ; FUNCTION CHUNK AT ROM:283E SIZE 00000004 BYTES
ROM:280E
ROM:280E 2B                       dec     hl              ; Decrement operand
ROM:280E
ROM:280F
ROM:280F          loc_280F:                               ; CODE XREF: sub_2CFE:loc_2C70↓p
ROM:280F 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:2810 CD 16 28                 call    sub_2816        ; call (cond & uncond)
ROM:2810
ROM:2813 28 29                    jr      z, loc_283E     ; Jump relative (conditional & unconditional)
ROM:2813
ROM:2815 C9                       ret                     ; Return (cond & uncond)
ROM:2815
ROM:2815          ; End of function sub_280E
ROM:2815
ROM:2816
ROM:2816          ; =============== S U B R O U T I N E =======================================
ROM:2816
ROM:2816
ROM:2816          sub_2816:                               ; CODE XREF: sub_27E6:loc_27EF↑p
ROM:2816                                                  ; sub_280E+2↑p
ROM:2816 E5                       push    hl              ; Push register pair onto stack
ROM:2817 21 D6 15                 ld      hl, 15D6h       ; Move o1 <- o2
ROM:281A 01 13 00                 ld      bc, 13h         ; Move o1 <- o2
ROM:281D ED B1                    cpir                    ; Compare accumulator with memory and
ROM:281D                                                  ; increment address and byte counter,
ROM:281D                                                  ; continue until match is found or
ROM:281D                                                  ; byte counter is zero
ROM:281F E1                       pop     hl              ; Pop register pair from stack
ROM:2820 C9                       ret                     ; Return (cond & uncond)
ROM:2820
ROM:2820          ; End of function sub_2816
ROM:2820
ROM:2821
ROM:2821          ; =============== S U B R O U T I N E =======================================
ROM:2821
ROM:2821
ROM:2821          sub_2821:                               ; CODE XREF: sub_1B15+24↑j
ROM:2821 22 5D 41                 ld      (word_415D), hl ; Move o1 <- o2
ROM:2824 22 33 42                 ld      (word_4233), hl ; Move o1 <- o2
ROM:2827 22 5F 41                 ld      (word_415F), hl ; Move o1 <- o2
ROM:2827
ROM:2827          ; End of function sub_2821
ROM:2827
ROM:282A
ROM:282A          ; =============== S U B R O U T I N E =======================================
ROM:282A
ROM:282A
ROM:282A          sub_282A:                               ; CODE XREF: sub_2EDB+29↓p
ROM:282A 22 61 41                 ld      (word_4161), hl ; Move o1 <- o2
ROM:282A
ROM:282A          ; End of function sub_282A
ROM:282A
ROM:282D
ROM:282D          ; =============== S U B R O U T I N E =======================================
ROM:282D
ROM:282D
ROM:282D          sub_282D:                               ; CODE XREF: sub_2065+2↑p
ROM:282D                                                  ; sub_2F1D+10↓p
ROM:282D 22 63 41                 ld      (word_4163), hl ; Move o1 <- o2
ROM:2830 22 67 41                 ld      (word_4167), hl ; Move o1 <- o2
ROM:2833 C9                       ret                     ; Return (cond & uncond)
ROM:2833
ROM:2833          ; End of function sub_282D
ROM:2833
ROM:2834
ROM:2834          ; =============== S U B R O U T I N E =======================================
ROM:2834
ROM:2834
ROM:2834          sub_2834:                               ; CODE XREF: ROM:1988↑p
ROM:2834                                                  ; sub_19BE+B↑p ...
ROM:2834 23                       inc     hl              ; Increment operand
ROM:2834
ROM:2834          ; End of function sub_2834
ROM:2834
ROM:2835
ROM:2835          ; =============== S U B R O U T I N E =======================================
ROM:2835
ROM:2835
ROM:2835          sub_2835:                               ; CODE XREF: sub_216D+12↑p
ROM:2835 23                       inc     hl              ; Increment operand
ROM:2835
ROM:2836
ROM:2836          loc_2836:                               ; CODE XREF: sub_27E6+C↑j
ROM:2836 23                       inc     hl              ; Increment operand
ROM:2837 23                       inc     hl              ; Increment operand
ROM:2838 23                       inc     hl              ; Increment operand
ROM:2839 C9                       ret                     ; Return (cond & uncond)
ROM:2839
ROM:2839          ; End of function sub_2835
ROM:2839
ROM:2839          ; ---------------------------------------------------------------------------
ROM:283A 2B                       db  2Bh ; +
ROM:283B 2B                       db  2Bh ; +
ROM:283C 2B                       db  2Bh ; +
ROM:283D 2B                       db  2Bh ; +
ROM:283E          ; ---------------------------------------------------------------------------
ROM:283E          ; START OF FUNCTION CHUNK FOR sub_280E
ROM:283E
ROM:283E          loc_283E:                               ; CODE XREF: sub_280E+5↑j
ROM:283E 2B                       dec     hl              ; Decrement operand
ROM:283F 2B                       dec     hl              ; Decrement operand
ROM:2840 2B                       dec     hl              ; Decrement operand
ROM:2841 C9                       ret                     ; Return (cond & uncond)
ROM:2841
ROM:2841          ; END OF FUNCTION CHUNK FOR sub_280E
ROM:2842
ROM:2842          ; =============== S U B R O U T I N E =======================================
ROM:2842
ROM:2842
ROM:2842          sub_2842:                               ; CODE XREF: sub_1A7B+E↑p
ROM:2842                                                  ; sub_1D2D+2E↑p ...
ROM:2842 23                       inc     hl              ; Increment operand
ROM:2843 5E                       ld      e, (hl)         ; Move o1 <- o2
ROM:2844 23                       inc     hl              ; Increment operand
ROM:2845 56                       ld      d, (hl)         ; Move o1 <- o2
ROM:2846 C9                       ret                     ; Return (cond & uncond)
ROM:2846
ROM:2846          ; End of function sub_2842
ROM:2846
ROM:2847
ROM:2847          ; =============== S U B R O U T I N E =======================================
ROM:2847
ROM:2847
ROM:2847          sub_2847:                               ; CODE XREF: sub_204E+13↑p
ROM:2847                                                  ; ROM:2A47↓p ...
ROM:2847 23                       inc     hl              ; Increment operand
ROM:2848 73                       ld      (hl), e         ; Move o1 <- o2
ROM:2849 23                       inc     hl              ; Increment operand
ROM:284A 72                       ld      (hl), d         ; Move o1 <- o2
ROM:284B C9                       ret                     ; Return (cond & uncond)
ROM:284B
ROM:284B          ; End of function sub_2847
ROM:284B
ROM:284C
ROM:284C          ; =============== S U B R O U T I N E =======================================
ROM:284C
ROM:284C
ROM:284C          sub_284C:                               ; CODE XREF: sub_1D2D:loc_1D74↑p
ROM:284C                                                  ; sub_1D2D:loc_1D7A↑p ...
ROM:284C 23                       inc     hl              ; Increment operand
ROM:284C
ROM:284C          ; End of function sub_284C
ROM:284C
ROM:284D
ROM:284D          ; =============== S U B R O U T I N E =======================================
ROM:284D
ROM:284D
ROM:284D          sub_284D:                               ; CODE XREF: sub_2B20+55↓p
ROM:284D F5                       push    af              ; Push register pair onto stack
ROM:284E 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:284F 23                       inc     hl              ; Increment operand
ROM:2850 66                       ld      h, (hl)         ; Move o1 <- o2
ROM:2851 6F                       ld      l, a            ; Move o1 <- o2
ROM:2852 F1                       pop     af              ; Pop register pair from stack
ROM:2853 C9                       ret                     ; Return (cond & uncond)
ROM:2853
ROM:2853          ; End of function sub_284D
ROM:2853
ROM:2854
ROM:2854          ; =============== S U B R O U T I N E =======================================
ROM:2854
ROM:2854
ROM:2854          sub_2854:                               ; CODE XREF: sub_2143↑p
ROM:2854 2A 6D 41                 ld      hl, (word_416D) ; Move o1 <- o2
ROM:2854
ROM:2854          ; End of function sub_2854
ROM:2854
ROM:2857
ROM:2857          ; =============== S U B R O U T I N E =======================================
ROM:2857
ROM:2857
ROM:2857          sub_2857:                               ; CODE XREF: sub_2188:loc_2198↑p
ROM:2857                                                  ; sub_2188+6A↑p ...
ROM:2857 2B                       dec     hl              ; Decrement operand
ROM:2858 2B                       dec     hl              ; Decrement operand
ROM:2859 56                       ld      d, (hl)         ; Move o1 <- o2
ROM:285A 2B                       dec     hl              ; Decrement operand
ROM:285B 5E                       ld      e, (hl)         ; Move o1 <- o2
ROM:285C C9                       ret                     ; Return (cond & uncond)
ROM:285C
ROM:285C          ; End of function sub_2857
ROM:285C
ROM:285D
ROM:285D          ; =============== S U B R O U T I N E =======================================
ROM:285D
ROM:285D
ROM:285D          sub_285D:                               ; CODE XREF: sub_1BD6↑p
ROM:285D                                                  ; sub_1C67+43↑j ...
ROM:285D CD 9B 27                 call    sub_279B        ; call (cond & uncond)
ROM:285D
ROM:2860 D0                       ret     nc              ; Return (cond & uncond)
ROM:2861 E5                       push    hl              ; Push register pair onto stack
ROM:2862 D5                       push    de              ; Push register pair onto stack
ROM:2863 C5                       push    bc              ; Push register pair onto stack
ROM:2864 FE 09                    cp      9               ; Compare with accumulator
ROM:2866 28 04                    jr      z, loc_286C     ; Jump relative (conditional & unconditional)
ROM:2866
ROM:2868 FE 08                    cp      8               ; Compare with accumulator
ROM:286A 20 14                    jr      nz, loc_2880    ; Jump relative (conditional & unconditional)
ROM:286A
ROM:286C
ROM:286C          loc_286C:                               ; CODE XREF: sub_285D+9↑j
ROM:286C ED 5B C0                 ld      de, (word_40C0) ; Move o1 <- o2
ROM:286C 40
ROM:2870 2A 7B 41                 ld      hl, (word_417B) ; Move o1 <- o2
ROM:2873 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:2873
ROM:2874 20 04                    jr      nz, loc_287A    ; Jump relative (conditional & unconditional)
ROM:2874
ROM:2876 ED 5B C8                 ld      de, (word_40C8) ; Move o1 <- o2
ROM:2876 40
ROM:2876
ROM:287A
ROM:287A          loc_287A:                               ; CODE XREF: sub_285D+17↑j
ROM:287A                                                  ; sub_285D+4B↓j ...
ROM:287A ED 53 7B                 ld      (word_417B), de ; Move o1 <- o2
ROM:287A 41
ROM:287E 18 08                    jr      loc_2888        ; Jump relative (conditional & unconditional)
ROM:287E
ROM:2880          ; ---------------------------------------------------------------------------
ROM:2880
ROM:2880          loc_2880:                               ; CODE XREF: sub_285D+D↑j
ROM:2880 FE 01                    cp      1               ; Compare with accumulator
ROM:2882 28 04                    jr      z, loc_2888     ; Jump relative (conditional & unconditional)
ROM:2882
ROM:2884 FE 02                    cp      2               ; Compare with accumulator
ROM:2886 20 03                    jr      nz, loc_288B    ; Jump relative (conditional & unconditional)
ROM:2886
ROM:2888
ROM:2888          loc_2888:                               ; CODE XREF: sub_285D+21↑j
ROM:2888                                                  ; sub_285D+25↑j ...
ROM:2888 B7                       or      a               ; Or with accumulator
ROM:2889 18 20                    jr      loc_28AB        ; Jump relative (conditional & unconditional)
ROM:2889
ROM:288B          ; ---------------------------------------------------------------------------
ROM:288B
ROM:288B          loc_288B:                               ; CODE XREF: sub_285D+29↑j
ROM:288B FE 0B                    cp      0Bh             ; Compare with accumulator
ROM:288D 28 F9                    jr      z, loc_2888     ; Jump relative (conditional & unconditional)
ROM:288D
ROM:288F CD 2E 13                 call    sub_132E        ; call (cond & uncond)
ROM:288F
ROM:2892 ED 4B 7B                 ld      bc, (word_417B) ; Move o1 <- o2
ROM:2892 41
ROM:2896 B7                       or      a               ; Or with accumulator
ROM:2897 ED 4A                    adc     hl, bc          ; Add reg to A with carry
ROM:2899 FA AA 28                 jp      m, loc_28AA     ; Jump (conditional & unconditional)
ROM:2899
ROM:289C E5                       push    hl              ; Push register pair onto stack
ROM:289D ED 4B A6                 ld      bc, (word_40A6) ; Move o1 <- o2
ROM:289D 40
ROM:28A1 09                       add     hl, bc          ; Add <reg> to A
ROM:28A2 EB                       ex      de, hl          ; Exchange operands
ROM:28A3 2A AB 00                 ld      hl, (word_AB)   ; Move o1 <- o2
ROM:28A6 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:28A6
ROM:28A7 D1                       pop     de              ; Pop register pair from stack
ROM:28A8 30 D0                    jr      nc, loc_287A    ; Jump relative (conditional & unconditional)
ROM:28A8
ROM:28AA
ROM:28AA          loc_28AA:                               ; CODE XREF: sub_285D+3C↑j
ROM:28AA AF                       xor     a               ; Exclusive or with accumulator
ROM:28AA
ROM:28AB
ROM:28AB          loc_28AB:                               ; CODE XREF: sub_285D+2C↑j
ROM:28AB C1                       pop     bc              ; Pop register pair from stack
ROM:28AC D1                       pop     de              ; Pop register pair from stack
ROM:28AD E1                       pop     hl              ; Pop register pair from stack
ROM:28AE 37                       scf                     ; Set carry flag
ROM:28AF C9                       ret                     ; Return (cond & uncond)
ROM:28AF
ROM:28AF          ; End of function sub_285D
ROM:28AF
ROM:28B0
ROM:28B0          ; =============== S U B R O U T I N E =======================================
ROM:28B0
ROM:28B0
ROM:28B0          sub_28B0:                               ; CODE XREF: sub_2188+192↑p
ROM:28B0                                                  ; sub_251E+2E↑p
ROM:28B0 E5                       push    hl              ; Push register pair onto stack
ROM:28B1 D5                       push    de              ; Push register pair onto stack
ROM:28B2 C5                       push    bc              ; Push register pair onto stack
ROM:28B3 CD 2E 13                 call    sub_132E        ; call (cond & uncond)
ROM:28B3
ROM:28B6 EB                       ex      de, hl          ; Exchange operands
ROM:28B7 2A 7B 41                 ld      hl, (word_417B) ; Move o1 <- o2
ROM:28BA D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:28BA
ROM:28BB EB                       ex      de, hl          ; Exchange operands
ROM:28BC 18 BC                    jr      loc_287A        ; Jump relative (conditional & unconditional)
ROM:28BC
ROM:28BC          ; End of function sub_28B0
ROM:28BC
ROM:28BE
ROM:28BE          ; =============== S U B R O U T I N E =======================================
ROM:28BE
ROM:28BE
ROM:28BE          sub_28BE:                               ; CODE XREF: sub_17E4+841↑j
ROM:28BE                                                  ; sub_2188+4AA↑j ...
ROM:28BE 06 0C                    ld      b, 0Ch          ; Move o1 <- o2
ROM:28C0 21 20 41                 ld      hl, 4120h       ; Move o1 <- o2
ROM:28C3 CD F4 26                 call    Array_clear     ; HL - Base Address
ROM:28C3                                                  ; B - Count
ROM:28C3
ROM:28C6 CD 73 0F                 call    sub_F73         ; KbColumnChB_send04h
ROM:28C6
ROM:28C9 B7                       or      a               ; Or with accumulator
ROM:28CA 20 F2                    jr      nz, sub_28BE    ; Jump relative (conditional & unconditional)
ROM:28CA
ROM:28CC C9                       ret                     ; Return (cond & uncond)
ROM:28CC
ROM:28CC          ; End of function sub_28BE
ROM:28CC
ROM:28CD
ROM:28CD          ; =============== S U B R O U T I N E =======================================
ROM:28CD
ROM:28CD
ROM:28CD          sub_28CD:                               ; CODE XREF: sub_2188+1A2↑p
ROM:28CD                                                  ; sub_2905:loc_2908↓p ...
ROM:28CD
ROM:28CD          ; FUNCTION CHUNK AT ROM:2644 SIZE 00000004 BYTES
ROM:28CD          ; FUNCTION CHUNK AT ROM:2DD8 SIZE 0000007E BYTES
ROM:28CD
ROM:28CD CD 77 16                 call    test_4157_bit3  ; call (cond & uncond)
ROM:28CD
ROM:28D0 28 0C                    jr      z, loc_28DE     ; Jump relative (conditional & unconditional)
ROM:28D0
ROM:28D2 CD A8 1A                 call    sub_1AA8        ; call (cond & uncond)
ROM:28D2
ROM:28D5
ROM:28D5          loc_28D5:                               ; CODE XREF: sub_28CD+13↓j
ROM:28D5 FE 08                    cp      8               ; Compare with accumulator
ROM:28D7 20 02                    jr      nz, loc_28DB    ; Jump relative (conditional & unconditional)
ROM:28D7
ROM:28D9 3E 0D                    ld      a, 0Dh          ; Move o1 <- o2
ROM:28D9
ROM:28DB
ROM:28DB          loc_28DB:                               ; CODE XREF: sub_28CD+A↑j
ROM:28DB C3 9B 27                 jp      sub_279B        ; Jump (conditional & unconditional)
ROM:28DB
ROM:28DE          ; ---------------------------------------------------------------------------
ROM:28DE
ROM:28DE          loc_28DE:                               ; CODE XREF: sub_28CD+3↑j
ROM:28DE                                                  ; sub_28CD+16↓j
ROM:28DE F7                       rst     30h             ; Restart at vector <int>
ROM:28DE
ROM:28DF B7                       or      a               ; Or with accumulator
ROM:28E0 20 F3                    jr      nz, loc_28D5    ; Jump relative (conditional & unconditional)
ROM:28E0
ROM:28E2 EF                       rst     28h             ; Restart at vector <int>
ROM:28E2
ROM:28E3 28 F9                    jr      z, loc_28DE     ; Jump relative (conditional & unconditional)
ROM:28E3
ROM:28E5 FE A6                    cp      0A6h            ; Compare with accumulator
ROM:28E7 CA D8 2D                 jp      z, loc_2DD8     ; Jump (conditional & unconditional)
ROM:28E7
ROM:28EA FE A5                    cp      0A5h            ; Compare with accumulator
ROM:28EC CA 12 2E                 jp      z, loc_2E12     ; Jump (conditional & unconditional)
ROM:28EC
ROM:28EF B7                       or      a               ; Or with accumulator
ROM:28F0 C9                       ret                     ; Return (cond & uncond)
ROM:28F0
ROM:28F0          ; End of function sub_28CD
ROM:28F0
ROM:28F1          ; ---------------------------------------------------------------------------
ROM:28F1 21 58 41                 ld      hl, 4158h       ; Move o1 <- o2
ROM:28F4 CB E6                    set     4, (hl)         ; Set bit
ROM:28F6 CD AD 1C                 call    sub_1CAD        ; call (cond & uncond)
ROM:28F6
ROM:28F9 DA 8D 27                 jp      c, sub_278D     ; Jump (conditional & unconditional)
ROM:28F9
ROM:28FC CB 3C                    srl     h               ; Shift right logical
ROM:28FE CB 1D                    rr      l               ; Rotate right through carry
ROM:2900 3E 87                    ld      a, 87h          ; Move o1 <- o2
ROM:2902 CD BF 29                 call    sub_29BF        ; call (cond & uncond)
ROM:2902
ROM:2905
ROM:2905          ; =============== S U B R O U T I N E =======================================
ROM:2905
ROM:2905
ROM:2905          sub_2905:                               ; CODE XREF: Setup_all+5C↑p
ROM:2905                                                  ; sub_2905+F↓j ...
ROM:2905
ROM:2905          ; FUNCTION CHUNK AT ROM:1FD6 SIZE 00000008 BYTES
ROM:2905          ; FUNCTION CHUNK AT ROM:1FFA SIZE 00000025 BYTES
ROM:2905          ; FUNCTION CHUNK AT ROM:201F SIZE 00000009 BYTES
ROM:2905          ; FUNCTION CHUNK AT ROM:2099 SIZE 00000050 BYTES
ROM:2905          ; FUNCTION CHUNK AT ROM:20F5 SIZE 0000003A BYTES
ROM:2905          ; FUNCTION CHUNK AT ROM:214B SIZE 00000017 BYTES
ROM:2905
ROM:2905 CD FC 1B                 call    sub_1BFC        ; call (cond & uncond)
ROM:2905
ROM:2908
ROM:2908          loc_2908:                               ; CODE XREF: sub_2905+39↓j
ROM:2908 CD CD 28                 call    sub_28CD        ; call (cond & uncond)
ROM:2908
ROM:290B 30 2F                    jr      nc, loc_293C    ; Jump relative (conditional & unconditional)
ROM:290B
ROM:290D FE 0D                    cp      0Dh             ; Compare with accumulator
ROM:290F 28 05                    jr      z, loc_2916     ; Jump relative (conditional & unconditional)
ROM:290F
ROM:2911 CD D9 29                 call    sub_29D9        ; call (cond & uncond)
ROM:2911
ROM:2914 18 EF                    jr      sub_2905        ; Jump relative (conditional & unconditional)
ROM:2914
ROM:2916          ; ---------------------------------------------------------------------------
ROM:2916
ROM:2916          loc_2916:                               ; CODE XREF: sub_2905+A↑j
ROM:2916 2A 83 41                 ld      hl, (word_4183) ; Move o1 <- o2
ROM:2919 ED 5B 8D                 ld      de, (word_418D) ; Move o1 <- o2
ROM:2919 41
ROM:291D D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:291D
ROM:291E EB                       ex      de, hl          ; Exchange operands
ROM:291F CD BD 23                 call    sub_23BD        ; call (cond & uncond)
ROM:291F
ROM:2922
ROM:2922          loc_2922:                               ; CODE XREF: sub_2028:loc_299B↓j
ROM:2922 2A 65 41                 ld      hl, (word_4165) ; Move o1 <- o2
ROM:2925 ED 5B 8D                 ld      de, (word_418D) ; Move o1 <- o2
ROM:2925 41
ROM:2929 2B                       dec     hl              ; Decrement operand
ROM:292A 2B                       dec     hl              ; Decrement operand
ROM:292B 72                       ld      (hl), d         ; Move o1 <- o2
ROM:292C 2B                       dec     hl              ; Decrement operand
ROM:292D 73                       ld      (hl), e         ; Move o1 <- o2
ROM:292E CD 6A 29                 call    sub_296A        ; call (cond & uncond)
ROM:292E
ROM:2931 FE 0C                    cp      0Ch             ; Compare with accumulator
ROM:2933 C2 FF 1A                 jp      nz, sub_1AFF    ; Jump (conditional & unconditional)
ROM:2933
ROM:2936 CD BA 1C                 call    sub_1CBA        ; call (cond & uncond)
ROM:2936
ROM:2939 C3 D6 1F                 jp      loc_1FD6        ; Jump (conditional & unconditional)
ROM:2939
ROM:293C          ; ---------------------------------------------------------------------------
ROM:293C
ROM:293C          loc_293C:                               ; CODE XREF: sub_2905+6↑j
ROM:293C                                                  ; sub_2028+985↓j
ROM:293C FE 81                    cp      81h             ; Compare with accumulator
ROM:293E 20 C8                    jr      nz, loc_2908    ; Jump relative (conditional & unconditional)
ROM:293E
ROM:2940 ED 5B 8D                 ld      de, (word_418D) ; Move o1 <- o2
ROM:2940 41
ROM:2944 2A 83 41                 ld      hl, (word_4183) ; Move o1 <- o2
ROM:2947 22 8D 41                 ld      (word_418D), hl ; Move o1 <- o2
ROM:294A D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:294A
ROM:294B 28 1A                    jr      z, loc_2967     ; Jump relative (conditional & unconditional)
ROM:294B
ROM:294D C5                       push    bc              ; Push register pair onto stack
ROM:294E CD 19 0B                 call    sub_B19         ; call (cond & uncond)
ROM:294E
ROM:2951 CD BC 10                 call    sub_10BC        ; call (cond & uncond)
ROM:2951
ROM:2954 CD FE 29                 call    sub_29FE        ; call (cond & uncond)
ROM:2954
ROM:2957 C1                       pop     bc              ; Pop register pair from stack
ROM:2958 2A 65 41                 ld      hl, (word_4165) ; Move o1 <- o2
ROM:295B 22 63 41                 ld      (word_4163), hl ; Move o1 <- o2
ROM:295E 21 58 41                 ld      hl, 4158h       ; Move o1 <- o2
ROM:2961 CB 66                    bit     4, (hl)         ; Test <bit> in operand
ROM:2963 20 A0                    jr      nz, sub_2905    ; Jump relative (conditional & unconditional)
ROM:2963
ROM:2965 18 28                    jr      loc_298F        ; Jump relative (conditional & unconditional)
ROM:2965
ROM:2967          ; ---------------------------------------------------------------------------
ROM:2967
ROM:2967          loc_2967:                               ; CODE XREF: sub_2905+46↑j
ROM:2967 CD FD 2F                 call    sub_2FFD        ; call (cond & uncond)
ROM:2967
ROM:2967          ; End of function sub_2905
ROM:2967
ROM:296A
ROM:296A          ; =============== S U B R O U T I N E =======================================
ROM:296A
ROM:296A
ROM:296A          sub_296A:                               ; CODE XREF: sub_2905+29↑p
ROM:296A 21 58 41                 ld      hl, 4158h       ; Move o1 <- o2
ROM:296D CB A6                    res     4, (hl)         ; Reset bit
ROM:296F CB AE                    res     5, (hl)         ; Reset bit
ROM:2971 C9                       ret                     ; Return (cond & uncond)
ROM:2971
ROM:2971          ; End of function sub_296A
ROM:2971
ROM:2972          ; ---------------------------------------------------------------------------
ROM:2972          ; START OF FUNCTION CHUNK FOR sub_2028
ROM:2972
ROM:2972          loc_2972:                               ; CODE XREF: sub_2028+11↑j
ROM:2972 CD 8A 14                 call    sub_148A        ; call (cond & uncond)
ROM:2972
ROM:2975 3A A2 40                 ld      a, (byte_40A2)  ; Move o1 <- o2
ROM:2978 38 04                    jr      c, loc_297E     ; Jump relative (conditional & unconditional)
ROM:2978
ROM:297A CD AD 1C                 call    sub_1CAD        ; call (cond & uncond)
ROM:297A
ROM:297D AF                       xor     a               ; Exclusive or with accumulator
ROM:297D
ROM:297E
ROM:297E          loc_297E:                               ; CODE XREF: sub_2028+950↑j
ROM:297E F5                       push    af              ; Push register pair onto stack
ROM:297F 3E 0C                    ld      a, 0Ch          ; Move o1 <- o2
ROM:2981 E5                       push    hl              ; Push register pair onto stack
ROM:2982 CD BF 29                 call    sub_29BF        ; call (cond & uncond)
ROM:2982
ROM:2985 E1                       pop     hl              ; Pop register pair from stack
ROM:2986 CD 19 0B                 call    sub_B19         ; call (cond & uncond)
ROM:2986
ROM:2989 21 58 41                 ld      hl, 4158h       ; Move o1 <- o2
ROM:298C CB EE                    set     5, (hl)         ; Set bit
ROM:298E C1                       pop     bc              ; Pop register pair from stack
ROM:298E
ROM:298F
ROM:298F          loc_298F:                               ; CODE XREF: sub_2905+60↑j
ROM:298F                                                  ; sub_2028+981↓j ...
ROM:298F C5                       push    bc              ; Push register pair onto stack
ROM:2990 CD FC 1B                 call    sub_1BFC        ; call (cond & uncond)
ROM:2990
ROM:2993 CD CD 28                 call    sub_28CD        ; call (cond & uncond)
ROM:2993
ROM:2996 C1                       pop     bc              ; Pop register pair from stack
ROM:2997 30 12                    jr      nc, loc_29AB    ; Jump relative (conditional & unconditional)
ROM:2997
ROM:2999 FE 0B                    cp      0Bh             ; Compare with accumulator
ROM:2999
ROM:299B
ROM:299B          loc_299B:                               ; CODE XREF: sub_2028+977↓j
ROM:299B                                                  ; sub_2028+97A↓j ...
ROM:299B 28 85                    jr      z, loc_2922     ; Jump relative (conditional & unconditional)
ROM:299B
ROM:299D FE 0D                    cp      0Dh             ; Compare with accumulator
ROM:299F 28 FA                    jr      z, loc_299B     ; Jump relative (conditional & unconditional)
ROM:299F
ROM:29A1 B8                       cp      b               ; Compare with accumulator
ROM:29A2 28 F7                    jr      z, loc_299B     ; Jump relative (conditional & unconditional)
ROM:29A2
ROM:29A4 C5                       push    bc              ; Push register pair onto stack
ROM:29A5 CD D9 29                 call    sub_29D9        ; call (cond & uncond)
ROM:29A5
ROM:29A8 C1                       pop     bc              ; Pop register pair from stack
ROM:29A9 18 E4                    jr      loc_298F        ; Jump relative (conditional & unconditional)
ROM:29A9
ROM:29AB          ; ---------------------------------------------------------------------------
ROM:29AB
ROM:29AB          loc_29AB:                               ; CODE XREF: sub_2028+96F↑j
ROM:29AB FE 81                    cp      81h             ; Compare with accumulator
ROM:29AD 28 8D                    jr      z, loc_293C     ; Jump relative (conditional & unconditional)
ROM:29AD
ROM:29AF FE 8A                    cp      8Ah             ; Compare with accumulator
ROM:29B1 28 E8                    jr      z, loc_299B     ; Jump relative (conditional & unconditional)
ROM:29B1
ROM:29B3 FE 0C                    cp      0Ch             ; Compare with accumulator
ROM:29B5 28 E4                    jr      z, loc_299B     ; Jump relative (conditional & unconditional)
ROM:29B5
ROM:29B7 FE 8D                    cp      8Dh             ; Compare with accumulator
ROM:29B9 3E 0C                    ld      a, 0Ch          ; Move o1 <- o2
ROM:29BB 28 DE                    jr      z, loc_299B     ; Jump relative (conditional & unconditional)
ROM:29BB
ROM:29BD 18 D0                    jr      loc_298F        ; Jump relative (conditional & unconditional)
ROM:29BD
ROM:29BD          ; END OF FUNCTION CHUNK FOR sub_2028
ROM:29BF
ROM:29BF          ; =============== S U B R O U T I N E =======================================
ROM:29BF
ROM:29BF
ROM:29BF          sub_29BF:                               ; CODE XREF: ROM:2902↑p
ROM:29BF                                                  ; sub_2028+95A↑p
ROM:29BF 22 8D 41                 ld      (word_418D), hl ; Move o1 <- o2
ROM:29C2 22 83 41                 ld      (word_4183), hl ; Move o1 <- o2
ROM:29C5 EB                       ex      de, hl          ; Exchange operands
ROM:29C6 CD BD 23                 call    sub_23BD        ; call (cond & uncond)
ROM:29C6
ROM:29C9 CD 4E 20                 call    sub_204E        ; call (cond & uncond)
ROM:29C9
ROM:29CC CD BA 1C                 call    sub_1CBA        ; call (cond & uncond)
ROM:29CC
ROM:29CF CD FE 29                 call    sub_29FE        ; call (cond & uncond)
ROM:29CF
ROM:29D2 2A 63 41                 ld      hl, (word_4163) ; Move o1 <- o2
ROM:29D5 22 65 41                 ld      (word_4165), hl ; Move o1 <- o2
ROM:29D8 C9                       ret                     ; Return (cond & uncond)
ROM:29D8
ROM:29D8          ; End of function sub_29BF
ROM:29D8
ROM:29D9
ROM:29D9          ; =============== S U B R O U T I N E =======================================
ROM:29D9
ROM:29D9
ROM:29D9          sub_29D9:                               ; CODE XREF: sub_2905+C↑p
ROM:29D9                                                  ; sub_2028+97D↑p
ROM:29D9 FE 0C                    cp      0Ch             ; Compare with accumulator
ROM:29DB D8                       ret     c               ; Return (cond & uncond)
ROM:29DC CD 2E 13                 call    sub_132E        ; call (cond & uncond)
ROM:29DC
ROM:29DF EB                       ex      de, hl          ; Exchange operands
ROM:29E0 21 58 41                 ld      hl, 4158h       ; Move o1 <- o2
ROM:29E3 CB 66                    bit     4, (hl)         ; Test <bit> in operand
ROM:29E5 28 02                    jr      z, loc_29E9     ; Jump relative (conditional & unconditional)
ROM:29E5
ROM:29E7 CB 3B                    srl     e               ; Shift right logical
ROM:29E7
ROM:29E9
ROM:29E9          loc_29E9:                               ; CODE XREF: sub_29D9+C↑j
ROM:29E9 2A 8D 41                 ld      hl, (word_418D) ; Move o1 <- o2
ROM:29EC D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:29EC
ROM:29ED DA 8D 27                 jp      c, sub_278D     ; Jump (conditional & unconditional)
ROM:29ED
ROM:29F0 22 8D 41                 ld      (word_418D), hl ; Move o1 <- o2
ROM:29F3 EB                       ex      de, hl          ; Exchange operands
ROM:29F4 CD EC 30                 call    sub_30EC        ; call (cond & uncond)
ROM:29F4
ROM:29F7 F5                       push    af              ; Push register pair onto stack
ROM:29F8 CD DC 1B                 call    sub_1BDC        ; call (cond & uncond)
ROM:29F8
ROM:29FB F1                       pop     af              ; Pop register pair from stack
ROM:29FC 18 13                    jr      sub_2A11        ; Jump relative (conditional & unconditional)
ROM:29FC
ROM:29FC          ; End of function sub_29D9
ROM:29FC
ROM:29FE
ROM:29FE          ; =============== S U B R O U T I N E =======================================
ROM:29FE
ROM:29FE
ROM:29FE          sub_29FE:                               ; CODE XREF: sub_2905+4F↑p
ROM:29FE                                                  ; sub_29BF+10↑p
ROM:29FE CD FE 26                 call    Display_Clear_419D ; call (cond & uncond)
ROM:29FE
ROM:2A01 21 57 41                 ld      hl, 4157h       ; Move o1 <- o2
ROM:2A04 CB CE                    set     1, (hl)         ; Set bit
ROM:2A06 3E 87                    ld      a, 87h          ; Move o1 <- o2
ROM:2A08 21 58 41                 ld      hl, 4158h       ; Move o1 <- o2
ROM:2A0B CB 66                    bit     4, (hl)         ; Test <bit> in operand
ROM:2A0D 20 02                    jr      nz, sub_2A11    ; Jump relative (conditional & unconditional)
ROM:2A0D
ROM:2A0F 3E 0C                    ld      a, 0Ch          ; Move o1 <- o2
ROM:2A0F
ROM:2A0F          ; End of function sub_29FE
ROM:2A0F
ROM:2A11
ROM:2A11          ; =============== S U B R O U T I N E =======================================
ROM:2A11
ROM:2A11
ROM:2A11          sub_2A11:                               ; CODE XREF: sub_29D9+23↑j
ROM:2A11                                                  ; sub_29FE+F↑j ...
ROM:2A11 01 0B 00                 ld      bc, 0Bh         ; Move o1 <- o2
ROM:2A14 CD 98 17                 call    set_4157_b4_to_1 ; call (cond & uncond)
ROM:2A14
ROM:2A17 28 02                    jr      z, loc_2A1B     ; Jump relative (conditional & unconditional)
ROM:2A17
ROM:2A19 0D                       dec     c               ; Decrement operand
ROM:2A1A 0D                       dec     c               ; Decrement operand
ROM:2A1A
ROM:2A1B
ROM:2A1B          loc_2A1B:                               ; CODE XREF: sub_2A11+6↑j
ROM:2A1B 21 9E 41                 ld      hl, 419Eh       ; Move o1 <- o2
ROM:2A1E 11 9D 41                 ld      de, 419Dh       ; Move o1 <- o2
ROM:2A21 ED B0                    ldir                    ; Transfer data (DE)->(HL) until byte
ROM:2A21                                                  ; counter is zero, increment destination
ROM:2A21                                                  ; and source addresses
ROM:2A23 2B                       dec     hl              ; Decrement operand
ROM:2A24 77                       ld      (hl), a         ; Move o1 <- o2
ROM:2A25 C3 B1 26                 jp      Display_copy_419D_to40AC ; Jump (conditional & unconditional)
ROM:2A25
ROM:2A25          ; End of function sub_2A11
ROM:2A25
ROM:2A28          ; ---------------------------------------------------------------------------
ROM:2A28 CD B3 16                 call    sub_16B3        ; call (cond & uncond)
ROM:2A28
ROM:2A2B C0                       ret     nz              ; Return (cond & uncond)
ROM:2A2C 21 C6 17                 ld      hl, 17C6h       ; Move o1 <- o2
ROM:2A2F 3E B5                    ld      a, 0B5h         ; Move o1 <- o2
ROM:2A31 C3 16 19                 jp      loc_1916        ; Jump (conditional & unconditional)
ROM:2A31
ROM:2A34          ; ---------------------------------------------------------------------------
ROM:2A34 21 35 42                 ld      hl, 4235h       ; Move o1 <- o2
ROM:2A37 18 08                    jr      loc_2A41        ; Jump relative (conditional & unconditional)
ROM:2A37
ROM:2A39          ; ---------------------------------------------------------------------------
ROM:2A39 21 3A 42                 ld      hl, 423Ah       ; Move o1 <- o2
ROM:2A3C 18 03                    jr      loc_2A41        ; Jump relative (conditional & unconditional)
ROM:2A3C
ROM:2A3E          ; ---------------------------------------------------------------------------
ROM:2A3E 21 3F 42                 ld      hl, 423Fh       ; Move o1 <- o2
ROM:2A3E
ROM:2A41
ROM:2A41          loc_2A41:                               ; CODE XREF: ROM:2A37↑j
ROM:2A41                                                  ; ROM:2A3C↑j
ROM:2A41 CB FE                    set     7, (hl)         ; Set bit
ROM:2A43 ED 5B 6B                 ld      de, (word_416B) ; Move o1 <- o2
ROM:2A43 41
ROM:2A47 CD 47 28                 call    sub_2847        ; call (cond & uncond)
ROM:2A47
ROM:2A4A 21 5B 41                 ld      hl, 415Bh       ; Move o1 <- o2
ROM:2A4D CB EE                    set     5, (hl)         ; Set bit
ROM:2A4F 18 09                    jr      loc_2A5A        ; Jump relative (conditional & unconditional)
ROM:2A4F
ROM:2A51          ; ---------------------------------------------------------------------------
ROM:2A51 CD BE 19                 call    sub_19BE        ; call (cond & uncond)
ROM:2A51
ROM:2A54 CD CD 2D                 call    sub_2DCD        ; call (cond & uncond)
ROM:2A54
ROM:2A57 CD 7F 17                 call    sub_177F        ; call (cond & uncond)
ROM:2A57
ROM:2A5A
ROM:2A5A          loc_2A5A:                               ; CODE XREF: ROM:2A4F↑j
ROM:2A5A CD 85 17                 call    sub_1785        ; call (cond & uncond)
ROM:2A5A
ROM:2A5D
ROM:2A5D          loc_2A5D:                               ; CODE XREF: ROM:2A73↓j
ROM:2A5D CD BE 28                 call    sub_28BE        ; call (cond & uncond)
ROM:2A5D
ROM:2A60          ; START OF FUNCTION CHUNK FOR sub_2AC8
ROM:2A60
ROM:2A60          loc_2A60:                               ; CODE XREF: sub_2AC8+8↓j
ROM:2A60 C3 8D 27                 jp      sub_278D        ; Jump (conditional & unconditional)
ROM:2A60
ROM:2A60          ; END OF FUNCTION CHUNK FOR sub_2AC8
ROM:2A63          ; ---------------------------------------------------------------------------
ROM:2A63 CD CE 19                 call    loc_19CE        ; call (cond & uncond)
ROM:2A63
ROM:2A66 21 5C 41                 ld      hl, 415Ch       ; Move o1 <- o2
ROM:2A69 B6                       or      (hl)            ; Or with accumulator
ROM:2A6A 77                       ld      (hl), a         ; Move o1 <- o2
ROM:2A6B 21 BD 40                 ld      hl, 40BDh       ; Move o1 <- o2
ROM:2A6E 01 61 00                 ld      bc, 61h ; 'a'   ; Move o1 <- o2
ROM:2A71 ED B0                    ldir                    ; Transfer data (DE)->(HL) until byte
ROM:2A71                                                  ; counter is zero, increment destination
ROM:2A71                                                  ; and source addresses
ROM:2A73 18 E8                    jr      loc_2A5D        ; Jump relative (conditional & unconditional)
ROM:2A73
ROM:2A75
ROM:2A75          ; =============== S U B R O U T I N E =======================================
ROM:2A75
ROM:2A75
ROM:2A75          sub_2A75:                               ; CODE XREF: ROM:2A89↓p
ROM:2A75                                                  ; ROM:2ADA↓p ...
ROM:2A75
ROM:2A75          ; FUNCTION CHUNK AT ROM:2D2E SIZE 00000036 BYTES
ROM:2A75
ROM:2A75 CB BE                    res     7, (hl)         ; Reset bit
ROM:2A77 CD 42 28                 call    sub_2842        ; call (cond & uncond)
ROM:2A77
ROM:2A7A 23                       inc     hl              ; Increment operand
ROM:2A7B 4E                       ld      c, (hl)         ; Move o1 <- o2
ROM:2A7C 23                       inc     hl              ; Increment operand
ROM:2A7D 46                       ld      b, (hl)         ; Move o1 <- o2
ROM:2A7E C3 2E 2D                 jp      loc_2D2E        ; Jump (conditional & unconditional)
ROM:2A7E
ROM:2A7E          ; End of function sub_2A75
ROM:2A7E
ROM:2A81          ; ---------------------------------------------------------------------------
ROM:2A81 21 5B 41                 ld      hl, 415Bh       ; Move o1 <- o2
ROM:2A84 CB 86                    res     0, (hl)         ; Reset bit
ROM:2A86 21 35 42                 ld      hl, 4235h       ; Move o1 <- o2
ROM:2A89 CD 75 2A                 call    sub_2A75        ; call (cond & uncond)
ROM:2A89
ROM:2A8C 28 1E                    jr      z, loc_2AAC     ; Jump relative (conditional & unconditional)
ROM:2A8C
ROM:2A8E 21 3A 42                 ld      hl, 423Ah       ; Move o1 <- o2
ROM:2A8E
ROM:2A91
ROM:2A91          loc_2A91:                               ; CODE XREF: ROM:2AE2↓j
ROM:2A91 CB 7E                    bit     7, (hl)         ; Test <bit> in operand
ROM:2A93 C4 64 2D                 call    nz, sub_2D64    ; call (cond & uncond)
ROM:2A93
ROM:2A96 21 3F 42                 ld      hl, 423Fh       ; Move o1 <- o2
ROM:2A96
ROM:2A99
ROM:2A99          loc_2A99:                               ; CODE XREF: ROM:2AFC↓j
ROM:2A99 CB 7E                    bit     7, (hl)         ; Test <bit> in operand
ROM:2A9B C4 64 2D                 call    nz, sub_2D64    ; call (cond & uncond)
ROM:2A9B
ROM:2A9E CD 79 17                 call    sub_1779        ; call (cond & uncond)
ROM:2A9E
ROM:2AA1 28 09                    jr      z, loc_2AAC     ; Jump relative (conditional & unconditional)
ROM:2AA1
ROM:2AA3 2A 33 42                 ld      hl, (word_4233) ; Move o1 <- o2
ROM:2AA6 B7                       or      a               ; Or with accumulator
ROM:2AA7 ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:2AA9 22 33 42                 ld      (word_4233), hl ; Move o1 <- o2
ROM:2AA9
ROM:2AAC
ROM:2AAC          loc_2AAC:                               ; CODE XREF: ROM:2A8C↑j
ROM:2AAC                                                  ; ROM:2AA1↑j ...
ROM:2AAC CD B9 2D                 call    loc_2DB9        ; call (cond & uncond)
ROM:2AAC
ROM:2AAF 22 67 41                 ld      (word_4167), hl ; Move o1 <- o2
ROM:2AB2 CD C8 2A                 call    sub_2AC8        ; call (cond & uncond)
ROM:2AB2
ROM:2AB5 CD 98 17                 call    set_4157_b4_to_1 ; call (cond & uncond)
ROM:2AB5
ROM:2AB8 C0                       ret     nz              ; Return (cond & uncond)
ROM:2AB9 23                       inc     hl              ; Increment operand
ROM:2ABA 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:2ABB E6 09                    and     9               ; And with accumulator
ROM:2ABD FE 09                    cp      9               ; Compare with accumulator
ROM:2ABF C8                       ret     z               ; Return (cond & uncond)
ROM:2AC0 21 D5 17                 ld      hl, 17D5h       ; Move o1 <- o2
ROM:2AC3 3E B7                    ld      a, 0B7h         ; Move o1 <- o2
ROM:2AC5 C3 55 19                 jp      loc_1955        ; Jump (conditional & unconditional)
ROM:2AC5
ROM:2AC8
ROM:2AC8          ; =============== S U B R O U T I N E =======================================
ROM:2AC8
ROM:2AC8
ROM:2AC8          sub_2AC8:                               ; CODE XREF: ROM:2AB2↑p
ROM:2AC8                                                  ; ROM:2B04↓p
ROM:2AC8
ROM:2AC8          ; FUNCTION CHUNK AT ROM:2A60 SIZE 00000003 BYTES
ROM:2AC8
ROM:2AC8 21 58 41                 ld      hl, 4158h       ; Move o1 <- o2
ROM:2ACB CB 4E                    bit     1, (hl)         ; Test <bit> in operand
ROM:2ACD C4 15 1B                 call    nz, sub_1B15    ; call (cond & uncond)
ROM:2ACD
ROM:2AD0 18 8E                    jr      loc_2A60        ; Jump relative (conditional & unconditional)
ROM:2AD0
ROM:2AD0          ; End of function sub_2AC8
ROM:2AD0
ROM:2AD2          ; ---------------------------------------------------------------------------
ROM:2AD2 21 5B 41                 ld      hl, 415Bh       ; Move o1 <- o2
ROM:2AD5 CB 8E                    res     1, (hl)         ; Reset bit
ROM:2AD7 21 3A 42                 ld      hl, 423Ah       ; Move o1 <- o2
ROM:2ADA CD 75 2A                 call    sub_2A75        ; call (cond & uncond)
ROM:2ADA
ROM:2ADD 28 CD                    jr      z, loc_2AAC     ; Jump relative (conditional & unconditional)
ROM:2ADD
ROM:2ADF 21 35 42                 ld      hl, 4235h       ; Move o1 <- o2
ROM:2AE2 18 AD                    jr      loc_2A91        ; Jump relative (conditional & unconditional)
ROM:2AE2
ROM:2AE4          ; ---------------------------------------------------------------------------
ROM:2AE4 21 5B 41                 ld      hl, 415Bh       ; Move o1 <- o2
ROM:2AE7 CB 96                    res     2, (hl)         ; Reset bit
ROM:2AE9 21 3F 42                 ld      hl, 423Fh       ; Move o1 <- o2
ROM:2AEC CD 75 2A                 call    sub_2A75        ; call (cond & uncond)
ROM:2AEC
ROM:2AEF 28 BB                    jr      z, loc_2AAC     ; Jump relative (conditional & unconditional)
ROM:2AEF
ROM:2AF1 21 35 42                 ld      hl, 4235h       ; Move o1 <- o2
ROM:2AF4 CB 7E                    bit     7, (hl)         ; Test <bit> in operand
ROM:2AF6 C4 64 2D                 call    nz, sub_2D64    ; call (cond & uncond)
ROM:2AF6
ROM:2AF9 21 3A 42                 ld      hl, 423Ah       ; Move o1 <- o2
ROM:2AFC 18 9B                    jr      loc_2A99        ; Jump relative (conditional & unconditional)
ROM:2AFC
ROM:2AFE          ; ---------------------------------------------------------------------------
ROM:2AFE CD BE 19                 call    sub_19BE        ; call (cond & uncond)
ROM:2AFE
ROM:2B01 CD 20 2B                 call    sub_2B20        ; call (cond & uncond)
ROM:2B01
ROM:2B04 CD C8 2A                 call    sub_2AC8        ; call (cond & uncond)
ROM:2B04
ROM:2B07 21 FE 2A                 ld      hl, 2AFEh       ; Move o1 <- o2
ROM:2B0A 0E 01                    ld      c, 1            ; Move o1 <- o2
ROM:2B0A
ROM:2B0C
ROM:2B0C          loc_2B0C:                               ; CODE XREF: ROM:2B14↓j
ROM:2B0C                                                  ; ROM:2B1E↓j
ROM:2B0C C3 60 19                 jp      loc_1960        ; Jump (conditional & unconditional)
ROM:2B0C
ROM:2B0F          ; ---------------------------------------------------------------------------
ROM:2B0F 21 51 2A                 ld      hl, 2A51h       ; Move o1 <- o2
ROM:2B12 0E 00                    ld      c, 0            ; Move o1 <- o2
ROM:2B14 18 F6                    jr      loc_2B0C        ; Jump relative (conditional & unconditional)
ROM:2B14
ROM:2B16          ; ---------------------------------------------------------------------------
ROM:2B16 CD 92 2C                 call    sub_2C92        ; call (cond & uncond)
ROM:2B16
ROM:2B19 21 9C 2C                 ld      hl, 2C9Ch       ; Move o1 <- o2
ROM:2B1C 0E 01                    ld      c, 1            ; Move o1 <- o2
ROM:2B1E 18 EC                    jr      loc_2B0C        ; Jump relative (conditional & unconditional)
ROM:2B1E
ROM:2B20
ROM:2B20          ; =============== S U B R O U T I N E =======================================
ROM:2B20
ROM:2B20
ROM:2B20          sub_2B20:                               ; CODE XREF: ROM:2B01↑p
ROM:2B20                                                  ; sub_2BED+13↓p
ROM:2B20 CB BE                    res     7, (hl)         ; Reset bit
ROM:2B22 CD 42 28                 call    sub_2842        ; call (cond & uncond)
ROM:2B22
ROM:2B25 CD 4C 28                 call    sub_284C        ; call (cond & uncond)
ROM:2B25
ROM:2B28 EB                       ex      de, hl          ; Exchange operands
ROM:2B29 ED 4B FA                 ld      bc, (data_for_40bd_ptr_5fffh) ; Move o1 <- o2
ROM:2B29 43
ROM:2B2D 03                       inc     bc              ; Increment operand
ROM:2B2E B7                       or      a               ; Or with accumulator
ROM:2B2F E5                       push    hl              ; Push register pair onto stack
ROM:2B30 ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:2B32 28 0D                    jr      z, loc_2B41     ; Jump relative (conditional & unconditional)
ROM:2B32
ROM:2B34 30 02                    jr      nc, loc_2B38    ; Jump relative (conditional & unconditional)
ROM:2B34
ROM:2B36 E1                       pop     hl              ; Pop register pair from stack
ROM:2B37 C9                       ret                     ; Return (cond & uncond)
ROM:2B37
ROM:2B38          ; ---------------------------------------------------------------------------
ROM:2B38
ROM:2B38          loc_2B38:                               ; CODE XREF: sub_2B20+14↑j
ROM:2B38 44                       ld      b, h            ; Move o1 <- o2
ROM:2B39 4D                       ld      c, l            ; Move o1 <- o2
ROM:2B3A E1                       pop     hl              ; Pop register pair from stack
ROM:2B3B E5                       push    hl              ; Push register pair onto stack
ROM:2B3C D5                       push    de              ; Push register pair onto stack
ROM:2B3D 2B                       dec     hl              ; Decrement operand
ROM:2B3E ED B8                    lddr                    ; Transfer data (DE)->(HL) until byte
ROM:2B3E                                                  ; counter is zero, decrement destintation
ROM:2B3E                                                  ; and source addresses
ROM:2B40 D1                       pop     de              ; Pop register pair from stack
ROM:2B40
ROM:2B41
ROM:2B41          loc_2B41:                               ; CODE XREF: sub_2B20+12↑j
ROM:2B41 E1                       pop     hl              ; Pop register pair from stack
ROM:2B42 22 30 42                 ld      (word_4230), hl ; Move o1 <- o2
ROM:2B45 2B                       dec     hl              ; Decrement operand
ROM:2B46 EB                       ex      de, hl          ; Exchange operands
ROM:2B47 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:2B47
ROM:2B48 EB                       ex      de, hl          ; Exchange operands
ROM:2B49 2A FA 43                 ld      hl, (data_for_40bd_ptr_5fffh) ; Move o1 <- o2
ROM:2B4C 19                       add     hl, de          ; Add <reg> to A
ROM:2B4D 22 FA 43                 ld      (data_for_40bd_ptr_5fffh), hl ; Move o1 <- o2
ROM:2B50 06 0A                    ld      b, 0Ah          ; Move o1 <- o2
ROM:2B52 21 44 42                 ld      hl, 4244h       ; Move o1 <- o2
ROM:2B52
ROM:2B55
ROM:2B55          loc_2B55:                               ; CODE XREF: sub_2B20+64↓j
ROM:2B55 C5                       push    bc              ; Push register pair onto stack
ROM:2B56 CB 7E                    bit     7, (hl)         ; Test <bit> in operand
ROM:2B58 E5                       push    hl              ; Push register pair onto stack
ROM:2B59 28 24                    jr      z, loc_2B7F     ; Jump relative (conditional & unconditional)
ROM:2B59
ROM:2B5B CD B5 2D                 call    sub_2DB5        ; call (cond & uncond)
ROM:2B5B
ROM:2B5E 30 1F                    jr      nc, loc_2B7F    ; Jump relative (conditional & unconditional)
ROM:2B5E
ROM:2B60 2A 30 42                 ld      hl, (word_4230) ; Move o1 <- o2
ROM:2B63 B7                       or      a               ; Or with accumulator
ROM:2B64 ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:2B66 38 17                    jr      c, loc_2B7F     ; Jump relative (conditional & unconditional)
ROM:2B66
ROM:2B68 60                       ld      h, b            ; Move o1 <- o2
ROM:2B69 69                       ld      l, c            ; Move o1 <- o2
ROM:2B6A 19                       add     hl, de          ; Add <reg> to A
ROM:2B6B 44                       ld      b, h            ; Move o1 <- o2
ROM:2B6C 4D                       ld      c, l            ; Move o1 <- o2
ROM:2B6D E1                       pop     hl              ; Pop register pair from stack
ROM:2B6E E5                       push    hl              ; Push register pair onto stack
ROM:2B6F 23                       inc     hl              ; Increment operand
ROM:2B70 71                       ld      (hl), c         ; Move o1 <- o2
ROM:2B71 23                       inc     hl              ; Increment operand
ROM:2B72 70                       ld      (hl), b         ; Move o1 <- o2
ROM:2B73 23                       inc     hl              ; Increment operand
ROM:2B74 E5                       push    hl              ; Push register pair onto stack
ROM:2B75 CD 4D 28                 call    sub_284D        ; call (cond & uncond)
ROM:2B75
ROM:2B78 19                       add     hl, de          ; Add <reg> to A
ROM:2B79 44                       ld      b, h            ; Move o1 <- o2
ROM:2B7A 4D                       ld      c, l            ; Move o1 <- o2
ROM:2B7B E1                       pop     hl              ; Pop register pair from stack
ROM:2B7C 71                       ld      (hl), c         ; Move o1 <- o2
ROM:2B7D 23                       inc     hl              ; Increment operand
ROM:2B7E 70                       ld      (hl), b         ; Move o1 <- o2
ROM:2B7E
ROM:2B7F
ROM:2B7F          loc_2B7F:                               ; CODE XREF: sub_2B20+39↑j
ROM:2B7F                                                  ; sub_2B20+3E↑j ...
ROM:2B7F E1                       pop     hl              ; Pop register pair from stack
ROM:2B80 CD 34 28                 call    sub_2834        ; call (cond & uncond)
ROM:2B80
ROM:2B83 C1                       pop     bc              ; Pop register pair from stack
ROM:2B84 10 CF                    djnz    loc_2B55        ; Decrement reg B and jump relative if zero
ROM:2B84
ROM:2B86 C9                       ret                     ; Return (cond & uncond)
ROM:2B86
ROM:2B86          ; End of function sub_2B20
ROM:2B86
ROM:2B87          ; ---------------------------------------------------------------------------
ROM:2B87 CD CE 19                 call    loc_19CE        ; call (cond & uncond)
ROM:2B87
ROM:2B8A 21 5C 41                 ld      hl, 415Ch       ; Move o1 <- o2
ROM:2B8D AE                       xor     (hl)            ; Exclusive or with accumulator
ROM:2B8E 77                       ld      (hl), a         ; Move o1 <- o2
ROM:2B8F CD 8D 27                 call    sub_278D        ; call (cond & uncond)
ROM:2B8F
ROM:2B92 21 87 2B                 ld      hl, 2B87h       ; Move o1 <- o2
ROM:2B95 0E 01                    ld      c, 1            ; Move o1 <- o2
ROM:2B95
ROM:2B97          ; START OF FUNCTION CHUNK FOR sub_2BA1
ROM:2B97
ROM:2B97          loc_2B97:                               ; CODE XREF: ROM:2B9F↓j
ROM:2B97                                                  ; sub_2BA1+5↓j
ROM:2B97 C3 8F 19                 jp      loc_198F        ; Jump (conditional & unconditional)
ROM:2B97
ROM:2B97          ; END OF FUNCTION CHUNK FOR sub_2BA1
ROM:2B9A          ; ---------------------------------------------------------------------------
ROM:2B9A 21 63 2A                 ld      hl, 2A63h       ; Move o1 <- o2
ROM:2B9D 0E 00                    ld      c, 0            ; Move o1 <- o2
ROM:2B9F 18 F6                    jr      loc_2B97        ; Jump relative (conditional & unconditional)
ROM:2B9F
ROM:2BA1
ROM:2BA1          ; =============== S U B R O U T I N E =======================================
ROM:2BA1
ROM:2BA1
ROM:2BA1          sub_2BA1:                               ; CODE XREF: sub_1EB2+14↑p
ROM:2BA1
ROM:2BA1          ; FUNCTION CHUNK AT ROM:198F SIZE 0000002F BYTES
ROM:2BA1          ; FUNCTION CHUNK AT ROM:2722 SIZE 0000001F BYTES
ROM:2BA1          ; FUNCTION CHUNK AT ROM:2B97 SIZE 00000003 BYTES
ROM:2BA1
ROM:2BA1 21 D1 2C                 ld      hl, 2CD1h       ; Move o1 <- o2
ROM:2BA4 0E 01                    ld      c, 1            ; Move o1 <- o2
ROM:2BA6 18 EF                    jr      loc_2B97        ; Jump relative (conditional & unconditional)
ROM:2BA6
ROM:2BA6          ; End of function sub_2BA1
ROM:2BA6
ROM:2BA8          ; ---------------------------------------------------------------------------
ROM:2BA8          ; START OF FUNCTION CHUNK FOR sub_2BED
ROM:2BA8
ROM:2BA8          loc_2BA8:                               ; CODE XREF: sub_2BED+3↓j
ROM:2BA8 21 5B 41                 ld      hl, 415Bh       ; Move o1 <- o2
ROM:2BAB CB 6E                    bit     5, (hl)         ; Test <bit> in operand
ROM:2BAD C8                       ret     z               ; Return (cond & uncond)
ROM:2BAE CB AE                    res     5, (hl)         ; Reset bit
ROM:2BB0 4E                       ld      c, (hl)         ; Move o1 <- o2
ROM:2BB1 21 35 42                 ld      hl, 4235h       ; Move o1 <- o2
ROM:2BB4 06 03                    ld      b, 3            ; Move o1 <- o2
ROM:2BB6 16 01                    ld      d, 1            ; Move o1 <- o2
ROM:2BB6
ROM:2BB8
ROM:2BB8          loc_2BB8:                               ; CODE XREF: sub_2BED-28↓j
ROM:2BB8 CB 7E                    bit     7, (hl)         ; Test <bit> in operand
ROM:2BBA 28 04                    jr      z, loc_2BC0     ; Jump relative (conditional & unconditional)
ROM:2BBA
ROM:2BBC 7A                       ld      a, d            ; Move o1 <- o2
ROM:2BBD A1                       and     c               ; And with accumulator
ROM:2BBE 28 07                    jr      z, loc_2BC7     ; Jump relative (conditional & unconditional)
ROM:2BBE
ROM:2BC0
ROM:2BC0          loc_2BC0:                               ; CODE XREF: sub_2BED-33↑j
ROM:2BC0 CB 22                    sla     d               ; Shift left arithmetic
ROM:2BC2 CD 34 28                 call    sub_2834        ; call (cond & uncond)
ROM:2BC2
ROM:2BC5 10 F1                    djnz    loc_2BB8        ; Decrement reg B and jump relative if zero
ROM:2BC5
ROM:2BC7
ROM:2BC7          loc_2BC7:                               ; CODE XREF: sub_2BED-2F↑j
ROM:2BC7 79                       ld      a, c            ; Move o1 <- o2
ROM:2BC8 B2                       or      d               ; Or with accumulator
ROM:2BC9 23                       inc     hl              ; Increment operand
ROM:2BCA 23                       inc     hl              ; Increment operand
ROM:2BCB EB                       ex      de, hl          ; Exchange operands
ROM:2BCC ED 4B 67                 ld      bc, (word_4167) ; Move o1 <- o2
ROM:2BCC 41
ROM:2BD0 2A 5D 41                 ld      hl, (word_415D) ; Move o1 <- o2
ROM:2BD3 B7                       or      a               ; Or with accumulator
ROM:2BD4 ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:2BD6 28 6A                    jr      z, loc_2C42     ; Jump relative (conditional & unconditional)
ROM:2BD6
ROM:2BD8 32 5B 41                 ld      (byte_415B), a  ; Move o1 <- o2
ROM:2BDB C5                       push    bc              ; Push register pair onto stack
ROM:2BDC E1                       pop     hl              ; Pop register pair from stack
ROM:2BDD 22 6B 41                 ld      (word_416B), hl ; Move o1 <- o2
ROM:2BE0 2B                       dec     hl              ; Decrement operand
ROM:2BE1 EB                       ex      de, hl          ; Exchange operands
ROM:2BE2 CD 47 28                 call    sub_2847        ; call (cond & uncond)
ROM:2BE2
ROM:2BE5 CD CA 24                 call    sub_24CA        ; call (cond & uncond)
ROM:2BE5
ROM:2BE8 CD 15 1B                 call    sub_1B15        ; call (cond & uncond)
ROM:2BE8
ROM:2BEB 18 55                    jr      loc_2C42        ; Jump relative (conditional & unconditional)
ROM:2BEB
ROM:2BEB          ; END OF FUNCTION CHUNK FOR sub_2BED
ROM:2BED
ROM:2BED          ; =============== S U B R O U T I N E =======================================
ROM:2BED
ROM:2BED
ROM:2BED          sub_2BED:                               ; CODE XREF: sub_24CA:loc_24E1↑p
ROM:2BED                                                  ; sub_24CA+1A↑j
ROM:2BED
ROM:2BED          ; FUNCTION CHUNK AT ROM:2BA8 SIZE 00000045 BYTES
ROM:2BED
ROM:2BED CD 79 17                 call    sub_1779        ; call (cond & uncond)
ROM:2BED
ROM:2BF0 28 B6                    jr      z, loc_2BA8     ; Jump relative (conditional & unconditional)
ROM:2BF0
ROM:2BF2 E5                       push    hl              ; Push register pair onto stack
ROM:2BF3 3A 32 42                 ld      a, (byte_4232)  ; Move o1 <- o2
ROM:2BF6 CD BE 19                 call    sub_19BE        ; call (cond & uncond)
ROM:2BF6
ROM:2BF9 E3                       ex      (sp), hl        ; Exchange operands
ROM:2BFA CB 5E                    bit     3, (hl)         ; Test <bit> in operand
ROM:2BFC CB 9E                    res     3, (hl)         ; Reset bit
ROM:2BFE E1                       pop     hl              ; Pop register pair from stack
ROM:2BFF E5                       push    hl              ; Push register pair onto stack
ROM:2C00 C4 20 2B                 call    nz, sub_2B20    ; call (cond & uncond)
ROM:2C00
ROM:2C03 CD C0 2D                 call    sub_2DC0        ; call (cond & uncond)
ROM:2C03
ROM:2C06 EB                       ex      de, hl          ; Exchange operands
ROM:2C07 E1                       pop     hl              ; Pop register pair from stack
ROM:2C08 22 30 42                 ld      (word_4230), hl ; Move o1 <- o2
ROM:2C0B ED 4B 33                 ld      bc, (word_4233) ; Move o1 <- o2
ROM:2C0B 42
ROM:2C0F 2A 67 41                 ld      hl, (word_4167) ; Move o1 <- o2
ROM:2C12 B7                       or      a               ; Or with accumulator
ROM:2C13 ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:2C15 28 2B                    jr      z, loc_2C42     ; Jump relative (conditional & unconditional)
ROM:2C15
ROM:2C17 EB                       ex      de, hl          ; Exchange operands
ROM:2C18 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:2C18
ROM:2C19 28 02                    jr      z, loc_2C1D     ; Jump relative (conditional & unconditional)
ROM:2C19
ROM:2C1B 30 06                    jr      nc, loc_2C23    ; Jump relative (conditional & unconditional)
ROM:2C1B
ROM:2C1D
ROM:2C1D          loc_2C1D:                               ; CODE XREF: sub_2BED+2C↑j
ROM:2C1D CD 8C 17                 call    sub_178C        ; call (cond & uncond)
ROM:2C1D
ROM:2C20 C3 54 26                 jp      sub_2654        ; Jump (conditional & unconditional)
ROM:2C20
ROM:2C23          ; ---------------------------------------------------------------------------
ROM:2C23
ROM:2C23          loc_2C23:                               ; CODE XREF: sub_2BED+2E↑j
ROM:2C23 2A FA 43                 ld      hl, (data_for_40bd_ptr_5fffh) ; Move o1 <- o2
ROM:2C26 42                       ld      b, d            ; Move o1 <- o2
ROM:2C27 4B                       ld      c, e            ; Move o1 <- o2
ROM:2C28 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:2C28
ROM:2C29 22 FA 43                 ld      (data_for_40bd_ptr_5fffh), hl ; Move o1 <- o2
ROM:2C2C 23                       inc     hl              ; Increment operand
ROM:2C2D E5                       push    hl              ; Push register pair onto stack
ROM:2C2E EB                       ex      de, hl          ; Exchange operands
ROM:2C2F 2A 33 42                 ld      hl, (word_4233) ; Move o1 <- o2
ROM:2C32 ED B0                    ldir                    ; Transfer data (DE)->(HL) until byte
ROM:2C32                                                  ; counter is zero, increment destination
ROM:2C32                                                  ; and source addresses
ROM:2C34 1B                       dec     de              ; Decrement operand
ROM:2C35 2A 30 42                 ld      hl, (word_4230) ; Move o1 <- o2
ROM:2C38 CB FE                    set     7, (hl)         ; Set bit
ROM:2C3A C1                       pop     bc              ; Pop register pair from stack
ROM:2C3B 23                       inc     hl              ; Increment operand
ROM:2C3C 71                       ld      (hl), c         ; Move o1 <- o2
ROM:2C3D 23                       inc     hl              ; Increment operand
ROM:2C3E 70                       ld      (hl), b         ; Move o1 <- o2
ROM:2C3F CD 47 28                 call    sub_2847        ; call (cond & uncond)
ROM:2C3F
ROM:2C42
ROM:2C42          loc_2C42:                               ; CODE XREF: sub_2BED-17↑j
ROM:2C42                                                  ; sub_2BED-2↑j ...
ROM:2C42 CD 8C 17                 call    sub_178C        ; call (cond & uncond)
ROM:2C42
ROM:2C45 C3 8D 27                 jp      sub_278D        ; Jump (conditional & unconditional)
ROM:2C45
ROM:2C45          ; End of function sub_2BED
ROM:2C45
ROM:2C45          ; ---------------------------------------------------------------------------
ROM:2C48 21                       db  21h ; !
ROM:2C49 5B                       db  5Bh ; [
ROM:2C4A 41                       db  41h ; A
ROM:2C4B CB                       db 0CBh
ROM:2C4C 46                       db  46h ; F
ROM:2C4D C8                       db 0C8h
ROM:2C4E 21                       db  21h ; !
ROM:2C4F 35                       db  35h ; 5
ROM:2C50 42                       db  42h ; B
ROM:2C51          ; ---------------------------------------------------------------------------
ROM:2C51
ROM:2C51          loc_2C51:                               ; CODE XREF: ROM:2C90↓j
ROM:2C51 CD 92 2C                 call    sub_2C92        ; call (cond & uncond)
ROM:2C51
ROM:2C54 CD 42 28                 call    sub_2842        ; call (cond & uncond)
ROM:2C54
ROM:2C57 E5                       push    hl              ; Push register pair onto stack
ROM:2C58 21 58 41                 ld      hl, 4158h       ; Move o1 <- o2
ROM:2C5B CB 46                    bit     0, (hl)         ; Test <bit> in operand
ROM:2C5D 20 05                    jr      nz, loc_2C64    ; Jump relative (conditional & unconditional)
ROM:2C5D
ROM:2C5F CD 12 2D                 call    where_our_40bd_filled ; call (cond & uncond)
ROM:2C5F
ROM:2C62 18 07                    jr      loc_2C6B        ; Jump relative (conditional & unconditional)
ROM:2C62
ROM:2C64          ; ---------------------------------------------------------------------------
ROM:2C64
ROM:2C64          loc_2C64:                               ; CODE XREF: ROM:2C5D↑j
ROM:2C64 21 61 00                 ld      hl, 61h ; 'a'   ; Move o1 <- o2
ROM:2C67 19                       add     hl, de          ; Add <reg> to A
ROM:2C68 22 6D 41                 ld      (word_416D), hl ; Move o1 <- o2
ROM:2C68
ROM:2C6B
ROM:2C6B          loc_2C6B:                               ; CODE XREF: ROM:2C62↑j
ROM:2C6B E1                       pop     hl              ; Pop register pair from stack
ROM:2C6C
ROM:2C6C          ; =============== S U B R O U T I N E =======================================
ROM:2C6C
ROM:2C6C
ROM:2C6C          sub_2C6C:
ROM:2C6C CD 42 28                 call    sub_2842        ; call (cond & uncond)
ROM:2C6C
ROM:2C6F EB                       ex      de, hl          ; Exchange operands
ROM:2C6F
ROM:2C6F          ; End of function sub_2C6C
ROM:2C6F
ROM:2C70          ; START OF FUNCTION CHUNK FOR sub_2CFE
ROM:2C70
ROM:2C70          loc_2C70:                               ; CODE XREF: sub_2CFE+11↓j
ROM:2C70 CD 0F 28                 call    loc_280F        ; call (cond & uncond)
ROM:2C70
ROM:2C73 22 71 41                 ld      (word_4171), hl ; Move o1 <- o2
ROM:2C76 22 6F 41                 ld      (word_416F), hl ; Move o1 <- o2
ROM:2C79 C3 9E 17                 jp      loc_179E        ; Jump (conditional & unconditional)
ROM:2C79
ROM:2C79          ; END OF FUNCTION CHUNK FOR sub_2CFE
ROM:2C79          ; ---------------------------------------------------------------------------
ROM:2C7C 21                       db  21h ; !
ROM:2C7D 5B                       db  5Bh ; [
ROM:2C7E 41                       db  41h ; A
ROM:2C7F CB                       db 0CBh
ROM:2C80 4E                       db  4Eh ; N
ROM:2C81 C8                       db 0C8h
ROM:2C82 21                       db  21h ; !
ROM:2C83 3A                       db  3Ah ; :
ROM:2C84 42                       db  42h ; B
ROM:2C85 18                       db  18h
ROM:2C86 CA                       db 0CAh
ROM:2C87          ; ---------------------------------------------------------------------------
ROM:2C87 21 5B 41                 ld      hl, 415Bh       ; Move o1 <- o2
ROM:2C8A CB 56                    bit     2, (hl)         ; Test <bit> in operand
ROM:2C8C C8                       ret     z               ; Return (cond & uncond)
ROM:2C8D 21 3F 42                 ld      hl, 423Fh       ; Move o1 <- o2
ROM:2C90 18 BF                    jr      loc_2C51        ; Jump relative (conditional & unconditional)
ROM:2C90
ROM:2C92
ROM:2C92          ; =============== S U B R O U T I N E =======================================
ROM:2C92
ROM:2C92
ROM:2C92          sub_2C92:                               ; CODE XREF: ROM:2B16↑p
ROM:2C92                                                  ; ROM:loc_2C51↑p
ROM:2C92
ROM:2C92          ; FUNCTION CHUNK AT ROM:2660 SIZE 00000004 BYTES
ROM:2C92
ROM:2C92 E5                       push    hl              ; Push register pair onto stack
ROM:2C93 CD 98 17                 call    set_4157_b4_to_1 ; call (cond & uncond)
ROM:2C93
ROM:2C96 E1                       pop     hl              ; Pop register pair from stack
ROM:2C97 C8                       ret     z               ; Return (cond & uncond)
ROM:2C98 E1                       pop     hl              ; Pop register pair from stack
ROM:2C99 C3 60 26                 jp      loc_2660        ; Jump (conditional & unconditional)
ROM:2C99
ROM:2C99          ; End of function sub_2C92
ROM:2C99
ROM:2C99          ; ---------------------------------------------------------------------------
ROM:2C9C F5                       db 0F5h
ROM:2C9D CD                       db 0CDh
ROM:2C9E BE                       db 0BEh
ROM:2C9F 19                       db  19h
ROM:2CA0 CD                       db 0CDh
ROM:2CA1 42                       db  42h ; B
ROM:2CA2 28                       db  28h ; (
ROM:2CA3 ED                       db 0EDh
ROM:2CA4 53                       db  53h ; S
ROM:2CA5 6D                       db  6Dh ; m
ROM:2CA6 41                       db  41h ; A
ROM:2CA7 CD                       db 0CDh
ROM:2CA8 6C                       db  6Ch ; l
ROM:2CA9 2C                       db  2Ch ; ,
ROM:2CAA CD                       db 0CDh
ROM:2CAB B4                       db 0B4h
ROM:2CAC 26                       db  26h ; &
ROM:2CAD E1                       db 0E1h
ROM:2CAE 3E                       db  3Eh ; >
ROM:2CAF 9E                       db  9Eh
ROM:2CB0 DF                       db 0DFh
ROM:2CB1 20                       db  20h
ROM:2CB2 0D                       db  0Dh
ROM:2CB3 3E                       db  3Eh ; >
ROM:2CB4 97                       db  97h
ROM:2CB5 DF                       db 0DFh
ROM:2CB6 C2                       db 0C2h
ROM:2CB7 AA                       db 0AAh
ROM:2CB8 17                       db  17h
ROM:2CB9 7C                       db  7Ch ; |
ROM:2CBA DF                       db 0DFh
ROM:2CBB 20                       db  20h
ROM:2CBC F1                       db 0F1h
ROM:2CBD C3                       db 0C3h
ROM:2CBE 7D                       db  7Dh ; }
ROM:2CBF 16                       db  16h
ROM:2CC0 7C                       db  7Ch ; |
ROM:2CC1 CD                       db 0CDh
ROM:2CC2 CE                       db 0CEh
ROM:2CC3 2D                       db  2Dh ; -
ROM:2CC4 CD                       db 0CDh
ROM:2CC5 BE                       db 0BEh
ROM:2CC6 19                       db  19h
ROM:2CC7 CB                       db 0CBh
ROM:2CC8 BE                       db 0BEh
ROM:2CC9 CD                       db 0CDh
ROM:2CCA 79                       db  79h ; y
ROM:2CCB 17                       db  17h
ROM:2CCC CB                       db 0CBh
ROM:2CCD DE                       db 0DEh
ROM:2CCE C3                       db 0C3h
ROM:2CCF 57                       db  57h ; W
ROM:2CD0 2A                       db  2Ah ; *
ROM:2CD1 CD                       db 0CDh
ROM:2CD2 CE                       db 0CEh
ROM:2CD3 19                       db  19h
ROM:2CD4 21                       db  21h ; !
ROM:2CD5 BD                       db 0BDh
ROM:2CD6 40                       db  40h ; @
ROM:2CD7 EB                       db 0EBh
ROM:2CD8 C3                       db 0C3h
ROM:2CD9 6E                       db  6Eh ; n
ROM:2CDA 2A                       db  2Ah ; *
ROM:2CDB CD                       db 0CDh
ROM:2CDC 92                       db  92h
ROM:2CDD 2C                       db  2Ch ; ,
ROM:2CDE 3A                       db  3Ah ; :
ROM:2CDF 58                       db  58h ; X
ROM:2CE0 41                       db  41h ; A
ROM:2CE1 CB                       db 0CBh
ROM:2CE2 5F                       db  5Fh ; _
ROM:2CE3 C2                       db 0C2h
ROM:2CE4 54                       db  54h ; T
ROM:2CE5 26                       db  26h ; &
ROM:2CE6 2A                       db  2Ah ; *
ROM:2CE7 67                       db  67h ; g
ROM:2CE8 41                       db  41h ; A
ROM:2CE9 ED                       db 0EDh
ROM:2CEA 5B                       db  5Bh ; [
ROM:2CEB 5D                       db  5Dh ; ]
ROM:2CEC 41                       db  41h ; A
ROM:2CED D7                       db 0D7h
ROM:2CEE C8                       db 0C8h
ROM:2CEF 01                       db    1
ROM:2CF0 61                       db  61h ; a
ROM:2CF1 00                       db    0
ROM:2CF2 09                       db    9
ROM:2CF3 4D                       db  4Dh ; M
ROM:2CF4 44                       db  44h ; D
ROM:2CF5 2A                       db  2Ah ; *
ROM:2CF6 67                       db  67h ; g
ROM:2CF7 41                       db  41h ; A
ROM:2CF8 2B                       db  2Bh ; +
ROM:2CF9 EB                       db 0EBh
ROM:2CFA CD                       db 0CDh
ROM:2CFB 21                       db  21h ; !
ROM:2CFC 28                       db  28h ; (
ROM:2CFD EB                       db 0EBh
ROM:2CFE
ROM:2CFE          ; =============== S U B R O U T I N E =======================================
ROM:2CFE
ROM:2CFE
ROM:2CFE          sub_2CFE:                               ; CODE XREF: sub_2188+FF3↓p
ROM:2CFE
ROM:2CFE          ; FUNCTION CHUNK AT ROM:179E SIZE 0000000C BYTES
ROM:2CFE          ; FUNCTION CHUNK AT ROM:2C70 SIZE 0000000C BYTES
ROM:2CFE
ROM:2CFE ED 5B FA                 ld      de, (data_for_40bd_ptr_5fffh) ; Move o1 <- o2
ROM:2CFE 43
ROM:2D02 D5                       push    de              ; Push register pair onto stack
ROM:2D03 ED B8                    lddr                    ; Transfer data (DE)->(HL) until byte
ROM:2D03                                                  ; counter is zero, decrement destintation
ROM:2D03                                                  ; and source addresses
ROM:2D05 13                       inc     de              ; Increment operand
ROM:2D06 CD 12 2D                 call    where_our_40bd_filled ; call (cond & uncond)
ROM:2D06
ROM:2D09 21 57 41                 ld      hl, 4157h       ; Move o1 <- o2
ROM:2D0C CB FE                    set     7, (hl)         ; Set bit
ROM:2D0E E1                       pop     hl              ; Pop register pair from stack
ROM:2D0F C3 70 2C                 jp      loc_2C70        ; Jump (conditional & unconditional)
ROM:2D0F
ROM:2D0F          ; End of function sub_2CFE
ROM:2D0F
ROM:2D12
ROM:2D12          ; =============== S U B R O U T I N E =======================================
ROM:2D12
ROM:2D12
ROM:2D12          where_our_40bd_filled:                  ; CODE XREF: ROM:2C5F↑p
ROM:2D12                                                  ; sub_2CFE+8↑p
ROM:2D12 EB                       ex      de, hl          ; Exchange operands
ROM:2D13 11 BD 40                 ld      de, 40BDh       ; copy to our 40BDh!
ROM:2D16 01 61 00                 ld      bc, 61h ; 'a'   ; Move o1 <- o2
ROM:2D19 ED B0                    ldir                    ; Transfer data (DE)->(HL) until byte
ROM:2D19                                                  ; counter is zero, increment destination
ROM:2D19                                                  ; and source addresses
ROM:2D1B 22 6D 41                 ld      (word_416D), hl ; Move o1 <- o2
ROM:2D1E CD CA 24                 call    sub_24CA        ; call (cond & uncond)
ROM:2D1E
ROM:2D21 CD 15 1B                 call    sub_1B15        ; call (cond & uncond)
ROM:2D21
ROM:2D24 3E 09                    ld      a, 9            ; Move o1 <- o2
ROM:2D26 E7                       rst     20h             ; Restart at vector <int>
ROM:2D26
ROM:2D27 2A C8 40                 ld      hl, (word_40C8) ; Move o1 <- o2
ROM:2D2A 22 7B 41                 ld      (word_417B), hl ; Move o1 <- o2
ROM:2D2D C9                       ret                     ; Return (cond & uncond)
ROM:2D2D
ROM:2D2D          ; End of function where_our_40bd_filled
ROM:2D2D
ROM:2D2E          ; ---------------------------------------------------------------------------
ROM:2D2E          ; START OF FUNCTION CHUNK FOR sub_2A75
ROM:2D2E
ROM:2D2E          loc_2D2E:                               ; CODE XREF: sub_2A75+9↑j
ROM:2D2E 03                       inc     bc              ; Increment operand
ROM:2D2F CD B9 2D                 call    loc_2DB9        ; call (cond & uncond)
ROM:2D2F
ROM:2D32 E5                       push    hl              ; Push register pair onto stack
ROM:2D33 C5                       push    bc              ; Push register pair onto stack
ROM:2D34 E1                       pop     hl              ; Pop register pair from stack
ROM:2D35 C1                       pop     bc              ; Pop register pair from stack
ROM:2D36 E5                       push    hl              ; Push register pair onto stack
ROM:2D37 D5                       push    de              ; Push register pair onto stack
ROM:2D38 C5                       push    bc              ; Push register pair onto stack
ROM:2D39 28 02                    jr      z, loc_2D3D     ; Jump relative (conditional & unconditional)
ROM:2D39
ROM:2D3B ED B0                    ldir                    ; Transfer data (DE)->(HL) until byte
ROM:2D3B                                                  ; counter is zero, increment destination
ROM:2D3B                                                  ; and source addresses
ROM:2D3B
ROM:2D3D
ROM:2D3D          loc_2D3D:                               ; CODE XREF: sub_2A75+2C4↑j
ROM:2D3D C1                       pop     bc              ; Pop register pair from stack
ROM:2D3E D1                       pop     de              ; Pop register pair from stack
ROM:2D3F E1                       pop     hl              ; Pop register pair from stack
ROM:2D40 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:2D40
ROM:2D41 F5                       push    af              ; Push register pair onto stack
ROM:2D42 28 02                    jr      z, loc_2D46     ; Jump relative (conditional & unconditional)
ROM:2D42
ROM:2D44 44                       ld      b, h            ; Move o1 <- o2
ROM:2D45 4D                       ld      c, l            ; Move o1 <- o2
ROM:2D45
ROM:2D46
ROM:2D46          loc_2D46:                               ; CODE XREF: sub_2A75+2CD↑j
ROM:2D46 2A 63 41                 ld      hl, (word_4163) ; Move o1 <- o2
ROM:2D49 B7                       or      a               ; Or with accumulator
ROM:2D4A ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:2D4C 22 63 41                 ld      (word_4163), hl ; Move o1 <- o2
ROM:2D4F 22 61 41                 ld      (word_4161), hl ; Move o1 <- o2
ROM:2D52 2A 5D 41                 ld      hl, (word_415D) ; Move o1 <- o2
ROM:2D55 ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:2D57 22 5D 41                 ld      (word_415D), hl ; Move o1 <- o2
ROM:2D5A 2A 6B 41                 ld      hl, (word_416B) ; Move o1 <- o2
ROM:2D5D ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:2D5F 22 6B 41                 ld      (word_416B), hl ; Move o1 <- o2
ROM:2D62 F1                       pop     af              ; Pop register pair from stack
ROM:2D63 C9                       ret                     ; Return (cond & uncond)
ROM:2D63
ROM:2D63          ; END OF FUNCTION CHUNK FOR sub_2A75
ROM:2D64
ROM:2D64          ; =============== S U B R O U T I N E =======================================
ROM:2D64
ROM:2D64
ROM:2D64          sub_2D64:                               ; CODE XREF: ROM:2A93↑p
ROM:2D64                                                  ; ROM:2A9B↑p ...
ROM:2D64 C5                       push    bc              ; Push register pair onto stack
ROM:2D65 22 30 42                 ld      (word_4230), hl ; Move o1 <- o2
ROM:2D68 CD B5 2D                 call    sub_2DB5        ; call (cond & uncond)
ROM:2D68
ROM:2D6B D5                       push    de              ; Push register pair onto stack
ROM:2D6C E1                       pop     hl              ; Pop register pair from stack
ROM:2D6D B7                       or      a               ; Or with accumulator
ROM:2D6E ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:2D70 60                       ld      h, b            ; Move o1 <- o2
ROM:2D71 69                       ld      l, c            ; Move o1 <- o2
ROM:2D72 C1                       pop     bc              ; Pop register pair from stack
ROM:2D73 D0                       ret     nc              ; Return (cond & uncond)
ROM:2D74 B7                       or      a               ; Or with accumulator
ROM:2D75 ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:2D77 D5                       push    de              ; Push register pair onto stack
ROM:2D78 EB                       ex      de, hl          ; Exchange operands
ROM:2D79 2A 30 42                 ld      hl, (word_4230) ; Move o1 <- o2
ROM:2D7C CD 47 28                 call    sub_2847        ; call (cond & uncond)
ROM:2D7C
ROM:2D7F CD 42 28                 call    sub_2842        ; call (cond & uncond)
ROM:2D7F
ROM:2D82 EB                       ex      de, hl          ; Exchange operands
ROM:2D83 B7                       or      a               ; Or with accumulator
ROM:2D84 ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:2D86 EB                       ex      de, hl          ; Exchange operands
ROM:2D87 72                       ld      (hl), d         ; Move o1 <- o2
ROM:2D88 2B                       dec     hl              ; Decrement operand
ROM:2D89 73                       ld      (hl), e         ; Move o1 <- o2
ROM:2D8A D1                       pop     de              ; Pop register pair from stack
ROM:2D8B C9                       ret                     ; Return (cond & uncond)
ROM:2D8B
ROM:2D8B          ; End of function sub_2D64
ROM:2D8B
ROM:2D8C          ; ---------------------------------------------------------------------------
ROM:2D8C 06 00                    ld      b, 0            ; Move o1 <- o2
ROM:2D8E 2A 79 41                 ld      hl, (word_4179) ; Move o1 <- o2
ROM:2D91 09                       add     hl, bc          ; Add <reg> to A
ROM:2D92 03                       inc     bc              ; Increment operand
ROM:2D93 ED B9                    cpdr                    ; Compare accumulator with memory and
ROM:2D93                                                  ; decrement address and byte counter,
ROM:2D93                                                  ; continue until match is found or
ROM:2D93                                                  ; byte counter is zero
ROM:2D95 79                       ld      a, c            ; Move o1 <- o2
ROM:2D96 C9                       ret                     ; Return (cond & uncond)
ROM:2D96
ROM:2D97
ROM:2D97          ; =============== S U B R O U T I N E =======================================
ROM:2D97
ROM:2D97
ROM:2D97          sub_2D97:                               ; CODE XREF: sub_182E+17↑p
ROM:2D97                                                  ; ROM:1950↑p
ROM:2D97 21 58 41                 ld      hl, 4158h       ; Move o1 <- o2
ROM:2D9A CB 4E                    bit     1, (hl)         ; Test <bit> in operand
ROM:2D9C 20 05                    jr      nz, loc_2DA3    ; Jump relative (conditional & unconditional)
ROM:2D9C
ROM:2D9E CD C0 2D                 call    sub_2DC0        ; call (cond & uncond)
ROM:2D9E
ROM:2DA1 30 03                    jr      nc, loc_2DA6    ; Jump relative (conditional & unconditional)
ROM:2DA1
ROM:2DA3
ROM:2DA3          loc_2DA3:                               ; CODE XREF: sub_2D97+5↑j
ROM:2DA3 21 00 00                 ld      hl, 0           ; Move o1 <- o2
ROM:2DA3
ROM:2DA6
ROM:2DA6          loc_2DA6:                               ; CODE XREF: sub_2D97+A↑j
ROM:2DA6 CD AC 27                 call    sub_27AC        ; call (cond & uncond)
ROM:2DA6
ROM:2DA9 21 29 42                 ld      hl, 4229h       ; Move o1 <- o2
ROM:2DAC 11 A5 41                 ld      de, 41A5h       ; Move o1 <- o2
ROM:2DAF 01 04 00                 ld      bc, 4           ; Move o1 <- o2
ROM:2DB2 ED B0                    ldir                    ; Transfer data (DE)->(HL) until byte
ROM:2DB2                                                  ; counter is zero, increment destination
ROM:2DB2                                                  ; and source addresses
ROM:2DB4 C9                       ret                     ; Return (cond & uncond)
ROM:2DB4
ROM:2DB4          ; End of function sub_2D97
ROM:2DB4
ROM:2DB5
ROM:2DB5          ; =============== S U B R O U T I N E =======================================
ROM:2DB5
ROM:2DB5
ROM:2DB5          sub_2DB5:                               ; CODE XREF: sub_2B20+3B↑p
ROM:2DB5                                                  ; sub_2D64+4↑p
ROM:2DB5 23                       inc     hl              ; Increment operand
ROM:2DB6 4E                       ld      c, (hl)         ; Move o1 <- o2
ROM:2DB7 23                       inc     hl              ; Increment operand
ROM:2DB8 46                       ld      b, (hl)         ; Move o1 <- o2
ROM:2DB8
ROM:2DB9
ROM:2DB9          loc_2DB9:                               ; CODE XREF: ROM:loc_2AAC↑p
ROM:2DB9                                                  ; sub_2A75+2BA↑p
ROM:2DB9 2A 67 41                 ld      hl, (word_4167) ; Move o1 <- o2
ROM:2DBC B7                       or      a               ; Or with accumulator
ROM:2DBD ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:2DBF C9                       ret                     ; Return (cond & uncond)
ROM:2DBF
ROM:2DBF          ; End of function sub_2DB5
ROM:2DBF
ROM:2DC0
ROM:2DC0          ; =============== S U B R O U T I N E =======================================
ROM:2DC0
ROM:2DC0
ROM:2DC0          sub_2DC0:                               ; CODE XREF: sub_2BED+16↑p
ROM:2DC0                                                  ; sub_2D97+7↑p
ROM:2DC0 11 E2 00                 ld      de, 0E2h        ; Move o1 <- o2
ROM:2DC0
ROM:2DC0          ; End of function sub_2DC0
ROM:2DC0
ROM:2DC3
ROM:2DC3          ; =============== S U B R O U T I N E =======================================
ROM:2DC3
ROM:2DC3
ROM:2DC3          sub_2DC3:                               ; CODE XREF: sub_1B5B+8D↑p
ROM:2DC3                                                  ; sub_1BFC+3↑p ...
ROM:2DC3 2A FA 43                 ld      hl, (data_for_40bd_ptr_5fffh) ; Move o1 <- o2
ROM:2DC6 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:2DC6
ROM:2DC7 ED 5B 67                 ld      de, (word_4167) ; Move o1 <- o2
ROM:2DC7 41
ROM:2DCB D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:2DCB
ROM:2DCC C9                       ret                     ; Return (cond & uncond)
ROM:2DCC
ROM:2DCC          ; End of function sub_2DC3
ROM:2DCC
ROM:2DCD
ROM:2DCD          ; =============== S U B R O U T I N E =======================================
ROM:2DCD
ROM:2DCD
ROM:2DCD          sub_2DCD:                               ; CODE XREF: ROM:2A54↑p
ROM:2DCD 79                       ld      a, c            ; Move o1 <- o2
ROM:2DCE 32 32 42                 ld      (byte_4232), a  ; Move o1 <- o2
ROM:2DD1 2A 63 41                 ld      hl, (word_4163) ; Move o1 <- o2
ROM:2DD4 22 33 42                 ld      (word_4233), hl ; Move o1 <- o2
ROM:2DD7 C9                       ret                     ; Return (cond & uncond)
ROM:2DD7
ROM:2DD7          ; End of function sub_2DCD
ROM:2DD7
ROM:2DD8          ; ---------------------------------------------------------------------------
ROM:2DD8          ; START OF FUNCTION CHUNK FOR sub_28CD
ROM:2DD8
ROM:2DD8          loc_2DD8:                               ; CODE XREF: sub_28CD+1A↑j
ROM:2DD8 CD 98 17                 call    set_4157_b4_to_1 ; call (cond & uncond)
ROM:2DD8
ROM:2DDB C8                       ret     z               ; Return (cond & uncond)
ROM:2DDC AF                       xor     a               ; Exclusive or with accumulator
ROM:2DDD 32 2D 42                 ld      (byte_422D), a  ; Move o1 <- o2
ROM:2DDD
ROM:2DE0
ROM:2DE0          loc_2DE0:                               ; CODE XREF: sub_28CD+528↓j
ROM:2DE0 3E 97                    ld      a, 97h          ; Move o1 <- o2
ROM:2DE2 DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:2DE2                                                  ; A - if < 10h is 0000xxxx read mask
ROM:2DE2                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:2DE2                                                  ;         A[5:3] - bit index for...
ROM:2DE2                                                  ;         A[2:0] - bit index for...
ROM:2DE2                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:2DE2
ROM:2DE3 C0                       ret     nz              ; Return (cond & uncond)
ROM:2DE4 2A 71 41                 ld      hl, (word_4171) ; Move o1 <- o2
ROM:2DE7 3E 9C                    ld      a, 9Ch          ; Move o1 <- o2
ROM:2DE9 DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:2DE9                                                  ; A - if < 10h is 0000xxxx read mask
ROM:2DE9                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:2DE9                                                  ;         A[5:3] - bit index for...
ROM:2DE9                                                  ;         A[2:0] - bit index for...
ROM:2DE9                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:2DE9
ROM:2DEA 20 1E                    jr      nz, loc_2E0A    ; Jump relative (conditional & unconditional)
ROM:2DEA
ROM:2DEC F7                       rst     30h             ; Restart at vector <int>
ROM:2DEC
ROM:2DED 28 03                    jr      z, loc_2DF2     ; Jump relative (conditional & unconditional)
ROM:2DED
ROM:2DEF 32 2D 42                 ld      (byte_422D), a  ; Move o1 <- o2
ROM:2DEF
ROM:2DF2
ROM:2DF2          loc_2DF2:                               ; CODE XREF: sub_28CD+520↑j
ROM:2DF2 3E A6                    ld      a, 0A6h         ; Move o1 <- o2
ROM:2DF4 DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:2DF4                                                  ; A - if < 10h is 0000xxxx read mask
ROM:2DF4                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:2DF4                                                  ;         A[5:3] - bit index for...
ROM:2DF4                                                  ;         A[2:0] - bit index for...
ROM:2DF4                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:2DF4
ROM:2DF5 20 E9                    jr      nz, loc_2DE0    ; Jump relative (conditional & unconditional)
ROM:2DF5
ROM:2DF7 3A 2D 42                 ld      a, (byte_422D)  ; Move o1 <- o2
ROM:2DFA 2A 6D 41                 ld      hl, (word_416D) ; Move o1 <- o2
ROM:2DFA
ROM:2DFD
ROM:2DFD          loc_2DFD:                               ; CODE XREF: sub_28CD+53B↓j
ROM:2DFD CD 56 2E                 call    sub_2E56        ; call (cond & uncond)
ROM:2DFD
ROM:2E00 28 08                    jr      z, loc_2E0A     ; Jump relative (conditional & unconditional)
ROM:2E00
ROM:2E02 CD F5 27                 call    sub_27F5        ; call (cond & uncond)
ROM:2E02
ROM:2E05
ROM:2E05          loc_2E05:                               ; CODE XREF: sub_28CD+573↓j
ROM:2E05 D2 44 26                 jp      nc, loc_2644    ; Jump (conditional & unconditional)
ROM:2E05
ROM:2E08 18 F3                    jr      loc_2DFD        ; Jump relative (conditional & unconditional)
ROM:2E08
ROM:2E0A          ; ---------------------------------------------------------------------------
ROM:2E0A
ROM:2E0A          loc_2E0A:                               ; CODE XREF: sub_28CD+51D↑j
ROM:2E0A                                                  ; sub_28CD+533↑j
ROM:2E0A 22 6F 41                 ld      (word_416F), hl ; Move o1 <- o2
ROM:2E0D CD 7D 16                 call    set_4157_bit3   ; call (cond & uncond)
ROM:2E0D
ROM:2E10 18 3B                    jr      loc_2E4D        ; Jump relative (conditional & unconditional)
ROM:2E10
ROM:2E12          ; ---------------------------------------------------------------------------
ROM:2E12
ROM:2E12          loc_2E12:                               ; CODE XREF: sub_28CD+1F↑j
ROM:2E12 CD 98 17                 call    set_4157_b4_to_1 ; call (cond & uncond)
ROM:2E12
ROM:2E15 C8                       ret     z               ; Return (cond & uncond)
ROM:2E16 AF                       xor     a               ; Exclusive or with accumulator
ROM:2E17 32 2D 42                 ld      (byte_422D), a  ; Move o1 <- o2
ROM:2E17
ROM:2E1A
ROM:2E1A          loc_2E1A:                               ; CODE XREF: sub_28CD+560↓j
ROM:2E1A 3E 97                    ld      a, 97h          ; Move o1 <- o2
ROM:2E1C DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:2E1C                                                  ; A - if < 10h is 0000xxxx read mask
ROM:2E1C                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:2E1C                                                  ;         A[5:3] - bit index for...
ROM:2E1C                                                  ;         A[2:0] - bit index for...
ROM:2E1C                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:2E1C
ROM:2E1D C0                       ret     nz              ; Return (cond & uncond)
ROM:2E1E 3E 9C                    ld      a, 9Ch          ; Move o1 <- o2
ROM:2E20 DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:2E20                                                  ; A - if < 10h is 0000xxxx read mask
ROM:2E20                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:2E20                                                  ;         A[5:3] - bit index for...
ROM:2E20                                                  ;         A[2:0] - bit index for...
ROM:2E20                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:2E20
ROM:2E21 C2 AA 17                 jp      nz, sub_17AA    ; Jump (conditional & unconditional)
ROM:2E21
ROM:2E24 F7                       rst     30h             ; Restart at vector <int>
ROM:2E24
ROM:2E25 28 03                    jr      z, loc_2E2A     ; Jump relative (conditional & unconditional)
ROM:2E25
ROM:2E27 32 2D 42                 ld      (byte_422D), a  ; Move o1 <- o2
ROM:2E27
ROM:2E2A
ROM:2E2A          loc_2E2A:                               ; CODE XREF: sub_28CD+558↑j
ROM:2E2A 3E A5                    ld      a, 0A5h         ; Move o1 <- o2
ROM:2E2C DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:2E2C                                                  ; A - if < 10h is 0000xxxx read mask
ROM:2E2C                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:2E2C                                                  ;         A[5:3] - bit index for...
ROM:2E2C                                                  ;         A[2:0] - bit index for...
ROM:2E2C                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:2E2C
ROM:2E2D 20 EB                    jr      nz, loc_2E1A    ; Jump relative (conditional & unconditional)
ROM:2E2D
ROM:2E2F 3A 2D 42                 ld      a, (byte_422D)  ; Move o1 <- o2
ROM:2E32 2A 6D 41                 ld      hl, (word_416D) ; Move o1 <- o2
ROM:2E35 B7                       or      a               ; Or with accumulator
ROM:2E36 28 0C                    jr      z, loc_2E44     ; Jump relative (conditional & unconditional)
ROM:2E36
ROM:2E38
ROM:2E38          loc_2E38:                               ; CODE XREF: sub_28CD+575↓j
ROM:2E38 CD 56 2E                 call    sub_2E56        ; call (cond & uncond)
ROM:2E38
ROM:2E3B 28 07                    jr      z, loc_2E44     ; Jump relative (conditional & unconditional)
ROM:2E3B
ROM:2E3D CD F5 27                 call    sub_27F5        ; call (cond & uncond)
ROM:2E3D
ROM:2E40 30 C3                    jr      nc, loc_2E05    ; Jump relative (conditional & unconditional)
ROM:2E40
ROM:2E42 18 F4                    jr      loc_2E38        ; Jump relative (conditional & unconditional)
ROM:2E42
ROM:2E44          ; ---------------------------------------------------------------------------
ROM:2E44
ROM:2E44          loc_2E44:                               ; CODE XREF: sub_28CD+569↑j
ROM:2E44                                                  ; sub_28CD+56E↑j
ROM:2E44 CD F5 27                 call    sub_27F5        ; call (cond & uncond)
ROM:2E44
ROM:2E47 D2 AA 17                 jp      nc, sub_17AA    ; Jump (conditional & unconditional)
ROM:2E47
ROM:2E4A 22 6D 41                 ld      (word_416D), hl ; Move o1 <- o2
ROM:2E4A
ROM:2E4D
ROM:2E4D          loc_2E4D:                               ; CODE XREF: sub_28CD+543↑j
ROM:2E4D CD BE 28                 call    sub_28BE        ; call (cond & uncond)
ROM:2E4D
ROM:2E50 21 BD 40                 ld      hl, 40BDh       ; Move o1 <- o2
ROM:2E53 CB 96                    res     2, (hl)         ; Reset bit
ROM:2E55 C9                       ret                     ; Return (cond & uncond)
ROM:2E55
ROM:2E55          ; END OF FUNCTION CHUNK FOR sub_28CD
ROM:2E56
ROM:2E56          ; =============== S U B R O U T I N E =======================================
ROM:2E56
ROM:2E56
ROM:2E56          sub_2E56:                               ; CODE XREF: sub_28CD:loc_2DFD↑p
ROM:2E56                                                  ; sub_28CD:loc_2E38↑p ...
ROM:2E56 F5                       push    af              ; Push register pair onto stack
ROM:2E57 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:2E58 FE 0D                    cp      0Dh             ; Compare with accumulator
ROM:2E5A 16 08                    ld      d, 8            ; Move o1 <- o2
ROM:2E5C 28 01                    jr      z, loc_2E5F     ; Jump relative (conditional & unconditional)
ROM:2E5C
ROM:2E5E 57                       ld      d, a            ; Move o1 <- o2
ROM:2E5E
ROM:2E5F
ROM:2E5F          loc_2E5F:                               ; CODE XREF: sub_2E56+6↑j
ROM:2E5F F1                       pop     af              ; Pop register pair from stack
ROM:2E60 B7                       or      a               ; Or with accumulator
ROM:2E61 C8                       ret     z               ; Return (cond & uncond)
ROM:2E62 BA                       cp      d               ; Compare with accumulator
ROM:2E63 C9                       ret                     ; Return (cond & uncond)
ROM:2E63
ROM:2E63          ; End of function sub_2E56
ROM:2E63
ROM:2E64          ; ---------------------------------------------------------------------------
ROM:2E64 CD BA 1C                 call    sub_1CBA        ; call (cond & uncond)
ROM:2E64
ROM:2E67 CD 43 17                 call    sub_1743        ; call (cond & uncond)
ROM:2E67
ROM:2E6A C0                       ret     nz              ; Return (cond & uncond)
ROM:2E6B 21 A8 40                 ld      hl, 40A8h       ; Move o1 <- o2
ROM:2E6E 11 A9 41                 ld      de, 41A9h       ; Move o1 <- o2
ROM:2E71 01 18 00                 ld      bc, 18h         ; Move o1 <- o2
ROM:2E74 ED B0                    ldir                    ; Transfer data (DE)->(HL) until byte
ROM:2E74                                                  ; counter is zero, increment destination
ROM:2E74                                                  ; and source addresses
ROM:2E76 2A 7B 41                 ld      hl, (word_417B) ; Move o1 <- o2
ROM:2E79 E5                       push    hl              ; Push register pair onto stack
ROM:2E7A 2A C0 40                 ld      hl, (word_40C0) ; Move o1 <- o2
ROM:2E7D E5                       push    hl              ; Push register pair onto stack
ROM:2E7D
ROM:2E7E
ROM:2E7E          loc_2E7E:                               ; CODE XREF: ROM:2EAF↓j
ROM:2E7E                                                  ; ROM:2ECC↓j
ROM:2E7E CD 3D 0B                 call    sub_B3D         ; call (cond & uncond)
ROM:2E7E
ROM:2E81 CD 71 17                 call    sub_1771        ; call (cond & uncond)
ROM:2E81
ROM:2E84 21 56 41                 ld      hl, 4156h       ; Move o1 <- o2
ROM:2E87 CB E6                    set     4, (hl)         ; Set bit
ROM:2E89 CB EE                    set     5, (hl)         ; Set bit
ROM:2E89
ROM:2E8B
ROM:2E8B          loc_2E8B:                               ; CODE XREF: ROM:2E91↓j
ROM:2E8B 3E A4                    ld      a, 0A4h         ; Move o1 <- o2
ROM:2E8D DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:2E8D                                                  ; A - if < 10h is 0000xxxx read mask
ROM:2E8D                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:2E8D                                                  ;         A[5:3] - bit index for...
ROM:2E8D                                                  ;         A[2:0] - bit index for...
ROM:2E8D                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:2E8D
ROM:2E8E 28 03                    jr      z, loc_2E93     ; Jump relative (conditional & unconditional)
ROM:2E8E
ROM:2E90 F7                       rst     30h             ; Restart at vector <int>
ROM:2E90
ROM:2E91 28 F8                    jr      z, loc_2E8B     ; Jump relative (conditional & unconditional)
ROM:2E91
ROM:2E93
ROM:2E93          loc_2E93:                               ; CODE XREF: ROM:2E8E↑j
ROM:2E93                                                  ; ROM:2EA2↓j
ROM:2E93 F5                       push    af              ; Push register pair onto stack
ROM:2E94 CD FD 2F                 call    sub_2FFD        ; call (cond & uncond)
ROM:2E94
ROM:2E97 C1                       pop     bc              ; Pop register pair from stack
ROM:2E98 B7                       or      a               ; Or with accumulator
ROM:2E99 28 38                    jr      z, loc_2ED3     ; Jump relative (conditional & unconditional)
ROM:2E99
ROM:2E9B 78                       ld      a, b            ; Move o1 <- o2
ROM:2E9C 2A 61 41                 ld      hl, (word_4161) ; Move o1 <- o2
ROM:2E9F CD 56 2E                 call    sub_2E56        ; call (cond & uncond)
ROM:2E9F
ROM:2EA2 20 EF                    jr      nz, loc_2E93    ; Jump relative (conditional & unconditional)
ROM:2EA2
ROM:2EA4 CD 0F 2F                 call    loc_2F0F        ; call (cond & uncond)
ROM:2EA4
ROM:2EA7
ROM:2EA7          loc_2EA7:                               ; CODE XREF: ROM:2EBB↓j
ROM:2EA7                                                  ; ROM:2EC3↓j
ROM:2EA7 CD BC 10                 call    sub_10BC        ; call (cond & uncond)
ROM:2EA7
ROM:2EAA
ROM:2EAA          loc_2EAA:                               ; CODE XREF: ROM:2EC5↓j
ROM:2EAA                                                  ; ROM:2EC8↓j ...
ROM:2EAA EF                       rst     28h             ; Restart at vector <int>
ROM:2EAA
ROM:2EAB 28 1A                    jr      z, loc_2EC7     ; Jump relative (conditional & unconditional)
ROM:2EAB
ROM:2EAD FE A4                    cp      0A4h            ; Compare with accumulator
ROM:2EAF 28 CD                    jr      z, loc_2E7E     ; Jump relative (conditional & unconditional)
ROM:2EAF
ROM:2EB1 FE 84                    cp      84h             ; Compare with accumulator
ROM:2EB3 28 1E                    jr      z, loc_2ED3     ; Jump relative (conditional & unconditional)
ROM:2EB3
ROM:2EB5 FE 9B                    cp      9Bh             ; Compare with accumulator
ROM:2EB7 28 1A                    jr      z, loc_2ED3     ; Jump relative (conditional & unconditional)
ROM:2EB7
ROM:2EB9 FE 81                    cp      81h             ; Compare with accumulator
ROM:2EBB 20 EA                    jr      nz, loc_2EA7    ; Jump relative (conditional & unconditional)
ROM:2EBB
ROM:2EBD CD FD 2F                 call    sub_2FFD        ; call (cond & uncond)
ROM:2EBD
ROM:2EC0 CD 66 30                 call    sub_3066        ; call (cond & uncond)
ROM:2EC0
ROM:2EC3 38 E2                    jr      c, loc_2EA7     ; Jump relative (conditional & unconditional)
ROM:2EC3
ROM:2EC5 18 E3                    jr      loc_2EAA        ; Jump relative (conditional & unconditional)
ROM:2EC5
ROM:2EC7          ; ---------------------------------------------------------------------------
ROM:2EC7
ROM:2EC7          loc_2EC7:                               ; CODE XREF: ROM:2EAB↑j
ROM:2EC7 F7                       rst     30h             ; Restart at vector <int>
ROM:2EC7
ROM:2EC8 28 E0                    jr      z, loc_2EAA     ; Jump relative (conditional & unconditional)
ROM:2EC8
ROM:2ECA FE 0E                    cp      0Eh             ; Compare with accumulator
ROM:2ECC 28 B0                    jr      z, loc_2E7E     ; Jump relative (conditional & unconditional)
ROM:2ECC
ROM:2ECE CD 33 2F                 call    sub_2F33        ; call (cond & uncond)
ROM:2ECE
ROM:2ED1 18 D7                    jr      loc_2EAA        ; Jump relative (conditional & unconditional)
ROM:2ED1
ROM:2ED3          ; ---------------------------------------------------------------------------
ROM:2ED3
ROM:2ED3          loc_2ED3:                               ; CODE XREF: ROM:2E99↑j
ROM:2ED3                                                  ; ROM:2EB3↑j ...
ROM:2ED3 E1                       pop     hl              ; Pop register pair from stack
ROM:2ED4 22 C0 40                 ld      (word_40C0), hl ; Move o1 <- o2
ROM:2ED7 E1                       pop     hl              ; Pop register pair from stack
ROM:2ED8 22 7B 41                 ld      (word_417B), hl ; Move o1 <- o2
ROM:2ED8
ROM:2EDB
ROM:2EDB          ; =============== S U B R O U T I N E =======================================
ROM:2EDB
ROM:2EDB
ROM:2EDB          sub_2EDB:                               ; CODE XREF: Setup_all+6F↑p
ROM:2EDB
ROM:2EDB          ; FUNCTION CHUNK AT ROM:0B4F SIZE 0000000E BYTES
ROM:2EDB          ; FUNCTION CHUNK AT ROM:24A3 SIZE 00000027 BYTES
ROM:2EDB
ROM:2EDB 2A AA 40                 ld      hl, (word_40AA) ; Move o1 <- o2
ROM:2EDE ED 5B AB                 ld      de, (word_41AB) ; Move o1 <- o2
ROM:2EDE 41
ROM:2EE2 CD FA 30                 call    sub_30FA        ; call (cond & uncond)
ROM:2EE2
ROM:2EE5 2A A8 40                 ld      hl, (word_40A8) ; Move o1 <- o2
ROM:2EE8 ED 5B A9                 ld      de, (word_41A9) ; Move o1 <- o2
ROM:2EE8 41
ROM:2EEC CD EF 30                 call    sub_30EF        ; call (cond & uncond)
ROM:2EEC
ROM:2EEF 21 AD 41                 ld      hl, 41ADh       ; Move o1 <- o2
ROM:2EF2 11 91 41                 ld      de, 4191h       ; Move o1 <- o2
ROM:2EF5 01 10 00                 ld      bc, 10h         ; Move o1 <- o2
ROM:2EF8 ED B0                    ldir                    ; Transfer data (DE)->(HL) until byte
ROM:2EF8                                                  ; counter is zero, increment destination
ROM:2EF8                                                  ; and source addresses
ROM:2EFA 11 BC 40                 ld      de, 40BCh       ; Move o1 <- o2
ROM:2EFD 0E 04                    ld      c, 4            ; Move o1 <- o2
ROM:2EFF ED B0                    ldir                    ; Transfer data (DE)->(HL) until byte
ROM:2EFF                                                  ; counter is zero, increment destination
ROM:2EFF                                                  ; and source addresses
ROM:2F01 2A 67 41                 ld      hl, (word_4167) ; Move o1 <- o2
ROM:2F04 CD 2A 28                 call    sub_282A        ; call (cond & uncond)
ROM:2F04
ROM:2F07 CD 75 17                 call    sub_1775        ; call (cond & uncond)
ROM:2F07
ROM:2F0A 21 56 41                 ld      hl, 4156h       ; Move o1 <- o2
ROM:2F0D CB AE                    res     5, (hl)         ; Reset bit
ROM:2F0D
ROM:2F0F
ROM:2F0F          loc_2F0F:                               ; CODE XREF: ROM:2EA4↑p
ROM:2F0F 21 56 41                 ld      hl, 4156h       ; Move o1 <- o2
ROM:2F12 CB A6                    res     4, (hl)         ; Reset bit
ROM:2F14 3E 9B                    ld      a, 9Bh          ; Move o1 <- o2
ROM:2F16 DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:2F16                                                  ; A - if < 10h is 0000xxxx read mask
ROM:2F16                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:2F16                                                  ;         A[5:3] - bit index for...
ROM:2F16                                                  ;         A[2:0] - bit index for...
ROM:2F16                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:2F16
ROM:2F17 C2 A3 24                 jp      nz, loc_24A3    ; Jump (conditional & unconditional)
ROM:2F17
ROM:2F1A C3 4F 0B                 jp      loc_B4F         ; Jump (conditional & unconditional)
ROM:2F1A
ROM:2F1A          ; End of function sub_2EDB
ROM:2F1A
ROM:2F1D
ROM:2F1D          ; =============== S U B R O U T I N E =======================================
ROM:2F1D
ROM:2F1D
ROM:2F1D          sub_2F1D:                               ; CODE XREF: sub_2188+1E2↑p
ROM:2F1D                                                  ; sub_2F1D+B↓j
ROM:2F1D
ROM:2F1D          ; FUNCTION CHUNK AT ROM:1BE5 SIZE 00000017 BYTES
ROM:2F1D
ROM:2F1D CD FD 2F                 call    sub_2FFD        ; call (cond & uncond)
ROM:2F1D
ROM:2F20 CD 66 30                 call    sub_3066        ; call (cond & uncond)
ROM:2F20
ROM:2F23 38 05                    jr      c, loc_2F2A     ; Jump relative (conditional & unconditional)
ROM:2F23
ROM:2F25 3E 81                    ld      a, 81h          ; Move o1 <- o2
ROM:2F27 DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:2F27                                                  ; A - if < 10h is 0000xxxx read mask
ROM:2F27                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:2F27                                                  ;         A[5:3] - bit index for...
ROM:2F27                                                  ;         A[2:0] - bit index for...
ROM:2F27                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:2F27
ROM:2F28 20 F3                    jr      nz, sub_2F1D    ; Jump relative (conditional & unconditional)
ROM:2F28
ROM:2F2A
ROM:2F2A          loc_2F2A:                               ; CODE XREF: sub_2F1D+6↑j
ROM:2F2A 2A 61 41                 ld      hl, (word_4161) ; Move o1 <- o2
ROM:2F2D CD 2D 28                 call    sub_282D        ; call (cond & uncond)
ROM:2F2D
ROM:2F30 C3 E5 1B                 jp      loc_1BE5        ; Jump (conditional & unconditional)
ROM:2F30
ROM:2F30          ; End of function sub_2F1D
ROM:2F30
ROM:2F33
ROM:2F33          ; =============== S U B R O U T I N E =======================================
ROM:2F33
ROM:2F33
ROM:2F33          sub_2F33:                               ; CODE XREF: ROM:2ECE↑p
ROM:2F33
ROM:2F33          ; FUNCTION CHUNK AT ROM:2FB4 SIZE 0000000C BYTES
ROM:2F33          ; FUNCTION CHUNK AT ROM:2FD7 SIZE 00000008 BYTES
ROM:2F33
ROM:2F33 CD 0C 27                 call    sub_270C        ; call (cond & uncond)
ROM:2F33
ROM:2F36 C8                       ret     z               ; Return (cond & uncond)
ROM:2F37 CD 6D 30                 call    sub_306D        ; call (cond & uncond)
ROM:2F37
ROM:2F3A D8                       ret     c               ; Return (cond & uncond)
ROM:2F3B 47                       ld      b, a            ; Move o1 <- o2
ROM:2F3C 2A 67 41                 ld      hl, (word_4167) ; Move o1 <- o2
ROM:2F3F ED 5B 61                 ld      de, (word_4161) ; Move o1 <- o2
ROM:2F3F 41
ROM:2F43 B7                       or      a               ; Or with accumulator
ROM:2F44 ED 52                    sbc     hl, de          ; Subtract from A with borrow
ROM:2F46 C8                       ret     z               ; Return (cond & uncond)
ROM:2F47 EB                       ex      de, hl          ; Exchange operands
ROM:2F48 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:2F49 FE 0F                    cp      0Fh             ; Compare with accumulator
ROM:2F4B 38 09                    jr      c, loc_2F56     ; Jump relative (conditional & unconditional)
ROM:2F4B
ROM:2F4D FE 80                    cp      80h             ; Compare with accumulator
ROM:2F4F D0                       ret     nc              ; Return (cond & uncond)
ROM:2F50 CD 6D 30                 call    sub_306D        ; call (cond & uncond)
ROM:2F50
ROM:2F53 D8                       ret     c               ; Return (cond & uncond)
ROM:2F54 18 47                    jr      loc_2F9D        ; Jump relative (conditional & unconditional)
ROM:2F54
ROM:2F56          ; ---------------------------------------------------------------------------
ROM:2F56
ROM:2F56          loc_2F56:                               ; CODE XREF: sub_2F33+18↑j
ROM:2F56 FE 08                    cp      8               ; Compare with accumulator
ROM:2F58 28 04                    jr      z, loc_2F5E     ; Jump relative (conditional & unconditional)
ROM:2F58
ROM:2F5A FE 0D                    cp      0Dh             ; Compare with accumulator
ROM:2F5C 20 0E                    jr      nz, loc_2F6C    ; Jump relative (conditional & unconditional)
ROM:2F5C
ROM:2F5E
ROM:2F5E          loc_2F5E:                               ; CODE XREF: sub_2F33+25↑j
ROM:2F5E C5                       push    bc              ; Push register pair onto stack
ROM:2F5F CD AD 1C                 call    sub_1CAD        ; call (cond & uncond)
ROM:2F5F
ROM:2F62 C1                       pop     bc              ; Pop register pair from stack
ROM:2F62
ROM:2F63
ROM:2F63          loc_2F63:                               ; CODE XREF: sub_2F33+44↓j
ROM:2F63 DA 8D 27                 jp      c, sub_278D     ; Jump (conditional & unconditional)
ROM:2F63
ROM:2F66 CD 22 31                 call    sub_3122        ; call (cond & uncond)
ROM:2F66
ROM:2F69 19                       add     hl, de          ; Add <reg> to A
ROM:2F6A 18 0D                    jr      loc_2F79        ; Jump relative (conditional & unconditional)
ROM:2F6A
ROM:2F6C          ; ---------------------------------------------------------------------------
ROM:2F6C
ROM:2F6C          loc_2F6C:                               ; CODE XREF: sub_2F33+29↑j
ROM:2F6C FE 0B                    cp      0Bh             ; Compare with accumulator
ROM:2F6E 30 03                    jr      nc, loc_2F73    ; Jump relative (conditional & unconditional)
ROM:2F6E
ROM:2F70 FE 06                    cp      6               ; Compare with accumulator
ROM:2F72 C0                       ret     nz              ; Return (cond & uncond)
ROM:2F72
ROM:2F73
ROM:2F73          loc_2F73:                               ; CODE XREF: sub_2F33+3B↑j
ROM:2F73 CD 22 31                 call    sub_3122        ; call (cond & uncond)
ROM:2F73
ROM:2F76 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:2F76
ROM:2F77 38 EA                    jr      c, loc_2F63     ; Jump relative (conditional & unconditional)
ROM:2F77
ROM:2F79
ROM:2F79          loc_2F79:                               ; CODE XREF: sub_2F33+37↑j
ROM:2F79 EB                       ex      de, hl          ; Exchange operands
ROM:2F7A 2A 61 41                 ld      hl, (word_4161) ; Move o1 <- o2
ROM:2F7D CD 47 28                 call    sub_2847        ; call (cond & uncond)
ROM:2F7D
ROM:2F80
ROM:2F80          loc_2F80:                               ; CODE XREF: sub_2F33+A6↓j
ROM:2F80 2A 67 41                 ld      hl, (word_4167) ; Move o1 <- o2
ROM:2F83 ED 5B 61                 ld      de, (word_4161) ; Move o1 <- o2
ROM:2F83 41
ROM:2F87 E5                       push    hl              ; Push register pair onto stack
ROM:2F88 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:2F88
ROM:2F89 44                       ld      b, h            ; Move o1 <- o2
ROM:2F8A 4D                       ld      c, l            ; Move o1 <- o2
ROM:2F8B E1                       pop     hl              ; Pop register pair from stack
ROM:2F8C 23                       inc     hl              ; Increment operand
ROM:2F8D 22 67 41                 ld      (word_4167), hl ; Move o1 <- o2
ROM:2F90 2B                       dec     hl              ; Decrement operand
ROM:2F91 54                       ld      d, h            ; Move o1 <- o2
ROM:2F92 5D                       ld      e, l            ; Move o1 <- o2
ROM:2F93 2B                       dec     hl              ; Decrement operand
ROM:2F94 ED B8                    lddr                    ; Transfer data (DE)->(HL) until byte
ROM:2F94                                                  ; counter is zero, decrement destintation
ROM:2F94                                                  ; and source addresses
ROM:2F96 EB                       ex      de, hl          ; Exchange operands
ROM:2F97 77                       ld      (hl), a         ; Move o1 <- o2
ROM:2F98 CD 20 1D                 call    sub_1D20        ; call (cond & uncond)
ROM:2F98
ROM:2F9B 18 63                    jr      loc_3000        ; Jump relative (conditional & unconditional)
ROM:2F9B
ROM:2F9D          ; ---------------------------------------------------------------------------
ROM:2F9D
ROM:2F9D          loc_2F9D:                               ; CODE XREF: sub_2F33+21↑j
ROM:2F9D C5                       push    bc              ; Push register pair onto stack
ROM:2F9E CD 2E 13                 call    sub_132E        ; call (cond & uncond)
ROM:2F9E
ROM:2FA1 C1                       pop     bc              ; Pop register pair from stack
ROM:2FA2 78                       ld      a, b            ; Move o1 <- o2
ROM:2FA3 E5                       push    hl              ; Push register pair onto stack
ROM:2FA4 C5                       push    bc              ; Push register pair onto stack
ROM:2FA5 CD 2E 13                 call    sub_132E        ; call (cond & uncond)
ROM:2FA5
ROM:2FA8 EB                       ex      de, hl          ; Exchange operands
ROM:2FA9 C1                       pop     bc              ; Pop register pair from stack
ROM:2FAA E1                       pop     hl              ; Pop register pair from stack
ROM:2FAB B9                       cp      c               ; Compare with accumulator
ROM:2FAC 20 06                    jr      nz, loc_2FB4    ; Jump relative (conditional & unconditional)
ROM:2FAC
ROM:2FAC          ; End of function sub_2F33
ROM:2FAC
ROM:2FAE
ROM:2FAE          ; =============== S U B R O U T I N E =======================================
ROM:2FAE
ROM:2FAE
ROM:2FAE          sub_2FAE:                               ; CODE XREF: sub_2FDF+19↓p
ROM:2FAE CD 19 0B                 call    sub_B19         ; call (cond & uncond)
ROM:2FAE
ROM:2FB1 C3 23 1D                 jp      loc_1D23        ; Jump (conditional & unconditional)
ROM:2FB1
ROM:2FB1          ; End of function sub_2FAE
ROM:2FB1
ROM:2FB4          ; ---------------------------------------------------------------------------
ROM:2FB4          ; START OF FUNCTION CHUNK FOR sub_2F33
ROM:2FB4
ROM:2FB4          loc_2FB4:                               ; CODE XREF: sub_2F33+79↑j
ROM:2FB4 2C                       inc     l               ; Increment operand
ROM:2FB5 2D                       dec     l               ; Decrement operand
ROM:2FB6 20 1F                    jr      nz, loc_2FD7    ; Jump relative (conditional & unconditional)
ROM:2FB6
ROM:2FB8 1C                       inc     e               ; Increment operand
ROM:2FB9 1D                       dec     e               ; Decrement operand
ROM:2FBA 28 1F                    jr      z, loc_2FDB     ; Jump relative (conditional & unconditional)
ROM:2FBA
ROM:2FBC FE 0F                    cp      0Fh             ; Compare with accumulator
ROM:2FBE C0                       ret     nz              ; Return (cond & uncond)
ROM:2FBF 79                       ld      a, c            ; Move o1 <- o2
ROM:2FBF
ROM:2FBF          ; END OF FUNCTION CHUNK FOR sub_2F33
ROM:2FC0          ; START OF FUNCTION CHUNK FOR sub_307B
ROM:2FC0
ROM:2FC0          loc_2FC0:                               ; CODE XREF: sub_307B+1E↓j
ROM:2FC0 2A 67 41                 ld      hl, (word_4167) ; Move o1 <- o2
ROM:2FC3 ED 5B 61                 ld      de, (word_4161) ; Move o1 <- o2
ROM:2FC3 41
ROM:2FC7 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:2FC7
ROM:2FC8 44                       ld      b, h            ; Move o1 <- o2
ROM:2FC9 4D                       ld      c, l            ; Move o1 <- o2
ROM:2FCA 62                       ld      h, d            ; Move o1 <- o2
ROM:2FCB 6B                       ld      l, e            ; Move o1 <- o2
ROM:2FCC 23                       inc     hl              ; Increment operand
ROM:2FCD ED B0                    ldir                    ; Transfer data (DE)->(HL) until byte
ROM:2FCD                                                  ; counter is zero, increment destination
ROM:2FCD                                                  ; and source addresses
ROM:2FCF 1B                       dec     de              ; Decrement operand
ROM:2FD0 ED 53 67                 ld      (word_4167), de ; Move o1 <- o2
ROM:2FD0 41
ROM:2FD4 C3 FF 30                 jp      sub_30FF        ; Jump (conditional & unconditional)
ROM:2FD4
ROM:2FD4          ; END OF FUNCTION CHUNK FOR sub_307B
ROM:2FD7          ; ---------------------------------------------------------------------------
ROM:2FD7          ; START OF FUNCTION CHUNK FOR sub_2F33
ROM:2FD7
ROM:2FD7          loc_2FD7:                               ; CODE XREF: sub_2F33+83↑j
ROM:2FD7 1C                       inc     e               ; Increment operand
ROM:2FD8 1D                       dec     e               ; Decrement operand
ROM:2FD9 28 A5                    jr      z, loc_2F80     ; Jump relative (conditional & unconditional)
ROM:2FD9
ROM:2FDB
ROM:2FDB          loc_2FDB:                               ; CODE XREF: sub_2F33+87↑j
ROM:2FDB E5                       push    hl              ; Push register pair onto stack
ROM:2FDC D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:2FDC
ROM:2FDD EB                       ex      de, hl          ; Exchange operands
ROM:2FDE E1                       pop     hl              ; Pop register pair from stack
ROM:2FDE          ; END OF FUNCTION CHUNK FOR sub_2F33
ROM:2FDF
ROM:2FDF          ; =============== S U B R O U T I N E =======================================
ROM:2FDF
ROM:2FDF
ROM:2FDF          sub_2FDF:
ROM:2FDF D5                       push    de              ; Push register pair onto stack
ROM:2FE0 F5                       push    af              ; Push register pair onto stack
ROM:2FE1 E5                       push    hl              ; Push register pair onto stack
ROM:2FE2 2A 61 41                 ld      hl, (word_4161) ; Move o1 <- o2
ROM:2FE5 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:2FE6 70                       ld      (hl), b         ; Move o1 <- o2
ROM:2FE7 21 71 40                 ld      hl, 4071h       ; Move o1 <- o2
ROM:2FEA CB CE                    set     1, (hl)         ; Set bit
ROM:2FEC CD 09 31                 call    loc_3109        ; call (cond & uncond)
ROM:2FEC
ROM:2FEF E1                       pop     hl              ; Pop register pair from stack
ROM:2FF0 CD EC 30                 call    sub_30EC        ; call (cond & uncond)
ROM:2FF0
ROM:2FF3 F1                       pop     af              ; Pop register pair from stack
ROM:2FF4 CD 09 31                 call    loc_3109        ; call (cond & uncond)
ROM:2FF4
ROM:2FF7 E1                       pop     hl              ; Pop register pair from stack
ROM:2FF8 CD AE 2F                 call    sub_2FAE        ; call (cond & uncond)
ROM:2FF8
ROM:2FFB 18 03                    jr      loc_3000        ; Jump relative (conditional & unconditional)
ROM:2FFB
ROM:2FFB          ; End of function sub_2FDF
ROM:2FFB
ROM:2FFD
ROM:2FFD          ; =============== S U B R O U T I N E =======================================
ROM:2FFD
ROM:2FFD
ROM:2FFD          sub_2FFD:                               ; CODE XREF: sub_2905:loc_2967↑p
ROM:2FFD                                                  ; ROM:2E94↑p ...
ROM:2FFD CD 0A 30                 call    sub_300A        ; call (cond & uncond)
ROM:2FFD
ROM:3000
ROM:3000          loc_3000:                               ; CODE XREF: sub_2F33+68↑j
ROM:3000                                                  ; sub_2FDF+1C↑j ...
ROM:3000 CD 06 14                 call    sub_1406        ; call (cond & uncond)
ROM:3000
ROM:3003 22 7B 41                 ld      (word_417B), hl ; Move o1 <- o2
ROM:3006 3A 2D 42                 ld      a, (byte_422D)  ; Move o1 <- o2
ROM:3009 C9                       ret                     ; Return (cond & uncond)
ROM:3009
ROM:3009          ; End of function sub_2FFD
ROM:3009
ROM:300A
ROM:300A          ; =============== S U B R O U T I N E =======================================
ROM:300A
ROM:300A
ROM:300A          sub_300A:                               ; CODE XREF: sub_2FFD↑p
ROM:300A
ROM:300A          ; FUNCTION CHUNK AT ROM:2644 SIZE 00000004 BYTES
ROM:300A
ROM:300A AF                       xor     a               ; Exclusive or with accumulator
ROM:300B 2A 5D 41                 ld      hl, (word_415D) ; Move o1 <- o2
ROM:300E ED 5B 61                 ld      de, (word_4161) ; Move o1 <- o2
ROM:300E 41
ROM:3012 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:3012
ROM:3013 3F                       ccf                     ; Complement carry flag
ROM:3014 EB                       ex      de, hl          ; Exchange operands
ROM:3015 D4 0E 28                 call    nc, sub_280E    ; call (cond & uncond)
ROM:3015
ROM:3018 32 2D 42                 ld      (byte_422D), a  ; Move o1 <- o2
ROM:301B DA 44 26                 jp      c, loc_2644     ; Jump (conditional & unconditional)
ROM:301B
ROM:301E 22 61 41                 ld      (word_4161), hl ; Move o1 <- o2
ROM:3021 22 63 41                 ld      (word_4163), hl ; Move o1 <- o2
ROM:3024 FE 18                    cp      18h             ; Compare with accumulator
ROM:3026 38 53                    jr      c, sub_307B     ; Jump relative (conditional & unconditional)
ROM:3026
ROM:3028 FE 1C                    cp      1Ch             ; Compare with accumulator
ROM:302A 30 4F                    jr      nc, sub_307B    ; Jump relative (conditional & unconditional)
ROM:302A
ROM:302C CD 6D 30                 call    sub_306D        ; call (cond & uncond)
ROM:302C
ROM:302F 21 56 41                 ld      hl, 4156h       ; Move o1 <- o2
ROM:3032 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:3033 CB 6F                    bit     5, a            ; Test <bit> in operand
ROM:3035 F5                       push    af              ; Push register pair onto stack
ROM:3036 30 04                    jr      nc, loc_303C    ; Jump relative (conditional & unconditional)
ROM:3036
ROM:3038 28 02                    jr      z, loc_303C     ; Jump relative (conditional & unconditional)
ROM:3038
ROM:303A CB E6                    set     4, (hl)         ; Set bit
ROM:303A
ROM:303C
ROM:303C          loc_303C:                               ; CODE XREF: sub_300A+2C↑j
ROM:303C                                                  ; sub_300A+2E↑j
ROM:303C 3A 2D 42                 ld      a, (byte_422D)  ; Move o1 <- o2
ROM:303F CD 81 0C                 call    sub_C81         ; call (cond & uncond)
ROM:303F
ROM:3042 06 00                    ld      b, 0            ; Move o1 <- o2
ROM:3042
ROM:3044
ROM:3044          loc_3044:                               ; CODE XREF: sub_300A+3F↓j
ROM:3044 04                       inc     b               ; Increment operand
ROM:3045 23                       inc     hl              ; Increment operand
ROM:3046 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:3047 FE FF                    cp      0FFh            ; Compare with accumulator
ROM:3049 20 F9                    jr      nz, loc_3044    ; Jump relative (conditional & unconditional)
ROM:3049
ROM:304B
ROM:304B          loc_304B:                               ; CODE XREF: sub_300A+4A↓j
ROM:304B 2B                       dec     hl              ; Decrement operand
ROM:304C E5                       push    hl              ; Push register pair onto stack
ROM:304D C5                       push    bc              ; Push register pair onto stack
ROM:304E 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:304F CD 7B 30                 call    sub_307B        ; call (cond & uncond)
ROM:304F
ROM:3052 C1                       pop     bc              ; Pop register pair from stack
ROM:3053 E1                       pop     hl              ; Pop register pair from stack
ROM:3054 10 F5                    djnz    loc_304B        ; Decrement reg B and jump relative if zero
ROM:3054
ROM:3056 F1                       pop     af              ; Pop register pair from stack
ROM:3057 32 56 41                 ld      (SomeBitMask), a ; Move o1 <- o2
ROM:305A 28 04                    jr      z, loc_3060     ; Jump relative (conditional & unconditional)
ROM:305A
ROM:305C CB 67                    bit     4, a            ; Test <bit> in operand
ROM:305E C0                       ret     nz              ; Return (cond & uncond)
ROM:305F D8                       ret     c               ; Return (cond & uncond)
ROM:305F
ROM:3060
ROM:3060          loc_3060:                               ; CODE XREF: sub_300A+50↑j
ROM:3060 2A 61 41                 ld      hl, (word_4161) ; Move o1 <- o2
ROM:3063 36 0F                    ld      (hl), 0Fh       ; Move o1 <- o2
ROM:3065 C9                       ret                     ; Return (cond & uncond)
ROM:3065
ROM:3065          ; End of function sub_300A
ROM:3065
ROM:3066
ROM:3066          ; =============== S U B R O U T I N E =======================================
ROM:3066
ROM:3066
ROM:3066          sub_3066:                               ; CODE XREF: ROM:2EC0↑p
ROM:3066                                                  ; sub_2F1D+3↑p
ROM:3066 FE 10                    cp      10h             ; Compare with accumulator
ROM:3068 D8                       ret     c               ; Return (cond & uncond)
ROM:3069 FE 80                    cp      80h             ; Compare with accumulator
ROM:306B 3F                       ccf                     ; Complement carry flag
ROM:306C D8                       ret     c               ; Return (cond & uncond)
ROM:306C
ROM:306C          ; End of function sub_3066
ROM:306C
ROM:306D
ROM:306D          ; =============== S U B R O U T I N E =======================================
ROM:306D
ROM:306D
ROM:306D          sub_306D:                               ; CODE XREF: sub_2F33+4↑p
ROM:306D                                                  ; sub_2F33+1D↑p ...
ROM:306D 4F                       ld      c, a            ; Move o1 <- o2
ROM:306E FE 18                    cp      18h             ; Compare with accumulator
ROM:3070 3F                       ccf                     ; Complement carry flag
ROM:3071 D0                       ret     nc              ; Return (cond & uncond)
ROM:3072 FE 1C                    cp      1Ch             ; Compare with accumulator
ROM:3074 D0                       ret     nc              ; Return (cond & uncond)
ROM:3075 CD A8 0C                 call    sub_CA8         ; call (cond & uncond)
ROM:3075
ROM:3078 07                       rlca                    ; Rotate left accumulator
ROM:3079 79                       ld      a, c            ; Move o1 <- o2
ROM:307A C9                       ret                     ; Return (cond & uncond)
ROM:307A
ROM:307A          ; End of function sub_306D
ROM:307A
ROM:307B
ROM:307B          ; =============== S U B R O U T I N E =======================================
ROM:307B
ROM:307B
ROM:307B          sub_307B:                               ; CODE XREF: sub_300A+1C↑j
ROM:307B                                                  ; sub_300A+20↑j ...
ROM:307B
ROM:307B          ; FUNCTION CHUNK AT ROM:2FC0 SIZE 00000017 BYTES
ROM:307B
ROM:307B FE 0F                    cp      0Fh             ; Compare with accumulator
ROM:307D 38 23                    jr      c, loc_30A2     ; Jump relative (conditional & unconditional)
ROM:307D
ROM:307F FE 80                    cp      80h             ; Compare with accumulator
ROM:3081 30 1F                    jr      nc, loc_30A2    ; Jump relative (conditional & unconditional)
ROM:3081
ROM:3083 CD 2E 13                 call    sub_132E        ; call (cond & uncond)
ROM:3083
ROM:3086 E5                       push    hl              ; Push register pair onto stack
ROM:3087 CD 89 16                 call    test_4156_bit4  ; call (cond & uncond)
ROM:3087
ROM:308A E1                       pop     hl              ; Pop register pair from stack
ROM:308B 20 5F                    jr      nz, sub_30EC    ; Jump relative (conditional & unconditional)
ROM:308B
ROM:308D EB                       ex      de, hl          ; Exchange operands
ROM:308E 2A 61 41                 ld      hl, (word_4161) ; Move o1 <- o2
ROM:3091 BE                       cp      (hl)            ; Compare with accumulator
ROM:3092 20 08                    jr      nz, loc_309C    ; Jump relative (conditional & unconditional)
ROM:3092
ROM:3094 7A                       ld      a, d            ; Move o1 <- o2
ROM:3095 B3                       or      e               ; Or with accumulator
ROM:3096 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:3097 36 0F                    ld      (hl), 0Fh       ; Move o1 <- o2
ROM:3099 CA C0 2F                 jp      z, loc_2FC0     ; Jump (conditional & unconditional)
ROM:3099
ROM:309C
ROM:309C          loc_309C:                               ; CODE XREF: sub_307B+17↑j
ROM:309C CD FF 30                 call    sub_30FF        ; call (cond & uncond)
ROM:309C
ROM:309F C3 00 30                 jp      loc_3000        ; Jump (conditional & unconditional)
ROM:309F
ROM:30A2          ; ---------------------------------------------------------------------------
ROM:30A2
ROM:30A2          loc_30A2:                               ; CODE XREF: sub_307B+2↑j
ROM:30A2                                                  ; sub_307B+6↑j
ROM:30A2 21 E9 15                 ld      hl, 15E9h       ; Move o1 <- o2
ROM:30A5 CD 13 27                 call    sub_2713        ; call (cond & uncond)
ROM:30A5
ROM:30A8 C0                       ret     nz              ; Return (cond & uncond)
ROM:30A9 E9                       jp      (hl)            ; Jump (conditional & unconditional)
ROM:30A9
ROM:30A9          ; End of function sub_307B
ROM:30A9
ROM:30AA          ; ---------------------------------------------------------------------------
ROM:30AA EE 03                    xor     3               ; Exclusive or with accumulator
ROM:30AC 18 5B                    jr      loc_3109        ; Jump relative (conditional & unconditional)
ROM:30AC
ROM:30AE          ; ---------------------------------------------------------------------------
ROM:30AE CD F2 13                 call    sub_13F2        ; call (cond & uncond)
ROM:30AE
ROM:30B1 CD F7 30                 call    sub_30F7        ; call (cond & uncond)
ROM:30B1
ROM:30B4 CD 1A 31                 call    sub_311A        ; call (cond & uncond)
ROM:30B4
ROM:30B7 EB                       ex      de, hl          ; Exchange operands
ROM:30B8 2A 7B 41                 ld      hl, (word_417B) ; Move o1 <- o2
ROM:30BB 22 C0 40                 ld      (word_40C0), hl ; Move o1 <- o2
ROM:30BE 18 2F                    jr      sub_30EF        ; Jump relative (conditional & unconditional)
ROM:30BE
ROM:30C0          ; ---------------------------------------------------------------------------
ROM:30C0 3E 10                    ld      a, 10h          ; Move o1 <- o2
ROM:30C2 18 0A                    jr      loc_30CE        ; Jump relative (conditional & unconditional)
ROM:30C2
ROM:30C4          ; ---------------------------------------------------------------------------
ROM:30C4 3E 80                    ld      a, 80h          ; Move o1 <- o2
ROM:30C6 18 06                    jr      loc_30CE        ; Jump relative (conditional & unconditional)
ROM:30C6
ROM:30C8          ; ---------------------------------------------------------------------------
ROM:30C8 3E 40                    ld      a, 40h ; '@'    ; Move o1 <- o2
ROM:30CA 18 02                    jr      loc_30CE        ; Jump relative (conditional & unconditional)
ROM:30CA
ROM:30CC          ; ---------------------------------------------------------------------------
ROM:30CC 3E 20                    ld      a, 20h ; ' '    ; Move o1 <- o2
ROM:30CC
ROM:30CE
ROM:30CE          loc_30CE:                               ; CODE XREF: ROM:30C2↑j
ROM:30CE                                                  ; ROM:30C6↑j ...
ROM:30CE 32 BE 40                 ld      (byte_40BE), a  ; Move o1 <- o2
ROM:30D1 C9                       ret                     ; Return (cond & uncond)
ROM:30D1
ROM:30D2          ; ---------------------------------------------------------------------------
ROM:30D2 3E 04                    ld      a, 4            ; Move o1 <- o2
ROM:30D4 18 0A                    jr      loc_30E0        ; Jump relative (conditional & unconditional)
ROM:30D4
ROM:30D6          ; ---------------------------------------------------------------------------
ROM:30D6 3E 01                    ld      a, 1            ; Move o1 <- o2
ROM:30D8 18 06                    jr      loc_30E0        ; Jump relative (conditional & unconditional)
ROM:30D8
ROM:30DA          ; ---------------------------------------------------------------------------
ROM:30DA 3E 02                    ld      a, 2            ; Move o1 <- o2
ROM:30DC 18 02                    jr      loc_30E0        ; Jump relative (conditional & unconditional)
ROM:30DC
ROM:30DE          ; ---------------------------------------------------------------------------
ROM:30DE 3E 03                    ld      a, 3            ; Move o1 <- o2
ROM:30DE
ROM:30E0
ROM:30E0          loc_30E0:                               ; CODE XREF: ROM:30D4↑j
ROM:30E0                                                  ; ROM:30D8↑j ...
ROM:30E0 C3 97 12                 jp      loc_1297        ; Jump (conditional & unconditional)
ROM:30E0
ROM:30E3          ; ---------------------------------------------------------------------------
ROM:30E3 CD E8 13                 call    loc_13E8        ; call (cond & uncond)
ROM:30E3
ROM:30E6 CD 3F 17                 call    sub_173F        ; call (cond & uncond)
ROM:30E6
ROM:30E9 CD 1A 31                 call    sub_311A        ; call (cond & uncond)
ROM:30E9
ROM:30EC
ROM:30EC          ; =============== S U B R O U T I N E =======================================
ROM:30EC
ROM:30EC
ROM:30EC          sub_30EC:                               ; CODE XREF: Setup_all+30↑p
ROM:30EC                                                  ; sub_243C+34↑p ...
ROM:30EC 11 00 00                 ld      de, 0           ; Move o1 <- o2
ROM:30EC
ROM:30EC          ; End of function sub_30EC
ROM:30EC
ROM:30EF
ROM:30EF          ; =============== S U B R O U T I N E =======================================
ROM:30EF
ROM:30EF
ROM:30EF          sub_30EF:                               ; CODE XREF: sub_2EDB+11↑p
ROM:30EF                                                  ; ROM:30BE↑j
ROM:30EF EB                       ex      de, hl          ; Exchange operands
ROM:30EF
ROM:30EF          ; End of function sub_30EF
ROM:30EF
ROM:30F0
ROM:30F0          ; =============== S U B R O U T I N E =======================================
ROM:30F0
ROM:30F0
ROM:30F0          sub_30F0:                               ; CODE XREF: Setup_all+4C↑p
ROM:30F0                                                  ; sub_24E7+7↑p
ROM:30F0 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:30F0
ROM:30F1 C3 19 0B                 jp      sub_B19         ; Jump (conditional & unconditional)
ROM:30F1
ROM:30F1          ; End of function sub_30F0
ROM:30F1
ROM:30F1          ; ---------------------------------------------------------------------------
ROM:30F4 CD                       db 0CDh
ROM:30F5 1A                       db  1Ah
ROM:30F6 31                       db  31h ; 1
ROM:30F7
ROM:30F7          ; =============== S U B R O U T I N E =======================================
ROM:30F7
ROM:30F7
ROM:30F7          sub_30F7:                               ; CODE XREF: ROM:30B1↑p
ROM:30F7 11 00 00                 ld      de, 0           ; Move o1 <- o2
ROM:30F7
ROM:30F7          ; End of function sub_30F7
ROM:30F7
ROM:30FA
ROM:30FA          ; =============== S U B R O U T I N E =======================================
ROM:30FA
ROM:30FA
ROM:30FA          sub_30FA:                               ; CODE XREF: sub_2EDB+7↑p
ROM:30FA EB                       ex      de, hl          ; Exchange operands
ROM:30FB D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:30FB
ROM:30FC C3 5D 0B                 jp      sub_B5D         ; Jump (conditional & unconditional)
ROM:30FC
ROM:30FC          ; End of function sub_30FA
ROM:30FC
ROM:30FF
ROM:30FF          ; =============== S U B R O U T I N E =======================================
ROM:30FF
ROM:30FF
ROM:30FF          sub_30FF:                               ; CODE XREF: sub_307B-A7↑j
ROM:30FF                                                  ; sub_307B:loc_309C↑p
ROM:30FF 21 71 40                 ld      hl, 4071h       ; Move o1 <- o2
ROM:3102 CB CE                    set     1, (hl)         ; Set bit
ROM:3104 21 BF 40                 ld      hl, 40BFh       ; Move o1 <- o2
ROM:3107 CB EE                    set     5, (hl)         ; Set bit
ROM:3107
ROM:3109
ROM:3109          loc_3109:                               ; CODE XREF: sub_2FDF+D↑p
ROM:3109                                                  ; sub_2FDF+15↑p ...
ROM:3109 CD 6C 11                 call    sub_116C        ; call (cond & uncond)
ROM:3109
ROM:310C CD 9F 0B                 call    sub_B9F         ; call (cond & uncond)
ROM:310C
ROM:310F 21 71 40                 ld      hl, 4071h       ; Move o1 <- o2
ROM:3112 CB 8E                    res     1, (hl)         ; Reset bit
ROM:3114 21 BF 40                 ld      hl, 40BFh       ; Move o1 <- o2
ROM:3117 CB AE                    res     5, (hl)         ; Reset bit
ROM:3119 C9                       ret                     ; Return (cond & uncond)
ROM:3119
ROM:3119          ; End of function sub_30FF
ROM:3119
ROM:311A
ROM:311A          ; =============== S U B R O U T I N E =======================================
ROM:311A
ROM:311A
ROM:311A          sub_311A:                               ; CODE XREF: ROM:30B4↑p
ROM:311A                                                  ; ROM:30E9↑p ...
ROM:311A 2A 61 41                 ld      hl, (word_4161) ; Move o1 <- o2
ROM:311D CD 42 28                 call    sub_2842        ; call (cond & uncond)
ROM:311D
ROM:3120 EB                       ex      de, hl          ; Exchange operands
ROM:3121 C9                       ret                     ; Return (cond & uncond)
ROM:3121
ROM:3121          ; End of function sub_311A
ROM:3121
ROM:3122
ROM:3122          ; =============== S U B R O U T I N E =======================================
ROM:3122
ROM:3122
ROM:3122          sub_3122:                               ; CODE XREF: sub_2F33+33↑p
ROM:3122                                                  ; sub_2F33:loc_2F73↑p
ROM:3122 78                       ld      a, b            ; Move o1 <- o2
ROM:3123 CD 2E 13                 call    sub_132E        ; call (cond & uncond)
ROM:3123
ROM:3126 E5                       push    hl              ; Push register pair onto stack
ROM:3127 CD 1A 31                 call    sub_311A        ; call (cond & uncond)
ROM:3127
ROM:312A D1                       pop     de              ; Pop register pair from stack
ROM:312B C9                       ret                     ; Return (cond & uncond)
ROM:312B
ROM:312B          ; End of function sub_3122
ROM:312B
ROM:312C          ; ---------------------------------------------------------------------------
ROM:312C          ; START OF FUNCTION CHUNK FOR sub_2188
ROM:312C
ROM:312C          loc_312C:                               ; CODE XREF: sub_2188+48C↑j
ROM:312C 3E BA                    ld      a, 0BAh         ; Move o1 <- o2
ROM:312E CD 12 01                 call    sub_112         ; call (cond & uncond)
ROM:312E
ROM:3131 D0                       ret     nc              ; Return (cond & uncond)
ROM:3132 CD EF 26                 call    sub_26EF        ; call (cond & uncond)
ROM:3132
ROM:3135 EB                       ex      de, hl          ; Exchange operands
ROM:3136 21 9D 41                 ld      hl, 419Dh       ; Move o1 <- o2
ROM:3139 0E 0A                    ld      c, 0Ah          ; Move o1 <- o2
ROM:313B ED B0                    ldir                    ; Transfer data (DE)->(HL) until byte
ROM:313B                                                  ; counter is zero, increment destination
ROM:313B                                                  ; and source addresses
ROM:313D ED 5B 6B                 ld      de, (word_416B) ; Move o1 <- o2
ROM:313D 41
ROM:3141 2A 67 41                 ld      hl, (word_4167) ; Move o1 <- o2
ROM:3144 CD D1 31                 call    sub_31D1        ; call (cond & uncond)
ROM:3144
ROM:3147 18 3C                    jr      loc_3185        ; Jump relative (conditional & unconditional)
ROM:3147
ROM:3149          ; ---------------------------------------------------------------------------
ROM:3149
ROM:3149          loc_3149:                               ; CODE XREF: sub_2188+492↑j
ROM:3149 3E BB                    ld      a, 0BBh         ; Move o1 <- o2
ROM:314B CD 12 01                 call    sub_112         ; call (cond & uncond)
ROM:314B
ROM:314E D0                       ret     nc              ; Return (cond & uncond)
ROM:314F 11 9D 41                 ld      de, 419Dh       ; Move o1 <- o2
ROM:3152 21 9F 41                 ld      hl, 419Fh       ; Move o1 <- o2
ROM:3155 01 05 00                 ld      bc, 5           ; Move o1 <- o2
ROM:3158 ED B0                    ldir                    ; Transfer data (DE)->(HL) until byte
ROM:3158                                                  ; counter is zero, increment destination
ROM:3158                                                  ; and source addresses
ROM:315A EB                       ex      de, hl          ; Exchange operands
ROM:315B 36 BB                    ld      (hl), 0BBh      ; Move o1 <- o2
ROM:315D 23                       inc     hl              ; Increment operand
ROM:315E 36 3A                    ld      (hl), 3Ah ; ':' ; Move o1 <- o2
ROM:3160 CD B1 26                 call    Display_copy_419D_to40AC ; call (cond & uncond)
ROM:3160
ROM:3163 CD CA 31                 call    sub_31CA        ; call (cond & uncond)
ROM:3163
ROM:3166 ED 5B 63                 ld      de, (word_4163) ; Move o1 <- o2
ROM:3166 41
ROM:316A D5                       push    de              ; Push register pair onto stack
ROM:316B 2A FA 43                 ld      hl, (data_for_40bd_ptr_5fffh) ; Move o1 <- o2
ROM:316E 2B                       dec     hl              ; Decrement operand
ROM:316F CD 13 32                 call    TapeAndDisplay_p_lusDI ; call (cond & uncond)
ROM:316F
ROM:3172 D1                       pop     de              ; Pop register pair from stack
ROM:3173 30 10                    jr      nc, loc_3185    ; Jump relative (conditional & unconditional)
ROM:3173
ROM:3175 E5                       push    hl              ; Push register pair onto stack
ROM:3176 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:3176
ROM:3177 44                       ld      b, h            ; Move o1 <- o2
ROM:3178 4D                       ld      c, l            ; Move o1 <- o2
ROM:3179 E1                       pop     hl              ; Pop register pair from stack
ROM:317A 03                       inc     bc              ; Increment operand
ROM:317B CD FE 2C                 call    sub_2CFE        ; call (cond & uncond)
ROM:317B
ROM:317E 2A FA 43                 ld      hl, (data_for_40bd_ptr_5fffh) ; Move o1 <- o2
ROM:3181 2B                       dec     hl              ; Decrement operand
ROM:3182 22 71 41                 ld      (word_4171), hl ; Move o1 <- o2
ROM:3182
ROM:3185
ROM:3185          loc_3185:                               ; CODE XREF: sub_2188+FBF↑j
ROM:3185                                                  ; sub_2188+FEB↑j
ROM:3185 C3 8D 27                 jp      sub_278D        ; Jump (conditional & unconditional)
ROM:3185
ROM:3185          ; END OF FUNCTION CHUNK FOR sub_2188
ROM:3188
ROM:3188          ; =============== S U B R O U T I N E =======================================
ROM:3188
ROM:3188
ROM:3188          sub_3188:                               ; CODE XREF: sub_112↑j
ROM:3188 57                       ld      d, a            ; Move o1 <- o2
ROM:3188
ROM:3189
ROM:3189          loc_3189:                               ; CODE XREF: sub_3188+36↓j
ROM:3189 D5                       push    de              ; Push register pair onto stack
ROM:318A CD AA 17                 call    sub_17AA        ; call (cond & uncond)
ROM:318A
ROM:318D CD FE 26                 call    Display_Clear_419D ; call (cond & uncond)
ROM:318D
ROM:3190 72                       ld      (hl), d         ; Move o1 <- o2
ROM:3191 23                       inc     hl              ; Increment operand
ROM:3192 36 9B                    ld      (hl), 9Bh       ; Move o1 <- o2
ROM:3194 E5                       push    hl              ; Push register pair onto stack
ROM:3195 CD B1 26                 call    Display_copy_419D_to40AC ; call (cond & uncond)
ROM:3195
ROM:3198 CD BC 10                 call    sub_10BC        ; call (cond & uncond)
ROM:3198
ROM:319B E1                       pop     hl              ; Pop register pair from stack
ROM:319C 06 05                    ld      b, 5            ; Move o1 <- o2
ROM:319C
ROM:319E
ROM:319E          loc_319E:                               ; CODE XREF: sub_3188+24↓j
ROM:319E                                                  ; sub_3188+28↓j ...
ROM:319E E5                       push    hl              ; Push register pair onto stack
ROM:319F C5                       push    bc              ; Push register pair onto stack
ROM:31A0 CD B1 26                 call    Display_copy_419D_to40AC ; call (cond & uncond)
ROM:31A0
ROM:31A3 EF                       rst     28h             ; Restart at vector <int>
ROM:31A3
ROM:31A4 20 10                    jr      nz, loc_31B6    ; Jump relative (conditional & unconditional)
ROM:31A4
ROM:31A6 F7                       rst     30h             ; Restart at vector <int>
ROM:31A6
ROM:31A7 C4 0C 27                 call    nz, sub_270C    ; call (cond & uncond)
ROM:31A7
ROM:31AA C1                       pop     bc              ; Pop register pair from stack
ROM:31AB E1                       pop     hl              ; Pop register pair from stack
ROM:31AC 28 F0                    jr      z, loc_319E     ; Jump relative (conditional & unconditional)
ROM:31AC
ROM:31AE 23                       inc     hl              ; Increment operand
ROM:31AF 77                       ld      (hl), a         ; Move o1 <- o2
ROM:31B0 10 EC                    djnz    loc_319E        ; Decrement reg B and jump relative if zero
ROM:31B0
ROM:31B2 2B                       dec     hl              ; Decrement operand
ROM:31B3 04                       inc     b               ; Increment operand
ROM:31B4 18 E8                    jr      loc_319E        ; Jump relative (conditional & unconditional)
ROM:31B4
ROM:31B6          ; ---------------------------------------------------------------------------
ROM:31B6
ROM:31B6          loc_31B6:                               ; CODE XREF: sub_3188+1C↑j
ROM:31B6 C1                       pop     bc              ; Pop register pair from stack
ROM:31B7 E1                       pop     hl              ; Pop register pair from stack
ROM:31B8 D1                       pop     de              ; Pop register pair from stack
ROM:31B9 FE 97                    cp      97h             ; Compare with accumulator
ROM:31BB C8                       ret     z               ; Return (cond & uncond)
ROM:31BC FE 81                    cp      81h             ; Compare with accumulator
ROM:31BE 28 C9                    jr      z, loc_3189     ; Jump relative (conditional & unconditional)
ROM:31BE
ROM:31C0 FE 9C                    cp      9Ch             ; Compare with accumulator
ROM:31C2 28 03                    jr      z, loc_31C7     ; Jump relative (conditional & unconditional)
ROM:31C2
ROM:31C4 D5                       push    de              ; Push register pair onto stack
ROM:31C5 18 D7                    jr      loc_319E        ; Jump relative (conditional & unconditional)
ROM:31C5
ROM:31C7          ; ---------------------------------------------------------------------------
ROM:31C7
ROM:31C7          loc_31C7:                               ; CODE XREF: sub_3188+3A↑j
ROM:31C7 CD 8D 27                 call    sub_278D        ; call (cond & uncond)
ROM:31C7
ROM:31C7          ; End of function sub_3188
ROM:31C7
ROM:31CA
ROM:31CA          ; =============== S U B R O U T I N E =======================================
ROM:31CA
ROM:31CA
ROM:31CA          sub_31CA:                               ; CODE XREF: sub_2188+FDB↑p
ROM:31CA                                                  ; sub_31D1+11↓p
ROM:31CA 0E 96                    ld      c, 96h          ; Move o1 <- o2
ROM:31CC CD DE 27                 call    sub_27DE        ; call (cond & uncond)
ROM:31CC
ROM:31CF 37                       scf                     ; Set carry flag
ROM:31D0 C9                       ret                     ; Return (cond & uncond)
ROM:31D0
ROM:31D0          ; End of function sub_31CA
ROM:31D0
ROM:31D1
ROM:31D1          ; =============== S U B R O U T I N E =======================================
ROM:31D1
ROM:31D1
ROM:31D1          sub_31D1:                               ; CODE XREF: sub_2188+FBC↑p
ROM:31D1 F3                       di                      ; Disable interrupts
ROM:31D2 22 30 42                 ld      (word_4230), hl ; Move o1 <- o2
ROM:31D5 D5                       push    de              ; Push register pair onto stack
ROM:31D6 CD 97 33                 call    sub_3397        ; call (cond & uncond)
ROM:31D6
ROM:31D9 21 9F 41                 ld      hl, 419Fh       ; Move o1 <- o2
ROM:31DC 11 AA AA                 ld      de, 0AAAAh      ; Move o1 <- o2
ROM:31DF CD BF 32                 call    sub_32BF        ; call (cond & uncond)
ROM:31DF
ROM:31E2 CD CA 31                 call    sub_31CA        ; call (cond & uncond)
ROM:31E2
ROM:31E5 D1                       pop     de              ; Pop register pair from stack
ROM:31E5
ROM:31E6
ROM:31E6          loc_31E6:                               ; CODE XREF: sub_31D1+28↓j
ROM:31E6 2A 30 42                 ld      hl, (word_4230) ; Move o1 <- o2
ROM:31E9 01 20 00                 ld      bc, 20h ; ' '   ; Move o1 <- o2
ROM:31EC ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:31EE D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:31EE
ROM:31EF 38 0A                    jr      c, loc_31FB     ; Jump relative (conditional & unconditional)
ROM:31EF
ROM:31F1 EB                       ex      de, hl          ; Exchange operands
ROM:31F2 11 00 00                 ld      de, 0           ; Move o1 <- o2
ROM:31F5 CD BF 32                 call    sub_32BF        ; call (cond & uncond)
ROM:31F5
ROM:31F8 EB                       ex      de, hl          ; Exchange operands
ROM:31F9 18 EB                    jr      loc_31E6        ; Jump relative (conditional & unconditional)
ROM:31F9
ROM:31FB          ; ---------------------------------------------------------------------------
ROM:31FB
ROM:31FB          loc_31FB:                               ; CODE XREF: sub_31D1+1E↑j
ROM:31FB 09                       add     hl, bc          ; Add <reg> to A
ROM:31FC 7D                       ld      a, l            ; Move o1 <- o2
ROM:31FD CD EF 26                 call    sub_26EF        ; call (cond & uncond)
ROM:31FD
ROM:3200 B7                       or      a               ; Or with accumulator
ROM:3201 28 08                    jr      z, loc_320B     ; Jump relative (conditional & unconditional)
ROM:3201
ROM:3203 4F                       ld      c, a            ; Move o1 <- o2
ROM:3204 77                       ld      (hl), a         ; Move o1 <- o2
ROM:3205 E5                       push    hl              ; Push register pair onto stack
ROM:3206 23                       inc     hl              ; Increment operand
ROM:3207 EB                       ex      de, hl          ; Exchange operands
ROM:3208 ED B0                    ldir                    ; Transfer data (DE)->(HL) until byte
ROM:3208                                                  ; counter is zero, increment destination
ROM:3208                                                  ; and source addresses
ROM:320A E1                       pop     hl              ; Pop register pair from stack
ROM:320A
ROM:320B
ROM:320B          loc_320B:                               ; CODE XREF: sub_31D1+30↑j
ROM:320B 11 EE EE                 ld      de, 0EEEEh      ; Move o1 <- o2
ROM:320E CD BF 32                 call    sub_32BF        ; call (cond & uncond)
ROM:320E
ROM:3211 FB                       ei                      ; Enable interrupts
ROM:3212 C9                       ret                     ; Return (cond & uncond)
ROM:3212
ROM:3212          ; End of function sub_31D1
ROM:3212
ROM:3213
ROM:3213          ; =============== S U B R O U T I N E =======================================
ROM:3213
ROM:3213
ROM:3213          TapeAndDisplay_p_lusDI:                 ; CODE XREF: sub_2188+FE7↑p
ROM:3213
ROM:3213          ; FUNCTION CHUNK AT ROM:32B1 SIZE 00000007 BYTES
ROM:3213
ROM:3213 F3                       di                      ; Disable interrupts
ROM:3214 22 30 42                 ld      (word_4230), hl ; Move o1 <- o2
ROM:3217 21 BD 40                 ld      hl, 40BDh       ; Move o1 <- o2
ROM:321A CB F6                    set     6, (hl)         ; Set bit
ROM:321A
ROM:321C
ROM:321C          loc_321C:                               ; CODE XREF: TapeAndDisplay_p_lusDI+3A↓j
ROM:321C D5                       push    de              ; Push register pair onto stack
ROM:321D 21 CE 41                 ld      hl, 41CEh       ; Move o1 <- o2
ROM:3220 CD F5 32                 call    TapeSomeMagic   ; Set Carry if need further processing
ROM:3220
ROM:3223 D2 B6 32                 jp      nc, loc_32B6    ; Jump (conditional & unconditional)
ROM:3223
ROM:3226 21 AA AA                 ld      hl, 0AAAAh      ; Move o1 <- o2
ROM:3229 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:3229
ROM:322A 20 20                    jr      nz, loc_324C    ; Jump relative (conditional & unconditional)
ROM:322A
ROM:322C 21 CE 41                 ld      hl, 41CEh       ; Move o1 <- o2
ROM:322F E5                       push    hl              ; Push register pair onto stack
ROM:3230 11 A4 41                 ld      de, 41A4h       ; Move o1 <- o2
ROM:3233 01 05 00                 ld      bc, 5           ; Move o1 <- o2
ROM:3236 ED B0                    ldir                    ; Transfer data (DE)->(HL) until byte
ROM:3236                                                  ; counter is zero, increment destination
ROM:3236                                                  ; and source addresses
ROM:3238 CD B1 26                 call    Display_copy_419D_to40AC ; call (cond & uncond)
ROM:3238
ROM:323B CD 12 11                 call    DisplayRoutine  ; call (cond & uncond)
ROM:323B
ROM:323E E1                       pop     hl              ; Pop register pair from stack
ROM:323F 11 9D 41                 ld      de, 419Dh       ; Move o1 <- o2
ROM:3242 06 05                    ld      b, 5            ; Move o1 <- o2
ROM:3242
ROM:3244
ROM:3244          loc_3244:                               ; CODE XREF: TapeAndDisplay_p_lusDI+37↓j
ROM:3244 1A                       ld      a, (de)         ; Move o1 <- o2
ROM:3245 BE                       cp      (hl)            ; Compare with accumulator
ROM:3246 20 04                    jr      nz, loc_324C    ; Jump relative (conditional & unconditional)
ROM:3246
ROM:3248 23                       inc     hl              ; Increment operand
ROM:3249 13                       inc     de              ; Increment operand
ROM:324A 10 F8                    djnz    loc_3244        ; Decrement reg B and jump relative if zero
ROM:324A
ROM:324C
ROM:324C          loc_324C:                               ; CODE XREF: TapeAndDisplay_p_lusDI+17↑j
ROM:324C                                                  ; TapeAndDisplay_p_lusDI+33↑j
ROM:324C D1                       pop     de              ; Pop register pair from stack
ROM:324D 20 CD                    jr      nz, loc_321C    ; Jump relative (conditional & unconditional)
ROM:324D
ROM:324F
ROM:324F          loc_324F:                               ; CODE XREF: TapeAndDisplay_p_lusDI+6B↓j
ROM:324F 2A 30 42                 ld      hl, (word_4230) ; Move o1 <- o2
ROM:3252 01 20 00                 ld      bc, 20h ; ' '   ; Move o1 <- o2
ROM:3255 ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:3257 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:3257
ROM:3258 D5                       push    de              ; Push register pair onto stack
ROM:3259 30 06                    jr      nc, loc_3261    ; Jump relative (conditional & unconditional)
ROM:3259
ROM:325B 09                       add     hl, bc          ; Add <reg> to A
ROM:325C 4D                       ld      c, l            ; Move o1 <- o2
ROM:325D 11 CE 41                 ld      de, 41CEh       ; Move o1 <- o2
ROM:3260 D5                       push    de              ; Push register pair onto stack
ROM:3260
ROM:3261
ROM:3261          loc_3261:                               ; CODE XREF: TapeAndDisplay_p_lusDI+46↑j
ROM:3261 F5                       push    af              ; Push register pair onto stack
ROM:3262 EB                       ex      de, hl          ; Exchange operands
ROM:3263 C5                       push    bc              ; Push register pair onto stack
ROM:3264 CD F5 32                 call    TapeSomeMagic   ; Set Carry if need further processing
ROM:3264
ROM:3267 30 48                    jr      nc, loc_32B1    ; Jump relative (conditional & unconditional)
ROM:3267
ROM:3269 28 07                    jr      z, loc_3272     ; Jump relative (conditional & unconditional)
ROM:3269
ROM:326B E5                       push    hl              ; Push register pair onto stack
ROM:326C 21 58 41                 ld      hl, 4158h       ; Move o1 <- o2
ROM:326F CB FE                    set     7, (hl)         ; Set bit
ROM:3271 E1                       pop     hl              ; Pop register pair from stack
ROM:3271
ROM:3272
ROM:3272          loc_3272:                               ; CODE XREF: TapeAndDisplay_p_lusDI+56↑j
ROM:3272 EB                       ex      de, hl          ; Exchange operands
ROM:3273 01 EE EE                 ld      bc, 0EEEEh      ; Move o1 <- o2
ROM:3276 B7                       or      a               ; Or with accumulator
ROM:3277 ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:3279 C1                       pop     bc              ; Pop register pair from stack
ROM:327A 28 07                    jr      z, loc_3283     ; Jump relative (conditional & unconditional)
ROM:327A
ROM:327C F1                       pop     af              ; Pop register pair from stack
ROM:327D E1                       pop     hl              ; Pop register pair from stack
ROM:327E 30 CF                    jr      nc, loc_324F    ; Jump relative (conditional & unconditional)
ROM:327E
ROM:3280 D1                       pop     de              ; Pop register pair from stack
ROM:3281 18 0B                    jr      loc_328E        ; Jump relative (conditional & unconditional)
ROM:3281
ROM:3283          ; ---------------------------------------------------------------------------
ROM:3283
ROM:3283          loc_3283:                               ; CODE XREF: TapeAndDisplay_p_lusDI+67↑j
ROM:3283 F1                       pop     af              ; Pop register pair from stack
ROM:3284 E1                       pop     hl              ; Pop register pair from stack
ROM:3285 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:3286 30 0F                    jr      nc, loc_3297    ; Jump relative (conditional & unconditional)
ROM:3286
ROM:3288 D1                       pop     de              ; Pop register pair from stack
ROM:3289 B9                       cp      c               ; Compare with accumulator
ROM:328A 28 0D                    jr      z, loc_3299     ; Jump relative (conditional & unconditional)
ROM:328A
ROM:328C 38 0B                    jr      c, loc_3299     ; Jump relative (conditional & unconditional)
ROM:328C
ROM:328E
ROM:328E          loc_328E:                               ; CODE XREF: TapeAndDisplay_p_lusDI+6E↑j
ROM:328E CD 9E 32                 call    sub_329E        ; call (cond & uncond)
ROM:328E
ROM:3291 E5                       push    hl              ; Push register pair onto stack
ROM:3292 CD 54 26                 call    sub_2654        ; call (cond & uncond)
ROM:3292
ROM:3295 E1                       pop     hl              ; Pop register pair from stack
ROM:3296 C9                       ret                     ; Return (cond & uncond)
ROM:3296
ROM:3297          ; ---------------------------------------------------------------------------
ROM:3297
ROM:3297          loc_3297:                               ; CODE XREF: TapeAndDisplay_p_lusDI+73↑j
ROM:3297 54                       ld      d, h            ; Move o1 <- o2
ROM:3298 5D                       ld      e, l            ; Move o1 <- o2
ROM:3298
ROM:3299
ROM:3299          loc_3299:                               ; CODE XREF: TapeAndDisplay_p_lusDI+77↑j
ROM:3299                                                  ; TapeAndDisplay_p_lusDI+79↑j
ROM:3299 B7                       or      a               ; Or with accumulator
ROM:329A 28 04                    jr      z, loc_32A0     ; Jump relative (conditional & unconditional)
ROM:329A
ROM:329C 23                       inc     hl              ; Increment operand
ROM:329D 4F                       ld      c, a            ; Move o1 <- o2
ROM:329D
ROM:329D          ; End of function TapeAndDisplay_p_lusDI
ROM:329D
ROM:329E
ROM:329E          ; =============== S U B R O U T I N E =======================================
ROM:329E
ROM:329E
ROM:329E          sub_329E:                               ; CODE XREF: TapeAndDisplay_p_lusDI:loc_328E↑p
ROM:329E ED B0                    ldir                    ; Transfer data (DE)->(HL) until byte
ROM:329E                                                  ; counter is zero, increment destination
ROM:329E                                                  ; and source addresses
ROM:329E
ROM:32A0
ROM:32A0          loc_32A0:                               ; CODE XREF: TapeAndDisplay_p_lusDI+87↑j
ROM:32A0 D5                       push    de              ; Push register pair onto stack
ROM:32A1 CD B8 32                 call    Disable_40BD_flag_plus_EI ; call (cond & uncond)
ROM:32A1
ROM:32A4 21 58 41                 ld      hl, 4158h       ; Move o1 <- o2
ROM:32A7 CB 7E                    bit     7, (hl)         ; Test <bit> in operand
ROM:32A9 CB BE                    res     7, (hl)         ; Reset bit
ROM:32AB C4 64 26                 call    nz, sub_2664    ; call (cond & uncond)
ROM:32AB
ROM:32AE E1                       pop     hl              ; Pop register pair from stack
ROM:32AF 37                       scf                     ; Set carry flag
ROM:32B0 C9                       ret                     ; Return (cond & uncond)
ROM:32B0
ROM:32B0          ; End of function sub_329E
ROM:32B0
ROM:32B1          ; ---------------------------------------------------------------------------
ROM:32B1          ; START OF FUNCTION CHUNK FOR TapeAndDisplay_p_lusDI
ROM:32B1
ROM:32B1          loc_32B1:                               ; CODE XREF: TapeAndDisplay_p_lusDI+54↑j
ROM:32B1 C1                       pop     bc              ; Pop register pair from stack
ROM:32B2 F1                       pop     af              ; Pop register pair from stack
ROM:32B3 E1                       pop     hl              ; Pop register pair from stack
ROM:32B4 18 02                    jr      Disable_40BD_flag_plus_EI ; Jump relative (conditional & unconditional)
ROM:32B4
ROM:32B6          ; ---------------------------------------------------------------------------
ROM:32B6
ROM:32B6          loc_32B6:                               ; CODE XREF: TapeAndDisplay_p_lusDI+10↑j
ROM:32B6 D1                       pop     de              ; Pop register pair from stack
ROM:32B7 B7                       or      a               ; Or with accumulator
ROM:32B7
ROM:32B7          ; END OF FUNCTION CHUNK FOR TapeAndDisplay_p_lusDI
ROM:32B8
ROM:32B8          ; =============== S U B R O U T I N E =======================================
ROM:32B8
ROM:32B8
ROM:32B8          Disable_40BD_flag_plus_EI:              ; CODE XREF: sub_329E+3↑p
ROM:32B8                                                  ; TapeAndDisplay_p_lusDI+A1↑j
ROM:32B8 21 BD 40                 ld      hl, 40BDh       ; Move o1 <- o2
ROM:32BB CB B6                    res     6, (hl)         ; Reset bit
ROM:32BD FB                       ei                      ; Enable interrupts
ROM:32BE C9                       ret                     ; Return (cond & uncond)
ROM:32BE
ROM:32BE          ; End of function Disable_40BD_flag_plus_EI
ROM:32BE
ROM:32BF
ROM:32BF          ; =============== S U B R O U T I N E =======================================
ROM:32BF
ROM:32BF
ROM:32BF          sub_32BF:                               ; CODE XREF: sub_31D1+E↑p
ROM:32BF                                                  ; sub_31D1+24↑p ...
ROM:32BF D5                       push    de              ; Push register pair onto stack
ROM:32C0 D5                       push    de              ; Push register pair onto stack
ROM:32C1 DD E1                    pop     ix              ; Pop register pair from stack
ROM:32C3 11 0E 00                 ld      de, 0Eh         ; Move o1 <- o2
ROM:32C6 CD 9A 33                 call    sub_339A        ; call (cond & uncond)
ROM:32C6
ROM:32C9 CD A3 33                 call    sub_33A3        ; call (cond & uncond)
ROM:32C9
ROM:32CC CD A3 33                 call    sub_33A3        ; call (cond & uncond)
ROM:32CC
ROM:32CF D1                       pop     de              ; Pop register pair from stack
ROM:32D0 06 1F                    ld      b, 1Fh          ; Move o1 <- o2
ROM:32D0
ROM:32D2
ROM:32D2          loc_32D2:                               ; CODE XREF: sub_32BF:loc_32D2↓j
ROM:32D2 10 FE                    djnz    $               ; Decrement reg B and jump relative if zero
ROM:32D2
ROM:32D4 CD 60 33                 call    sub_3360        ; call (cond & uncond)
ROM:32D4
ROM:32D7 06 1A                    ld      b, 1Ah          ; Move o1 <- o2
ROM:32D7
ROM:32D9
ROM:32D9          loc_32D9:                               ; CODE XREF: sub_32BF:loc_32D9↓j
ROM:32D9 10 FE                    djnz    $               ; Decrement reg B and jump relative if zero
ROM:32D9
ROM:32DB 06 10                    ld      b, 10h          ; Move o1 <- o2
ROM:32DB
ROM:32DD
ROM:32DD          loc_32DD:                               ; CODE XREF: sub_32BF+2D↓j
ROM:32DD C5                       push    bc              ; Push register pair onto stack
ROM:32DE 5E                       ld      e, (hl)         ; Move o1 <- o2
ROM:32DF 23                       inc     hl              ; Increment operand
ROM:32E0 56                       ld      d, (hl)         ; Move o1 <- o2
ROM:32E1 23                       inc     hl              ; Increment operand
ROM:32E2 DD 19                    add     ix, de          ; Add <reg> to A
ROM:32E4 CD 60 33                 call    sub_3360        ; call (cond & uncond)
ROM:32E4
ROM:32E7 06 19                    ld      b, 19h          ; Move o1 <- o2
ROM:32E7
ROM:32E9
ROM:32E9          loc_32E9:                               ; CODE XREF: sub_32BF:loc_32E9↓j
ROM:32E9 10 FE                    djnz    $               ; Decrement reg B and jump relative if zero
ROM:32E9
ROM:32EB C1                       pop     bc              ; Pop register pair from stack
ROM:32EC 10 EF                    djnz    loc_32DD        ; Decrement reg B and jump relative if zero
ROM:32EC
ROM:32EE E3                       ex      (sp), hl        ; Exchange operands
ROM:32EF E3                       ex      (sp), hl        ; Exchange operands
ROM:32F0 DD E5                    push    ix              ; Push register pair onto stack
ROM:32F2 D1                       pop     de              ; Pop register pair from stack
ROM:32F3 18 6B                    jr      sub_3360        ; Jump relative (conditional & unconditional)
ROM:32F3
ROM:32F3          ; End of function sub_32BF
ROM:32F3
ROM:32F5
ROM:32F5          ; =============== S U B R O U T I N E =======================================
ROM:32F5
ROM:32F5          ; Set Carry if need further processing
ROM:32F5
ROM:32F5          TapeSomeMagic:                          ; CODE XREF: TapeAndDisplay_p_lusDI+D↑p
ROM:32F5                                                  ; TapeAndDisplay_p_lusDI+51↑p ...
ROM:32F5 CD B2 33                 call    Tape_ReadAndSomeMagicA ; call (cond & uncond)
ROM:32F5
ROM:32F8 CD C4 33                 call    sub_33C4        ; call (cond & uncond)
ROM:32F8
ROM:32FB D0                       ret     nc              ; Return (cond & uncond)
ROM:32FC CD BC 33                 call    Tape_ReadAndSomeMagicB ; call (cond & uncond)
ROM:32FC
ROM:32FF 16 07                    ld      d, 7            ; Move o1 <- o2
ROM:32FF
ROM:3301
ROM:3301          loc_3301:                               ; CODE XREF: TapeSomeMagic+2A↓j
ROM:3301 06 0E                    ld      b, 0Eh          ; Move o1 <- o2
ROM:3301
ROM:3303
ROM:3303          loc_3303:                               ; CODE XREF: TapeSomeMagic:loc_3303↓j
ROM:3303 10 FE                    djnz    $               ; Decrement reg B and jump relative if zero
ROM:3303
ROM:3305 CD B2 33                 call    Tape_ReadAndSomeMagicA ; call (cond & uncond)
ROM:3305
ROM:3308 1E 0D                    ld      e, 0Dh          ; Move o1 <- o2
ROM:3308
ROM:330A
ROM:330A          loc_330A:                               ; CODE XREF: TapeSomeMagic+1B↓j
ROM:330A CD B2 33                 call    Tape_ReadAndSomeMagicA ; call (cond & uncond)
ROM:330A
ROM:330D 20 E6                    jr      nz, TapeSomeMagic ; Set Carry if need further processing
ROM:330D
ROM:330F 1D                       dec     e               ; Decrement operand
ROM:3310 20 F8                    jr      nz, loc_330A    ; Jump relative (conditional & unconditional)
ROM:3310
ROM:3312 1E 16                    ld      e, 16h          ; Move o1 <- o2
ROM:3312
ROM:3314
ROM:3314          loc_3314:                               ; CODE XREF: TapeSomeMagic+27↓j
ROM:3314 1D                       dec     e               ; Decrement operand
ROM:3315 28 DE                    jr      z, TapeSomeMagic ; Set Carry if need further processing
ROM:3315
ROM:3317
ROM:3317          Tape_ReadAndMagic_Label:
ROM:3317 DB 11                    in      a, (Keyboard_Row_Data_B) ; Input from port to A
ROM:3319 A9                       xor     c               ; Exclusive or with accumulator
ROM:331A CB 77                    bit     6, a            ; Test <bit> in operand
ROM:331C 28 F6                    jr      z, loc_3314     ; Jump relative (conditional & unconditional)
ROM:331C
ROM:331E 15                       dec     d               ; Decrement operand
ROM:331F 20 E0                    jr      nz, loc_3301    ; Jump relative (conditional & unconditional)
ROM:331F
ROM:3321
ROM:3321          loc_3321:                               ; CODE XREF: TapeSomeMagic+36↓j
ROM:3321 CD BC 33                 call    Tape_ReadAndSomeMagicB ; call (cond & uncond)
ROM:3321
ROM:3324 06 72                    ld      b, 72h ; 'r'    ; Move o1 <- o2
ROM:3324
ROM:3326
ROM:3326          loc_3326:                               ; CODE XREF: TapeSomeMagic:loc_3326↓j
ROM:3326 10 FE                    djnz    $               ; Decrement reg B and jump relative if zero
ROM:3326
ROM:3328 CD B2 33                 call    Tape_ReadAndSomeMagicA ; call (cond & uncond)
ROM:3328
ROM:332B 20 F4                    jr      nz, loc_3321    ; Jump relative (conditional & unconditional)
ROM:332B
ROM:332D CD BC 33                 call    Tape_ReadAndSomeMagicB ; call (cond & uncond)
ROM:332D
ROM:3330 06 34                    ld      b, 34h ; '4'    ; Move o1 <- o2
ROM:3330
ROM:3332
ROM:3332          loc_3332:                               ; CODE XREF: TapeSomeMagic:loc_3332↓j
ROM:3332 10 FE                    djnz    $               ; Decrement reg B and jump relative if zero
ROM:3332
ROM:3334 CD 7C 33                 call    sub_337C        ; call (cond & uncond)
ROM:3334
ROM:3337 06 2E                    ld      b, 2Eh ; '.'    ; Move o1 <- o2
ROM:3337
ROM:3339
ROM:3339          loc_3339:                               ; CODE XREF: TapeSomeMagic:loc_3339↓j
ROM:3339 10 FE                    djnz    $               ; Decrement reg B and jump relative if zero
ROM:3339
ROM:333B D5                       push    de              ; Push register pair onto stack
ROM:333C D5                       push    de              ; Push register pair onto stack
ROM:333D DD E1                    pop     ix              ; Pop register pair from stack
ROM:333F 16 10                    ld      d, 10h          ; Move o1 <- o2
ROM:333F
ROM:3341
ROM:3341          loc_3341:                               ; CODE XREF: TapeSomeMagic+5C↓j
ROM:3341 D5                       push    de              ; Push register pair onto stack
ROM:3342 CD 7C 33                 call    sub_337C        ; call (cond & uncond)
ROM:3342
ROM:3345 06 2C                    ld      b, 2Ch ; ','    ; Move o1 <- o2
ROM:3345
ROM:3347
ROM:3347          loc_3347:                               ; CODE XREF: TapeSomeMagic:loc_3347↓j
ROM:3347 10 FE                    djnz    $               ; Decrement reg B and jump relative if zero
ROM:3347
ROM:3349 73                       ld      (hl), e         ; Move o1 <- o2
ROM:334A 23                       inc     hl              ; Increment operand
ROM:334B 72                       ld      (hl), d         ; Move o1 <- o2
ROM:334C 23                       inc     hl              ; Increment operand
ROM:334D DD 19                    add     ix, de          ; Add <reg> to A
ROM:334F D1                       pop     de              ; Pop register pair from stack
ROM:3350 15                       dec     d               ; Decrement operand
ROM:3351 20 EE                    jr      nz, loc_3341    ; Jump relative (conditional & unconditional)
ROM:3351
ROM:3353 DD E5                    push    ix              ; Push register pair onto stack
ROM:3355 CD 7C 33                 call    sub_337C        ; call (cond & uncond)
ROM:3355
ROM:3358 EB                       ex      de, hl          ; Exchange operands
ROM:3359 C1                       pop     bc              ; Pop register pair from stack
ROM:335A ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:335C EB                       ex      de, hl          ; Exchange operands
ROM:335D D1                       pop     de              ; Pop register pair from stack
ROM:335E 37                       scf                     ; Set carry flag
ROM:335F C9                       ret                     ; Return (cond & uncond)
ROM:335F
ROM:335F          ; End of function TapeSomeMagic
ROM:335F
ROM:3360
ROM:3360          ; =============== S U B R O U T I N E =======================================
ROM:3360
ROM:3360
ROM:3360          sub_3360:                               ; CODE XREF: sub_32BF+15↑p
ROM:3360                                                  ; sub_32BF+25↑p ...
ROM:3360 0E 10                    ld      c, 10h          ; Move o1 <- o2
ROM:3360
ROM:3362
ROM:3362          loc_3362:                               ; CODE XREF: sub_3360+1A↓j
ROM:3362 CB 3A                    srl     d               ; Shift right logical
ROM:3364 CB 1B                    rr      e               ; Rotate right through carry
ROM:3366 D4 AB 33                 call    nc, Tape_WriteInv ; call (cond & uncond)
ROM:3366
ROM:3369 06 22                    ld      b, 22h ; '"'    ; Move o1 <- o2
ROM:336B 30 02                    jr      nc, loc_336F    ; Jump relative (conditional & unconditional)
ROM:336B
ROM:336D 06 25                    ld      b, 25h ; '%'    ; Move o1 <- o2
ROM:336D
ROM:336F
ROM:336F          loc_336F:                               ; CODE XREF: sub_3360+B↑j
ROM:336F                                                  ; sub_3360:loc_336F↓j
ROM:336F 10 FE                    djnz    $               ; Decrement reg B and jump relative if zero
ROM:336F
ROM:3371 CD AB 33                 call    Tape_WriteInv   ; call (cond & uncond)
ROM:3371
ROM:3374 0D                       dec     c               ; Decrement operand
ROM:3375 C8                       ret     z               ; Return (cond & uncond)
ROM:3376 06 20                    ld      b, 20h ; ' '    ; Move o1 <- o2
ROM:3376
ROM:3378
ROM:3378          loc_3378:                               ; CODE XREF: sub_3360:loc_3378↓j
ROM:3378 10 FE                    djnz    $               ; Decrement reg B and jump relative if zero
ROM:3378
ROM:337A 18 E6                    jr      loc_3362        ; Jump relative (conditional & unconditional)
ROM:337A
ROM:337A          ; End of function sub_3360
ROM:337A
ROM:337C
ROM:337C          ; =============== S U B R O U T I N E =======================================
ROM:337C
ROM:337C
ROM:337C          sub_337C:                               ; CODE XREF: TapeSomeMagic+3F↑p
ROM:337C                                                  ; TapeSomeMagic+4D↑p ...
ROM:337C 06 10                    ld      b, 10h          ; Move o1 <- o2
ROM:337E 18 06                    jr      loc_3386        ; Jump relative (conditional & unconditional)
ROM:337E
ROM:3380          ; ---------------------------------------------------------------------------
ROM:3380
ROM:3380          loc_3380:                               ; CODE XREF: sub_337C+18↓j
ROM:3380 C5                       push    bc              ; Push register pair onto stack
ROM:3381 06 34                    ld      b, 34h ; '4'    ; Move o1 <- o2
ROM:3381
ROM:3383
ROM:3383          loc_3383:                               ; CODE XREF: sub_337C:loc_3383↓j
ROM:3383 10 FE                    djnz    $               ; Decrement reg B and jump relative if zero
ROM:3383
ROM:3385 C1                       pop     bc              ; Pop register pair from stack
ROM:3385
ROM:3386
ROM:3386          loc_3386:                               ; CODE XREF: sub_337C+2↑j
ROM:3386 CD B2 33                 call    Tape_ReadAndSomeMagicA ; call (cond & uncond)
ROM:3386
ROM:3389 37                       scf                     ; Set carry flag
ROM:338A 20 01                    jr      nz, loc_338D    ; Jump relative (conditional & unconditional)
ROM:338A
ROM:338C AF                       xor     a               ; Exclusive or with accumulator
ROM:338C
ROM:338D
ROM:338D          loc_338D:                               ; CODE XREF: sub_337C+E↑j
ROM:338D CB 1A                    rr      d               ; Rotate right through carry
ROM:338F CB 1B                    rr      e               ; Rotate right through carry
ROM:3391 CD BC 33                 call    Tape_ReadAndSomeMagicB ; call (cond & uncond)
ROM:3391
ROM:3394 10 EA                    djnz    loc_3380        ; Decrement reg B and jump relative if zero
ROM:3394
ROM:3396 C9                       ret                     ; Return (cond & uncond)
ROM:3396
ROM:3396          ; End of function sub_337C
ROM:3396
ROM:3397
ROM:3397          ; =============== S U B R O U T I N E =======================================
ROM:3397
ROM:3397
ROM:3397          sub_3397:                               ; CODE XREF: sub_31D1+5↑p
ROM:3397 11 00 0C                 ld      de, 0C00h       ; Move o1 <- o2
ROM:3397
ROM:3397          ; End of function sub_3397
ROM:3397
ROM:339A
ROM:339A          ; =============== S U B R O U T I N E =======================================
ROM:339A
ROM:339A
ROM:339A          sub_339A:                               ; CODE XREF: sub_32BF+7↑p
ROM:339A                                                  ; sub_339A+6↓j
ROM:339A CD A7 33                 call    sub_33A7        ; call (cond & uncond)
ROM:339A
ROM:339D 1B                       dec     de              ; Decrement operand
ROM:339E 7B                       ld      a, e            ; Move o1 <- o2
ROM:339F B2                       or      d               ; Or with accumulator
ROM:33A0 20 F8                    jr      nz, sub_339A    ; Jump relative (conditional & unconditional)
ROM:33A0
ROM:33A2 C9                       ret                     ; Return (cond & uncond)
ROM:33A2
ROM:33A2          ; End of function sub_339A
ROM:33A2
ROM:33A3
ROM:33A3          ; =============== S U B R O U T I N E =======================================
ROM:33A3
ROM:33A3
ROM:33A3          sub_33A3:                               ; CODE XREF: sub_32BF+A↑p
ROM:33A3                                                  ; sub_32BF+D↑p
ROM:33A3 06 49                    ld      b, 49h ; 'I'    ; Move o1 <- o2
ROM:33A5 18 02                    jr      loc_33A9        ; Jump relative (conditional & unconditional)
ROM:33A5
ROM:33A5          ; End of function sub_33A3
ROM:33A5
ROM:33A7
ROM:33A7          ; =============== S U B R O U T I N E =======================================
ROM:33A7
ROM:33A7
ROM:33A7          sub_33A7:                               ; CODE XREF: sub_339A↑p
ROM:33A7 06 97                    ld      b, 97h          ; Move o1 <- o2
ROM:33A7
ROM:33A9
ROM:33A9          loc_33A9:                               ; CODE XREF: sub_33A3+2↑j
ROM:33A9                                                  ; sub_33A7:loc_33A9↓j
ROM:33A9 10 FE                    djnz    $               ; Decrement reg B and jump relative if zero
ROM:33A9
ROM:33A9          ; End of function sub_33A7
ROM:33A9
ROM:33AB
ROM:33AB          ; =============== S U B R O U T I N E =======================================
ROM:33AB
ROM:33AB
ROM:33AB          Tape_WriteInv:                          ; CODE XREF: sub_3360+6↑p
ROM:33AB                                                  ; sub_3360+11↑p
ROM:33AB DB 11                    in      a, (Keyboard_Row_Data_B) ; Input from port to A
ROM:33AD EE 80                    xor     80h             ; Invert MB1 line and do not touch others
ROM:33AF D3 11                    out     (Keyboard_Row_Data_B), a ; Output to port
ROM:33B1 C9                       ret                     ; Return (cond & uncond)
ROM:33B1
ROM:33B1          ; End of function Tape_WriteInv
ROM:33B1
ROM:33B2
ROM:33B2          ; =============== S U B R O U T I N E =======================================
ROM:33B2
ROM:33B2
ROM:33B2          Tape_ReadAndSomeMagicA:                 ; CODE XREF: TapeSomeMagic↑p
ROM:33B2                                                  ; TapeSomeMagic+10↑p ...
ROM:33B2 DB 11                    in      a, (Keyboard_Row_Data_B) ; Input from port to A
ROM:33B4 A9                       xor     c               ; Exclusive or with accumulator
ROM:33B5 CB 77                    bit     6, a            ; MB_read line
ROM:33B7 F5                       push    af              ; Push register pair onto stack
ROM:33B8 A9                       xor     c               ; Exclusive or with accumulator
ROM:33B9 4F                       ld      c, a            ; Move o1 <- o2
ROM:33BA F1                       pop     af              ; Pop register pair from stack
ROM:33BB C9                       ret                     ; Return (cond & uncond)
ROM:33BB
ROM:33BB          ; End of function Tape_ReadAndSomeMagicA
ROM:33BB
ROM:33BC
ROM:33BC          ; =============== S U B R O U T I N E =======================================
ROM:33BC
ROM:33BC
ROM:33BC          Tape_ReadAndSomeMagicB:                 ; CODE XREF: TapeSomeMagic+7↑p
ROM:33BC                                                  ; TapeSomeMagic:loc_3321↑p ...
ROM:33BC DB 11                    in      a, (Keyboard_Row_Data_B) ; Input from port to A
ROM:33BE A9                       xor     c               ; Exclusive or with accumulator
ROM:33BF CB 77                    bit     6, a            ; MB_read line
ROM:33C1 28 F9                    jr      z, Tape_ReadAndSomeMagicB ; Jump relative (conditional & unconditional)
ROM:33C1
ROM:33C3 C9                       ret                     ; Return (cond & uncond)
ROM:33C3
ROM:33C3          ; End of function Tape_ReadAndSomeMagicB
ROM:33C3
ROM:33C4
ROM:33C4          ; =============== S U B R O U T I N E =======================================
ROM:33C4
ROM:33C4
ROM:33C4          sub_33C4:                               ; CODE XREF: TapeSomeMagic+3↑p
ROM:33C4                                                  ; sub_33C4+B↓j
ROM:33C4 E5                       push    hl              ; Push register pair onto stack
ROM:33C5 C5                       push    bc              ; Push register pair onto stack
ROM:33C6 3E 97                    ld      a, 97h          ; Move o1 <- o2
ROM:33C8 DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:33C8                                                  ; A - if < 10h is 0000xxxx read mask
ROM:33C8                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:33C8                                                  ;         A[5:3] - bit index for...
ROM:33C8                                                  ;         A[2:0] - bit index for...
ROM:33C8                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:33C8
ROM:33C9 C1                       pop     bc              ; Pop register pair from stack
ROM:33CA E1                       pop     hl              ; Pop register pair from stack
ROM:33CB C0                       ret     nz              ; Return (cond & uncond)
ROM:33CC CD B2 33                 call    Tape_ReadAndSomeMagicA ; call (cond & uncond)
ROM:33CC
ROM:33CF 28 F3                    jr      z, sub_33C4     ; Jump relative (conditional & unconditional)
ROM:33CF
ROM:33D1 37                       scf                     ; Set carry flag
ROM:33D2 C9                       ret                     ; Return (cond & uncond)
ROM:33D2
ROM:33D2          ; End of function sub_33C4
ROM:33D2
ROM:33D3
ROM:33D3          ; =============== S U B R O U T I N E =======================================
ROM:33D3
ROM:33D3
ROM:33D3          UsartCtrl:                              ; CODE XREF: Setup_all+3A↑p
ROM:33D3                                                  ; Setup_all+E6↑j
ROM:33D3 21 0E 42                 ld      hl, 420Eh       ; Move o1 <- o2
ROM:33D6 22 77 41                 ld      (usart_var1_420E), hl ; Move o1 <- o2
ROM:33D9 CD 80 37                 call    usart_set_var2_var3 ; call (cond & uncond)
ROM:33D9
ROM:33DC CD D5 16                 call    set_4068_b0_to_0 ; call (cond & uncond)
ROM:33DC
ROM:33DF CD C3 16                 call    set_4068_b1_to_0 ; call (cond & uncond)
ROM:33DF
ROM:33E2 21 80 34                 ld      hl, 3480h       ; Move o1 <- o2
ROM:33E5 22 58 40                 ld      (INT_USART_Hdlr_addr), hl ; Move o1 <- o2
ROM:33E8 21 E6 37                 ld      hl, 37E6h       ; Move o1 <- o2
ROM:33EB 11 CE 41                 ld      de, 41CEh       ; Move o1 <- o2
ROM:33EE 01 0E 00                 ld      bc, 0Eh         ; Move o1 <- o2
ROM:33F1 ED B0                    ldir                    ; Transfer data (DE)->(HL) until byte
ROM:33F1                                                  ; counter is zero, increment destination
ROM:33F1                                                  ; and source addresses
ROM:33F3 3E 03                    ld      a, 3            ;  Software reset
ROM:33F5 D3 14                    out     (Timer_USART_Ch0), a ; Output to port
ROM:33F7 1E 00                    ld      e, 0            ; Move o1 <- o2
ROM:33F9 0E 1B                    ld      c, 1Bh          ; Move o1 <- o2
ROM:33FB 21 F4 37                 ld      hl, 37F4h       ; Move o1 <- o2
ROM:33FE 06 0C                    ld      b, 0Ch          ; Move o1 <- o2
ROM:3400 ED B3                    otir                    ; USART_Ctrl_B load data
ROM:3402 3E 10                    ld      a, 10h          ; Reset External/Status Interrupts
ROM:3404 ED 79                    out     (c), a          ; USART_Ctrl_B
ROM:3406 ED 78                    in      a, (c)          ; got 44h for first time
ROM:3406                                                  ; TX buffer empty
ROM:3406                                                  ; EOM
ROM:3408 E6 10                    and     10h             ; get RR0.bit4
ROM:340A 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:340B 0F                       rrca                    ; Rotate right branch  carry accumulator
ROM:340C 32 59 41                 ld      (USART_RR0_SYNC), a ; Save RR0.bit4 into 4149.bit2
ROM:340F 01 E8 08                 ld      bc, 8E8h        ; Move o1 <- o2
ROM:340F
ROM:3412
ROM:3412          loc_3412:                               ; CODE XREF: UsartCtrl+4C↓j
ROM:3412 79                       ld      a, c            ; Move o1 <- o2
ROM:3413 C5                       push    bc              ; Push register pair onto stack
ROM:3414 D5                       push    de              ; Push register pair onto stack
ROM:3415 DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:3415                                                  ; A - if < 10h is 0000xxxx read mask
ROM:3415                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:3415                                                  ;         A[5:3] - bit index for...
ROM:3415                                                  ;         A[2:0] - bit index for...
ROM:3415                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:3415
ROM:3416 D1                       pop     de              ; Pop register pair from stack
ROM:3417 C1                       pop     bc              ; Pop register pair from stack
ROM:3418 37                       scf                     ; Set carry flag
ROM:3419 20 01                    jr      nz, loc_341C    ; Jump relative (conditional & unconditional)
ROM:3419
ROM:341B B7                       or      a               ; Or with accumulator
ROM:341B
ROM:341C
ROM:341C          loc_341C:                               ; CODE XREF: UsartCtrl+46↑j
ROM:341C CB 13                    rl      e               ; Rotate left through carry
ROM:341E 0C                       inc     c               ; Increment operand
ROM:341F 10 F1                    djnz    loc_3412        ; Decrement reg B and jump relative if zero
ROM:341F
ROM:3421 7B                       ld      a, e            ; Move o1 <- o2
ROM:3422 32 5A 41                 ld      (byte_415A), a  ; Move o1 <- o2
ROM:3425 CB 7F                    bit     7, a            ; Test <bit> in operand
ROM:3427 21 DB 41                 ld      hl, 41DBh       ; Move o1 <- o2
ROM:342A 28 06                    jr      z, loc_3432     ; Jump relative (conditional & unconditional)
ROM:342A
ROM:342C CB FE                    set     7, (hl)         ; Set bit
ROM:342E 2B                       dec     hl              ; Decrement operand
ROM:342F 2B                       dec     hl              ; Decrement operand
ROM:3430 CB F6                    set     6, (hl)         ; Set bit
ROM:3430
ROM:3432
ROM:3432          loc_3432:                               ; CODE XREF: UsartCtrl+57↑j
ROM:3432 CD E0 37                 call    USART_RR0_SYNC_TST ; call (cond & uncond)
ROM:3432
ROM:3435 28 05                    jr      z, loc_343C     ; Jump relative (conditional & unconditional)
ROM:3435
ROM:3437 21 D9 41                 ld      hl, 41D9h       ; Move o1 <- o2
ROM:343A CB FE                    set     7, (hl)         ; Set bit
ROM:343A
ROM:343C
ROM:343C          loc_343C:                               ; CODE XREF: UsartCtrl+62↑j
ROM:343C 21 D5 41                 ld      hl, 41D5h       ; Move o1 <- o2
ROM:343F 5F                       ld      e, a            ; Move o1 <- o2
ROM:3440 E6 0F                    and     0Fh             ; And with accumulator
ROM:3442 B6                       or      (hl)            ; Or with accumulator
ROM:3443 77                       ld      (hl), a         ; Move o1 <- o2
ROM:3444 7B                       ld      a, e            ; Move o1 <- o2
ROM:3445 E6 70                    and     70h ; 'p'       ; And with accumulator
ROM:3447 CB 6F                    bit     5, a            ; Test <bit> in operand
ROM:3449 20 0F                    jr      nz, loc_345A    ; Jump relative (conditional & unconditional)
ROM:3449
ROM:344B CB F6                    set     6, (hl)         ; Set bit
ROM:344D FE 20                    cp      20h ; ' '       ; Compare with accumulator
ROM:344F 30 11                    jr      nc, loc_3462    ; Jump relative (conditional & unconditional)
ROM:344F
ROM:3451 16 57                    ld      d, 57h ; 'W'    ; Usart Timer A constant is 57h
ROM:3453 B7                       or      a               ; Or with accumulator
ROM:3454 28 14                    jr      z, Setup_Usart_CtrlA ; Jump relative (conditional & unconditional)
ROM:3454
ROM:3456 16 40                    ld      d, 40h ; '@'    ; Move o1 <- o2
ROM:3458 18 10                    jr      Setup_Usart_CtrlA ; Jump relative (conditional & unconditional)
ROM:3458
ROM:345A          ; ---------------------------------------------------------------------------
ROM:345A
ROM:345A          loc_345A:                               ; CODE XREF: UsartCtrl+76↑j
ROM:345A CB FE                    set     7, (hl)         ; Set bit
ROM:345C CB 67                    bit     4, a            ; Test <bit> in operand
ROM:345E 20 02                    jr      nz, loc_3462    ; Jump relative (conditional & unconditional)
ROM:345E
ROM:3460 CB F6                    set     6, (hl)         ; Set bit
ROM:3460
ROM:3462
ROM:3462          loc_3462:                               ; CODE XREF: UsartCtrl+7C↑j
ROM:3462                                                  ; UsartCtrl+8B↑j
ROM:3462 16 08                    ld      d, 8            ; Move o1 <- o2
ROM:3464 FE 50                    cp      50h ; 'P'       ; Compare with accumulator
ROM:3466 38 02                    jr      c, Setup_Usart_CtrlA ; Jump relative (conditional & unconditional)
ROM:3466
ROM:3468 16 01                    ld      d, 1            ; Move o1 <- o2
ROM:3468
ROM:346A
ROM:346A          Setup_Usart_CtrlA:                      ; CODE XREF: UsartCtrl+81↑j
ROM:346A                                                  ; UsartCtrl+85↑j ...
ROM:346A 21 D0 41                 ld      hl, 41D0h       ; Move o1 <- o2
ROM:346D 72                       ld      (hl), d         ; Move o1 <- o2
ROM:346E 2B                       dec     hl              ; Decrement operand
ROM:346F 2B                       dec     hl              ; Decrement operand
ROM:3470 0E 14                    ld      c, 14h          ; Move o1 <- o2
ROM:3472 46                       ld      b, (hl)         ; Move o1 <- o2
ROM:3473 23                       inc     hl              ; Increment operand
ROM:3474 ED B3                    otir                    ; Set Usart Timer Ch0.
ROM:3474                                                  ; Time constant 57h is followed
ROM:3476 0E 1A                    ld      c, 1Ah          ; Move o1 <- o2
ROM:3478 46                       ld      b, (hl)         ; Move o1 <- o2
ROM:3479 23                       inc     hl              ; Increment operand
ROM:347A ED B3                    otir                    ; Output from memory, increment address
ROM:347A                                                  ; continue until reg B is zero
ROM:347C CD 1C 37                 call    sub_371C        ; call (cond & uncond)
ROM:347C
ROM:347F C9                       ret                     ; Return (cond & uncond)
ROM:347F
ROM:347F          ; End of function UsartCtrl
ROM:347F
ROM:3480
ROM:3480          ; =============== S U B R O U T I N E =======================================
ROM:3480
ROM:3480
ROM:3480          INT_USART_Hdlr:
ROM:3480 F3                       di                      ; Disable interrupts
ROM:3481 F5                       push    af              ; Push register pair onto stack
ROM:3482 C5                       push    bc              ; Push register pair onto stack
ROM:3483 D5                       push    de              ; Push register pair onto stack
ROM:3484 E5                       push    hl              ; Push register pair onto stack
ROM:3485 FB                       ei                      ; Enable interrupts
ROM:3486 3E 01                    ld      a, 1            ; Move o1 <- o2
ROM:3488 D3 1A                    out     (USART_Ctrl_A), a ; Output to port
ROM:348A DB 1A                    in      a, (USART_Ctrl_A) ; Input from port to A
ROM:348C E6 70                    and     70h ; 'p'       ; And with accumulator
ROM:348E 28 17                    jr      z, loc_34A7     ; Jump relative (conditional & unconditional)
ROM:348E
ROM:3490 4F                       ld      c, a            ; Move o1 <- o2
ROM:3491 3E 3F                    ld      a, 3Fh ; '?'    ; Move o1 <- o2
ROM:3493 CD 6C 37                 call    sub_376C        ; call (cond & uncond)
ROM:3493
ROM:3496 CB 69                    bit     5, c            ; Test <bit> in operand
ROM:3498 28 09                    jr      z, loc_34A3     ; Jump relative (conditional & unconditional)
ROM:3498
ROM:349A CD 90 37                 call    UsartReadData   ; call (cond & uncond)
ROM:349A
ROM:349D CD 90 37                 call    UsartReadData   ; call (cond & uncond)
ROM:349D
ROM:34A0 CD 90 37                 call    UsartReadData   ; call (cond & uncond)
ROM:34A0
ROM:34A3
ROM:34A3          loc_34A3:                               ; CODE XREF: INT_USART_Hdlr+18↑j
ROM:34A3 3E 30                    ld      a, 30h ; '0'    ; Move o1 <- o2
ROM:34A5 D3 1A                    out     (USART_Ctrl_A), a ; Output to port
ROM:34A5
ROM:34A7
ROM:34A7          loc_34A7:                               ; CODE XREF: INT_USART_Hdlr+E↑j
ROM:34A7 CD 90 37                 call    UsartReadData   ; call (cond & uncond)
ROM:34A7
ROM:34AA F3                       di                      ; Disable interrupts
ROM:34AB E1                       pop     hl              ; Pop register pair from stack
ROM:34AC D1                       pop     de              ; Pop register pair from stack
ROM:34AD C1                       pop     bc              ; Pop register pair from stack
ROM:34AE F1                       pop     af              ; Pop register pair from stack
ROM:34AF C3 1E 02                 jp      loc_21E         ; Jump (conditional & unconditional)
ROM:34AF
ROM:34AF          ; End of function INT_USART_Hdlr
ROM:34AF
ROM:34B2
ROM:34B2          ; =============== S U B R O U T I N E =======================================
ROM:34B2
ROM:34B2
ROM:34B2          sub_34B2:                               ; CODE XREF: sub_34CA↓p
ROM:34B2                                                  ; sub_35B9+E↓p
ROM:34B2 CD 79 37                 call    Usart_Get_RR0   ; A <= Usart_Ctrl_A.RR0
ROM:34B2
ROM:34B5 21 59 41                 ld      hl, 4159h       ; Move o1 <- o2
ROM:34B8 CB 7F                    bit     7, a            ; test RR0.Break/Abort
ROM:34BA 28 03                    jr      z, loc_34BF     ; Jump relative (conditional & unconditional)
ROM:34BA
ROM:34BC CB 9E                    res     3, (hl)         ; Reset bit
ROM:34BE C9                       ret                     ; Return (cond & uncond)
ROM:34BE
ROM:34BF          ; ---------------------------------------------------------------------------
ROM:34BF
ROM:34BF          loc_34BF:                               ; CODE XREF: sub_34B2+8↑j
ROM:34BF CB 56                    bit     2, (hl)         ; Test <bit> in operand
ROM:34C1 C0                       ret     nz              ; Return (cond & uncond)
ROM:34C2 CB 67                    bit     4, a            ; Test <bit> in operand
ROM:34C4 CB 9E                    res     3, (hl)         ; Reset bit
ROM:34C6 C8                       ret     z               ; Return (cond & uncond)
ROM:34C7 CB DE                    set     3, (hl)         ; Set bit
ROM:34C9 C9                       ret                     ; Return (cond & uncond)
ROM:34C9
ROM:34C9          ; End of function sub_34B2
ROM:34C9
ROM:34CA
ROM:34CA          ; =============== S U B R O U T I N E =======================================
ROM:34CA
ROM:34CA
ROM:34CA          sub_34CA:                               ; CODE XREF: sub_19FC+9↑p
ROM:34CA
ROM:34CA          ; FUNCTION CHUNK AT ROM:24A3 SIZE 00000027 BYTES
ROM:34CA
ROM:34CA CD B2 34                 call    sub_34B2        ; call (cond & uncond)
ROM:34CA
ROM:34CD
ROM:34CD          loc_34CD:                               ; CODE XREF: sub_34CA+65↓j
ROM:34CD F3                       di                      ; Disable interrupts
ROM:34CE ED 5B 73                 ld      de, (usart_var2_41CE) ; Move o1 <- o2
ROM:34CE 41
ROM:34D2 21 CE 41                 ld      hl, 41CEh       ; Move o1 <- o2
ROM:34D5 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:34D5
ROM:34D6 CA 91 35                 jp      z, loc_3591     ; Jump (conditional & unconditional)
ROM:34D6
ROM:34D9 2A 75 41                 ld      hl, (usart_var3_41CE) ; Move o1 <- o2
ROM:34DC EB                       ex      de, hl          ; Exchange operands
ROM:34DD D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:34DD
ROM:34DE 28 52                    jr      z, loc_3532     ; Jump relative (conditional & unconditional)
ROM:34DE
ROM:34E0 7C                       ld      a, h            ; Move o1 <- o2
ROM:34E1 B7                       or      a               ; Or with accumulator
ROM:34E2 20 17                    jr      nz, loc_34FB    ; Jump relative (conditional & unconditional)
ROM:34E2
ROM:34E4 7D                       ld      a, l            ; Move o1 <- o2
ROM:34E5 FE 05                    cp      5               ; Compare with accumulator
ROM:34E7 30 12                    jr      nc, loc_34FB    ; Jump relative (conditional & unconditional)
ROM:34E7
ROM:34E9 44                       ld      b, h            ; Move o1 <- o2
ROM:34EA 4D                       ld      c, l            ; Move o1 <- o2
ROM:34EB 21 CE 41                 ld      hl, 41CEh       ; Move o1 <- o2
ROM:34EE 22 75 41                 ld      (usart_var3_41CE), hl ; Move o1 <- o2
ROM:34F1 EB                       ex      de, hl          ; Exchange operands
ROM:34F2 ED B0                    ldir                    ; Transfer data (DE)->(HL) until byte
ROM:34F2                                                  ; counter is zero, increment destination
ROM:34F2                                                  ; and source addresses
ROM:34F4 ED 53 73                 ld      (usart_var2_41CE), de ; Move o1 <- o2
ROM:34F4 41
ROM:34F8 CD FB 36                 call    sub_36FB        ; call (cond & uncond)
ROM:34F8
ROM:34FB
ROM:34FB          loc_34FB:                               ; CODE XREF: sub_34CA+18↑j
ROM:34FB                                                  ; sub_34CA+1D↑j
ROM:34FB FB                       ei                      ; Enable interrupts
ROM:34FC 2A 75 41                 ld      hl, (usart_var3_41CE) ; Move o1 <- o2
ROM:34FF 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:3500 23                       inc     hl              ; Increment operand
ROM:3501 22 75 41                 ld      (usart_var3_41CE), hl ; Move o1 <- o2
ROM:3504 21 59 41                 ld      hl, 4159h       ; Move o1 <- o2
ROM:3507 CB 6E                    bit     5, (hl)         ; Test <bit> in operand
ROM:3509 28 1E                    jr      z, loc_3529     ; Jump relative (conditional & unconditional)
ROM:3509
ROM:350B CB AE                    res     5, (hl)         ; Reset bit
ROM:350D ED 4B B2                 ld      bc, (word_B2)   ; Move o1 <- o2
ROM:350D 00
ROM:3511 41                       ld      b, c            ; Move o1 <- o2
ROM:3512 2A B6 00                 ld      hl, (word_B6)   ; Move o1 <- o2
ROM:3512
ROM:3515
ROM:3515          loc_3515:                               ; CODE XREF: sub_34CA+4F↓j
ROM:3515 BE                       cp      (hl)            ; Compare with accumulator
ROM:3516 28 07                    jr      z, loc_351F     ; Jump relative (conditional & unconditional)
ROM:3516
ROM:3518 23                       inc     hl              ; Increment operand
ROM:3519 10 FA                    djnz    loc_3515        ; Decrement reg B and jump relative if zero
ROM:3519
ROM:351B 3E 3F                    ld      a, 3Fh ; '?'    ; Move o1 <- o2
ROM:351D 18 33                    jr      loc_3552        ; Jump relative (conditional & unconditional)
ROM:351D
ROM:351F          ; ---------------------------------------------------------------------------
ROM:351F
ROM:351F          loc_351F:                               ; CODE XREF: sub_34CA+4C↑j
ROM:351F 79                       ld      a, c            ; Move o1 <- o2
ROM:3520 90                       sub     b               ; Subtract from A
ROM:3521 2A B8 00                 ld      hl, (word_B8)   ; Move o1 <- o2
ROM:3524 CD 8A 37                 call    sub_378A        ; call (cond & uncond)
ROM:3524
ROM:3527 18 29                    jr      loc_3552        ; Jump relative (conditional & unconditional)
ROM:3527
ROM:3529          ; ---------------------------------------------------------------------------
ROM:3529
ROM:3529          loc_3529:                               ; CODE XREF: sub_34CA+3F↑j
ROM:3529 FE 1B                    cp      1Bh             ; Compare with accumulator
ROM:352B 20 0E                    jr      nz, loc_353B    ; Jump relative (conditional & unconditional)
ROM:352B
ROM:352D CB EE                    set     5, (hl)         ; Set bit
ROM:352F C3 CD 34                 jp      loc_34CD        ; Jump (conditional & unconditional)
ROM:352F
ROM:3532          ; ---------------------------------------------------------------------------
ROM:3532
ROM:3532          loc_3532:                               ; CODE XREF: sub_34CA+14↑j
ROM:3532 CD 80 37                 call    usart_set_var2_var3 ; call (cond & uncond)
ROM:3532
ROM:3535 FB                       ei                      ; Enable interrupts
ROM:3536 CD FB 36                 call    sub_36FB        ; call (cond & uncond)
ROM:3536
ROM:3539 18 26                    jr      loc_3561        ; Jump relative (conditional & unconditional)
ROM:3539
ROM:353B          ; ---------------------------------------------------------------------------
ROM:353B
ROM:353B          loc_353B:                               ; CODE XREF: sub_34CA+61↑j
ROM:353B FE 0A                    cp      0Ah             ; Compare with accumulator
ROM:353D F5                       push    af              ; Push register pair onto stack
ROM:353E CC BA 1C                 call    z, sub_1CBA     ; call (cond & uncond)
ROM:353E
ROM:3541 F1                       pop     af              ; Pop register pair from stack
ROM:3542 2A B6 00                 ld      hl, (word_B6)   ; Move o1 <- o2
ROM:3545 2B                       dec     hl              ; Decrement operand
ROM:3546 01 80 00                 ld      bc, 80h         ; Move o1 <- o2
ROM:3549 B7                       or      a               ; Or with accumulator
ROM:354A C8                       ret     z               ; Return (cond & uncond)
ROM:354B ED B9                    cpdr                    ; Compare accumulator with memory and
ROM:354B                                                  ; decrement address and byte counter,
ROM:354B                                                  ; continue until match is found or
ROM:354B                                                  ; byte counter is zero
ROM:354D 3E 0F                    ld      a, 0Fh          ; Move o1 <- o2
ROM:354F 20 01                    jr      nz, loc_3552    ; Jump relative (conditional & unconditional)
ROM:354F
ROM:3551 79                       ld      a, c            ; Move o1 <- o2
ROM:3551
ROM:3552
ROM:3552          loc_3552:                               ; CODE XREF: sub_34CA+53↑j
ROM:3552                                                  ; sub_34CA+5D↑j ...
ROM:3552 18 2B                    jr      loc_357F        ; Jump relative (conditional & unconditional)
ROM:3552
ROM:3554          ; ---------------------------------------------------------------------------
ROM:3554
ROM:3554          loc_3554:                               ; CODE XREF: sub_34CA+C3↓j
ROM:3554 28 21                    jr      z, loc_3577     ; Jump relative (conditional & unconditional)
ROM:3554
ROM:3556 FE A1                    cp      0A1h            ; Compare with accumulator
ROM:3558 28 1D                    jr      z, loc_3577     ; Jump relative (conditional & unconditional)
ROM:3558
ROM:355A FE 03                    cp      3               ; Compare with accumulator
ROM:355C 28 1E                    jr      z, loc_357C     ; Jump relative (conditional & unconditional)
ROM:355C
ROM:355E CD 5B 1B                 call    sub_1B5B        ; call (cond & uncond)
ROM:355E
ROM:3561
ROM:3561          loc_3561:                               ; CODE XREF: sub_34CA+6F↑j
ROM:3561                                                  ; sub_34CA+B0↓j ...
ROM:3561 CD 9A 35                 call    sub_359A        ; call (cond & uncond)
ROM:3561
ROM:3564 3E 9B                    ld      a, 9Bh          ; Move o1 <- o2
ROM:3566 DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:3566                                                  ; A - if < 10h is 0000xxxx read mask
ROM:3566                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:3566                                                  ;         A[5:3] - bit index for...
ROM:3566                                                  ;         A[2:0] - bit index for...
ROM:3566                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:3566
ROM:3567 C2 A3 24                 jp      nz, loc_24A3    ; Jump (conditional & unconditional)
ROM:3567
ROM:356A CD C9 16                 call    test_4068_b0    ; call (cond & uncond)
ROM:356A
ROM:356D C8                       ret     z               ; Return (cond & uncond)
ROM:356E F5                       push    af              ; Push register pair onto stack
ROM:356F 3E 87                    ld      a, 87h          ; Move o1 <- o2
ROM:3571 DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:3571                                                  ; A - if < 10h is 0000xxxx read mask
ROM:3571                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:3571                                                  ;         A[5:3] - bit index for...
ROM:3571                                                  ;         A[2:0] - bit index for...
ROM:3571                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:3571
ROM:3572 C4 2E 18                 call    nz, sub_182E    ; call (cond & uncond)
ROM:3572
ROM:3575 F1                       pop     af              ; Pop register pair from stack
ROM:3576 C9                       ret                     ; Return (cond & uncond)
ROM:3576
ROM:3577          ; ---------------------------------------------------------------------------
ROM:3577
ROM:3577          loc_3577:                               ; CODE XREF: sub_34CA:loc_3554↑j
ROM:3577                                                  ; sub_34CA+8E↑j
ROM:3577 CD 4E 20                 call    sub_204E        ; call (cond & uncond)
ROM:3577
ROM:357A 18 E5                    jr      loc_3561        ; Jump relative (conditional & unconditional)
ROM:357A
ROM:357C          ; ---------------------------------------------------------------------------
ROM:357C
ROM:357C          loc_357C:                               ; CODE XREF: sub_34CA+92↑j
ROM:357C C3 A3 24                 jp      loc_24A3        ; Jump (conditional & unconditional)
ROM:357C
ROM:357F          ; ---------------------------------------------------------------------------
ROM:357F
ROM:357F          loc_357F:                               ; CODE XREF: sub_34CA:loc_3552↑j
ROM:357F 32 1E 42                 ld      (word_421E), a  ; Move o1 <- o2
ROM:3582 32 1F 42                 ld      (word_421E+1), a ; Move o1 <- o2
ROM:3585 2A 7B 41                 ld      hl, (word_417B) ; Move o1 <- o2
ROM:3588 22 73 40                 ld      (word_4073), hl ; Move o1 <- o2
ROM:358B FE A0                    cp      0A0h            ; Compare with accumulator
ROM:358D 18 C5                    jr      loc_3554        ; Jump relative (conditional & unconditional)
ROM:358D
ROM:358D          ; ---------------------------------------------------------------------------
ROM:358F FF                       db 0FFh
ROM:3590 FF                       db 0FFh
ROM:3591          ; ---------------------------------------------------------------------------
ROM:3591
ROM:3591          loc_3591:                               ; CODE XREF: sub_34CA+C↑j
ROM:3591 FB                       ei                      ; Enable interrupts
ROM:3592 CD FB 36                 call    sub_36FB        ; call (cond & uncond)
ROM:3592
ROM:3595 18 CA                    jr      loc_3561        ; Jump relative (conditional & unconditional)
ROM:3595
ROM:3595          ; End of function sub_34CA
ROM:3595
ROM:3597
ROM:3597          ; =============== S U B R O U T I N E =======================================
ROM:3597
ROM:3597
ROM:3597          sub_3597:                               ; CODE XREF: sub_19FC+5E↑p
ROM:3597                                                  ; sub_2EDB-A28↑p
ROM:3597 CD 21 36                 call    sub_3621        ; call (cond & uncond)
ROM:3597
ROM:3597          ; End of function sub_3597
ROM:3597
ROM:359A
ROM:359A          ; =============== S U B R O U T I N E =======================================
ROM:359A
ROM:359A
ROM:359A          sub_359A:                               ; CODE XREF: sub_2EDB:loc_24BF↑p
ROM:359A                                                  ; sub_34CA:loc_3561↑p ...
ROM:359A 2A 77 41                 ld      hl, (usart_var1_420E) ; Move o1 <- o2
ROM:359D 11 0E 42                 ld      de, 420Eh       ; Move o1 <- o2
ROM:35A0 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:35A0
ROM:35A1 C8                       ret     z               ; Return (cond & uncond)
ROM:35A2 D8                       ret     c               ; Return (cond & uncond)
ROM:35A3 1A                       ld      a, (de)         ; Move o1 <- o2
ROM:35A4 E5                       push    hl              ; Push register pair onto stack
ROM:35A5 D5                       push    de              ; Push register pair onto stack
ROM:35A6 CD B9 35                 call    sub_35B9        ; call (cond & uncond)
ROM:35A6
ROM:35A9 D1                       pop     de              ; Pop register pair from stack
ROM:35AA C1                       pop     bc              ; Pop register pair from stack
ROM:35AB D8                       ret     c               ; Return (cond & uncond)
ROM:35AC 0D                       dec     c               ; Decrement operand
ROM:35AD 28 05                    jr      z, loc_35B4     ; Jump relative (conditional & unconditional)
ROM:35AD
ROM:35AF 21 0F 42                 ld      hl, 420Fh       ; Move o1 <- o2
ROM:35B2 ED B0                    ldir                    ; Transfer data (DE)->(HL) until byte
ROM:35B2                                                  ; counter is zero, increment destination
ROM:35B2                                                  ; and source addresses
ROM:35B2
ROM:35B4
ROM:35B4          loc_35B4:                               ; CODE XREF: sub_359A+13↑j
ROM:35B4 EB                       ex      de, hl          ; Exchange operands
ROM:35B5 22 77 41                 ld      (usart_var1_420E), hl ; Move o1 <- o2
ROM:35B8 C9                       ret                     ; Return (cond & uncond)
ROM:35B8
ROM:35B8          ; End of function sub_359A
ROM:35B8
ROM:35B9
ROM:35B9          ; =============== S U B R O U T I N E =======================================
ROM:35B9
ROM:35B9
ROM:35B9          sub_35B9:                               ; CODE XREF: sub_359A+C↑p
ROM:35B9 57                       ld      d, a            ; Move o1 <- o2
ROM:35BA 21 B4 40                 ld      hl, 40B4h       ; Move o1 <- o2
ROM:35BD 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:35BE FE BA                    cp      0BAh            ; Compare with accumulator
ROM:35C0 28 03                    jr      z, loc_35C5     ; Jump relative (conditional & unconditional)
ROM:35C0
ROM:35C2 32 BC 40                 ld      (byte_40BC), a  ; Move o1 <- o2
ROM:35C2
ROM:35C5
ROM:35C5          loc_35C5:                               ; CODE XREF: sub_35B9+7↑j
ROM:35C5 36 BA                    ld      (hl), 0BAh      ; Move o1 <- o2
ROM:35C7 CD B2 34                 call    sub_34B2        ; call (cond & uncond)
ROM:35C7
ROM:35CA CB 5E                    bit     3, (hl)         ; Test <bit> in operand
ROM:35CC 7A                       ld      a, d            ; Move o1 <- o2
ROM:35CC
ROM:35CC          ; End of function sub_35B9
ROM:35CC
ROM:35CD
ROM:35CD          ; =============== S U B R O U T I N E =======================================
ROM:35CD
ROM:35CD
ROM:35CD          Usart_SomeLogic:                        ; CODE XREF: sub_372D+B↓p
ROM:35CD 57                       ld      d, a            ; Move o1 <- o2
ROM:35CE 28 15                    jr      z, loc_35E5     ; Jump relative (conditional & unconditional)
ROM:35CE
ROM:35D0 DB 1A                    in      a, (USART_Ctrl_A) ; Input from port to A
ROM:35D2 CB 7F                    bit     7, a            ; Test <bit> in operand
ROM:35D4 20 0F                    jr      nz, loc_35E5    ; Jump relative (conditional & unconditional)
ROM:35D4
ROM:35D6 CB 57                    bit     2, a            ; Test <bit> in operand
ROM:35D8 28 0B                    jr      z, loc_35E5     ; Jump relative (conditional & unconditional)
ROM:35D8
ROM:35DA 7A                       ld      a, d            ; Move o1 <- o2
ROM:35DB D3 18                    out     (USART_Data_A), a ; Output to port
ROM:35DD 3A BC 40                 ld      a, (byte_40BC)  ; Move o1 <- o2
ROM:35E0 32 B4 40                 ld      (Display_pos8), a ; Display_pos8
ROM:35E3 B7                       or      a               ; Or with accumulator
ROM:35E4 C9                       ret                     ; Return (cond & uncond)
ROM:35E4
ROM:35E5          ; ---------------------------------------------------------------------------
ROM:35E5
ROM:35E5          loc_35E5:                               ; CODE XREF: Usart_SomeLogic+1↑j
ROM:35E5                                                  ; Usart_SomeLogic+7↑j ...
ROM:35E5 7A                       ld      a, d            ; Move o1 <- o2
ROM:35E6 37                       scf                     ; Set carry flag
ROM:35E7 C9                       ret                     ; Return (cond & uncond)
ROM:35E7
ROM:35E7          ; End of function Usart_SomeLogic
ROM:35E7
ROM:35E8          ; ---------------------------------------------------------------------------
ROM:35E8          ; START OF FUNCTION CHUNK FOR sub_3607
ROM:35E8
ROM:35E8          loc_35E8:                               ; CODE XREF: sub_3607+1↓j
ROM:35E8 FE 87                    cp      87h             ; Compare with accumulator
ROM:35EA CA 2E 18                 jp      z, sub_182E     ; Jump (conditional & unconditional)
ROM:35EA
ROM:35ED CD D7 37                 call    sub_37D7        ; call (cond & uncond)
ROM:35ED
ROM:35F0 38 25                    jr      c, loc_3617     ; Jump relative (conditional & unconditional)
ROM:35F0
ROM:35F2 F5                       push    af              ; Push register pair onto stack
ROM:35F3 3E 97                    ld      a, 97h          ; Move o1 <- o2
ROM:35F5 CD 11 2A                 call    sub_2A11        ; call (cond & uncond)
ROM:35F5
ROM:35F8 3E 1B                    ld      a, 1Bh          ; Move o1 <- o2
ROM:35FA CD D7 37                 call    sub_37D7        ; call (cond & uncond)
ROM:35FA
ROM:35FD F1                       pop     af              ; Pop register pair from stack
ROM:35FE CD D7 37                 call    sub_37D7        ; call (cond & uncond)
ROM:35FE
ROM:3601
ROM:3601          loc_3601:                               ; CODE XREF: sub_3607-3↓j
ROM:3601 6F                       ld      l, a            ; Move o1 <- o2
ROM:3602 DF                       rst     18h             ; KeyboardReadColumn Arguments:
ROM:3602                                                  ; A - if < 10h is 0000xxxx read mask
ROM:3602                                                  ; else - A[7:6]: (0x)- ColumnDataB, (10) - ColumnDataA, 11-RowDataB
ROM:3602                                                  ;         A[5:3] - bit index for...
ROM:3602                                                  ;         A[2:0] - bit index for...
ROM:3602                                                  ; Return: A - Value from port, Z flag if A is empty
ROM:3602
ROM:3603 7D                       ld      a, l            ; Move o1 <- o2
ROM:3604 20 FB                    jr      nz, loc_3601    ; Jump relative (conditional & unconditional)
ROM:3604
ROM:3606 C9                       ret                     ; Return (cond & uncond)
ROM:3606
ROM:3606          ; END OF FUNCTION CHUNK FOR sub_3607
ROM:3607
ROM:3607          ; =============== S U B R O U T I N E =======================================
ROM:3607
ROM:3607
ROM:3607          sub_3607:                               ; CODE XREF: sub_19FC+11↑p
ROM:3607
ROM:3607          ; FUNCTION CHUNK AT ROM:35E8 SIZE 0000001F BYTES
ROM:3607
ROM:3607 EF                       rst     28h             ; Restart at vector <int>
ROM:3607
ROM:3608 20 DE                    jr      nz, loc_35E8    ; Jump relative (conditional & unconditional)
ROM:3608
ROM:360A F7                       rst     30h             ; Restart at vector <int>
ROM:360A
ROM:360B 20 02                    jr      nz, loc_360F    ; Jump relative (conditional & unconditional)
ROM:360B
ROM:360D B7                       or      a               ; Or with accumulator
ROM:360E C8                       ret     z               ; Return (cond & uncond)
ROM:360E
ROM:360F
ROM:360F          loc_360F:                               ; CODE XREF: sub_3607+4↑j
ROM:360F CD 11 2A                 call    sub_2A11        ; call (cond & uncond)
ROM:360F
ROM:360F          ; End of function sub_3607
ROM:360F
ROM:3612
ROM:3612          ; =============== S U B R O U T I N E =======================================
ROM:3612
ROM:3612
ROM:3612          sub_3612:                               ; CODE XREF: sub_3612+D↓j
ROM:3612                                                  ; sub_3633+59↓p
ROM:3612 CD CE 37                 call    sub_37CE        ; call (cond & uncond)
ROM:3612
ROM:3615 30 1C                    jr      nc, sub_3633    ; Jump relative (conditional & unconditional)
ROM:3615
ROM:3617
ROM:3617          loc_3617:                               ; CODE XREF: sub_3607-17↑j
ROM:3617 F5                       push    af              ; Push register pair onto stack
ROM:3618 CD 9A 35                 call    sub_359A        ; call (cond & uncond)
ROM:3618
ROM:361B CD C1 1C                 call    sub_1CC1        ; call (cond & uncond)
ROM:361B
ROM:361E F1                       pop     af              ; Pop register pair from stack
ROM:361F 18 F1                    jr      sub_3612        ; Jump relative (conditional & unconditional)
ROM:361F
ROM:361F          ; End of function sub_3612
ROM:361F
ROM:3621
ROM:3621          ; =============== S U B R O U T I N E =======================================
ROM:3621
ROM:3621
ROM:3621          sub_3621:                               ; CODE XREF: sub_3597↑p
ROM:3621 CD B3 16                 call    sub_16B3        ; call (cond & uncond)
ROM:3621
ROM:3624 C0                       ret     nz              ; Return (cond & uncond)
ROM:3625 CD CE 37                 call    sub_37CE        ; call (cond & uncond)
ROM:3625
ROM:3628 D8                       ret     c               ; Return (cond & uncond)
ROM:3629 CD CA 1C                 call    sub_1CCA        ; call (cond & uncond)
ROM:3629
ROM:362C C8                       ret     z               ; Return (cond & uncond)
ROM:362D CD E6 27                 call    sub_27E6        ; call (cond & uncond)
ROM:362D
ROM:3630 22 5F 41                 ld      (word_415F), hl ; Move o1 <- o2
ROM:3630
ROM:3630          ; End of function sub_3621
ROM:3630
ROM:3633
ROM:3633          ; =============== S U B R O U T I N E =======================================
ROM:3633
ROM:3633
ROM:3633          sub_3633:                               ; CODE XREF: sub_2EDB-A21↑p
ROM:3633                                                  ; sub_3612+3↑j
ROM:3633 2A B8 00                 ld      hl, (word_B8)   ; Move o1 <- o2
ROM:3636 ED 4B B2                 ld      bc, (word_B2)   ; Move o1 <- o2
ROM:3636 00
ROM:363A ED B1                    cpir                    ; Compare accumulator with memory and
ROM:363A                                                  ; increment address and byte counter,
ROM:363A                                                  ; continue until match is found or
ROM:363A                                                  ; byte counter is zero
ROM:363C 20 1A                    jr      nz, loc_3658    ; Jump relative (conditional & unconditional)
ROM:363C
ROM:363E 3E 1B                    ld      a, 1Bh          ; Move o1 <- o2
ROM:3640 CD D7 37                 call    sub_37D7        ; call (cond & uncond)
ROM:3640
ROM:3643 0C                       inc     c               ; Increment operand
ROM:3644 3A B2 00                 ld      a, (word_B2)    ; Move o1 <- o2
ROM:3647 91                       sub     c               ; Subtract from A
ROM:3648 2A B6 00                 ld      hl, (word_B6)   ; Move o1 <- o2
ROM:364B CD 8A 37                 call    sub_378A        ; call (cond & uncond)
ROM:364B
ROM:364E
ROM:364E          loc_364E:                               ; CODE XREF: sub_3633+22↓j
ROM:364E                                                  ; sub_3633+36↓j
ROM:364E CD D7 37                 call    sub_37D7        ; call (cond & uncond)
ROM:364E
ROM:3651 FE 0A                    cp      0Ah             ; Compare with accumulator
ROM:3653 3E 0D                    ld      a, 0Dh          ; Move o1 <- o2
ROM:3655 28 F7                    jr      z, loc_364E     ; Jump relative (conditional & unconditional)
ROM:3655
ROM:3657 C9                       ret                     ; Return (cond & uncond)
ROM:3657
ROM:3658          ; ---------------------------------------------------------------------------
ROM:3658
ROM:3658          loc_3658:                               ; CODE XREF: sub_3633+9↑j
ROM:3658 FE 87                    cp      87h             ; Compare with accumulator
ROM:365A 28 15                    jr      z, loc_3671     ; Jump relative (conditional & unconditional)
ROM:365A
ROM:365C FE 80                    cp      80h             ; Compare with accumulator
ROM:365E D0                       ret     nc              ; Return (cond & uncond)
ROM:365F 2A B4 00                 ld      hl, (word_B4)   ; Move o1 <- o2
ROM:3662 CD 8A 37                 call    sub_378A        ; call (cond & uncond)
ROM:3662
ROM:3665 B7                       or      a               ; Or with accumulator
ROM:3666 C8                       ret     z               ; Return (cond & uncond)
ROM:3667 FE FF                    cp      0FFh            ; Compare with accumulator
ROM:3669 20 E3                    jr      nz, loc_364E    ; Jump relative (conditional & unconditional)
ROM:3669
ROM:366B 00                       nop                     ; No Operation
ROM:366C 00                       nop                     ; No Operation
ROM:366D 00                       nop                     ; No Operation
ROM:366E 00                       nop                     ; No Operation
ROM:366F 00                       nop                     ; No Operation
ROM:3670 00                       nop                     ; No Operation
ROM:3670
ROM:3671
ROM:3671          loc_3671:                               ; CODE XREF: sub_3633+27↑j
ROM:3671 2A 5F 41                 ld      hl, (word_415F) ; Move o1 <- o2
ROM:3674 CD 57 28                 call    sub_2857        ; call (cond & uncond)
ROM:3674
ROM:3677 2E 0F                    ld      l, 0Fh          ; Move o1 <- o2
ROM:3679 CB 7A                    bit     7, d            ; Test <bit> in operand
ROM:367B 28 05                    jr      z, loc_3682     ; Jump relative (conditional & unconditional)
ROM:367B
ROM:367D CD A7 06                 call    sub_6A7         ; call (cond & uncond)
ROM:367D
ROM:3680 2E 0E                    ld      l, 0Eh          ; Move o1 <- o2
ROM:3680
ROM:3682
ROM:3682          loc_3682:                               ; CODE XREF: sub_3633+48↑j
ROM:3682 EB                       ex      de, hl          ; Exchange operands
ROM:3683 CD 14 22                 call    sub_2214        ; call (cond & uncond)
ROM:3683
ROM:3686 2D                       dec     l               ; Decrement operand
ROM:3687 C8                       ret     z               ; Return (cond & uncond)
ROM:3688 45                       ld      b, l            ; Move o1 <- o2
ROM:3689 4B                       ld      c, e            ; Move o1 <- o2
ROM:3689
ROM:368A
ROM:368A          loc_368A:                               ; CODE XREF: sub_3633+62↓j
ROM:368A 79                       ld      a, c            ; Move o1 <- o2
ROM:368B C5                       push    bc              ; Push register pair onto stack
ROM:368C CD 12 36                 call    sub_3612        ; call (cond & uncond)
ROM:368C
ROM:368F
ROM:368F          loc_368F:                               ; CODE XREF: sub_3633+5F↓j
ROM:368F CD 9A 35                 call    sub_359A        ; call (cond & uncond)
ROM:368F
ROM:3692 38 FB                    jr      c, loc_368F     ; Jump relative (conditional & unconditional)
ROM:3692
ROM:3694 C1                       pop     bc              ; Pop register pair from stack
ROM:3695 10 F3                    djnz    loc_368A        ; Decrement reg B and jump relative if zero
ROM:3695
ROM:3697 C9                       ret                     ; Return (cond & uncond)
ROM:3697
ROM:3697          ; End of function sub_3633
ROM:3697
ROM:3698          ; ---------------------------------------------------------------------------
ROM:3698 CD C9 16                 call    test_4068_b0    ; call (cond & uncond)
ROM:3698
ROM:369B 28 10                    jr      z, loc_36AD     ; Jump relative (conditional & unconditional)
ROM:369B
ROM:369D CB A7                    res     4, a            ; Reset bit
ROM:369F CD 60 37                 call    sub_3760        ; call (cond & uncond)
ROM:369F
ROM:36A2 CD 1C 37                 call    sub_371C        ; call (cond & uncond)
ROM:36A2
ROM:36A5 CB 66                    bit     4, (hl)         ; Test <bit> in operand
ROM:36A7 CC D5 16                 call    z, set_4068_b0_to_0 ; call (cond & uncond)
ROM:36A7
ROM:36AA
ROM:36AA          loc_36AA:                               ; CODE XREF: ROM:36CA↓j
ROM:36AA C3 E6 18                 jp      loc_18E6        ; Jump (conditional & unconditional)
ROM:36AA
ROM:36AD          ; ---------------------------------------------------------------------------
ROM:36AD
ROM:36AD          loc_36AD:                               ; CODE XREF: ROM:369B↑j
ROM:36AD F3                       di                      ; Disable interrupts
ROM:36AE CD 80 37                 call    usart_set_var2_var3 ; call (cond & uncond)
ROM:36AE
ROM:36B1 FB                       ei                      ; Enable interrupts
ROM:36B1
ROM:36B2
ROM:36B2          loc_36B2:                               ; CODE XREF: ROM:36BB↓j
ROM:36B2 CD 79 37                 call    Usart_Get_RR0   ; A <= Usart_Ctrl_A.RR0
ROM:36B2
ROM:36B5 CB 47                    bit     0, a            ; Test <bit> in operand
ROM:36B7 28 04                    jr      z, loc_36BD     ; Jump relative (conditional & unconditional)
ROM:36B7
ROM:36B9 DB 18                    in      a, (USART_Data_A) ; Input from port to A
ROM:36BB 18 F5                    jr      loc_36B2        ; Jump relative (conditional & unconditional)
ROM:36BB
ROM:36BD          ; ---------------------------------------------------------------------------
ROM:36BD
ROM:36BD          loc_36BD:                               ; CODE XREF: ROM:36B7↑j
ROM:36BD CD E0 37                 call    USART_RR0_SYNC_TST ; call (cond & uncond)
ROM:36BD
ROM:36C0 C4 60 37                 call    nz, sub_3760    ; call (cond & uncond)
ROM:36C0
ROM:36C3 3E 30                    ld      a, 30h ; '0'    ; Move o1 <- o2
ROM:36C5 D3 1A                    out     (USART_Ctrl_A), a ; Output to port
ROM:36C7 CD CF 16                 call    set_4068_b0_to_1 ; call (cond & uncond)
ROM:36C7
ROM:36CA 18 DE                    jr      loc_36AA        ; Jump relative (conditional & unconditional)
ROM:36CA
ROM:36CC          ; ---------------------------------------------------------------------------
ROM:36CC CD B7 16                 call    test_4068_b1    ; call (cond & uncond)
ROM:36CC
ROM:36CF 28 0C                    jr      z, loc_36DD     ; Jump relative (conditional & unconditional)
ROM:36CF
ROM:36D1 CD C3 16                 call    set_4068_b1_to_0 ; call (cond & uncond)
ROM:36D1
ROM:36D4
ROM:36D4          loc_36D4:                               ; CODE XREF: ROM:36F9↓j
ROM:36D4 21 0E 42                 ld      hl, 420Eh       ; Move o1 <- o2
ROM:36D7 22 77 41                 ld      (usart_var1_420E), hl ; Move o1 <- o2
ROM:36DA C3 C8 18                 jp      loc_18C8        ; Jump (conditional & unconditional)
ROM:36DA
ROM:36DD          ; ---------------------------------------------------------------------------
ROM:36DD
ROM:36DD          loc_36DD:                               ; CODE XREF: ROM:36CF↑j
ROM:36DD CD 79 37                 call    Usart_Get_RR0   ; A <= Usart_Ctrl_A.RR0
ROM:36DD
ROM:36E0 CB 57                    bit     2, a            ; Test <bit> in operand
ROM:36E2 28 0D                    jr      z, loc_36F1     ; Jump relative (conditional & unconditional)
ROM:36E2
ROM:36E4 21 59 41                 ld      hl, 4159h       ; Move o1 <- o2
ROM:36E7 CB 5E                    bit     3, (hl)         ; Test <bit> in operand
ROM:36E9 20 0B                    jr      nz, loc_36F6    ; Jump relative (conditional & unconditional)
ROM:36E9
ROM:36EB CB 56                    bit     2, (hl)         ; Test <bit> in operand
ROM:36ED 28 02                    jr      z, loc_36F1     ; Jump relative (conditional & unconditional)
ROM:36ED
ROM:36EF CB 6F                    bit     5, a            ; Test <bit> in operand
ROM:36EF
ROM:36F1
ROM:36F1          loc_36F1:                               ; CODE XREF: ROM:36E2↑j
ROM:36F1                                                  ; ROM:36ED↑j
ROM:36F1 CA 64 26                 jp      z, sub_2664     ; Jump (conditional & unconditional)
ROM:36F1
ROM:36F4 CB DE                    set     3, (hl)         ; Set bit
ROM:36F4
ROM:36F6
ROM:36F6          loc_36F6:                               ; CODE XREF: ROM:36E9↑j
ROM:36F6 CD BD 16                 call    set_4068_b1_to_1 ; call (cond & uncond)
ROM:36F6
ROM:36F9 18 D9                    jr      loc_36D4        ; Jump relative (conditional & unconditional)
ROM:36F9
ROM:36FB
ROM:36FB          ; =============== S U B R O U T I N E =======================================
ROM:36FB
ROM:36FB
ROM:36FB          sub_36FB:                               ; CODE XREF: sub_34CA+2E↑p
ROM:36FB                                                  ; sub_34CA+6C↑p ...
ROM:36FB
ROM:36FB          ; FUNCTION CHUNK AT ROM:373D SIZE 00000009 BYTES
ROM:36FB          ; FUNCTION CHUNK AT ROM:375E SIZE 00000002 BYTES
ROM:36FB
ROM:36FB CD C9 16                 call    test_4068_b0    ; call (cond & uncond)
ROM:36FB
ROM:36FE C8                       ret     z               ; Return (cond & uncond)
ROM:36FF 21 59 41                 ld      hl, 4159h       ; Move o1 <- o2
ROM:3702 CB 66                    bit     4, (hl)         ; Test <bit> in operand
ROM:3704 C0                       ret     nz              ; Return (cond & uncond)
ROM:3705 F5                       push    af              ; Push register pair onto stack
ROM:3706 CD E0 37                 call    USART_RR0_SYNC_TST ; call (cond & uncond)
ROM:3706
ROM:3709 28 32                    jr      z, loc_373D     ; Jump relative (conditional & unconditional)
ROM:3709
ROM:370B 3E 11                    ld      a, 11h          ; Move o1 <- o2
ROM:370D CD 2D 37                 call    sub_372D        ; call (cond & uncond)
ROM:370D
ROM:3710 38 4C                    jr      c, loc_375E     ; Jump relative (conditional & unconditional)
ROM:3710
ROM:3712 F1                       pop     af              ; Pop register pair from stack
ROM:3713 CB E6                    set     4, (hl)         ; Set bit
ROM:3715 C9                       ret                     ; Return (cond & uncond)
ROM:3715
ROM:3715          ; End of function sub_36FB
ROM:3715
ROM:3716
ROM:3716          ; =============== S U B R O U T I N E =======================================
ROM:3716
ROM:3716
ROM:3716          test_4159_b4:                           ; CODE XREF: UsartReadData+38↓p
ROM:3716 21 59 41                 ld      hl, 4159h       ; Move o1 <- o2
ROM:3719 CB 66                    bit     4, (hl)         ; Test <bit> in operand
ROM:371B C8                       ret     z               ; Return (cond & uncond)
ROM:371B
ROM:371B          ; End of function test_4159_b4
ROM:371B
ROM:371C
ROM:371C          ; =============== S U B R O U T I N E =======================================
ROM:371C
ROM:371C
ROM:371C          sub_371C:                               ; CODE XREF: UsartCtrl+A9↑p
ROM:371C                                                  ; ROM:36A2↑p
ROM:371C
ROM:371C          ; FUNCTION CHUNK AT ROM:3746 SIZE 00000018 BYTES
ROM:371C          ; FUNCTION CHUNK AT ROM:375E SIZE 00000002 BYTES
ROM:371C
ROM:371C F5                       push    af              ; Push register pair onto stack
ROM:371D CD E0 37                 call    USART_RR0_SYNC_TST ; call (cond & uncond)
ROM:371D
ROM:3720 28 24                    jr      z, loc_3746     ; Jump relative (conditional & unconditional)
ROM:3720
ROM:3722 3E 13                    ld      a, 13h          ; Move o1 <- o2
ROM:3724 CD 2D 37                 call    sub_372D        ; call (cond & uncond)
ROM:3724
ROM:3727 38 35                    jr      c, loc_375E     ; Jump relative (conditional & unconditional)
ROM:3727
ROM:3729 F1                       pop     af              ; Pop register pair from stack
ROM:372A CB A6                    res     4, (hl)         ; Reset bit
ROM:372C C9                       ret                     ; Return (cond & uncond)
ROM:372C
ROM:372C          ; End of function sub_371C
ROM:372C
ROM:372D
ROM:372D          ; =============== S U B R O U T I N E =======================================
ROM:372D
ROM:372D
ROM:372D          sub_372D:                               ; CODE XREF: sub_36FB+12↑p
ROM:372D                                                  ; sub_371C+8↑p
ROM:372D C5                       push    bc              ; Push register pair onto stack
ROM:372E 47                       ld      b, a            ; Move o1 <- o2
ROM:372F CD 79 37                 call    Usart_Get_RR0   ; A <= Usart_Ctrl_A.RR0
ROM:372F
ROM:3732 CB 67                    bit     4, a            ; Test <bit> in operand
ROM:3734 78                       ld      a, b            ; Move o1 <- o2
ROM:3735 C1                       pop     bc              ; Pop register pair from stack
ROM:3736 37                       scf                     ; Set carry flag
ROM:3737 D5                       push    de              ; Push register pair onto stack
ROM:3738 C4 CD 35                 call    nz, Usart_SomeLogic ; call (cond & uncond)
ROM:3738
ROM:373B D1                       pop     de              ; Pop register pair from stack
ROM:373C C9                       ret                     ; Return (cond & uncond)
ROM:373C
ROM:373C          ; End of function sub_372D
ROM:373C
ROM:373D          ; ---------------------------------------------------------------------------
ROM:373D          ; START OF FUNCTION CHUNK FOR sub_36FB
ROM:373D
ROM:373D          loc_373D:                               ; CODE XREF: sub_36FB+E↑j
ROM:373D CB E6                    set     4, (hl)         ; Set bit
ROM:373F 3A F1 37                 ld      a, (unk_37F1)   ; Tx Enable. 7bit character
ROM:373F
ROM:3742
ROM:3742          loc_3742:                               ; CODE XREF: sub_3760+6↓j
ROM:3742                                                  ; sub_3760+A↓j
ROM:3742 CB FF                    set     7, a            ; Set bit
ROM:3744 18 05                    jr      loc_374B        ; Jump relative (conditional & unconditional)
ROM:3744
ROM:3744          ; END OF FUNCTION CHUNK FOR sub_36FB
ROM:3746          ; ---------------------------------------------------------------------------
ROM:3746          ; START OF FUNCTION CHUNK FOR sub_371C
ROM:3746
ROM:3746          loc_3746:                               ; CODE XREF: sub_371C+4↑j
ROM:3746 3A F1 37                 ld      a, (unk_37F1)   ; Tx Enable. 7bit character
ROM:3749 CB A6                    res     4, (hl)         ; Reset bit
ROM:3749
ROM:374B
ROM:374B          loc_374B:                               ; CODE XREF: sub_36FB+49↑j
ROM:374B E5                       push    hl              ; Push register pair onto stack
ROM:374C 21 5A 41                 ld      hl, 415Ah       ; Move o1 <- o2
ROM:374F CB 7E                    bit     7, (hl)         ; Test <bit> in operand
ROM:3751 E1                       pop     hl              ; Pop register pair from stack
ROM:3752 28 02                    jr      z, loc_3756     ; Jump relative (conditional & unconditional)
ROM:3752
ROM:3754 CB F7                    set     6, a            ; Set bit
ROM:3754
ROM:3756
ROM:3756          loc_3756:                               ; CODE XREF: sub_371C+36↑j
ROM:3756 F5                       push    af              ; Push register pair onto stack
ROM:3757 3E 05                    ld      a, 5            ; Move o1 <- o2
ROM:3759 D3 1A                    out     (USART_Ctrl_A), a ; Output to port
ROM:375B F1                       pop     af              ; Pop register pair from stack
ROM:375C D3 1A                    out     (USART_Ctrl_A), a ; Output to port
ROM:375C
ROM:375C          ; END OF FUNCTION CHUNK FOR sub_371C
ROM:375E          ; START OF FUNCTION CHUNK FOR sub_36FB
ROM:375E          ;   ADDITIONAL PARENT FUNCTION sub_371C
ROM:375E
ROM:375E          loc_375E:                               ; CODE XREF: sub_36FB+15↑j
ROM:375E                                                  ; sub_371C+B↑j
ROM:375E F1                       pop     af              ; Pop register pair from stack
ROM:375F C9                       ret                     ; Return (cond & uncond)
ROM:375F
ROM:375F          ; END OF FUNCTION CHUNK FOR sub_36FB
ROM:3760
ROM:3760          ; =============== S U B R O U T I N E =======================================
ROM:3760
ROM:3760
ROM:3760          sub_3760:                               ; CODE XREF: ROM:369F↑p
ROM:3760                                                  ; ROM:36C0↑p
ROM:3760 F5                       push    af              ; Push register pair onto stack
ROM:3761 CB 67                    bit     4, a            ; Test <bit> in operand
ROM:3763 3A F1 37                 ld      a, (unk_37F1)   ; Tx Enable. 7bit character
ROM:3766 28 DA                    jr      z, loc_3742     ; Jump relative (conditional & unconditional)
ROM:3766
ROM:3768 CB CF                    set     1, a            ; Set bit
ROM:376A 18 D6                    jr      loc_3742        ; Jump relative (conditional & unconditional)
ROM:376A
ROM:376A          ; End of function sub_3760
ROM:376A
ROM:376C
ROM:376C          ; =============== S U B R O U T I N E =======================================
ROM:376C
ROM:376C
ROM:376C          sub_376C:                               ; CODE XREF: INT_USART_Hdlr+13↑p
ROM:376C                                                  ; UsartReadData:loc_37CB↓j
ROM:376C CD C9 16                 call    test_4068_b0    ; call (cond & uncond)
ROM:376C
ROM:376F C8                       ret     z               ; Return (cond & uncond)
ROM:3770 2A 73 41                 ld      hl, (usart_var2_41CE) ; Move o1 <- o2
ROM:3773 77                       ld      (hl), a         ; Move o1 <- o2
ROM:3774 23                       inc     hl              ; Increment operand
ROM:3775 22 73 41                 ld      (usart_var2_41CE), hl ; Move o1 <- o2
ROM:3778 C9                       ret                     ; Return (cond & uncond)
ROM:3778
ROM:3778          ; End of function sub_376C
ROM:3778
ROM:3779
ROM:3779          ; =============== S U B R O U T I N E =======================================
ROM:3779
ROM:3779          ; A <= Usart_Ctrl_A.RR0
ROM:3779
ROM:3779          Usart_Get_RR0:                          ; CODE XREF: sub_34B2↑p
ROM:3779                                                  ; ROM:loc_36B2↑p ...
ROM:3779 3E 10                    ld      a, 10h          ; Move o1 <- o2
ROM:377B D3 1A                    out     (USART_Ctrl_A), a ; Output to port
ROM:377D DB 1A                    in      a, (USART_Ctrl_A) ; Input from port to A
ROM:377F C9                       ret                     ; Return (cond & uncond)
ROM:377F
ROM:377F          ; End of function Usart_Get_RR0
ROM:377F
ROM:3780
ROM:3780          ; =============== S U B R O U T I N E =======================================
ROM:3780
ROM:3780
ROM:3780          usart_set_var2_var3:                    ; CODE XREF: UsartCtrl+6↑p
ROM:3780                                                  ; sub_34CA:loc_3532↑p ...
ROM:3780 21 CE 41                 ld      hl, 41CEh       ; Move o1 <- o2
ROM:3783 22 73 41                 ld      (usart_var2_41CE), hl ; Move o1 <- o2
ROM:3786 22 75 41                 ld      (usart_var3_41CE), hl ; Move o1 <- o2
ROM:3789 C9                       ret                     ; Return (cond & uncond)
ROM:3789
ROM:3789          ; End of function usart_set_var2_var3
ROM:3789
ROM:378A
ROM:378A          ; =============== S U B R O U T I N E =======================================
ROM:378A
ROM:378A
ROM:378A          sub_378A:                               ; CODE XREF: sub_34CA+5A↑p
ROM:378A                                                  ; sub_3633+18↑p ...
ROM:378A 4F                       ld      c, a            ; Move o1 <- o2
ROM:378B 06 00                    ld      b, 0            ; Move o1 <- o2
ROM:378D 09                       add     hl, bc          ; Add <reg> to A
ROM:378E 7E                       ld      a, (hl)         ; Move o1 <- o2
ROM:378F C9                       ret                     ; Return (cond & uncond)
ROM:378F
ROM:378F          ; End of function sub_378A
ROM:378F
ROM:3790
ROM:3790          ; =============== S U B R O U T I N E =======================================
ROM:3790
ROM:3790
ROM:3790          UsartReadData:                          ; CODE XREF: INT_USART_Hdlr+1A↑p
ROM:3790                                                  ; INT_USART_Hdlr+1D↑p ...
ROM:3790 DB 18                    in      a, (USART_Data_A) ; Input from port to A
ROM:3792 21 5A 41                 ld      hl, 415Ah       ; Move o1 <- o2
ROM:3795 CB 7E                    bit     7, (hl)         ; Test <bit> in operand
ROM:3797 20 02                    jr      nz, loc_379B    ; Jump relative (conditional & unconditional)
ROM:3797
ROM:3799 E6 7F                    and     7Fh             ; And with accumulator
ROM:3799
ROM:379B
ROM:379B          loc_379B:                               ; CODE XREF: UsartReadData+7↑j
ROM:379B FE 15                    cp      15h             ; Compare with accumulator
ROM:379D 21 59 41                 ld      hl, 4159h       ; Move o1 <- o2
ROM:37A0 28 0F                    jr      z, loc_37B1     ; Jump relative (conditional & unconditional)
ROM:37A0
ROM:37A2 CB 56                    bit     2, (hl)         ; Test <bit> in operand
ROM:37A4 28 12                    jr      z, loc_37B8     ; Jump relative (conditional & unconditional)
ROM:37A4
ROM:37A6 FE 11                    cp      11h             ; Compare with accumulator
ROM:37A8 20 03                    jr      nz, loc_37AD    ; Jump relative (conditional & unconditional)
ROM:37A8
ROM:37AA CB DE                    set     3, (hl)         ; Set bit
ROM:37AC C9                       ret                     ; Return (cond & uncond)
ROM:37AC
ROM:37AD          ; ---------------------------------------------------------------------------
ROM:37AD
ROM:37AD          loc_37AD:                               ; CODE XREF: UsartReadData+18↑j
ROM:37AD FE 13                    cp      13h             ; Compare with accumulator
ROM:37AF 20 03                    jr      nz, loc_37B4    ; Jump relative (conditional & unconditional)
ROM:37AF
ROM:37B1
ROM:37B1          loc_37B1:                               ; CODE XREF: UsartReadData+10↑j
ROM:37B1                                                  ; UsartReadData+26↓j
ROM:37B1 CB 9E                    res     3, (hl)         ; Reset bit
ROM:37B3 C9                       ret                     ; Return (cond & uncond)
ROM:37B3
ROM:37B4          ; ---------------------------------------------------------------------------
ROM:37B4
ROM:37B4          loc_37B4:                               ; CODE XREF: UsartReadData+1F↑j
ROM:37B4 FE 14                    cp      14h             ; Compare with accumulator
ROM:37B6 28 F9                    jr      z, loc_37B1     ; Jump relative (conditional & unconditional)
ROM:37B6
ROM:37B8
ROM:37B8          loc_37B8:                               ; CODE XREF: UsartReadData+14↑j
ROM:37B8 ED 5B 73                 ld      de, (usart_var2_41CE) ; Move o1 <- o2
ROM:37B8 41
ROM:37BC 21 0D 42                 ld      hl, 420Dh       ; Move o1 <- o2
ROM:37BF D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:37BF
ROM:37C0 C8                       ret     z               ; Return (cond & uncond)
ROM:37C1 01 0A 00                 ld      bc, 0Ah         ; Move o1 <- o2
ROM:37C4 ED 42                    sbc     hl, bc          ; Subtract from A with borrow
ROM:37C6 30 03                    jr      nc, loc_37CB    ; Jump relative (conditional & unconditional)
ROM:37C6
ROM:37C8 CD 16 37                 call    test_4159_b4    ; call (cond & uncond)
ROM:37C8
ROM:37CB
ROM:37CB          loc_37CB:                               ; CODE XREF: UsartReadData+36↑j
ROM:37CB C3 6C 37                 jp      sub_376C        ; Jump (conditional & unconditional)
ROM:37CB
ROM:37CB          ; End of function UsartReadData
ROM:37CB
ROM:37CE
ROM:37CE          ; =============== S U B R O U T I N E =======================================
ROM:37CE
ROM:37CE
ROM:37CE          sub_37CE:                               ; CODE XREF: sub_3612↑p
ROM:37CE                                                  ; sub_3621+4↑p
ROM:37CE 21 18 42                 ld      hl, 4218h       ; Move o1 <- o2
ROM:37D1 ED 5B 77                 ld      de, (usart_var1_420E) ; Move o1 <- o2
ROM:37D1 41
ROM:37D5 D7                       rst     10h             ; HL = HL - DE; Carry if DE < HL
ROM:37D5
ROM:37D6 C9                       ret                     ; Return (cond & uncond)
ROM:37D6
ROM:37D6          ; End of function sub_37CE
ROM:37D6
ROM:37D7
ROM:37D7          ; =============== S U B R O U T I N E =======================================
ROM:37D7
ROM:37D7
ROM:37D7          sub_37D7:                               ; CODE XREF: sub_3607-1A↑p
ROM:37D7                                                  ; sub_3607-D↑p ...
ROM:37D7 2A 77 41                 ld      hl, (usart_var1_420E) ; Move o1 <- o2
ROM:37DA 77                       ld      (hl), a         ; Move o1 <- o2
ROM:37DB 23                       inc     hl              ; Increment operand
ROM:37DC 22 77 41                 ld      (usart_var1_420E), hl ; Move o1 <- o2
ROM:37DF C9                       ret                     ; Return (cond & uncond)
ROM:37DF
ROM:37DF          ; End of function sub_37D7
ROM:37DF
ROM:37E0
ROM:37E0          ; =============== S U B R O U T I N E =======================================
ROM:37E0
ROM:37E0
ROM:37E0          USART_RR0_SYNC_TST:                     ; CODE XREF: UsartCtrl:loc_3432↑p
ROM:37E0                                                  ; ROM:loc_36BD↑p ...
ROM:37E0 21 59 41                 ld      hl, 4159h       ; Move o1 <- o2
ROM:37E3 CB 56                    bit     2, (hl)         ; Test <bit> in operand
ROM:37E5 C9                       ret                     ; Return (cond & uncond)
ROM:37E5
ROM:37E5          ; End of function USART_RR0_SYNC_TST
ROM:37E5
ROM:37E5          ; ---------------------------------------------------------------------------
ROM:37E6 02                       db    2                 ; loaded to 41CEh
ROM:37E7 07                       db    7                 ; Out to USART_Timer_ChA
ROM:37E7                                                  ; Ctrl world
ROM:37E7                                                  ; Soft Rst
ROM:37E7                                                  ; Value follows
ROM:37E8 01       Usart_ctrl_A:   db    1                 ; WR1:
ROM:37E9 0A                       db  0Ah                 ; TX INT Enable
ROM:37E9                                                  ; RX INT on first character
ROM:37EA 00                       db    0                 ; WR0: None
ROM:37EB 18                       db  18h                 ; WR0:
ROM:37EB                                                  ; Channel Rst
ROM:37EC 04                       db    4                 ; WR4
ROM:37ED 00                       db    0                 ; Parity disable
ROM:37ED                                                  ; Sync modes enable
ROM:37ED                                                  ; 8 bit sync character
ROM:37ED                                                  ; X1 Clock mode
ROM:37EE 01                       db    1                 ; WR1:
ROM:37EF 18                       db  18h                 ; INT On All Rx Characters
ROM:37F0 05                       db    5                 ; WR5
ROM:37F1 28       unk_37F1:       db  28h ; (             ; DATA XREF: sub_36FB+44↑r
ROM:37F1                                                  ; sub_371C:loc_3746↑r ...
ROM:37F1                                                  ; Tx Enable. 7bit character
ROM:37F2 03                       db    3                 ; WR3:
ROM:37F3 41                       db  41h ; A             ; Rx Enable
ROM:37F3                                                  ; 7bit character
ROM:37F4 00       Usart_ctrl_B:   db    0                 ; usart_ctrl_data (check 33FBh)
ROM:37F4                                                  ; WR0 = = 0x00
ROM:37F5 18                       db  18h                 ; Channel B Rst
ROM:37F6 04                       db    4                 ; WR4
ROM:37F7 44                       db  44h ; D             ; Parity None
ROM:37F7                                                  ; 1 stop bit
ROM:37F7                                                  ; Data rate x16 = ClockRate
ROM:37F8 01                       db    1                 ; WR1
ROM:37F9 00                       db    0                 ; TX INT Disable
ROM:37F9                                                  ; RX INT Enable
ROM:37FA 03                       db    3                 ; WR3
ROM:37FA                                                  ; RX Disable?
ROM:37FA                                                  ; 5 bit per character?
ROM:37FB 00                       db    0
ROM:37FC 05                       db    5                 ; WR5
ROM:37FC                                                  ; TX Disabled
ROM:37FD 00                       db    0
ROM:37FE 02                       db    2                 ; WR2
ROM:37FE                                                  ; Int Vector : 4058h
ROM:37FF 58                       db  58h ; X             ; Channel B Rst??? WTF?
ROM:3800 ??       Debug_code:     ds 1                    ; DATA XREF: Check_debug+2↑r
ROM:3800                                                  ; Must be R to enter Debug mode
ROM:3801 ??                       ds 1
ROM:3802 ??                       ds 1
ROM:3803 ??       Debug_routine:  ds 1                    ; CODE XREF: Check_debug+11↑j
ROM:3804 ??                       ds 1
ROM:3805 ??                       ds 1
ROM:3806 ??                       ds 1
ROM:3807 ??                       ds 1
ROM:3808 ??                       ds 1
ROM:3809 ??                       ds 1
ROM:380A ??                       ds 1
ROM:380B ??                       ds 1
ROM:380C ??                       ds 1
ROM:380D ??                       ds 1
ROM:380E ??                       ds 1
ROM:380F ??                       ds 1
ROM:3810 ??                       ds 1
ROM:3811 ??                       ds 1
ROM:3812 ??                       ds 1
ROM:3813 ??                       ds 1
ROM:3814 ??                       ds 1
ROM:3815 ??                       ds 1
ROM:3816 ??                       ds 1
ROM:3817 ??                       ds 1
ROM:3818 ??                       ds 1
ROM:3819 ??                       ds 1
ROM:381A ??                       ds 1
ROM:381B ??                       ds 1
ROM:381C ??                       ds 1
ROM:381D ??                       ds 1
ROM:381E ??                       ds 1
ROM:381F ??                       ds 1
ROM:3820 ??                       ds 1
ROM:3821 ??                       ds 1
ROM:3822 ??                       ds 1
ROM:3823 ??                       ds 1
ROM:3824 ??                       ds 1
ROM:3825 ??                       ds 1
ROM:3826 ??                       ds 1
ROM:3827 ??                       ds 1
ROM:3828 ??                       ds 1
ROM:3829 ??                       ds 1
ROM:382A ??                       ds 1
ROM:382B ??                       ds 1
ROM:382C ??                       ds 1
ROM:382D ??                       ds 1
ROM:382E ??                       ds 1
ROM:382F ??                       ds 1
ROM:3830 ??                       ds 1
ROM:3831 ??                       ds 1
ROM:3832 ??                       ds 1
ROM:3833 ??                       ds 1
ROM:3834 ??                       ds 1
ROM:3835 ??                       ds 1
ROM:3836 ??                       ds 1
ROM:3837 ??                       ds 1
ROM:3838 ??                       ds 1
ROM:3839 ??                       ds 1
ROM:383A ??                       ds 1
ROM:383B ??                       ds 1
ROM:383C ??                       ds 1
ROM:383D ??                       ds 1
ROM:383E ??                       ds 1
ROM:383F ??                       ds 1
ROM:3840 ??                       ds 1
ROM:3841 ??                       ds 1
ROM:3842 ??                       ds 1
ROM:3843 ??                       ds 1
ROM:3844 ??                       ds 1
ROM:3845 ??                       ds 1
ROM:3846 ??                       ds 1
ROM:3847 ??                       ds 1
ROM:3848 ??                       ds 1
ROM:3849 ??                       ds 1
ROM:384A ??                       ds 1
ROM:384B ??                       ds 1
ROM:384C ??                       ds 1
ROM:384D ??                       ds 1
ROM:384E ??                       ds 1
ROM:384F ??                       ds 1
ROM:3850 ??                       ds 1
ROM:3851 ??                       ds 1
ROM:3852 ??                       ds 1
ROM:3853 ??                       ds 1
ROM:3854 ??                       ds 1
ROM:3855 ??                       ds 1
ROM:3856 ??                       ds 1
ROM:3857 ??                       ds 1
ROM:3858 ??                       ds 1
ROM:3859 ??                       ds 1
ROM:385A ??                       ds 1
ROM:385B ??                       ds 1
ROM:385C ??                       ds 1
ROM:385D ??                       ds 1
ROM:385E ??                       ds 1
ROM:385F ??                       ds 1
ROM:3860 ??                       ds 1
ROM:3861 ??                       ds 1
ROM:3862 ??                       ds 1
ROM:3863 ??                       ds 1
ROM:3864 ??                       ds 1
ROM:3865 ??                       ds 1
ROM:3866 ??                       ds 1
ROM:3867 ??                       ds 1
ROM:3868 ??                       ds 1
ROM:3869 ??                       ds 1
ROM:386A ??                       ds 1
ROM:386B ??                       ds 1
ROM:386C ??                       ds 1
ROM:386D ??                       ds 1
ROM:386E ??                       ds 1
ROM:386F ??                       ds 1
ROM:3870 ??                       ds 1
ROM:3871 ??                       ds 1
ROM:3872 ??                       ds 1
ROM:3873 ??                       ds 1
ROM:3874 ??                       ds 1
ROM:3875 ??                       ds 1
ROM:3876 ??                       ds 1
ROM:3877 ??                       ds 1
ROM:3878 ??                       ds 1
ROM:3879 ??                       ds 1
ROM:387A ??                       ds 1
ROM:387B ??                       ds 1
ROM:387C ??                       ds 1
ROM:387D ??                       ds 1
ROM:387E ??                       ds 1
ROM:387F ??                       ds 1
ROM:3880 ??                       ds 1
ROM:3881 ??                       ds 1
ROM:3882 ??                       ds 1
ROM:3883 ??                       ds 1
ROM:3884 ??                       ds 1
ROM:3885 ??                       ds 1
ROM:3886 ??                       ds 1
ROM:3887 ??                       ds 1
ROM:3888 ??                       ds 1
ROM:3889 ??                       ds 1
ROM:388A ??                       ds 1
ROM:388B ??                       ds 1
ROM:388C ??                       ds 1
ROM:388D ??                       ds 1
ROM:388E ??                       ds 1
ROM:388F ??                       ds 1
ROM:3890 ??                       ds 1
ROM:3891 ??                       ds 1
ROM:3892 ??                       ds 1
ROM:3893 ??                       ds 1
ROM:3894 ??                       ds 1
ROM:3895 ??                       ds 1
ROM:3896 ??                       ds 1
ROM:3897 ??                       ds 1
ROM:3898 ??                       ds 1
ROM:3899 ??                       ds 1
ROM:389A ??                       ds 1
ROM:389B ??                       ds 1
ROM:389C ??                       ds 1
ROM:389D ??                       ds 1
ROM:389E ??                       ds 1
ROM:389F ??                       ds 1
ROM:38A0 ??                       ds 1
ROM:38A1 ??                       ds 1
ROM:38A2 ??                       ds 1
ROM:38A3 ??                       ds 1
ROM:38A4 ??                       ds 1
ROM:38A5 ??                       ds 1
ROM:38A6 ??                       ds 1
ROM:38A7 ??                       ds 1
ROM:38A8 ??                       ds 1
ROM:38A9 ??                       ds 1
ROM:38AA ??                       ds 1
ROM:38AB ??                       ds 1
ROM:38AC ??                       ds 1
ROM:38AD ??                       ds 1
ROM:38AE ??                       ds 1
ROM:38AF ??                       ds 1
ROM:38B0 ??                       ds 1
ROM:38B1 ??                       ds 1
ROM:38B2 ??                       ds 1
ROM:38B3 ??                       ds 1
ROM:38B4 ??                       ds 1
ROM:38B5 ??                       ds 1
ROM:38B6 ??                       ds 1
ROM:38B7 ??                       ds 1
ROM:38B8 ??                       ds 1
ROM:38B9 ??                       ds 1
ROM:38BA ??                       ds 1
ROM:38BB ??                       ds 1
ROM:38BC ??                       ds 1
ROM:38BD ??                       ds 1
ROM:38BE ??                       ds 1
ROM:38BF ??                       ds 1
ROM:38C0 ??                       ds 1
ROM:38C1 ??                       ds 1
ROM:38C2 ??                       ds 1
ROM:38C3 ??                       ds 1
ROM:38C4 ??                       ds 1
ROM:38C5 ??                       ds 1
ROM:38C6 ??                       ds 1
ROM:38C7 ??                       ds 1
ROM:38C8 ??                       ds 1
ROM:38C9 ??                       ds 1
ROM:38CA ??                       ds 1
ROM:38CB ??                       ds 1
ROM:38CC ??                       ds 1
ROM:38CD ??                       ds 1
ROM:38CE ??                       ds 1
ROM:38CF ??                       ds 1
ROM:38D0 ??                       ds 1
ROM:38D1 ??                       ds 1
ROM:38D2 ??                       ds 1
ROM:38D3 ??                       ds 1
ROM:38D4 ??                       ds 1
ROM:38D5 ??                       ds 1
ROM:38D6 ??                       ds 1
ROM:38D7 ??                       ds 1
ROM:38D8 ??                       ds 1
ROM:38D9 ??                       ds 1
ROM:38DA ??                       ds 1
ROM:38DB ??                       ds 1
ROM:38DC ??                       ds 1
ROM:38DD ??                       ds 1
ROM:38DE ??                       ds 1
ROM:38DF ??                       ds 1
ROM:38E0 ??                       ds 1
ROM:38E1 ??                       ds 1
ROM:38E2 ??                       ds 1
ROM:38E3 ??                       ds 1
ROM:38E4 ??                       ds 1
ROM:38E5 ??                       ds 1
ROM:38E6 ??                       ds 1
ROM:38E7 ??                       ds 1
ROM:38E8 ??                       ds 1
ROM:38E9 ??                       ds 1
ROM:38EA ??                       ds 1
ROM:38EB ??                       ds 1
ROM:38EC ??                       ds 1
ROM:38ED ??                       ds 1
ROM:38EE ??                       ds 1
ROM:38EF ??                       ds 1
ROM:38F0 ??                       ds 1
ROM:38F1 ??                       ds 1
ROM:38F2 ??                       ds 1
ROM:38F3 ??                       ds 1
ROM:38F4 ??                       ds 1
ROM:38F5 ??                       ds 1
ROM:38F6 ??                       ds 1
ROM:38F7 ??                       ds 1
ROM:38F8 ??                       ds 1
ROM:38F9 ??                       ds 1
ROM:38FA ??                       ds 1
ROM:38FB ??                       ds 1
ROM:38FC ??                       ds 1
ROM:38FD ??                       ds 1
ROM:38FE ??                       ds 1
ROM:38FF ??                       ds 1
ROM:3900 ??                       ds 1
ROM:3901 ??                       ds 1
ROM:3902 ??                       ds 1
ROM:3903 ??                       ds 1
ROM:3904 ??                       ds 1
ROM:3905 ??                       ds 1
ROM:3906 ??                       ds 1
ROM:3907 ??                       ds 1
ROM:3908 ??                       ds 1
ROM:3909 ??                       ds 1
ROM:390A ??                       ds 1
ROM:390B ??                       ds 1
ROM:390C ??                       ds 1
ROM:390D ??                       ds 1
ROM:390E ??                       ds 1
ROM:390F ??                       ds 1
ROM:3910 ??                       ds 1
ROM:3911 ??                       ds 1
ROM:3912 ??                       ds 1
ROM:3913 ??                       ds 1
ROM:3914 ??                       ds 1
ROM:3915 ??                       ds 1
ROM:3916 ??                       ds 1
ROM:3917 ??                       ds 1
ROM:3918 ??                       ds 1
ROM:3919 ??                       ds 1
ROM:391A ??                       ds 1
ROM:391B ??                       ds 1
ROM:391C ??                       ds 1
ROM:391D ??                       ds 1
ROM:391E ??                       ds 1
ROM:391F ??                       ds 1
ROM:3920 ??                       ds 1
ROM:3921 ??                       ds 1
ROM:3922 ??                       ds 1
ROM:3923 ??                       ds 1
ROM:3924 ??                       ds 1
ROM:3925 ??                       ds 1
ROM:3926 ??                       ds 1
ROM:3927 ??                       ds 1
ROM:3928 ??                       ds 1
ROM:3929 ?? ??    word_3929:      ds 2                    ; DATA XREF: ROM:03E5↑r
ROM:392B ??                       ds 1
ROM:392C ??                       ds 1
ROM:392D ??                       ds 1
ROM:392E ??                       ds 1
ROM:392F ??                       ds 1
ROM:3930 ??                       ds 1
ROM:3931 ??                       ds 1
ROM:3932 ??                       ds 1
ROM:3933 ??                       ds 1
ROM:3934 ??                       ds 1
ROM:3935 ??                       ds 1
ROM:3936 ??                       ds 1
ROM:3937 ??                       ds 1
ROM:3938 ??                       ds 1
ROM:3939 ??                       ds 1
ROM:393A ??                       ds 1
ROM:393B ??                       ds 1
ROM:393C ??                       ds 1
ROM:393D ??                       ds 1
ROM:393E ??                       ds 1
ROM:393F ??                       ds 1
ROM:3940 ??                       ds 1
ROM:3941 ??                       ds 1
ROM:3942 ??                       ds 1
ROM:3943 ??                       ds 1
ROM:3944 ??                       ds 1
ROM:3945 ??                       ds 1
ROM:3946 ??                       ds 1
ROM:3947 ??                       ds 1
ROM:3948 ??                       ds 1
ROM:3949 ??                       ds 1
ROM:394A ??                       ds 1
ROM:394B ??                       ds 1
ROM:394C ??                       ds 1
ROM:394D ??                       ds 1
ROM:394E ??                       ds 1
ROM:394F ??                       ds 1
ROM:3950 ??                       ds 1
ROM:3951 ??                       ds 1
ROM:3952 ??                       ds 1
ROM:3953 ??                       ds 1
ROM:3954 ??                       ds 1
ROM:3955 ??                       ds 1
ROM:3956 ??                       ds 1
ROM:3957 ??                       ds 1
ROM:3958 ??                       ds 1
ROM:3959 ??                       ds 1
ROM:395A ??                       ds 1
ROM:395B ??                       ds 1
ROM:395C ??                       ds 1
ROM:395D ??                       ds 1
ROM:395E ??                       ds 1
ROM:395F ??                       ds 1
ROM:3960 ??                       ds 1
ROM:3961 ??                       ds 1
ROM:3962 ??                       ds 1
ROM:3963 ??                       ds 1
ROM:3964 ??                       ds 1
ROM:3965 ??                       ds 1
ROM:3966 ??                       ds 1
ROM:3967 ??                       ds 1
ROM:3968 ??                       ds 1
ROM:3969 ??                       ds 1
ROM:396A ??                       ds 1
ROM:396B ??                       ds 1
ROM:396C ??                       ds 1
ROM:396D ??                       ds 1
ROM:396E ??                       ds 1
ROM:396F ??                       ds 1
ROM:3970 ??                       ds 1
ROM:3971 ??                       ds 1
ROM:3972 ??                       ds 1
ROM:3973 ??                       ds 1
ROM:3974 ??                       ds 1
ROM:3975 ??                       ds 1
ROM:3976 ??                       ds 1
ROM:3977 ??                       ds 1
ROM:3978 ??                       ds 1
ROM:3979 ??                       ds 1
ROM:397A ??                       ds 1
ROM:397B ??                       ds 1
ROM:397C ??                       ds 1
ROM:397D ??                       ds 1
ROM:397E ??                       ds 1
ROM:397F ??                       ds 1
ROM:3980 ??                       ds 1
ROM:3981 ??                       ds 1
ROM:3982 ??                       ds 1
ROM:3983 ??                       ds 1
ROM:3984 ??                       ds 1
ROM:3985 ??                       ds 1
ROM:3986 ??                       ds 1
ROM:3987 ??                       ds 1
ROM:3988 ??                       ds 1
ROM:3989 ??                       ds 1
ROM:398A ??                       ds 1
ROM:398B ?? ??                    ds 2
ROM:398D ??                       ds 1
ROM:398E ??                       ds 1
ROM:398F ??                       ds 1
ROM:3990 ??                       ds 1
ROM:3991 ??                       ds 1
ROM:3992 ??                       ds 1
ROM:3993 ??                       ds 1
ROM:3994 ??                       ds 1
ROM:3995 ??                       ds 1
ROM:3996 ??                       ds 1
ROM:3997 ??                       ds 1
ROM:3998 ??                       ds 1
ROM:3999 ??                       ds 1
ROM:399A ??                       ds 1
ROM:399B ??                       ds 1
ROM:399C ??                       ds 1
ROM:399D ??                       ds 1
ROM:399E ??                       ds 1
ROM:399F ??                       ds 1
ROM:39A0 ??                       ds 1
ROM:39A1 ??                       ds 1
ROM:39A2 ??                       ds 1
ROM:39A3 ??                       ds 1
ROM:39A4 ??                       ds 1
ROM:39A5 ??                       ds 1
ROM:39A6 ??                       ds 1
ROM:39A7 ??                       ds 1
ROM:39A8 ??                       ds 1
ROM:39A9 ??                       ds 1
ROM:39AA ??                       ds 1
ROM:39AB ??                       ds 1
ROM:39AC ??                       ds 1
ROM:39AD ??                       ds 1
ROM:39AE ??                       ds 1
ROM:39AF ??                       ds 1
ROM:39B0 ??                       ds 1
ROM:39B1 ??                       ds 1
ROM:39B2 ??                       ds 1
ROM:39B3 ??                       ds 1
ROM:39B4 ??                       ds 1
ROM:39B5 ??                       ds 1
ROM:39B6 ??                       ds 1
ROM:39B7 ??                       ds 1
ROM:39B8 ??                       ds 1
ROM:39B9 ??                       ds 1
ROM:39BA ??                       ds 1
ROM:39BB ??                       ds 1
ROM:39BC ??                       ds 1
ROM:39BD ??                       ds 1
ROM:39BE ??                       ds 1
ROM:39BF ??                       ds 1
ROM:39C0 ??                       ds 1
ROM:39C1 ??                       ds 1
ROM:39C2 ??                       ds 1
ROM:39C3 ??                       ds 1
ROM:39C4 ??                       ds 1
ROM:39C5 ??                       ds 1
ROM:39C6 ??                       ds 1
ROM:39C7 ??                       ds 1
ROM:39C8 ??                       ds 1
ROM:39C9 ??                       ds 1
ROM:39CA ??                       ds 1
ROM:39CB ??                       ds 1
ROM:39CC ??                       ds 1
ROM:39CD ??                       ds 1
ROM:39CE ??                       ds 1
ROM:39CF ??                       ds 1
ROM:39D0 ??                       ds 1
ROM:39D1 ??                       ds 1
ROM:39D2 ??                       ds 1
ROM:39D3 ??                       ds 1
ROM:39D4 ??                       ds 1
ROM:39D5 ??                       ds 1
ROM:39D6 ??                       ds 1
ROM:39D7 ??                       ds 1
ROM:39D8 ??                       ds 1
ROM:39D9 ??                       ds 1
ROM:39DA ??                       ds 1
ROM:39DB ??                       ds 1
ROM:39DC ??                       ds 1
ROM:39DD ??                       ds 1
ROM:39DE ??                       ds 1
ROM:39DF ??                       ds 1
ROM:39E0 ??                       ds 1
ROM:39E1 ??                       ds 1
ROM:39E2 ??                       ds 1
ROM:39E3 ??                       ds 1
ROM:39E4 ??                       ds 1
ROM:39E5 ??                       ds 1
ROM:39E6 ??                       ds 1
ROM:39E7 ??                       ds 1
ROM:39E8 ??                       ds 1
ROM:39E9 ??                       ds 1
ROM:39EA ??                       ds 1
ROM:39EB ??                       ds 1
ROM:39EC ??                       ds 1
ROM:39ED ??                       ds 1
ROM:39EE ??                       ds 1
ROM:39EF ??                       ds 1
ROM:39F0 ??                       ds 1
ROM:39F1 ??                       ds 1
ROM:39F2 ??                       ds 1
ROM:39F3 ??                       ds 1
ROM:39F4 ??                       ds 1
ROM:39F5 ??                       ds 1
ROM:39F6 ??                       ds 1
ROM:39F7 ??                       ds 1
ROM:39F8 ??                       ds 1
ROM:39F9 ??                       ds 1
ROM:39FA ??                       ds 1
ROM:39FB ??                       ds 1
ROM:39FC ??                       ds 1
ROM:39FD ??                       ds 1
ROM:39FE ??                       ds 1
ROM:39FF ??                       ds 1
ROM:3A00 ??                       ds 1
ROM:3A01 ??                       ds 1
ROM:3A02 ??                       ds 1
ROM:3A03 ??                       ds 1
ROM:3A04 ??                       ds 1
ROM:3A05 ??                       ds 1
ROM:3A06 ??                       ds 1
ROM:3A07 ??                       ds 1
ROM:3A08 ??                       ds 1
ROM:3A09 ??                       ds 1
ROM:3A0A ??                       ds 1
ROM:3A0B ??                       ds 1
ROM:3A0C ??                       ds 1
ROM:3A0D ??                       ds 1
ROM:3A0E ??                       ds 1
ROM:3A0F ??                       ds 1
ROM:3A10 ??                       ds 1
ROM:3A11 ??                       ds 1
ROM:3A12 ??                       ds 1
ROM:3A13 ??                       ds 1
ROM:3A14 ??                       ds 1
ROM:3A15 ??                       ds 1
ROM:3A16 ??                       ds 1
ROM:3A17 ??                       ds 1
ROM:3A18 ??                       ds 1
ROM:3A19 ??                       ds 1
ROM:3A1A ??       byte_3A1A:      ds 1                    ; DATA XREF: ROM:03E9↑w
ROM:3A1B ??                       ds 1
ROM:3A1C ??                       ds 1
ROM:3A1D ??                       ds 1
ROM:3A1E ??                       ds 1
ROM:3A1F ??                       ds 1
ROM:3A20 ??                       ds 1
ROM:3A21 ??                       ds 1
ROM:3A22 ??                       ds 1
ROM:3A23 ?? ??                    ds 2
ROM:3A25 ??                       ds 1
ROM:3A26 ??                       ds 1
ROM:3A27 ??                       ds 1
ROM:3A28 ??                       ds 1
ROM:3A29 ??                       ds 1
ROM:3A2A ??                       ds 1
ROM:3A2B ??                       ds 1
ROM:3A2C ??                       ds 1
ROM:3A2D ??                       ds 1
ROM:3A2E ??                       ds 1
ROM:3A2F ??                       ds 1
ROM:3A30 ??                       ds 1
ROM:3A31 ??                       ds 1
ROM:3A32 ??                       ds 1
ROM:3A33 ??                       ds 1
ROM:3A34 ??                       ds 1
ROM:3A35 ??                       ds 1
ROM:3A36 ??                       ds 1
ROM:3A37 ??                       ds 1
ROM:3A38 ??                       ds 1
ROM:3A39 ??                       ds 1
ROM:3A3A ??                       ds 1
ROM:3A3B ??                       ds 1
ROM:3A3C ??                       ds 1
ROM:3A3D ??                       ds 1
ROM:3A3E ??                       ds 1
ROM:3A3F ??                       ds 1
ROM:3A40 ??                       ds 1
ROM:3A41 ??                       ds 1
ROM:3A42 ??                       ds 1
ROM:3A43 ??                       ds 1
ROM:3A44 ??                       ds 1
ROM:3A45 ??                       ds 1
ROM:3A46 ??                       ds 1
ROM:3A47 ??                       ds 1
ROM:3A48 ??                       ds 1
ROM:3A49 ??                       ds 1
ROM:3A4A ??                       ds 1
ROM:3A4B ??                       ds 1
ROM:3A4C ??                       ds 1
ROM:3A4D ??                       ds 1
ROM:3A4E ??                       ds 1
ROM:3A4F ??                       ds 1
ROM:3A50 ??                       ds 1
ROM:3A51 ??                       ds 1
ROM:3A52 ??                       ds 1
ROM:3A53 ??                       ds 1
ROM:3A54 ??                       ds 1
ROM:3A55 ??                       ds 1
ROM:3A56 ??                       ds 1
ROM:3A57 ??                       ds 1
ROM:3A58 ??                       ds 1
ROM:3A59 ??                       ds 1
ROM:3A5A ??                       ds 1
ROM:3A5B ??                       ds 1
ROM:3A5C ??                       ds 1
ROM:3A5D ??                       ds 1
ROM:3A5E ??                       ds 1
ROM:3A5F ??                       ds 1
ROM:3A60 ??                       ds 1
ROM:3A61 ??                       ds 1
ROM:3A62 ??                       ds 1
ROM:3A63 ??                       ds 1
ROM:3A64 ??                       ds 1
ROM:3A65 ??                       ds 1
ROM:3A66 ??                       ds 1
ROM:3A67 ??                       ds 1
ROM:3A68 ??                       ds 1
ROM:3A69 ??                       ds 1
ROM:3A6A ??                       ds 1
ROM:3A6B ??                       ds 1
ROM:3A6C ??                       ds 1
ROM:3A6D ??                       ds 1
ROM:3A6E ??                       ds 1
ROM:3A6F ??                       ds 1
ROM:3A70 ??                       ds 1
ROM:3A71 ??                       ds 1
ROM:3A72 ??                       ds 1
ROM:3A73 ??                       ds 1
ROM:3A74 ??                       ds 1
ROM:3A75 ??                       ds 1
ROM:3A76 ??                       ds 1
ROM:3A77 ??                       ds 1
ROM:3A78 ??                       ds 1
ROM:3A79 ??                       ds 1
ROM:3A7A ??                       ds 1
ROM:3A7B ??                       ds 1
ROM:3A7C ??                       ds 1
ROM:3A7D ??                       ds 1
ROM:3A7E ??                       ds 1
ROM:3A7F ??                       ds 1
ROM:3A80 ??                       ds 1
ROM:3A81 ??                       ds 1
ROM:3A82 ??                       ds 1
ROM:3A83 ??                       ds 1
ROM:3A84 ??                       ds 1
ROM:3A85 ??                       ds 1
ROM:3A86 ??                       ds 1
ROM:3A87 ??                       ds 1
ROM:3A88 ??                       ds 1
ROM:3A89 ??                       ds 1
ROM:3A8A ??                       ds 1
ROM:3A8B ??                       ds 1
ROM:3A8C ??                       ds 1
ROM:3A8D ??                       ds 1
ROM:3A8E ??                       ds 1
ROM:3A8F ??                       ds 1
ROM:3A90 ??                       ds 1
ROM:3A91 ??                       ds 1
ROM:3A92 ??                       ds 1
ROM:3A93 ??                       ds 1
ROM:3A94 ??                       ds 1
ROM:3A95 ??                       ds 1
ROM:3A96 ??                       ds 1
ROM:3A97 ??                       ds 1
ROM:3A98 ??                       ds 1
ROM:3A99 ??                       ds 1
ROM:3A9A ??                       ds 1
ROM:3A9B ??                       ds 1
ROM:3A9C ??                       ds 1
ROM:3A9D ??                       ds 1
ROM:3A9E ??                       ds 1
ROM:3A9F ??                       ds 1
ROM:3AA0 ??                       ds 1
ROM:3AA1 ??                       ds 1
ROM:3AA2 ??                       ds 1
ROM:3AA3 ??                       ds 1
ROM:3AA4 ??                       ds 1
ROM:3AA5 ??                       ds 1
ROM:3AA6 ??                       ds 1
ROM:3AA7 ??                       ds 1
ROM:3AA8 ??                       ds 1
ROM:3AA9 ??                       ds 1
ROM:3AAA ??                       ds 1
ROM:3AAB ??                       ds 1
ROM:3AAC ??                       ds 1
ROM:3AAD ??                       ds 1
ROM:3AAE ??                       ds 1
ROM:3AAF ??                       ds 1
ROM:3AB0 ??                       ds 1
ROM:3AB1 ??                       ds 1
ROM:3AB2 ??                       ds 1
ROM:3AB3 ??                       ds 1
ROM:3AB4 ??                       ds 1
ROM:3AB5 ??                       ds 1
ROM:3AB6 ??                       ds 1
ROM:3AB7 ??                       ds 1
ROM:3AB8 ??                       ds 1
ROM:3AB9 ??                       ds 1
ROM:3ABA ??                       ds 1
ROM:3ABB ??                       ds 1
ROM:3ABC ??                       ds 1
ROM:3ABD ??                       ds 1
ROM:3ABE ??                       ds 1
ROM:3ABF ??                       ds 1
ROM:3AC0 ??                       ds 1
ROM:3AC1 ??                       ds 1
ROM:3AC2 ??                       ds 1
ROM:3AC3 ??                       ds 1
ROM:3AC4 ??                       ds 1
ROM:3AC5 ??                       ds 1
ROM:3AC6 ??                       ds 1
ROM:3AC7 ??                       ds 1
ROM:3AC8 ??                       ds 1
ROM:3AC9 ??                       ds 1
ROM:3ACA ??                       ds 1
ROM:3ACB ??                       ds 1
ROM:3ACC ??                       ds 1
ROM:3ACD ??                       ds 1
ROM:3ACE ??                       ds 1
ROM:3ACF ??                       ds 1
ROM:3AD0 ??                       ds 1
ROM:3AD1 ??                       ds 1
ROM:3AD2 ??                       ds 1
ROM:3AD3 ??                       ds 1
ROM:3AD4 ??                       ds 1
ROM:3AD5 ??                       ds 1
ROM:3AD6 ??                       ds 1
ROM:3AD7 ??                       ds 1
ROM:3AD8 ??                       ds 1
ROM:3AD9 ??                       ds 1
ROM:3ADA ??                       ds 1
ROM:3ADB ??                       ds 1
ROM:3ADC ??                       ds 1
ROM:3ADD ??                       ds 1
ROM:3ADE ??                       ds 1
ROM:3ADF ??                       ds 1
ROM:3AE0 ??                       ds 1
ROM:3AE1 ??                       ds 1
ROM:3AE2 ??                       ds 1
ROM:3AE3 ??                       ds 1
ROM:3AE4 ??                       ds 1
ROM:3AE5 ??                       ds 1
ROM:3AE6 ??                       ds 1
ROM:3AE7 ??                       ds 1
ROM:3AE8 ??                       ds 1
ROM:3AE9 ??                       ds 1
ROM:3AEA ??                       ds 1
ROM:3AEB ??                       ds 1
ROM:3AEC ??                       ds 1
ROM:3AED ??                       ds 1
ROM:3AEE ??                       ds 1
ROM:3AEF ??                       ds 1
ROM:3AF0 ??                       ds 1
ROM:3AF1 ??                       ds 1
ROM:3AF2 ??                       ds 1
ROM:3AF3 ??                       ds 1
ROM:3AF4 ??                       ds 1
ROM:3AF5 ??                       ds 1
ROM:3AF6 ??                       ds 1
ROM:3AF7 ??                       ds 1
ROM:3AF8 ??                       ds 1
ROM:3AF9 ??                       ds 1
ROM:3AFA ??                       ds 1
ROM:3AFB ??                       ds 1
ROM:3AFC ??                       ds 1
ROM:3AFD ??                       ds 1
ROM:3AFE ??                       ds 1
ROM:3AFF ??                       ds 1
ROM:3B00 ??                       ds 1
ROM:3B01 ??                       ds 1
ROM:3B02 ??                       ds 1
ROM:3B03 ??                       ds 1
ROM:3B04 ??                       ds 1
ROM:3B05 ??                       ds 1
ROM:3B06 ??                       ds 1
ROM:3B07 ??                       ds 1
ROM:3B08 ??                       ds 1
ROM:3B09 ??                       ds 1
ROM:3B0A ??                       ds 1
ROM:3B0B ??                       ds 1
ROM:3B0C ??                       ds 1
ROM:3B0D ??                       ds 1
ROM:3B0E ??                       ds 1
ROM:3B0F ??                       ds 1
ROM:3B10 ??                       ds 1
ROM:3B11 ??                       ds 1
ROM:3B12 ??                       ds 1
ROM:3B13 ??                       ds 1
ROM:3B14 ??                       ds 1
ROM:3B15 ??                       ds 1
ROM:3B16 ??                       ds 1
ROM:3B17 ??                       ds 1
ROM:3B18 ??                       ds 1
ROM:3B19 ??                       ds 1
ROM:3B1A ??                       ds 1
ROM:3B1B ??                       ds 1
ROM:3B1C ??                       ds 1
ROM:3B1D ??                       ds 1
ROM:3B1E ??                       ds 1
ROM:3B1F ??                       ds 1
ROM:3B20 ??                       ds 1
ROM:3B21 ??                       ds 1
ROM:3B22 ??                       ds 1
ROM:3B23 ??                       ds 1
ROM:3B24 ??                       ds 1
ROM:3B25 ??                       ds 1
ROM:3B26 ??                       ds 1
ROM:3B27 ??                       ds 1
ROM:3B28 ??                       ds 1
ROM:3B29 ??                       ds 1
ROM:3B2A ??                       ds 1
ROM:3B2B ??                       ds 1
ROM:3B2C ??                       ds 1
ROM:3B2D ??                       ds 1
ROM:3B2E ??                       ds 1
ROM:3B2F ??                       ds 1
ROM:3B30 ??                       ds 1
ROM:3B31 ??                       ds 1
ROM:3B32 ??                       ds 1
ROM:3B33 ??                       ds 1
ROM:3B34 ??                       ds 1
ROM:3B35 ??                       ds 1
ROM:3B36 ??                       ds 1
ROM:3B37 ??                       ds 1
ROM:3B38 ??                       ds 1
ROM:3B39 ??                       ds 1
ROM:3B3A ??                       ds 1
ROM:3B3B ??                       ds 1
ROM:3B3C ??                       ds 1
ROM:3B3D ??                       ds 1
ROM:3B3E ??                       ds 1
ROM:3B3F ??                       ds 1
ROM:3B40 ??                       ds 1
ROM:3B41 ??                       ds 1
ROM:3B42 ??                       ds 1
ROM:3B43 ??                       ds 1
ROM:3B44 ??                       ds 1
ROM:3B45 ??                       ds 1
ROM:3B46 ??                       ds 1
ROM:3B47 ??                       ds 1
ROM:3B48 ??                       ds 1
ROM:3B49 ??                       ds 1
ROM:3B4A ??                       ds 1
ROM:3B4B ??                       ds 1
ROM:3B4C ??                       ds 1
ROM:3B4D ??                       ds 1
ROM:3B4E ??                       ds 1
ROM:3B4F ??                       ds 1
ROM:3B50 ??                       ds 1
ROM:3B51 ??                       ds 1
ROM:3B52 ??                       ds 1
ROM:3B53 ??                       ds 1
ROM:3B54 ??                       ds 1
ROM:3B55 ??                       ds 1
ROM:3B56 ??                       ds 1
ROM:3B57 ??                       ds 1
ROM:3B58 ??                       ds 1
ROM:3B59 ??                       ds 1
ROM:3B5A ??                       ds 1
ROM:3B5B ??                       ds 1
ROM:3B5C ??                       ds 1
ROM:3B5D ??                       ds 1
ROM:3B5E ??                       ds 1
ROM:3B5F ??                       ds 1
ROM:3B60 ??                       ds 1
ROM:3B61 ??                       ds 1
ROM:3B62 ??                       ds 1
ROM:3B63 ??                       ds 1
ROM:3B64 ??                       ds 1
ROM:3B65 ??                       ds 1
ROM:3B66 ??                       ds 1
ROM:3B67 ??                       ds 1
ROM:3B68 ??                       ds 1
ROM:3B69 ??                       ds 1
ROM:3B6A ??                       ds 1
ROM:3B6B ??                       ds 1
ROM:3B6C ??                       ds 1
ROM:3B6D ??                       ds 1
ROM:3B6E ??                       ds 1
ROM:3B6F ??                       ds 1
ROM:3B70 ??                       ds 1
ROM:3B71 ??                       ds 1
ROM:3B72 ??                       ds 1
ROM:3B73 ??                       ds 1
ROM:3B74 ??                       ds 1
ROM:3B75 ??                       ds 1
ROM:3B76 ??                       ds 1
ROM:3B77 ??                       ds 1
ROM:3B78 ??                       ds 1
ROM:3B79 ??                       ds 1
ROM:3B7A ??                       ds 1
ROM:3B7B ??                       ds 1
ROM:3B7C ??                       ds 1
ROM:3B7D ??                       ds 1
ROM:3B7E ??                       ds 1
ROM:3B7F ??                       ds 1
ROM:3B80 ??                       ds 1
ROM:3B81 ??                       ds 1
ROM:3B82 ??                       ds 1
ROM:3B83 ??                       ds 1
ROM:3B84 ??                       ds 1
ROM:3B85 ??                       ds 1
ROM:3B86 ??                       ds 1
ROM:3B87 ??                       ds 1
ROM:3B88 ??                       ds 1
ROM:3B89 ??                       ds 1
ROM:3B8A ??                       ds 1
ROM:3B8B ??                       ds 1
ROM:3B8C ??                       ds 1
ROM:3B8D ??                       ds 1
ROM:3B8E ??                       ds 1
ROM:3B8F ??                       ds 1
ROM:3B90 ??                       ds 1
ROM:3B91 ??                       ds 1
ROM:3B92 ??                       ds 1
ROM:3B93 ??                       ds 1
ROM:3B94 ??                       ds 1
ROM:3B95 ??                       ds 1
ROM:3B96 ??                       ds 1
ROM:3B97 ??                       ds 1
ROM:3B98 ??                       ds 1
ROM:3B99 ??                       ds 1
ROM:3B9A ??                       ds 1
ROM:3B9B ??                       ds 1
ROM:3B9C ??                       ds 1
ROM:3B9D ??                       ds 1
ROM:3B9E ??                       ds 1
ROM:3B9F ??                       ds 1
ROM:3BA0 ??                       ds 1
ROM:3BA1 ??                       ds 1
ROM:3BA2 ??                       ds 1
ROM:3BA3 ??                       ds 1
ROM:3BA4 ??                       ds 1
ROM:3BA5 ??                       ds 1
ROM:3BA6 ??                       ds 1
ROM:3BA7 ??                       ds 1
ROM:3BA8 ??                       ds 1
ROM:3BA9 ??                       ds 1
ROM:3BAA ??                       ds 1
ROM:3BAB ??                       ds 1
ROM:3BAC ??                       ds 1
ROM:3BAD ??                       ds 1
ROM:3BAE ??                       ds 1
ROM:3BAF ??                       ds 1
ROM:3BB0 ??                       ds 1
ROM:3BB1 ??                       ds 1
ROM:3BB2 ??                       ds 1
ROM:3BB3 ??                       ds 1
ROM:3BB4 ??                       ds 1
ROM:3BB5 ??                       ds 1
ROM:3BB6 ??                       ds 1
ROM:3BB7 ??                       ds 1
ROM:3BB8 ??                       ds 1
ROM:3BB9 ??                       ds 1
ROM:3BBA ??                       ds 1
ROM:3BBB ??                       ds 1
ROM:3BBC ??                       ds 1
ROM:3BBD ??                       ds 1
ROM:3BBE ??                       ds 1
ROM:3BBF ??                       ds 1
ROM:3BC0 ??                       ds 1
ROM:3BC1 ??                       ds 1
ROM:3BC2 ??                       ds 1
ROM:3BC3 ??                       ds 1
ROM:3BC4 ??                       ds 1
ROM:3BC5 ??                       ds 1
ROM:3BC6 ??                       ds 1
ROM:3BC7 ??                       ds 1
ROM:3BC8 ??                       ds 1
ROM:3BC9 ??                       ds 1
ROM:3BCA ??                       ds 1
ROM:3BCB ??                       ds 1
ROM:3BCC ??                       ds 1
ROM:3BCD ??                       ds 1
ROM:3BCE ??                       ds 1
ROM:3BCF ??                       ds 1
ROM:3BD0 ??                       ds 1
ROM:3BD1 ??                       ds 1
ROM:3BD2 ??                       ds 1
ROM:3BD3 ??                       ds 1
ROM:3BD4 ??                       ds 1
ROM:3BD5 ??                       ds 1
ROM:3BD6 ??                       ds 1
ROM:3BD7 ??                       ds 1
ROM:3BD8 ??                       ds 1
ROM:3BD9 ??                       ds 1
ROM:3BDA ??                       ds 1
ROM:3BDB ??                       ds 1
ROM:3BDC ??                       ds 1
ROM:3BDD ??                       ds 1
ROM:3BDE ??                       ds 1
ROM:3BDF ??                       ds 1
ROM:3BE0 ??                       ds 1
ROM:3BE1 ??                       ds 1
ROM:3BE2 ??                       ds 1
ROM:3BE3 ??                       ds 1
ROM:3BE4 ??                       ds 1
ROM:3BE5 ??                       ds 1
ROM:3BE6 ??                       ds 1
ROM:3BE7 ??                       ds 1
ROM:3BE8 ??                       ds 1
ROM:3BE9 ??                       ds 1
ROM:3BEA ??                       ds 1
ROM:3BEB ??                       ds 1
ROM:3BEC ??                       ds 1
ROM:3BED ??                       ds 1
ROM:3BEE ??                       ds 1
ROM:3BEF ??                       ds 1
ROM:3BF0 ??                       ds 1
ROM:3BF1 ??                       ds 1
ROM:3BF2 ??                       ds 1
ROM:3BF3 ??                       ds 1
ROM:3BF4 ??                       ds 1
ROM:3BF5 ??                       ds 1
ROM:3BF6 ??                       ds 1
ROM:3BF7 ??                       ds 1
ROM:3BF8 ??                       ds 1
ROM:3BF9 ??                       ds 1
ROM:3BFA ??                       ds 1
ROM:3BFB ??                       ds 1
ROM:3BFC ??                       ds 1
ROM:3BFD ??                       ds 1
ROM:3BFE ??                       ds 1
ROM:3BFF ??                       ds 1
ROM:3C00 ??                       ds 1
ROM:3C01 ??                       ds 1
ROM:3C02 ??                       ds 1
ROM:3C03 ??                       ds 1
ROM:3C04 ??                       ds 1
ROM:3C05 ??                       ds 1
ROM:3C06 ??                       ds 1
ROM:3C07 ??                       ds 1
ROM:3C08 ??                       ds 1
ROM:3C09 ??                       ds 1
ROM:3C0A ??                       ds 1
ROM:3C0B ??                       ds 1
ROM:3C0C ??                       ds 1
ROM:3C0D ??                       ds 1
ROM:3C0E ??                       ds 1
ROM:3C0F ??                       ds 1
ROM:3C10 ??                       ds 1
ROM:3C11 ??                       ds 1
ROM:3C12 ??                       ds 1
ROM:3C13 ??                       ds 1
ROM:3C14 ??                       ds 1
ROM:3C15 ??                       ds 1
ROM:3C16 ??                       ds 1
ROM:3C17 ??                       ds 1
ROM:3C18 ??                       ds 1
ROM:3C19 ??                       ds 1
ROM:3C1A ??                       ds 1
ROM:3C1B ??                       ds 1
ROM:3C1C ??                       ds 1
ROM:3C1D ??                       ds 1
ROM:3C1E ??                       ds 1
ROM:3C1F ??                       ds 1
ROM:3C20 ??                       ds 1
ROM:3C21 ??                       ds 1
ROM:3C22 ??                       ds 1
ROM:3C23 ??                       ds 1
ROM:3C24 ??                       ds 1
ROM:3C25 ??                       ds 1
ROM:3C26 ??                       ds 1
ROM:3C27 ??                       ds 1
ROM:3C28 ??                       ds 1
ROM:3C29 ??                       ds 1
ROM:3C2A ??                       ds 1
ROM:3C2B ??                       ds 1
ROM:3C2C ??                       ds 1
ROM:3C2D ??                       ds 1
ROM:3C2E ??                       ds 1
ROM:3C2F ??                       ds 1
ROM:3C30 ??                       ds 1
ROM:3C31 ??                       ds 1
ROM:3C32 ??                       ds 1
ROM:3C33 ??                       ds 1
ROM:3C34 ??                       ds 1
ROM:3C35 ??                       ds 1
ROM:3C36 ??                       ds 1
ROM:3C37 ??                       ds 1
ROM:3C38 ??                       ds 1
ROM:3C39 ??                       ds 1
ROM:3C3A ??                       ds 1
ROM:3C3B ??                       ds 1
ROM:3C3C ??                       ds 1
ROM:3C3D ??                       ds 1
ROM:3C3E ??                       ds 1
ROM:3C3F ??                       ds 1
ROM:3C40 ??                       ds 1
ROM:3C41 ??                       ds 1
ROM:3C42 ??                       ds 1
ROM:3C43 ??                       ds 1
ROM:3C44 ??                       ds 1
ROM:3C45 ??                       ds 1
ROM:3C46 ??                       ds 1
ROM:3C47 ??                       ds 1
ROM:3C48 ??                       ds 1
ROM:3C49 ??                       ds 1
ROM:3C4A ??                       ds 1
ROM:3C4B ??                       ds 1
ROM:3C4C ??                       ds 1
ROM:3C4D ??                       ds 1
ROM:3C4E ??                       ds 1
ROM:3C4F ??                       ds 1
ROM:3C50 ??                       ds 1
ROM:3C51 ??                       ds 1
ROM:3C52 ??                       ds 1
ROM:3C53 ??                       ds 1
ROM:3C54 ??                       ds 1
ROM:3C55 ??                       ds 1
ROM:3C56 ??                       ds 1
ROM:3C57 ??                       ds 1
ROM:3C58 ??                       ds 1
ROM:3C59 ??                       ds 1
ROM:3C5A ??                       ds 1
ROM:3C5B ??                       ds 1
ROM:3C5C ??                       ds 1
ROM:3C5D ??                       ds 1
ROM:3C5E ??                       ds 1
ROM:3C5F ??                       ds 1
ROM:3C60 ??                       ds 1
ROM:3C61 ??                       ds 1
ROM:3C62 ??                       ds 1
ROM:3C63 ??                       ds 1
ROM:3C64 ??                       ds 1
ROM:3C65 ??                       ds 1
ROM:3C66 ??                       ds 1
ROM:3C67 ??                       ds 1
ROM:3C68 ??                       ds 1
ROM:3C69 ??                       ds 1
ROM:3C6A ??                       ds 1
ROM:3C6B ??                       ds 1
ROM:3C6C ??                       ds 1
ROM:3C6D ??                       ds 1
ROM:3C6E ??                       ds 1
ROM:3C6F ??                       ds 1
ROM:3C70 ??                       ds 1
ROM:3C71 ??                       ds 1
ROM:3C72 ??                       ds 1
ROM:3C73 ??                       ds 1
ROM:3C74 ??                       ds 1
ROM:3C75 ??                       ds 1
ROM:3C76 ??                       ds 1
ROM:3C77 ??                       ds 1
ROM:3C78 ??                       ds 1
ROM:3C79 ??                       ds 1
ROM:3C7A ??                       ds 1
ROM:3C7B ??                       ds 1
ROM:3C7C ??                       ds 1
ROM:3C7D ??                       ds 1
ROM:3C7E ??                       ds 1
ROM:3C7F ??                       ds 1
ROM:3C80 ??                       ds 1
ROM:3C81 ??                       ds 1
ROM:3C82 ??                       ds 1
ROM:3C83 ??                       ds 1
ROM:3C84 ??                       ds 1
ROM:3C85 ??                       ds 1
ROM:3C86 ??                       ds 1
ROM:3C87 ??                       ds 1
ROM:3C88 ??                       ds 1
ROM:3C89 ??                       ds 1
ROM:3C8A ??                       ds 1
ROM:3C8B ??                       ds 1
ROM:3C8C ??                       ds 1
ROM:3C8D ??                       ds 1
ROM:3C8E ??                       ds 1
ROM:3C8F ??                       ds 1
ROM:3C90 ??                       ds 1
ROM:3C91 ??                       ds 1
ROM:3C92 ??                       ds 1
ROM:3C93 ??                       ds 1
ROM:3C94 ??                       ds 1
ROM:3C95 ??                       ds 1
ROM:3C96 ??                       ds 1
ROM:3C97 ??                       ds 1
ROM:3C98 ??                       ds 1
ROM:3C99 ??                       ds 1
ROM:3C9A ??                       ds 1
ROM:3C9B ??                       ds 1
ROM:3C9C ??                       ds 1
ROM:3C9D ??                       ds 1
ROM:3C9E ??                       ds 1
ROM:3C9F ??                       ds 1
ROM:3CA0 ??                       ds 1
ROM:3CA1 ??                       ds 1
ROM:3CA2 ??                       ds 1
ROM:3CA3 ??                       ds 1
ROM:3CA4 ??                       ds 1
ROM:3CA5 ??                       ds 1
ROM:3CA6 ??                       ds 1
ROM:3CA7 ??                       ds 1
ROM:3CA8 ??                       ds 1
ROM:3CA9 ??                       ds 1
ROM:3CAA ??                       ds 1
ROM:3CAB ??                       ds 1
ROM:3CAC ??                       ds 1
ROM:3CAD ??                       ds 1
ROM:3CAE ??                       ds 1
ROM:3CAF ??                       ds 1
ROM:3CB0 ??                       ds 1
ROM:3CB1 ??                       ds 1
ROM:3CB2 ??                       ds 1
ROM:3CB3 ??                       ds 1
ROM:3CB4 ??                       ds 1
ROM:3CB5 ??                       ds 1
ROM:3CB6 ??                       ds 1
ROM:3CB7 ??                       ds 1
ROM:3CB8 ??                       ds 1
ROM:3CB9 ??                       ds 1
ROM:3CBA ??                       ds 1
ROM:3CBB ??                       ds 1
ROM:3CBC ??                       ds 1
ROM:3CBD ??                       ds 1
ROM:3CBE ??                       ds 1
ROM:3CBF ??                       ds 1
ROM:3CC0 ??                       ds 1
ROM:3CC1 ??                       ds 1
ROM:3CC2 ??                       ds 1
ROM:3CC3 ??                       ds 1
ROM:3CC4 ??                       ds 1
ROM:3CC5 ??                       ds 1
ROM:3CC6 ??                       ds 1
ROM:3CC7 ??                       ds 1
ROM:3CC8 ??                       ds 1
ROM:3CC9 ??                       ds 1
ROM:3CCA ??                       ds 1
ROM:3CCB ??                       ds 1
ROM:3CCC ??                       ds 1
ROM:3CCD ??                       ds 1
ROM:3CCE ??                       ds 1
ROM:3CCF ??                       ds 1
ROM:3CD0 ??                       ds 1
ROM:3CD1 ??                       ds 1
ROM:3CD2 ??                       ds 1
ROM:3CD3 ??                       ds 1
ROM:3CD4 ??                       ds 1
ROM:3CD5 ??                       ds 1
ROM:3CD6 ??                       ds 1
ROM:3CD7 ??                       ds 1
ROM:3CD8 ??                       ds 1
ROM:3CD9 ??                       ds 1
ROM:3CDA ??                       ds 1
ROM:3CDB ??                       ds 1
ROM:3CDC ??                       ds 1
ROM:3CDD ??                       ds 1
ROM:3CDE ??                       ds 1
ROM:3CDF ??                       ds 1
ROM:3CE0 ??                       ds 1
ROM:3CE1 ??                       ds 1
ROM:3CE2 ??                       ds 1
ROM:3CE3 ??                       ds 1
ROM:3CE4 ??                       ds 1
ROM:3CE5 ??                       ds 1
ROM:3CE6 ??                       ds 1
ROM:3CE7 ??                       ds 1
ROM:3CE8 ??                       ds 1
ROM:3CE9 ??                       ds 1
ROM:3CEA ??                       ds 1
ROM:3CEB ??                       ds 1
ROM:3CEC ??                       ds 1
ROM:3CED ??                       ds 1
ROM:3CEE ??                       ds 1
ROM:3CEF ??                       ds 1
ROM:3CF0 ??                       ds 1
ROM:3CF1 ??                       ds 1
ROM:3CF2 ??                       ds 1
ROM:3CF3 ??                       ds 1
ROM:3CF4 ??                       ds 1
ROM:3CF5 ??                       ds 1
ROM:3CF6 ??                       ds 1
ROM:3CF7 ??                       ds 1
ROM:3CF8 ??                       ds 1
ROM:3CF9 ??                       ds 1
ROM:3CFA ??                       ds 1
ROM:3CFB ??                       ds 1
ROM:3CFC ??                       ds 1
ROM:3CFD ??                       ds 1
ROM:3CFE ??                       ds 1
ROM:3CFF ??                       ds 1
ROM:3D00 ??                       ds 1
ROM:3D01 ??                       ds 1
ROM:3D02 ??                       ds 1
ROM:3D03 ??                       ds 1
ROM:3D04 ??                       ds 1
ROM:3D05 ??                       ds 1
ROM:3D06 ??                       ds 1
ROM:3D07 ??                       ds 1
ROM:3D08 ??                       ds 1
ROM:3D09 ??                       ds 1
ROM:3D0A ??                       ds 1
ROM:3D0B ??                       ds 1
ROM:3D0C ??                       ds 1
ROM:3D0D ??                       ds 1
ROM:3D0E ??                       ds 1
ROM:3D0F ??                       ds 1
ROM:3D10 ??                       ds 1
ROM:3D11 ??                       ds 1
ROM:3D12 ??                       ds 1
ROM:3D13 ??                       ds 1
ROM:3D14 ??                       ds 1
ROM:3D15 ??                       ds 1
ROM:3D16 ??                       ds 1
ROM:3D17 ??                       ds 1
ROM:3D18 ??                       ds 1
ROM:3D19 ??                       ds 1
ROM:3D1A ??                       ds 1
ROM:3D1B ??                       ds 1
ROM:3D1C ??                       ds 1
ROM:3D1D ??                       ds 1
ROM:3D1E ??                       ds 1
ROM:3D1F ??                       ds 1
ROM:3D20 ??                       ds 1
ROM:3D21 ??                       ds 1
ROM:3D22 ??                       ds 1
ROM:3D23 ??                       ds 1
ROM:3D24 ??                       ds 1
ROM:3D25 ??                       ds 1
ROM:3D26 ??                       ds 1
ROM:3D27 ??                       ds 1
ROM:3D28 ??                       ds 1
ROM:3D29 ??                       ds 1
ROM:3D2A ??                       ds 1
ROM:3D2B ??                       ds 1
ROM:3D2C ??                       ds 1
ROM:3D2D ??                       ds 1
ROM:3D2E ??                       ds 1
ROM:3D2F ??                       ds 1
ROM:3D30 ??                       ds 1
ROM:3D31 ??                       ds 1
ROM:3D32 ??                       ds 1
ROM:3D33 ??                       ds 1
ROM:3D34 ??                       ds 1
ROM:3D35 ??                       ds 1
ROM:3D36 ??                       ds 1
ROM:3D37 ??                       ds 1
ROM:3D38 ??                       ds 1
ROM:3D39 ??                       ds 1
ROM:3D3A ??                       ds 1
ROM:3D3B ??                       ds 1
ROM:3D3C ??                       ds 1
ROM:3D3D ??                       ds 1
ROM:3D3E ??                       ds 1
ROM:3D3F ??                       ds 1
ROM:3D40 ??                       ds 1
ROM:3D41 ??                       ds 1
ROM:3D42 ??                       ds 1
ROM:3D43 ??                       ds 1
ROM:3D44 ??                       ds 1
ROM:3D45 ??                       ds 1
ROM:3D46 ??                       ds 1
ROM:3D47 ??                       ds 1
ROM:3D48 ??                       ds 1
ROM:3D49 ??                       ds 1
ROM:3D4A ??                       ds 1
ROM:3D4B ??                       ds 1
ROM:3D4C ??                       ds 1
ROM:3D4D ??                       ds 1
ROM:3D4E ??                       ds 1
ROM:3D4F ??                       ds 1
ROM:3D50 ??                       ds 1
ROM:3D51 ??                       ds 1
ROM:3D52 ??                       ds 1
ROM:3D53 ??                       ds 1
ROM:3D54 ??                       ds 1
ROM:3D55 ??                       ds 1
ROM:3D56 ??                       ds 1
ROM:3D57 ??                       ds 1
ROM:3D58 ??                       ds 1
ROM:3D59 ??                       ds 1
ROM:3D5A ??                       ds 1
ROM:3D5B ??                       ds 1
ROM:3D5C ??                       ds 1
ROM:3D5D ??                       ds 1
ROM:3D5E ??                       ds 1
ROM:3D5F ??                       ds 1
ROM:3D60 ??                       ds 1
ROM:3D61 ??                       ds 1
ROM:3D62 ??                       ds 1
ROM:3D63 ??                       ds 1
ROM:3D64 ??                       ds 1
ROM:3D65 ??                       ds 1
ROM:3D66 ??                       ds 1
ROM:3D67 ??                       ds 1
ROM:3D68 ??                       ds 1
ROM:3D69 ??                       ds 1
ROM:3D6A ??                       ds 1
ROM:3D6B ??                       ds 1
ROM:3D6C ??                       ds 1
ROM:3D6D ??                       ds 1
ROM:3D6E ??                       ds 1
ROM:3D6F ??                       ds 1
ROM:3D70 ??                       ds 1
ROM:3D71 ??                       ds 1
ROM:3D72 ??                       ds 1
ROM:3D73 ??                       ds 1
ROM:3D74 ??                       ds 1
ROM:3D75 ??                       ds 1
ROM:3D76 ??                       ds 1
ROM:3D77 ??                       ds 1
ROM:3D78 ??                       ds 1
ROM:3D79 ??                       ds 1
ROM:3D7A ??                       ds 1
ROM:3D7B ??                       ds 1
ROM:3D7C ??                       ds 1
ROM:3D7D ??                       ds 1
ROM:3D7E ??                       ds 1
ROM:3D7F ??                       ds 1
ROM:3D80 ??                       ds 1
ROM:3D81 ??                       ds 1
ROM:3D82 ??                       ds 1
ROM:3D83 ??                       ds 1
ROM:3D84 ??                       ds 1
ROM:3D85 ??                       ds 1
ROM:3D86 ??                       ds 1
ROM:3D87 ??                       ds 1
ROM:3D88 ??                       ds 1
ROM:3D89 ??                       ds 1
ROM:3D8A ??                       ds 1
ROM:3D8B ??                       ds 1
ROM:3D8C ??                       ds 1
ROM:3D8D ??                       ds 1
ROM:3D8E ??                       ds 1
ROM:3D8F ??                       ds 1
ROM:3D90 ??                       ds 1
ROM:3D91 ??                       ds 1
ROM:3D92 ??                       ds 1
ROM:3D93 ??                       ds 1
ROM:3D94 ??                       ds 1
ROM:3D95 ??                       ds 1
ROM:3D96 ??                       ds 1
ROM:3D97 ??                       ds 1
ROM:3D98 ??                       ds 1
ROM:3D99 ??                       ds 1
ROM:3D9A ??                       ds 1
ROM:3D9B ??                       ds 1
ROM:3D9C ??                       ds 1
ROM:3D9D ??                       ds 1
ROM:3D9E ??                       ds 1
ROM:3D9F ??                       ds 1
ROM:3DA0 ??                       ds 1
ROM:3DA1 ??                       ds 1
ROM:3DA2 ??                       ds 1
ROM:3DA3 ??                       ds 1
ROM:3DA4 ??                       ds 1
ROM:3DA5 ??                       ds 1
ROM:3DA6 ??                       ds 1
ROM:3DA7 ??                       ds 1
ROM:3DA8 ??                       ds 1
ROM:3DA9 ??                       ds 1
ROM:3DAA ??                       ds 1
ROM:3DAB ??                       ds 1
ROM:3DAC ??                       ds 1
ROM:3DAD ??                       ds 1
ROM:3DAE ??                       ds 1
ROM:3DAF ??                       ds 1
ROM:3DB0 ??                       ds 1
ROM:3DB1 ??                       ds 1
ROM:3DB2 ??                       ds 1
ROM:3DB3 ??                       ds 1
ROM:3DB4 ??                       ds 1
ROM:3DB5 ??                       ds 1
ROM:3DB6 ??                       ds 1
ROM:3DB7 ??                       ds 1
ROM:3DB8 ??                       ds 1
ROM:3DB9 ??                       ds 1
ROM:3DBA ??                       ds 1
ROM:3DBB ??                       ds 1
ROM:3DBC ??                       ds 1
ROM:3DBD ??                       ds 1
ROM:3DBE ??                       ds 1
ROM:3DBF ??                       ds 1
ROM:3DC0 ??                       ds 1
ROM:3DC1 ??                       ds 1
ROM:3DC2 ??                       ds 1
ROM:3DC3 ??                       ds 1
ROM:3DC4 ??                       ds 1
ROM:3DC5 ??                       ds 1
ROM:3DC6 ??                       ds 1
ROM:3DC7 ??                       ds 1
ROM:3DC8 ??                       ds 1
ROM:3DC9 ??                       ds 1
ROM:3DCA ??                       ds 1
ROM:3DCB ??                       ds 1
ROM:3DCC ??                       ds 1
ROM:3DCD ??                       ds 1
ROM:3DCE ??                       ds 1
ROM:3DCF ??                       ds 1
ROM:3DD0 ??                       ds 1
ROM:3DD1 ??                       ds 1
ROM:3DD2 ??                       ds 1
ROM:3DD3 ??                       ds 1
ROM:3DD4 ??                       ds 1
ROM:3DD5 ??                       ds 1
ROM:3DD6 ??                       ds 1
ROM:3DD7 ??                       ds 1
ROM:3DD8 ??                       ds 1
ROM:3DD9 ??                       ds 1
ROM:3DDA ??                       ds 1
ROM:3DDB ??                       ds 1
ROM:3DDC ??                       ds 1
ROM:3DDD ??                       ds 1
ROM:3DDE ??                       ds 1
ROM:3DDF ??                       ds 1
ROM:3DE0 ??                       ds 1
ROM:3DE1 ??                       ds 1
ROM:3DE2 ??                       ds 1
ROM:3DE3 ??                       ds 1
ROM:3DE4 ??                       ds 1
ROM:3DE5 ??                       ds 1
ROM:3DE6 ??                       ds 1
ROM:3DE7 ??                       ds 1
ROM:3DE8 ??                       ds 1
ROM:3DE9 ??                       ds 1
ROM:3DEA ??                       ds 1
ROM:3DEB ??                       ds 1
ROM:3DEC ??                       ds 1
ROM:3DED ??                       ds 1
ROM:3DEE ??                       ds 1
ROM:3DEF ??                       ds 1
ROM:3DF0 ??                       ds 1
ROM:3DF1 ??                       ds 1
ROM:3DF2 ??                       ds 1
ROM:3DF3 ??                       ds 1
ROM:3DF4 ??                       ds 1
ROM:3DF5 ??                       ds 1
ROM:3DF6 ??                       ds 1
ROM:3DF7 ??                       ds 1
ROM:3DF8 ??                       ds 1
ROM:3DF9 ??                       ds 1
ROM:3DFA ??                       ds 1
ROM:3DFB ??                       ds 1
ROM:3DFC ??                       ds 1
ROM:3DFD ??                       ds 1
ROM:3DFE ??                       ds 1
ROM:3DFF ??                       ds 1
ROM:3E00 ??                       ds 1
ROM:3E01 ??                       ds 1
ROM:3E02 ??                       ds 1
ROM:3E03 ??                       ds 1
ROM:3E04 ??                       ds 1
ROM:3E05 ??                       ds 1
ROM:3E06 ??                       ds 1
ROM:3E07 ??                       ds 1
ROM:3E08 ??                       ds 1
ROM:3E09 ??                       ds 1
ROM:3E0A ??                       ds 1
ROM:3E0B ??                       ds 1
ROM:3E0C ??                       ds 1
ROM:3E0D ??                       ds 1
ROM:3E0E ??                       ds 1
ROM:3E0F ??                       ds 1
ROM:3E10 ??                       ds 1
ROM:3E11 ??                       ds 1
ROM:3E12 ??                       ds 1
ROM:3E13 ??                       ds 1
ROM:3E14 ??                       ds 1
ROM:3E15 ??                       ds 1
ROM:3E16 ??                       ds 1
ROM:3E17 ??                       ds 1
ROM:3E18 ??                       ds 1
ROM:3E19 ??                       ds 1
ROM:3E1A ??                       ds 1
ROM:3E1B ??                       ds 1
ROM:3E1C ??                       ds 1
ROM:3E1D ??                       ds 1
ROM:3E1E ??                       ds 1
ROM:3E1F ??                       ds 1
ROM:3E20 ??                       ds 1
ROM:3E21 ??                       ds 1
ROM:3E22 ??                       ds 1
ROM:3E23 ??                       ds 1
ROM:3E24 ??                       ds 1
ROM:3E25 ??                       ds 1
ROM:3E26 ??                       ds 1
ROM:3E27 ??                       ds 1
ROM:3E28 ??                       ds 1
ROM:3E29 ??                       ds 1
ROM:3E2A ??                       ds 1
ROM:3E2B ??                       ds 1
ROM:3E2C ??                       ds 1
ROM:3E2D ??                       ds 1
ROM:3E2E ??                       ds 1
ROM:3E2F ??                       ds 1
ROM:3E30 ??                       ds 1
ROM:3E31 ??                       ds 1
ROM:3E32 ??                       ds 1
ROM:3E33 ??                       ds 1
ROM:3E34 ??                       ds 1
ROM:3E35 ??                       ds 1
ROM:3E36 ??                       ds 1
ROM:3E37 ??                       ds 1
ROM:3E38 ??                       ds 1
ROM:3E39 ??                       ds 1
ROM:3E3A ??                       ds 1
ROM:3E3B ??                       ds 1
ROM:3E3C ?? ??                    ds 2
ROM:3E3E ??                       ds 1
ROM:3E3F ??                       ds 1
ROM:3E40 ??                       ds 1
ROM:3E41 ??                       ds 1
ROM:3E42 ??                       ds 1
ROM:3E43 ??                       ds 1
ROM:3E44 ??                       ds 1
ROM:3E45 ??                       ds 1
ROM:3E46 ??                       ds 1
ROM:3E47 ??                       ds 1
ROM:3E48 ??                       ds 1
ROM:3E49 ??                       ds 1
ROM:3E4A ??                       ds 1
ROM:3E4B ??                       ds 1
ROM:3E4C ??                       ds 1
ROM:3E4D ??                       ds 1
ROM:3E4E ??                       ds 1
ROM:3E4F ??                       ds 1
ROM:3E50 ??                       ds 1
ROM:3E51 ??                       ds 1
ROM:3E52 ??                       ds 1
ROM:3E53 ??                       ds 1
ROM:3E54 ??                       ds 1
ROM:3E55 ??                       ds 1
ROM:3E56 ??                       ds 1
ROM:3E57 ??                       ds 1
ROM:3E58 ??                       ds 1
ROM:3E59 ??                       ds 1
ROM:3E5A ??                       ds 1
ROM:3E5B ??                       ds 1
ROM:3E5C ??                       ds 1
ROM:3E5D ??                       ds 1
ROM:3E5E ??                       ds 1
ROM:3E5F ??                       ds 1
ROM:3E60 ??                       ds 1
ROM:3E61 ??                       ds 1
ROM:3E62 ??                       ds 1
ROM:3E63 ??                       ds 1
ROM:3E64 ??                       ds 1
ROM:3E65 ??                       ds 1
ROM:3E66 ??                       ds 1
ROM:3E67 ??                       ds 1
ROM:3E68 ??                       ds 1
ROM:3E69 ??                       ds 1
ROM:3E6A ??                       ds 1
ROM:3E6B ??                       ds 1
ROM:3E6C ??                       ds 1
ROM:3E6D ??                       ds 1
ROM:3E6E ??                       ds 1
ROM:3E6F ??                       ds 1
ROM:3E70 ??                       ds 1
ROM:3E71 ??                       ds 1
ROM:3E72 ??                       ds 1
ROM:3E73 ??                       ds 1
ROM:3E74 ??                       ds 1
ROM:3E75 ??                       ds 1
ROM:3E76 ??                       ds 1
ROM:3E77 ??                       ds 1
ROM:3E78 ??                       ds 1
ROM:3E79 ??                       ds 1
ROM:3E7A ??                       ds 1
ROM:3E7B ??                       ds 1
ROM:3E7C ??                       ds 1
ROM:3E7D ??                       ds 1
ROM:3E7E ??                       ds 1
ROM:3E7F ??                       ds 1
ROM:3E80 ??                       ds 1
ROM:3E81 ??                       ds 1
ROM:3E82 ??                       ds 1
ROM:3E83 ??                       ds 1
ROM:3E84 ??                       ds 1
ROM:3E85 ??                       ds 1
ROM:3E86 ??                       ds 1
ROM:3E87 ??                       ds 1
ROM:3E88 ??                       ds 1
ROM:3E89 ??                       ds 1
ROM:3E8A ??                       ds 1
ROM:3E8B ??                       ds 1
ROM:3E8C ?? ??                    ds 2
ROM:3E8E ??                       ds 1
ROM:3E8F ??                       ds 1
ROM:3E90 ??                       ds 1
ROM:3E91 ??                       ds 1
ROM:3E92 ??                       ds 1
ROM:3E93 ??                       ds 1
ROM:3E94 ??                       ds 1
ROM:3E95 ??                       ds 1
ROM:3E96 ??                       ds 1
ROM:3E97 ??                       ds 1
ROM:3E98 ??                       ds 1
ROM:3E99 ??                       ds 1
ROM:3E9A ??                       ds 1
ROM:3E9B ??                       ds 1
ROM:3E9C ??                       ds 1
ROM:3E9D ??                       ds 1
ROM:3E9E ?? ??                    ds 2
ROM:3EA0 ??                       ds 1
ROM:3EA1 ??                       ds 1
ROM:3EA2 ??                       ds 1
ROM:3EA3 ??                       ds 1
ROM:3EA4 ??                       ds 1
ROM:3EA5 ??                       ds 1
ROM:3EA6 ??                       ds 1
ROM:3EA7 ??                       ds 1
ROM:3EA8 ??                       ds 1
ROM:3EA9 ??                       ds 1
ROM:3EAA ??                       ds 1
ROM:3EAB ??                       ds 1
ROM:3EAC ??                       ds 1
ROM:3EAD ??                       ds 1
ROM:3EAE ??                       ds 1
ROM:3EAF ??                       ds 1
ROM:3EB0 ??                       ds 1
ROM:3EB1 ??                       ds 1
ROM:3EB2 ??                       ds 1
ROM:3EB3 ??                       ds 1
ROM:3EB4 ??                       ds 1
ROM:3EB5 ??                       ds 1
ROM:3EB6 ??                       ds 1
ROM:3EB7 ??                       ds 1
ROM:3EB8 ??                       ds 1
ROM:3EB9 ??                       ds 1
ROM:3EBA ??                       ds 1
ROM:3EBB ??                       ds 1
ROM:3EBC ??                       ds 1
ROM:3EBD ??                       ds 1
ROM:3EBE ??                       ds 1
ROM:3EBF ??                       ds 1
ROM:3EC0 ??                       ds 1
ROM:3EC1 ??                       ds 1
ROM:3EC2 ??                       ds 1
ROM:3EC3 ??                       ds 1
ROM:3EC4 ??                       ds 1
ROM:3EC5 ??                       ds 1
ROM:3EC6 ??                       ds 1
ROM:3EC7 ??                       ds 1
ROM:3EC8 ??                       ds 1
ROM:3EC9 ??                       ds 1
ROM:3ECA ??                       ds 1
ROM:3ECB ??                       ds 1
ROM:3ECC ??                       ds 1
ROM:3ECD ??                       ds 1
ROM:3ECE ??                       ds 1
ROM:3ECF ??                       ds 1
ROM:3ED0 ??                       ds 1
ROM:3ED1 ??                       ds 1
ROM:3ED2 ??                       ds 1
ROM:3ED3 ??                       ds 1
ROM:3ED4 ??                       ds 1
ROM:3ED5 ??                       ds 1
ROM:3ED6 ??                       ds 1
ROM:3ED7 ??                       ds 1
ROM:3ED8 ??                       ds 1
ROM:3ED9 ??                       ds 1
ROM:3EDA ??                       ds 1
ROM:3EDB ??                       ds 1
ROM:3EDC ??                       ds 1
ROM:3EDD ??                       ds 1
ROM:3EDE ??                       ds 1
ROM:3EDF ??                       ds 1
ROM:3EE0 ??                       ds 1
ROM:3EE1 ??                       ds 1
ROM:3EE2 ??                       ds 1
ROM:3EE3 ??                       ds 1
ROM:3EE4 ??                       ds 1
ROM:3EE5 ??                       ds 1
ROM:3EE6 ??                       ds 1
ROM:3EE7 ??                       ds 1
ROM:3EE8 ??                       ds 1
ROM:3EE9 ??                       ds 1
ROM:3EEA ??                       ds 1
ROM:3EEB ??                       ds 1
ROM:3EEC ??                       ds 1
ROM:3EED ??                       ds 1
ROM:3EEE ??                       ds 1
ROM:3EEF ??                       ds 1
ROM:3EF0 ??                       ds 1
ROM:3EF1 ??                       ds 1
ROM:3EF2 ??                       ds 1
ROM:3EF3 ??                       ds 1
ROM:3EF4 ??                       ds 1
ROM:3EF5 ??                       ds 1
ROM:3EF6 ??                       ds 1
ROM:3EF7 ??                       ds 1
ROM:3EF8 ??                       ds 1
ROM:3EF9 ??                       ds 1
ROM:3EFA ??                       ds 1
ROM:3EFB ??                       ds 1
ROM:3EFC ??                       ds 1
ROM:3EFD ??                       ds 1
ROM:3EFE ??                       ds 1
ROM:3EFF ??                       ds 1
ROM:3F00 ??                       ds 1
ROM:3F01 ??                       ds 1
ROM:3F02 ??                       ds 1
ROM:3F03 ??                       ds 1
ROM:3F04 ??                       ds 1
ROM:3F05 ??                       ds 1
ROM:3F06 ??                       ds 1
ROM:3F07 ??                       ds 1
ROM:3F08 ??                       ds 1
ROM:3F09 ??                       ds 1
ROM:3F0A ??                       ds 1
ROM:3F0B ??                       ds 1
ROM:3F0C ??                       ds 1
ROM:3F0D ??                       ds 1
ROM:3F0E ??                       ds 1
ROM:3F0F ??                       ds 1
ROM:3F10 ??                       ds 1
ROM:3F11 ??                       ds 1
ROM:3F12 ??                       ds 1
ROM:3F13 ??                       ds 1
ROM:3F14 ??                       ds 1
ROM:3F15 ??                       ds 1
ROM:3F16 ??                       ds 1
ROM:3F17 ??                       ds 1
ROM:3F18 ??                       ds 1
ROM:3F19 ??                       ds 1
ROM:3F1A ??                       ds 1
ROM:3F1B ??                       ds 1
ROM:3F1C ??                       ds 1
ROM:3F1D ??                       ds 1
ROM:3F1E ??                       ds 1
ROM:3F1F ??                       ds 1
ROM:3F20 ??                       ds 1
ROM:3F21 ??                       ds 1
ROM:3F22 ??                       ds 1
ROM:3F23 ??                       ds 1
ROM:3F24 ??                       ds 1
ROM:3F25 ??                       ds 1
ROM:3F26 ??                       ds 1
ROM:3F27 ??                       ds 1
ROM:3F28 ??                       ds 1
ROM:3F29 ??                       ds 1
ROM:3F2A ??                       ds 1
ROM:3F2B ??                       ds 1
ROM:3F2C ??                       ds 1
ROM:3F2D ??                       ds 1
ROM:3F2E ??                       ds 1
ROM:3F2F ??                       ds 1
ROM:3F30 ??                       ds 1
ROM:3F31 ??                       ds 1
ROM:3F32 ??                       ds 1
ROM:3F33 ??                       ds 1
ROM:3F34 ??                       ds 1
ROM:3F35 ??                       ds 1
ROM:3F36 ??                       ds 1
ROM:3F37 ??                       ds 1
ROM:3F38 ??                       ds 1
ROM:3F39 ??                       ds 1
ROM:3F3A ??                       ds 1
ROM:3F3B ??                       ds 1
ROM:3F3C ??                       ds 1
ROM:3F3D ??                       ds 1
ROM:3F3E ??                       ds 1
ROM:3F3F ??                       ds 1
ROM:3F40 ??                       ds 1
ROM:3F41 ??                       ds 1
ROM:3F42 ??                       ds 1
ROM:3F43 ??                       ds 1
ROM:3F44 ??                       ds 1
ROM:3F45 ??                       ds 1
ROM:3F46 ??                       ds 1
ROM:3F47 ??                       ds 1
ROM:3F48 ??                       ds 1
ROM:3F49 ??                       ds 1
ROM:3F4A ??                       ds 1
ROM:3F4B ??                       ds 1
ROM:3F4C ??                       ds 1
ROM:3F4D ??                       ds 1
ROM:3F4E ??                       ds 1
ROM:3F4F ??                       ds 1
ROM:3F50 ??                       ds 1
ROM:3F51 ??                       ds 1
ROM:3F52 ??                       ds 1
ROM:3F53 ??                       ds 1
ROM:3F54 ??                       ds 1
ROM:3F55 ??                       ds 1
ROM:3F56 ??                       ds 1
ROM:3F57 ??                       ds 1
ROM:3F58 ??                       ds 1
ROM:3F59 ??                       ds 1
ROM:3F5A ??                       ds 1
ROM:3F5B ??                       ds 1
ROM:3F5C ??                       ds 1
ROM:3F5D ??                       ds 1
ROM:3F5E ??                       ds 1
ROM:3F5F ??                       ds 1
ROM:3F60 ??                       ds 1
ROM:3F61 ??                       ds 1
ROM:3F62 ??                       ds 1
ROM:3F63 ??                       ds 1
ROM:3F64 ??                       ds 1
ROM:3F65 ??                       ds 1
ROM:3F66 ??                       ds 1
ROM:3F67 ??                       ds 1
ROM:3F68 ??                       ds 1
ROM:3F69 ??                       ds 1
ROM:3F6A ??                       ds 1
ROM:3F6B ??                       ds 1
ROM:3F6C ??                       ds 1
ROM:3F6D ??                       ds 1
ROM:3F6E ??                       ds 1
ROM:3F6F ??                       ds 1
ROM:3F70 ??                       ds 1
ROM:3F71 ??                       ds 1
ROM:3F72 ??                       ds 1
ROM:3F73 ??                       ds 1
ROM:3F74 ??                       ds 1
ROM:3F75 ??                       ds 1
ROM:3F76 ??                       ds 1
ROM:3F77 ??                       ds 1
ROM:3F78 ??                       ds 1
ROM:3F79 ??                       ds 1
ROM:3F7A ??                       ds 1
ROM:3F7B ??                       ds 1
ROM:3F7C ??                       ds 1
ROM:3F7D ??                       ds 1
ROM:3F7E ??                       ds 1
ROM:3F7F ??                       ds 1
ROM:3F80 ??                       ds 1
ROM:3F81 ??                       ds 1
ROM:3F82 ??                       ds 1
ROM:3F83 ??                       ds 1
ROM:3F84 ??                       ds 1
ROM:3F85 ??                       ds 1
ROM:3F86 ??                       ds 1
ROM:3F87 ??                       ds 1
ROM:3F88 ??                       ds 1
ROM:3F89 ??                       ds 1
ROM:3F8A ??                       ds 1
ROM:3F8B ??                       ds 1
ROM:3F8C ??                       ds 1
ROM:3F8D ??                       ds 1
ROM:3F8E ??                       ds 1
ROM:3F8F ??                       ds 1
ROM:3F90 ??                       ds 1
ROM:3F91 ??                       ds 1
ROM:3F92 ??                       ds 1
ROM:3F93 ??                       ds 1
ROM:3F94 ??                       ds 1
ROM:3F95 ??                       ds 1
ROM:3F96 ??                       ds 1
ROM:3F97 ??                       ds 1
ROM:3F98 ??                       ds 1
ROM:3F99 ??                       ds 1
ROM:3F9A ??                       ds 1
ROM:3F9B ??                       ds 1
ROM:3F9C ??                       ds 1
ROM:3F9D ??                       ds 1
ROM:3F9E ??                       ds 1
ROM:3F9F ??                       ds 1
ROM:3FA0 ??                       ds 1
ROM:3FA1 ??                       ds 1
ROM:3FA2 ??                       ds 1
ROM:3FA3 ??                       ds 1
ROM:3FA4 ??                       ds 1
ROM:3FA5 ??                       ds 1
ROM:3FA6 ??                       ds 1
ROM:3FA7 ??                       ds 1
ROM:3FA8 ??                       ds 1
ROM:3FA9 ??                       ds 1
ROM:3FAA ??                       ds 1
ROM:3FAB ??                       ds 1
ROM:3FAC ??                       ds 1
ROM:3FAD ??                       ds 1
ROM:3FAE ??                       ds 1
ROM:3FAF ??                       ds 1
ROM:3FB0 ??                       ds 1
ROM:3FB1 ??                       ds 1
ROM:3FB2 ??                       ds 1
ROM:3FB3 ??                       ds 1
ROM:3FB4 ??                       ds 1
ROM:3FB5 ??                       ds 1
ROM:3FB6 ??                       ds 1
ROM:3FB7 ??                       ds 1
ROM:3FB8 ??                       ds 1
ROM:3FB9 ??                       ds 1
ROM:3FBA ??                       ds 1
ROM:3FBB ??                       ds 1
ROM:3FBC ??                       ds 1
ROM:3FBD ??                       ds 1
ROM:3FBE ??                       ds 1
ROM:3FBF ??                       ds 1
ROM:3FC0 ??                       ds 1
ROM:3FC1 ??                       ds 1
ROM:3FC2 ??                       ds 1
ROM:3FC3 ??                       ds 1
ROM:3FC4 ??                       ds 1
ROM:3FC5 ??                       ds 1
ROM:3FC6 ??                       ds 1
ROM:3FC7 ??                       ds 1
ROM:3FC8 ??                       ds 1
ROM:3FC9 ??                       ds 1
ROM:3FCA ??                       ds 1
ROM:3FCB ??                       ds 1
ROM:3FCC ??                       ds 1
ROM:3FCD ??                       ds 1
ROM:3FCE ??                       ds 1
ROM:3FCF ??                       ds 1
ROM:3FD0 ??                       ds 1
ROM:3FD1 ??                       ds 1
ROM:3FD2 ??                       ds 1
ROM:3FD3 ??                       ds 1
ROM:3FD4 ??                       ds 1
ROM:3FD5 ??                       ds 1
ROM:3FD6 ??                       ds 1
ROM:3FD7 ??                       ds 1
ROM:3FD8 ??                       ds 1
ROM:3FD9 ??                       ds 1
ROM:3FDA ??                       ds 1
ROM:3FDB ??                       ds 1
ROM:3FDC ??                       ds 1
ROM:3FDD ??                       ds 1
ROM:3FDE ??                       ds 1
ROM:3FDF ??                       ds 1
ROM:3FE0 ??                       ds 1
ROM:3FE1 ??                       ds 1
ROM:3FE2 ??                       ds 1
ROM:3FE3 ??                       ds 1
ROM:3FE4 ??                       ds 1
ROM:3FE5 ??                       ds 1
ROM:3FE6 ??                       ds 1
ROM:3FE7 ??                       ds 1
ROM:3FE8 ??                       ds 1
ROM:3FE9 ??                       ds 1
ROM:3FEA ??                       ds 1
ROM:3FEB ??                       ds 1
ROM:3FEC ??                       ds 1
ROM:3FED ??                       ds 1
ROM:3FEE ??                       ds 1
ROM:3FEF ??                       ds 1
ROM:3FF0 ??                       ds 1
ROM:3FF1 ??                       ds 1
ROM:3FF2 ??                       ds 1
ROM:3FF3 ??                       ds 1
ROM:3FF4 ??                       ds 1
ROM:3FF5 ??                       ds 1
ROM:3FF6 ??                       ds 1
ROM:3FF7 ??                       ds 1
ROM:3FF8 ??                       ds 1
ROM:3FF9 ??                       ds 1
ROM:3FFA ??                       ds 1
ROM:3FFB ??                       ds 1
ROM:3FFC ??                       ds 1
ROM:3FFD ??                       ds 1
ROM:3FFE ??                       ds 1
ROM:3FFF ??                       ds 1
ROM:3FFF          ; end of 'ROM'
ROM:3FFF
RAM:4000          ; ===========================================================================
RAM:4000
RAM:4000          ; Segment type: Regular
RAM:4000                          segment RAM
RAM:4000                          org 4000h
RAM:4000 ??                       ds 1
RAM:4001 ??                       ds 1
RAM:4002 ??                       ds 1
RAM:4003 ??                       ds 1
RAM:4004 ??                       ds 1
RAM:4005 ??                       ds 1
RAM:4006 ??                       ds 1
RAM:4007 ??                       ds 1
RAM:4008 ??                       ds 1
RAM:4009 ??                       ds 1
RAM:400A ??                       ds 1
RAM:400B ??                       ds 1
RAM:400C ??                       ds 1
RAM:400D ??                       ds 1
RAM:400E ??                       ds 1
RAM:400F ??                       ds 1
RAM:4010 ??                       ds 1
RAM:4011 ??                       ds 1
RAM:4012 ??                       ds 1
RAM:4013 ??                       ds 1
RAM:4014 ??                       ds 1
RAM:4015 ??                       ds 1
RAM:4016 ??                       ds 1
RAM:4017 ??                       ds 1
RAM:4018 ??                       ds 1
RAM:4019 ??                       ds 1
RAM:401A ??                       ds 1
RAM:401B ??                       ds 1
RAM:401C ??                       ds 1
RAM:401D ??                       ds 1
RAM:401E ??                       ds 1
RAM:401F ??                       ds 1
RAM:4020 ??                       ds 1
RAM:4021 ??                       ds 1
RAM:4022 ??                       ds 1
RAM:4023 ??                       ds 1
RAM:4024 ??                       ds 1
RAM:4025 ??                       ds 1
RAM:4026 ??                       ds 1
RAM:4027 ??                       ds 1
RAM:4028 ??                       ds 1
RAM:4029 ??                       ds 1
RAM:402A ??                       ds 1
RAM:402B ??                       ds 1
RAM:402C ??                       ds 1
RAM:402D ??                       ds 1
RAM:402E ??                       ds 1
RAM:402F ??                       ds 1
RAM:4030 ??                       ds 1
RAM:4031 ??                       ds 1
RAM:4032 ??                       ds 1
RAM:4033 ??                       ds 1
RAM:4034 ??                       ds 1                    ;  observed min stack addr
RAM:4035 ??                       ds 1
RAM:4036 ??                       ds 1
RAM:4037 ??                       ds 1
RAM:4038 ??                       ds 1
RAM:4039 ??                       ds 1
RAM:403A ??                       ds 1
RAM:403B ??                       ds 1
RAM:403C ??                       ds 1
RAM:403D ??                       ds 1
RAM:403E ??                       ds 1
RAM:403F ??                       ds 1
RAM:4040 ?? ??    Stack_Begin:    ds 2                    ; Stack begin
RAM:4042 ??                       ds 1
RAM:4043 ??                       ds 1
RAM:4044 ??                       ds 1
RAM:4045 ??                       ds 1
RAM:4046 ??                       ds 1
RAM:4047 ??                       ds 1
RAM:4048 ?? ??    INT_Timer_Ch0_Addr:ds 2                 ; DATA XREF: sub_9A9+21↑w
RAM:4048                                                  ; Motor_DoMagicProgramCounter0AndClearDHM+18↑w ...
RAM:4048                                                  ; 9D5h by default
RAM:404A ?? ??    INT_Timer_Ch1_Addr:ds 2                 ; DATA XREF: sub_7B2:loc_7E0↑w
RAM:404A                                                  ; INT_Timer_Ch1_papertransport:Timer_ch1_addr_exchange↑w ...
RAM:404C ?? ??    INT_Timer_Ch2_Addr:ds 2                 ; DATA XREF: sub_D10:loc_8AB↑w
RAM:404C                                                  ; sub_85E:loc_8C1↑w ...
RAM:404E ?? ??    INT_Timer_Ch3_Addr:ds 2                 ; DATA XREF: SetupTimers_Ch1_Ch3+3↑w
RAM:404E                                                  ; 1FBh by default
RAM:4050 ??                       ds 1
RAM:4051 ??                       ds 1
RAM:4052 ??                       ds 1
RAM:4053 ??                       ds 1
RAM:4054 ??                       ds 1
RAM:4055 ??                       ds 1
RAM:4056 ??                       ds 1
RAM:4057 ??                       ds 1
RAM:4058 ?? ??    INT_USART_Hdlr_addr:ds 2                ; DATA XREF: UsartCtrl+12↑w
RAM:405A ??                       ds 1
RAM:405B ??                       ds 1
RAM:405C ??                       ds 1
RAM:405D ??                       ds 1
RAM:405E ??                       ds 1
RAM:405F ??                       ds 1
RAM:4060 ??                       ds 1
RAM:4061 ??                       ds 1
RAM:4062 ??                       ds 1
RAM:4063 ??                       ds 1
RAM:4064 ??                       ds 1
RAM:4065 ??                       ds 1
RAM:4066 ??                       ds 1
RAM:4067 ??                       ds 1
RAM:4068 ??       byte_4068:      ds 1                    ; DATA XREF: Motor_DoMagicProgramCounter0AndClearDHM+C↑r
RAM:4069 ??       byte_4069:      ds 1                    ; DATA XREF: sub_278D+A↑w
RAM:406A ??                       ds 1
RAM:406B ??       usart_bvar4_0:  ds 1                    ; DATA XREF: DisplayRoutine:loc_1121↑r
RAM:406B                                                  ; ROM:18B1↑r
RAM:406C ?? ??    word_406C:      ds 2                    ; DATA XREF: sub_12C7+E↑w
RAM:406C                                                  ; ROM:loc_1DE2↑w ...
RAM:406E ??                       ds 1
RAM:406F ?? ??    word_406F:      ds 2                    ; DATA XREF: Test_406f_Zero:loc_BAA↑r
RAM:406F                                                  ; SetupTimers_Ch1_Ch3+9↑w ...
RAM:406F                                                  ; Bit2: Set: 91Bh
RAM:4071 ??       byte_4071:      ds 1                    ; DATA XREF: sub_7B2+11↑r
RAM:4071                                                  ; INT_Timer_Ch1_func823+1D↑r ...
RAM:4071                                                  ; Bit 4: Set: BB8
RAM:4072 ??       byte_4072:      ds 1                    ; DATA XREF: SetupTimers_Ch1_Ch3+1C↑w
RAM:4072                                                  ; sub_17E4+8↑r
RAM:4073 ?? ??    word_4073:      ds 2                    ; DATA XREF: sub_116C+B↑w
RAM:4073                                                  ; sub_116C+4B↑r ...
RAM:4075 ?? ??    word_4075:      ds 2                    ; DATA XREF: sub_1411:loc_1417↑r
RAM:4075                                                  ; sub_1459+B↑r ...
RAM:4077 ??       unk_4077:       ds 1                    ; DATA XREF: sub_1459:loc_145F↑w
RAM:4077                                                  ; sub_1459+17↑r ...
RAM:4078 ??                       ds 1
RAM:4079 ?? ??    word_4079:      ds 2                    ; DATA XREF: sub_BEB↑w
RAM:4079                                                  ; sub_D10+49↑r ...
RAM:407B ??       byte_407B:      ds 1                    ; DATA XREF: sub_D10:loc_ACE↑w
RAM:407B                                                  ; sub_D10+1A6↑r ...
RAM:407C ??       byte_407C:      ds 1                    ; DATA XREF: sub_AD4:loc_AEA↑r
RAM:407D ?? ??    word_407D:      ds 2                    ; DATA XREF: sub_AD4+19↑r
RAM:407D                                                  ; sub_C81:loc_CA4↑w ...
RAM:407F ?? ??    word_407F:      ds 2                    ; DATA XREF: sub_D10+153↑r
RAM:407F                                                  ; sub_D10+157↑w ...
RAM:4081 ??       byte_4081:      ds 1                    ; DATA XREF: sub_AD4:loc_AF7↑r
RAM:4082 ??       byte_4082:      ds 1                    ; DATA XREF: sub_C0A+3↑r
RAM:4082                                                  ; sub_C34+B↑r ...
RAM:4083 ??       byte_4083:      ds 1                    ; DATA XREF: sub_C0A:loc_C2D↑w
RAM:4083                                                  ; sub_D10+DF↑r
RAM:4084 ??       byte_4084:      ds 1                    ; DATA XREF: sub_F0B+F↑w
RAM:4085 ?? ??    word_4085:      ds 2                    ; DATA XREF: SetupTimers_Ch1_Ch3+C↑w
RAM:4085                                                  ; sub_D10+4↑r ...
RAM:4087 ??       byte_4087:      ds 1                    ; DATA XREF: sub_D10:loc_D33↑r
RAM:4088 ??                       ds 1
RAM:4089 ?? ??    word_4089:      ds 2                    ; DATA XREF: sub_B20+B↑w
RAM:4089                                                  ; sub_B20:loc_B34↑r ...
RAM:408B ?? ??    word_408B:      ds 2                    ; DATA XREF: sub_B3D+9↑w
RAM:408B                                                  ; sub_B5D+12↑w ...
RAM:408D ??       byte_408D:      ds 1                    ; DATA XREF: sub_BF9+9↑w
RAM:408D                                                  ; sub_D10+D0↑r
RAM:408E ??       byte_408E:      ds 1                    ; DATA XREF: sub_C34:loc_C67↑w
RAM:408E                                                  ; sub_D10+97↑r
RAM:408F ??                       ds 1
RAM:4090 ??                       ds 1
RAM:4091 ??                       ds 1
RAM:4092 ??                       ds 1
RAM:4093 ??                       ds 1
RAM:4094 ??                       ds 1
RAM:4095 ??                       ds 1
RAM:4096 ??                       ds 1
RAM:4097 ??                       ds 1
RAM:4098 ??                       ds 1
RAM:4099 ??                       ds 1
RAM:409A ??                       ds 1
RAM:409B ??                       ds 1
RAM:409C ?? ??    word_409C:      ds 2                    ; DATA XREF: sub_FC1+21↑r
RAM:409E ?? ??    word_409E:      ds 2                    ; DATA XREF: sub_FC1+2C↑r
RAM:40A0 ?? ??    word_40A0:      ds 2                    ; DATA XREF: sub_C81+7↑r
RAM:40A2 ??       byte_40A2:      ds 1                    ; DATA XREF: sub_2028+94D↑r
RAM:40A3 ??       byte_40A3:      ds 1                    ; DATA XREF: ROM:1FE6↑r
RAM:40A4 ??       byte_40A4:      ds 1                    ; DATA XREF: sub_2188+483↑r
RAM:40A5 ??                       ds 1
RAM:40A6 ?? ??    word_40A6:      ds 2                    ; DATA XREF: sub_1406+3↑r
RAM:40A6                                                  ; sub_2479:loc_248D↑w ...
RAM:40A8 ?? ??    word_40A8:      ds 2                    ; DATA XREF: sub_B20↑w
RAM:40A8                                                  ; sub_B81+1↑r ...
RAM:40AA ?? ??    word_40AA:      ds 2                    ; DATA XREF: sub_B5D+4↑r
RAM:40AA                                                  ; sub_B5D+8↑w ...
RAM:40AC ??       Display_pos0:   ds 1                    ; Display_pos0
RAM:40AD ??       Display_pos1:   ds 1                    ; Display_pos1
RAM:40AE ??       Display_pos2:   ds 1                    ; Display_pos2
RAM:40AF ??       Display_pos3:   ds 1                    ; Display_pos3
RAM:40B0 ??       Display_pos4:   ds 1                    ; Display_pos4
RAM:40B1 ?? ??    Display_pos5_6: ds 2                    ; DATA XREF: sub_2668+15↑w
RAM:40B1                                                  ; Display_pos5
RAM:40B3 ??       Display_pos7:   ds 1                    ; Display_pos7
RAM:40B4 ??       Display_pos8:   ds 1                    ; DATA XREF: Usart_SomeLogic+13↑w
RAM:40B4                                                  ; Display_pos8
RAM:40B5 ??       Display_pos9:   ds 1                    ; Display_pos9
RAM:40B6 ??       Display_pos10:  ds 1                    ; Display_pos10
RAM:40B7 ??       Display_pos11:  ds 1                    ; Display_pos11
RAM:40B8 ??       Display_LED_p0: ds 1                    ; DATA XREF: DisplayRoutine+33↑w
RAM:40B8                                                  ; Display_LED_Group0
RAM:40B9 ??       Display_LED_p1: ds 1                    ; DATA XREF: DisplayRoutine+21↑w
RAM:40B9                                                  ; Display_LED_Group1
RAM:40BA ??       Display_LED_p2: ds 1                    ; DATA XREF: DisplayRoutine+14↑w
RAM:40BA                                                  ; Display_LED_Group2
RAM:40BB ??       Display_LED_p3: ds 1                    ; Display_LED_Group3
RAM:40BC ??       byte_40BC:      ds 1                    ; DATA XREF: sub_35B9+9↑w
RAM:40BC                                                  ; Usart_SomeLogic+10↑r
RAM:40BD ??       byte_40BD:      ds 1                    ; DATA XREF: DisplayRoutine↑r
RAM:40BD                                                  ; Bit 7 - test:  1115h
RAM:40BD                                                  ; Bit 6 - set:   321Ah
RAM:40BD                                                  ;         reset: 32BBh
RAM:40BD                                                  ;         test:  1074h
RAM:40BD                                                  ; Bit 2 - set:   0F7Fh
RAM:40BD                                                  ;         reset: 0F92h, 2E50h
RAM:40BD                                                  ;         test:  0FD1h, 111Bh
RAM:40BE ??       byte_40BE:      ds 1                    ; DATA XREF: DisplayRoutine+17↑r
RAM:40BE                                                  ; sub_12C7+1B↑w ...
RAM:40BF ??       byte_40BF:      ds 1                    ; DATA XREF: DisplayRoutine+24↑r
RAM:40BF                                                  ; sub_12F7+3↑w ...
RAM:40C0 ?? ??    word_40C0:      ds 2                    ; DATA XREF: sub_116C+48↑w
RAM:40C0                                                  ; sub_12F7+23↑w ...
RAM:40C2 ??                       ds 1
RAM:40C3 ??                       ds 1
RAM:40C4 ?? ??    word_40C4:      ds 2                    ; DATA XREF: sub_13F2+10↑r
RAM:40C4                                                  ; sub_2188:loc_1E85↑w
RAM:40C6 ?? ??    word_40C6:      ds 2                    ; DATA XREF: sub_243C+28↑r
RAM:40C8 ?? ??    word_40C8:      ds 2                    ; DATA XREF: sub_13E5:loc_13E8↑r
RAM:40C8                                                  ; sub_2276↑r ...
RAM:40CA ?? ??    word_40CA:      ds 2                    ; DATA XREF: sub_1CAD↑r
RAM:40CA                                                  ; sub_227E↑r ...
RAM:40CC ?? ??    word_40CC:      ds 2                    ; DATA XREF: sub_116C:loc_11B1↑r
RAM:40CC                                                  ; sub_1433+6↑w ...
RAM:40CE ??                       ds 1
RAM:40CF ??                       ds 1
RAM:40D0 ??                       ds 1
RAM:40D1 ??                       ds 1
RAM:40D2 ??                       ds 1
RAM:40D3 ??                       ds 1
RAM:40D4 ??                       ds 1
RAM:40D5 ??                       ds 1
RAM:40D6 ??                       ds 1
RAM:40D7 ??                       ds 1
RAM:40D8 ??                       ds 1
RAM:40D9 ??                       ds 1
RAM:40DA ??                       ds 1
RAM:40DB ??                       ds 1
RAM:40DC ??                       ds 1
RAM:40DD ??                       ds 1
RAM:40DE ??                       ds 1
RAM:40DF ??                       ds 1
RAM:40E0 ??                       ds 1
RAM:40E1 ??                       ds 1
RAM:40E2 ??                       ds 1
RAM:40E3 ??                       ds 1
RAM:40E4 ??                       ds 1
RAM:40E5 ??                       ds 1
RAM:40E6 ??                       ds 1
RAM:40E7 ??                       ds 1
RAM:40E8 ??                       ds 1
RAM:40E9 ??                       ds 1
RAM:40EA ??                       ds 1
RAM:40EB ??                       ds 1
RAM:40EC ??                       ds 1
RAM:40ED ??                       ds 1
RAM:40EE ??                       ds 1
RAM:40EF ??                       ds 1
RAM:40F0 ??                       ds 1
RAM:40F1 ??                       ds 1
RAM:40F2 ??                       ds 1
RAM:40F3 ??                       ds 1
RAM:40F4 ??                       ds 1
RAM:40F5 ??                       ds 1
RAM:40F6 ??                       ds 1
RAM:40F7 ??                       ds 1
RAM:40F8 ??                       ds 1
RAM:40F9 ??                       ds 1
RAM:40FA ??                       ds 1
RAM:40FB ??                       ds 1
RAM:40FC ??                       ds 1
RAM:40FD ??                       ds 1
RAM:40FE ??                       ds 1
RAM:40FF ??                       ds 1
RAM:4100 ??                       ds 1
RAM:4101 ??                       ds 1
RAM:4102 ??                       ds 1
RAM:4103 ??                       ds 1
RAM:4104 ??                       ds 1
RAM:4105 ??                       ds 1
RAM:4106 ??                       ds 1
RAM:4107 ??                       ds 1
RAM:4108 ??                       ds 1
RAM:4109 ??                       ds 1
RAM:410A ??                       ds 1
RAM:410B ??                       ds 1
RAM:410C ??                       ds 1
RAM:410D ??                       ds 1
RAM:410E ??                       ds 1
RAM:410F ??                       ds 1
RAM:4110 ??                       ds 1
RAM:4111 ??                       ds 1
RAM:4112 ??                       ds 1
RAM:4113 ??                       ds 1
RAM:4114 ??                       ds 1
RAM:4115 ??                       ds 1
RAM:4116 ??                       ds 1
RAM:4117 ??                       ds 1
RAM:4118 ??                       ds 1
RAM:4119 ??                       ds 1
RAM:411A ??                       ds 1
RAM:411B ??                       ds 1
RAM:411C ??                       ds 1
RAM:411D ??                       ds 1
RAM:411E ??                       ds 1
RAM:411F ??                       ds 1
RAM:4120 ??                       ds 1
RAM:4121 ??                       ds 1
RAM:4122 ??       byte_4122:      ds 1                    ; DATA XREF: sub_FF6+50↑w
RAM:4123 ??                       ds 1                    ; Bit 0: Test: FC4h
RAM:4124 ??                       ds 1
RAM:4125 ??                       ds 1
RAM:4126 ??                       ds 1
RAM:4127 ??                       ds 1
RAM:4128 ??                       ds 1
RAM:4129 ??                       ds 1
RAM:412A ??                       ds 1
RAM:412B ??                       ds 1
RAM:412C ??                       ds 1
RAM:412D ??                       ds 1
RAM:412E ??                       ds 1
RAM:412F ??                       ds 1
RAM:4130 ?? ??    _975h_word_4130:ds 2                    ; DATA XREF: IOnVarInit+2F↑w
RAM:4130                                                  ; sub_9A9+16↑r
RAM:4132 ??                       ds 1
RAM:4133 ??       _0_byte_4133:   ds 1                    ; DATA XREF: IOnVarInit+17↑w
RAM:4134 ??                       ds 1
RAM:4135 ?? ??    timer_ch0_time: ds 2                    ; DATA XREF: INT_Timer_Ch0+1F↑r
RAM:4135                                                  ; INT_Timer_Ch0+27↑w
RAM:4137 ??                       ds 1
RAM:4138 ?? ??    _735h_word_4138:ds 2                    ; DATA XREF: IOnVarInit+1D↑w
RAM:4138                                                  ; sub_7B2:loc_7CC↑r
RAM:413A ?? ??    word_413A:      ds 2                    ; DATA XREF: sub_7B2+3↑w
RAM:413A                                                  ; sub_CB8+D↑r ...
RAM:413A                                                  ; 413B papertransport
RAM:413C ??       _0_byte_413C:   ds 1                    ; DATA XREF: IOnVarInit+E↑w
RAM:413D ?? ??    word_413D:      ds 2                    ; DATA XREF: sub_7B2+23↑w
RAM:413D                                                  ; INT_Timer_Ch1_papertransport+2↑r ...
RAM:413F ??                       ds 1
RAM:4140 ?? ??    timer_ch1_time: ds 2                    ; DATA XREF: INT_Timer_Ch1_func823:loc_7F9↑r
RAM:4140                                                  ; INT_Timer_Ch1_func823-22↑w
RAM:4142 ??                       ds 1
RAM:4143 ?? ??    _906h_word_4143:ds 2                    ; DATA XREF: IOnVarInit+29↑w
RAM:4143                                                  ; sub_916:loc_926↑r
RAM:4145 ??       byte_4145:      ds 1                    ; DATA XREF: sub_916+7↑w
RAM:4145                                                  ; typewheel motor
RAM:4146 ??       _0_byte_4146:   ds 1                    ; DATA XREF: IOnVarInit+14↑w
RAM:4147 ??                       ds 1
RAM:4148 ?? ??    timer_ch2_time: ds 2                    ; DATA XREF: INT_Timer_Ch2_typewheel+1B↑r
RAM:4148                                                  ; INT_Timer_Ch2_typewheel+23↑w
RAM:414A ??                       ds 1
RAM:414B ?? ??    _85eh_word_414B:ds 2                    ; DATA XREF: IOnVarInit+23↑w
RAM:414B                                                  ; sub_D10-476↑r
RAM:414D ?? ??    word_414D:      ds 2                    ; DATA XREF: sub_D10-482↑w
RAM:414D                                                  ; sub_CB8+29↑r
RAM:414D                                                  ; 414E - Wagentransport
RAM:414F ??       _0_byte_414F:   ds 1                    ; DATA XREF: IOnVarInit+11↑w
RAM:414F                                                  ; sub_F2C:loc_F3D↑r
RAM:4150 ?? ??    word_4150:      ds 2                    ; DATA XREF: sub_D10-470↑w
RAM:4150                                                  ; INT_Timer_Ch2_wagentransport+2↑r ...
RAM:4152 ??                       ds 1
RAM:4153 ?? ??    timer_ch2_time2:ds 2                    ; DATA XREF: sub_85E:loc_8C4↑r
RAM:4153                                                  ; sub_85E+6E↑w
RAM:4155 ??                       ds 1
RAM:4156 ??       SomeBitMask:    ds 1                    ; DATA XREF: sub_300A+4D↑w
RAM:4157 ??                       ds 1
RAM:4158 ??       byte_4158:      ds 1                    ; DATA XREF: ROM:191A↑r
RAM:4159 ??       USART_RR0_SYNC: ds 1                    ; DATA XREF: UsartCtrl+39↑w
RAM:4159                                                  ; Bit2: Set: 340Ch
RAM:4159                                                  ;       Test: 34BFh
RAM:415A ??       byte_415A:      ds 1                    ; DATA XREF: UsartCtrl+4F↑w
RAM:415B ??       byte_415B:      ds 1                    ; DATA XREF: ROM:1923↑r
RAM:415B                                                  ; ROM:1959↑r ...
RAM:415C ??       byte_415C:      ds 1                    ; DATA XREF: sub_2BA1-1205↑r
RAM:415D ?? ??    word_415D:      ds 2                    ; DATA XREF: sub_1BFC+28↑w
RAM:415D                                                  ; sub_1EB2+21↑r ...
RAM:415F ?? ??    word_415F:      ds 2                    ; DATA XREF: sub_1CCA↑r
RAM:415F                                                  ; sub_1EB2+24↑w ...
RAM:4161 ?? ??    word_4161:      ds 2                    ; DATA XREF: sub_1CCF↑r
RAM:4161                                                  ; sub_1D20:loc_1D23↑r ...
RAM:4163 ?? ??    word_4163:      ds 2                    ; DATA XREF: sub_1B0A+7↑r
RAM:4163                                                  ; sub_2065-522↑r ...
RAM:4165 ?? ??    word_4165:      ds 2                    ; DATA XREF: sub_2905:loc_2922↑r
RAM:4165                                                  ; sub_2905+53↑r ...
RAM:4167 ?? ??    word_4167:      ds 2                    ; DATA XREF: sub_282D+3↑w
RAM:4167                                                  ; ROM:2AAF↑w ...
RAM:4169 ??                       ds 1
RAM:416A ??                       ds 1
RAM:416B ?? ??    word_416B:      ds 2                    ; DATA XREF: sub_1B15+8↑r
RAM:416B                                                  ; Setup_all+AA↑w ...
RAM:416D ?? ??    word_416D:      ds 2                    ; DATA XREF: sub_1AA8+3↑r
RAM:416D                                                  ; sub_1AA8+10↑w ...
RAM:416F ?? ??    word_416F:      ds 2                    ; DATA XREF: sub_1AA8:loc_1AF2↑r
RAM:416F                                                  ; sub_2CFE-88↑w ...
RAM:4171 ?? ??    word_4171:      ds 2                    ; DATA XREF: sub_1AA8+3F↑r
RAM:4171                                                  ; sub_27F5↑r ...
RAM:4173 ?? ??    usart_var2_41CE:ds 2                    ; DATA XREF: sub_34CA+4↑r
RAM:4173                                                  ; sub_34CA+2A↑w ...
RAM:4175 ?? ??    usart_var3_41CE:ds 2                    ; DATA XREF: sub_34CA+F↑r
RAM:4175                                                  ; sub_34CA+24↑w ...
RAM:4177 ?? ??    usart_var1_420E:ds 2                    ; DATA XREF: UsartCtrl+3↑w
RAM:4177                                                  ; sub_359A↑r ...
RAM:4179 ?? ??    word_4179:      ds 2                    ; DATA XREF: sub_2BA1-1209↑r
RAM:4179                                                  ; sub_19BE+14↑r ...
RAM:417B ?? ??    word_417B:      ds 2                    ; DATA XREF: sub_1433+3↑r
RAM:417B                                                  ; sub_14E1↑r ...
RAM:417D ??                       ds 1
RAM:417E ??                       ds 1
RAM:417F ?? ??    word_417F:      ds 2                    ; DATA XREF: sub_2905-8FB↑w
RAM:417F                                                  ; sub_2028+1A↑r ...
RAM:4181 ?? ??    word_4181:      ds 2                    ; DATA XREF: sub_2905-901↑w
RAM:4181                                                  ; sub_20E9↑r
RAM:4183 ?? ??    word_4183:      ds 2                    ; DATA XREF: sub_2905:loc_2916↑r
RAM:4183                                                  ; sub_2905+3F↑r ...
RAM:4185 ?? ??    word_4185:      ds 2                    ; DATA XREF: ROM:loc_25CC↑w
RAM:4185                                                  ; sub_25D9+5↑r
RAM:4187 ??                       ds 1
RAM:4188 ??                       ds 1
RAM:4189 ??                       ds 1
RAM:418A ??                       ds 1
RAM:418B ??                       ds 1
RAM:418C ??                       ds 1
RAM:418D ?? ??    word_418D:      ds 2                    ; DATA XREF: sub_2905+14↑r
RAM:418D                                                  ; sub_2905+20↑r ...
RAM:418F ??                       ds 1
RAM:4190 ??                       ds 1
RAM:4191 ??       Display_main:   ds 1                    ; pos0
RAM:4192 ??                       ds 1                    ; pos1
RAM:4193 ??                       ds 1                    ; pos2
RAM:4194 ??                       ds 1                    ; pos3
RAM:4195 ??                       ds 1                    ; pos4
RAM:4196 ??                       ds 1                    ; pos5
RAM:4197 ??                       ds 1                    ; pos6
RAM:4198 ??                       ds 1                    ; pos7
RAM:4199 ??                       ds 1                    ; pos8
RAM:419A ??                       ds 1                    ; pos9
RAM:419B ??                       ds 1                    ; pos10
RAM:419C ??                       ds 1                    ; pos11
RAM:419D ??       Display_MOD:    ds 1                    ; pos0 ; Bit 7: Test: 26D2h
RAM:419E ??                       ds 1                    ; pos1
RAM:419F ??                       ds 1                    ; pos2
RAM:41A0 ??                       ds 1                    ; pos3
RAM:41A1 ??                       ds 1                    ; pos4
RAM:41A2 ??                       ds 1                    ; pos5
RAM:41A3 ??                       ds 1                    ; pos6
RAM:41A4 ??                       ds 1                    ; pos7
RAM:41A5 ??                       ds 1                    ; pos8
RAM:41A6 ??                       ds 1                    ; pos9
RAM:41A7 ??                       ds 1                    ; pos10
RAM:41A8 ??                       ds 1                    ; pos11
RAM:41A9 ?? ??    word_41A9:      ds 2                    ; DATA XREF: sub_2EDB+D↑r
RAM:41AB ?? ??    word_41AB:      ds 2                    ; DATA XREF: sub_2EDB+3↑r
RAM:41AD ??                       ds 1
RAM:41AE ??                       ds 1
RAM:41AF ??                       ds 1
RAM:41B0 ?? ??                    ds 2
RAM:41B2 ??                       ds 1
RAM:41B3 ??                       ds 1
RAM:41B4 ??                       ds 1
RAM:41B5 ??                       ds 1
RAM:41B6 ??                       ds 1
RAM:41B7 ??                       ds 1
RAM:41B8 ??                       ds 1
RAM:41B9 ??                       ds 1
RAM:41BA ??                       ds 1
RAM:41BB ??                       ds 1
RAM:41BC ??                       ds 1
RAM:41BD ??                       ds 1
RAM:41BE ??                       ds 1
RAM:41BF ??                       ds 1
RAM:41C0 ??                       ds 1
RAM:41C1 ??                       ds 1
RAM:41C2 ??                       ds 1
RAM:41C3 ??                       ds 1
RAM:41C4 ??                       ds 1
RAM:41C5 ??                       ds 1
RAM:41C6 ??                       ds 1
RAM:41C7 ??                       ds 1
RAM:41C8 ??                       ds 1
RAM:41C9 ??                       ds 1
RAM:41CA ??                       ds 1
RAM:41CB ??                       ds 1
RAM:41CC ??                       ds 1
RAM:41CD ??                       ds 1
RAM:41CE ??                       ds 1
RAM:41CF ??                       ds 1
RAM:41D0 ??                       ds 1
RAM:41D1 ??                       ds 1
RAM:41D2 ??                       ds 1
RAM:41D3 ??                       ds 1
RAM:41D4 ??                       ds 1
RAM:41D5 ??                       ds 1
RAM:41D6 ??                       ds 1
RAM:41D7 ??                       ds 1
RAM:41D8 ??                       ds 1
RAM:41D9 ??                       ds 1
RAM:41DA ??                       ds 1
RAM:41DB ??                       ds 1
RAM:41DC ??                       ds 1
RAM:41DD ??                       ds 1
RAM:41DE ??                       ds 1
RAM:41DF ??                       ds 1
RAM:41E0 ??                       ds 1
RAM:41E1 ??                       ds 1
RAM:41E2 ??                       ds 1
RAM:41E3 ??                       ds 1
RAM:41E4 ??                       ds 1
RAM:41E5 ??                       ds 1
RAM:41E6 ??                       ds 1
RAM:41E7 ??                       ds 1
RAM:41E8 ??                       ds 1
RAM:41E9 ??                       ds 1
RAM:41EA ??                       ds 1
RAM:41EB ??                       ds 1
RAM:41EC ??                       ds 1
RAM:41ED ??                       ds 1
RAM:41EE ??                       ds 1
RAM:41EF ??                       ds 1
RAM:41F0 ??                       ds 1
RAM:41F1 ??                       ds 1
RAM:41F2 ??                       ds 1
RAM:41F3 ??                       ds 1
RAM:41F4 ??                       ds 1
RAM:41F5 ??                       ds 1
RAM:41F6 ??                       ds 1
RAM:41F7 ??                       ds 1
RAM:41F8 ??                       ds 1
RAM:41F9 ??                       ds 1
RAM:41FA ??                       ds 1
RAM:41FB ??                       ds 1
RAM:41FC ??                       ds 1
RAM:41FD ??                       ds 1
RAM:41FE ??                       ds 1
RAM:41FF ??                       ds 1
RAM:4200 ??                       ds 1
RAM:4201 ??                       ds 1
RAM:4202 ??                       ds 1
RAM:4203 ??                       ds 1
RAM:4204 ??                       ds 1
RAM:4205 ??                       ds 1
RAM:4206 ??                       ds 1
RAM:4207 ??                       ds 1
RAM:4208 ??                       ds 1
RAM:4209 ??                       ds 1
RAM:420A ??                       ds 1
RAM:420B ??                       ds 1
RAM:420C ??                       ds 1
RAM:420D ??                       ds 1
RAM:420E ??                       ds 1
RAM:420F ??                       ds 1
RAM:4210 ??                       ds 1
RAM:4211 ??                       ds 1
RAM:4212 ??                       ds 1
RAM:4213 ??                       ds 1
RAM:4214 ??                       ds 1
RAM:4215 ??                       ds 1
RAM:4216 ??                       ds 1
RAM:4217 ??                       ds 1
RAM:4218 ??                       ds 1
RAM:4219 ??                       ds 1
RAM:421A ??                       ds 1
RAM:421B ??       byte_421B:      ds 1                    ; DATA XREF: sub_1695+8↑w
RAM:421B                                                  ; sub_1768+1↑r ...
RAM:421C ?? ??    word_421C:      ds 2                    ; DATA XREF: sub_2905:loc_1FFA↑w
RAM:421C                                                  ; sub_2028↑r ...
RAM:421E ?? ??    word_421E:      ds 2                    ; DATA XREF: sub_1AA8+7↑w
RAM:421E                                                  ; sub_2905-908↑w ...
RAM:4220 ?? ??    word_4220:      ds 2                    ; DATA XREF: ROM:1E60↑w
RAM:4220                                                  ; ROM:1E7E↑r
RAM:4222 ?? ??    word_4222:      ds 2                    ; DATA XREF: Setup_all+B↑r
RAM:4222                                                  ; Setup_all+E3↑w
RAM:4224 ?? ??    word_4224:      ds 2                    ; DATA XREF: Setup_all+2C↑w
RAM:4224                                                  ; Setup_all+45↑r
RAM:4226 ?? ??    word_4226:      ds 2                    ; DATA XREF: Setup_all+26↑w
RAM:4226                                                  ; Setup_all+4F↑r
RAM:4228 ??                       ds 1
RAM:4229 ??                       ds 1
RAM:422A ??                       ds 1
RAM:422B ?? ??    word_422B:      ds 2                    ; DATA XREF: sub_2668+12↑r
RAM:422D ??       byte_422D:      ds 1                    ; DATA XREF: sub_1A7B:loc_1A91↑w
RAM:422D                                                  ; sub_1B5B+19↑w ...
RAM:422E ??                       ds 1
RAM:422F ??                       ds 1
RAM:4230 ?? ??    word_4230:      ds 2                    ; DATA XREF: ROM:loc_1960↑w
RAM:4230                                                  ; sub_2BA1:loc_198F↑w ...
RAM:4232 ??       byte_4232:      ds 1                    ; DATA XREF: sub_2BED+6↑r
RAM:4232                                                  ; sub_2DCD+1↑w
RAM:4233 ?? ??    word_4233:      ds 2                    ; DATA XREF: sub_2821+3↑w
RAM:4233                                                  ; ROM:2AA3↑r ...
RAM:4235 ??                       ds 1
RAM:4236 ??                       ds 1
RAM:4237 ??                       ds 1
RAM:4238 ??                       ds 1
RAM:4239 ??                       ds 1
RAM:423A ??                       ds 1
RAM:423B ??                       ds 1
RAM:423C ??                       ds 1
RAM:423D ??                       ds 1
RAM:423E ??                       ds 1
RAM:423F ??                       ds 1
RAM:4240 ??                       ds 1
RAM:4241 ??                       ds 1
RAM:4242 ??                       ds 1
RAM:4243 ??                       ds 1
RAM:4244 ??                       ds 1
RAM:4245 ??                       ds 1
RAM:4246 ??                       ds 1
RAM:4247 ??                       ds 1
RAM:4248 ??                       ds 1
RAM:4249 ??                       ds 1
RAM:424A ??                       ds 1
RAM:424B ??                       ds 1
RAM:424C ??                       ds 1
RAM:424D ??                       ds 1
RAM:424E ??                       ds 1
RAM:424F ??                       ds 1
RAM:4250 ??                       ds 1
RAM:4251 ??                       ds 1
RAM:4252 ??                       ds 1
RAM:4253 ??                       ds 1
RAM:4254 ??                       ds 1
RAM:4255 ??                       ds 1
RAM:4256 ??                       ds 1
RAM:4257 ??                       ds 1
RAM:4258 ??                       ds 1
RAM:4259 ??                       ds 1
RAM:425A ??                       ds 1
RAM:425B ??                       ds 1
RAM:425C ??                       ds 1
RAM:425D ??                       ds 1
RAM:425E ??                       ds 1
RAM:425F ??                       ds 1
RAM:4260 ??                       ds 1
RAM:4261 ??                       ds 1
RAM:4262 ??                       ds 1
RAM:4263 ??                       ds 1
RAM:4264 ??                       ds 1
RAM:4265 ??                       ds 1
RAM:4266 ??                       ds 1
RAM:4267 ??                       ds 1
RAM:4268 ??                       ds 1
RAM:4269 ??                       ds 1
RAM:426A ??                       ds 1
RAM:426B ??                       ds 1
RAM:426C ??                       ds 1
RAM:426D ??                       ds 1
RAM:426E ??                       ds 1
RAM:426F ??                       ds 1
RAM:4270 ??                       ds 1
RAM:4271 ??                       ds 1
RAM:4272 ??                       ds 1
RAM:4273 ??                       ds 1
RAM:4274 ??                       ds 1
RAM:4275 ??                       ds 1
RAM:4276 ??                       ds 1
RAM:4277 ??                       ds 1
RAM:4278 ??                       ds 1
RAM:4279 ??                       ds 1
RAM:427A ??                       ds 1
RAM:427B ??                       ds 1
RAM:427C ??                       ds 1
RAM:427D ??                       ds 1
RAM:427E ??                       ds 1
RAM:427F ??                       ds 1
RAM:4280 ??                       ds 1
RAM:4281 ??                       ds 1
RAM:4282 ??                       ds 1
RAM:4283 ??                       ds 1
RAM:4284 ??                       ds 1
RAM:4285 ??                       ds 1
RAM:4286 ??                       ds 1
RAM:4287 ??                       ds 1
RAM:4288 ??                       ds 1
RAM:4289 ??                       ds 1
RAM:428A ??                       ds 1
RAM:428B ??                       ds 1
RAM:428C ??                       ds 1
RAM:428D ??                       ds 1
RAM:428E ??                       ds 1
RAM:428F ??                       ds 1
RAM:4290 ??                       ds 1
RAM:4291 ??                       ds 1
RAM:4292 ??                       ds 1
RAM:4293 ??                       ds 1
RAM:4294 ??                       ds 1
RAM:4295 ??                       ds 1
RAM:4296 ??                       ds 1
RAM:4297 ??                       ds 1
RAM:4298 ??                       ds 1
RAM:4299 ??                       ds 1
RAM:429A ??                       ds 1
RAM:429B ??                       ds 1
RAM:429C ??                       ds 1
RAM:429D ??                       ds 1
RAM:429E ??                       ds 1
RAM:429F ??                       ds 1
RAM:42A0 ??                       ds 1
RAM:42A1 ??                       ds 1
RAM:42A2 ??                       ds 1
RAM:42A3 ??                       ds 1
RAM:42A4 ??                       ds 1
RAM:42A5 ??                       ds 1
RAM:42A6 ??                       ds 1
RAM:42A7 ??                       ds 1
RAM:42A8 ??                       ds 1
RAM:42A9 ??                       ds 1
RAM:42AA ??                       ds 1
RAM:42AB ??                       ds 1
RAM:42AC ??                       ds 1
RAM:42AD ??                       ds 1
RAM:42AE ??                       ds 1
RAM:42AF ??                       ds 1
RAM:42B0 ??                       ds 1
RAM:42B1 ??                       ds 1
RAM:42B2 ??                       ds 1
RAM:42B3 ??                       ds 1
RAM:42B4 ??                       ds 1
RAM:42B5 ??                       ds 1
RAM:42B6 ??                       ds 1
RAM:42B7 ??                       ds 1
RAM:42B8 ??                       ds 1
RAM:42B9 ??                       ds 1
RAM:42BA ??                       ds 1
RAM:42BB ??                       ds 1
RAM:42BC ??                       ds 1
RAM:42BD ??                       ds 1
RAM:42BE ??                       ds 1
RAM:42BF ??                       ds 1
RAM:42C0 ??                       ds 1
RAM:42C1 ??                       ds 1
RAM:42C2 ??                       ds 1
RAM:42C3 ??                       ds 1
RAM:42C4 ??                       ds 1
RAM:42C5 ??                       ds 1
RAM:42C6 ??                       ds 1
RAM:42C7 ??                       ds 1
RAM:42C8 ??                       ds 1
RAM:42C9 ??                       ds 1
RAM:42CA ??                       ds 1
RAM:42CB ??                       ds 1
RAM:42CC ??                       ds 1
RAM:42CD ??                       ds 1
RAM:42CE ??                       ds 1
RAM:42CF ??                       ds 1
RAM:42D0 ??                       ds 1
RAM:42D1 ??                       ds 1
RAM:42D2 ??                       ds 1
RAM:42D3 ??                       ds 1
RAM:42D4 ??                       ds 1
RAM:42D5 ??                       ds 1
RAM:42D6 ??                       ds 1
RAM:42D7 ??                       ds 1
RAM:42D8 ??                       ds 1
RAM:42D9 ??                       ds 1
RAM:42DA ??                       ds 1
RAM:42DB ??                       ds 1
RAM:42DC ??                       ds 1
RAM:42DD ??                       ds 1
RAM:42DE ??                       ds 1
RAM:42DF ??                       ds 1
RAM:42E0 ??                       ds 1
RAM:42E1 ??                       ds 1
RAM:42E2 ??                       ds 1
RAM:42E3 ??                       ds 1
RAM:42E4 ??                       ds 1
RAM:42E5 ??                       ds 1
RAM:42E6 ??                       ds 1
RAM:42E7 ??                       ds 1
RAM:42E8 ??                       ds 1
RAM:42E9 ??                       ds 1
RAM:42EA ??                       ds 1
RAM:42EB ??                       ds 1
RAM:42EC ??                       ds 1
RAM:42ED ??                       ds 1
RAM:42EE ??                       ds 1
RAM:42EF ??                       ds 1
RAM:42F0 ??                       ds 1
RAM:42F1 ??                       ds 1
RAM:42F2 ??                       ds 1
RAM:42F3 ??                       ds 1
RAM:42F4 ??                       ds 1
RAM:42F5 ??                       ds 1
RAM:42F6 ??                       ds 1
RAM:42F7 ??                       ds 1
RAM:42F8 ??                       ds 1
RAM:42F9 ??                       ds 1
RAM:42FA ??                       ds 1
RAM:42FB ??                       ds 1
RAM:42FC ??                       ds 1
RAM:42FD ??                       ds 1
RAM:42FE ??                       ds 1
RAM:42FF ??                       ds 1
RAM:4300 ??                       ds 1
RAM:4301 ??                       ds 1
RAM:4302 ??                       ds 1
RAM:4303 ??                       ds 1
RAM:4304 ??                       ds 1
RAM:4305 ??                       ds 1
RAM:4306 ??                       ds 1
RAM:4307 ??                       ds 1
RAM:4308 ??                       ds 1
RAM:4309 ??                       ds 1
RAM:430A ??                       ds 1
RAM:430B ??                       ds 1
RAM:430C ??                       ds 1
RAM:430D ??                       ds 1
RAM:430E ??                       ds 1
RAM:430F ??                       ds 1
RAM:4310 ??                       ds 1
RAM:4311 ??                       ds 1
RAM:4312 ??                       ds 1
RAM:4313 ??                       ds 1
RAM:4314 ??                       ds 1
RAM:4315 ??                       ds 1
RAM:4316 ??                       ds 1
RAM:4317 ??                       ds 1
RAM:4318 ??                       ds 1
RAM:4319 ??                       ds 1
RAM:431A ??                       ds 1
RAM:431B ??                       ds 1
RAM:431C ??                       ds 1
RAM:431D ??                       ds 1
RAM:431E ??                       ds 1
RAM:431F ??                       ds 1
RAM:4320 ??                       ds 1
RAM:4321 ??                       ds 1
RAM:4322 ??                       ds 1
RAM:4323 ??                       ds 1
RAM:4324 ??                       ds 1
RAM:4325 ??                       ds 1
RAM:4326 ??                       ds 1
RAM:4327 ??                       ds 1
RAM:4328 ??                       ds 1
RAM:4329 ??                       ds 1
RAM:432A ??                       ds 1
RAM:432B ??                       ds 1
RAM:432C ??                       ds 1
RAM:432D ??                       ds 1
RAM:432E ??                       ds 1
RAM:432F ??                       ds 1
RAM:4330 ??                       ds 1
RAM:4331 ??                       ds 1
RAM:4332 ??                       ds 1
RAM:4333 ??                       ds 1
RAM:4334 ??                       ds 1
RAM:4335 ??                       ds 1
RAM:4336 ??                       ds 1
RAM:4337 ??                       ds 1
RAM:4338 ??                       ds 1
RAM:4339 ??                       ds 1
RAM:433A ??                       ds 1
RAM:433B ??                       ds 1
RAM:433C ??                       ds 1
RAM:433D ??                       ds 1
RAM:433E ??                       ds 1
RAM:433F ??                       ds 1
RAM:4340 ??                       ds 1
RAM:4341 ??                       ds 1
RAM:4342 ??                       ds 1
RAM:4343 ??                       ds 1
RAM:4344 ??                       ds 1
RAM:4345 ??                       ds 1
RAM:4346 ??                       ds 1
RAM:4347 ??                       ds 1
RAM:4348 ??                       ds 1
RAM:4349 ??                       ds 1
RAM:434A ??                       ds 1
RAM:434B ??                       ds 1
RAM:434C ??                       ds 1
RAM:434D ??                       ds 1
RAM:434E ??                       ds 1
RAM:434F ??                       ds 1
RAM:4350 ??                       ds 1
RAM:4351 ??                       ds 1
RAM:4352 ??                       ds 1
RAM:4353 ??                       ds 1
RAM:4354 ??                       ds 1
RAM:4355 ??                       ds 1
RAM:4356 ??                       ds 1
RAM:4357 ??                       ds 1
RAM:4358 ??                       ds 1
RAM:4359 ??                       ds 1
RAM:435A ??                       ds 1
RAM:435B ??                       ds 1
RAM:435C ??                       ds 1
RAM:435D ??                       ds 1
RAM:435E ??                       ds 1
RAM:435F ??                       ds 1
RAM:4360 ??                       ds 1
RAM:4361 ??                       ds 1
RAM:4362 ??                       ds 1
RAM:4363 ??                       ds 1
RAM:4364 ??                       ds 1
RAM:4365 ??                       ds 1
RAM:4366 ??                       ds 1
RAM:4367 ??                       ds 1
RAM:4368 ??                       ds 1
RAM:4369 ??                       ds 1
RAM:436A ??                       ds 1
RAM:436B ??                       ds 1
RAM:436C ??                       ds 1
RAM:436D ??                       ds 1
RAM:436E ??                       ds 1
RAM:436F ??                       ds 1
RAM:4370 ??                       ds 1
RAM:4371 ??                       ds 1
RAM:4372 ??                       ds 1
RAM:4373 ??                       ds 1
RAM:4374 ??                       ds 1
RAM:4375 ??                       ds 1
RAM:4376 ??                       ds 1
RAM:4377 ??                       ds 1
RAM:4378 ??                       ds 1
RAM:4379 ??                       ds 1
RAM:437A ??                       ds 1
RAM:437B ??                       ds 1
RAM:437C ??                       ds 1
RAM:437D ??                       ds 1
RAM:437E ??                       ds 1
RAM:437F ??                       ds 1
RAM:4380 ??                       ds 1
RAM:4381 ??                       ds 1
RAM:4382 ??                       ds 1
RAM:4383 ??                       ds 1
RAM:4384 ??                       ds 1
RAM:4385 ??                       ds 1
RAM:4386 ??                       ds 1
RAM:4387 ??                       ds 1
RAM:4388 ??                       ds 1
RAM:4389 ??                       ds 1
RAM:438A ??                       ds 1
RAM:438B ??                       ds 1
RAM:438C ??                       ds 1
RAM:438D ??                       ds 1
RAM:438E ??                       ds 1
RAM:438F ??                       ds 1
RAM:4390 ??                       ds 1
RAM:4391 ??                       ds 1
RAM:4392 ??                       ds 1
RAM:4393 ??                       ds 1
RAM:4394 ??                       ds 1
RAM:4395 ??                       ds 1
RAM:4396 ??                       ds 1
RAM:4397 ??                       ds 1
RAM:4398 ??                       ds 1
RAM:4399 ??                       ds 1
RAM:439A ??                       ds 1
RAM:439B ??                       ds 1
RAM:439C ??                       ds 1
RAM:439D ??                       ds 1
RAM:439E ??                       ds 1
RAM:439F ??                       ds 1
RAM:43A0 ??                       ds 1
RAM:43A1 ??                       ds 1
RAM:43A2 ??                       ds 1
RAM:43A3 ??                       ds 1
RAM:43A4 ??                       ds 1
RAM:43A5 ??                       ds 1
RAM:43A6 ??                       ds 1
RAM:43A7 ??                       ds 1
RAM:43A8 ??                       ds 1
RAM:43A9 ??                       ds 1
RAM:43AA ??                       ds 1
RAM:43AB ??                       ds 1
RAM:43AC ??                       ds 1
RAM:43AD ??                       ds 1
RAM:43AE ??                       ds 1
RAM:43AF ??                       ds 1
RAM:43B0 ??                       ds 1
RAM:43B1 ??                       ds 1
RAM:43B2 ??                       ds 1
RAM:43B3 ??                       ds 1
RAM:43B4 ??                       ds 1
RAM:43B5 ??                       ds 1
RAM:43B6 ??                       ds 1
RAM:43B7 ??                       ds 1
RAM:43B8 ??                       ds 1
RAM:43B9 ??                       ds 1
RAM:43BA ??                       ds 1
RAM:43BB ??                       ds 1
RAM:43BC ??                       ds 1
RAM:43BD ??                       ds 1
RAM:43BE ??                       ds 1
RAM:43BF ??                       ds 1
RAM:43C0 ??                       ds 1
RAM:43C1 ??                       ds 1
RAM:43C2 ??                       ds 1
RAM:43C3 ??                       ds 1
RAM:43C4 ??                       ds 1
RAM:43C5 ??                       ds 1
RAM:43C6 ??                       ds 1
RAM:43C7 ??                       ds 1
RAM:43C8 ??                       ds 1
RAM:43C9 ??                       ds 1
RAM:43CA ??                       ds 1
RAM:43CB ??                       ds 1
RAM:43CC ??                       ds 1
RAM:43CD ??                       ds 1
RAM:43CE ??                       ds 1
RAM:43CF ??                       ds 1
RAM:43D0 ??                       ds 1
RAM:43D1 ??                       ds 1
RAM:43D2 ??                       ds 1
RAM:43D3 ??                       ds 1
RAM:43D4 ??                       ds 1
RAM:43D5 ??                       ds 1
RAM:43D6 ??                       ds 1
RAM:43D7 ??                       ds 1
RAM:43D8 ??                       ds 1
RAM:43D9 ??                       ds 1
RAM:43DA ??                       ds 1
RAM:43DB ??                       ds 1
RAM:43DC ??                       ds 1
RAM:43DD ??                       ds 1
RAM:43DE ??                       ds 1
RAM:43DF ??                       ds 1
RAM:43E0 ??                       ds 1
RAM:43E1 ??                       ds 1
RAM:43E2 ??                       ds 1
RAM:43E3 ??                       ds 1
RAM:43E4 ??                       ds 1
RAM:43E5 ??                       ds 1
RAM:43E6 ??                       ds 1
RAM:43E7 ??                       ds 1
RAM:43E8 ??                       ds 1
RAM:43E9 ??                       ds 1
RAM:43EA ??                       ds 1
RAM:43EB ??                       ds 1
RAM:43EC ??                       ds 1
RAM:43ED ??                       ds 1
RAM:43EE ??                       ds 1
RAM:43EF ??                       ds 1
RAM:43F0 ??                       ds 1
RAM:43F1 ??                       ds 1
RAM:43F2 ??                       ds 1
RAM:43F3 ??                       ds 1
RAM:43F4 ??                       ds 1
RAM:43F5 ??                       ds 1
RAM:43F6 ??                       ds 1
RAM:43F7 ??                       ds 1
RAM:43F8 ??                       ds 1
RAM:43F9 ??                       ds 1
RAM:43FA ?? ??    data_for_40bd_ptr_5fffh:ds 2            ; DATA XREF: sub_1B15+1↑r
RAM:43FA                                                  ; sub_1BFC+1F↑r ...
RAM:43FC ??                       ds 1
RAM:43FD ??                       ds 1
RAM:43FE ??                       ds 1
RAM:43FF ??                       ds 1
RAM:4400 ??                       ds 1
RAM:4401 ??                       ds 1
RAM:4402 ??                       ds 1
RAM:4403 ??                       ds 1
RAM:4404 ??                       ds 1
RAM:4405 ??                       ds 1
RAM:4406 ??                       ds 1
RAM:4407 ??                       ds 1
RAM:4408 ??                       ds 1
RAM:4409 ??                       ds 1
RAM:440A ??                       ds 1
RAM:440B ??                       ds 1
RAM:440C ??                       ds 1
RAM:440D ??                       ds 1
RAM:440E ??                       ds 1
RAM:440F ??                       ds 1
RAM:4410 ??                       ds 1
RAM:4411 ??                       ds 1
RAM:4412 ??                       ds 1
RAM:4413 ??                       ds 1
RAM:4414 ??                       ds 1
RAM:4415 ??                       ds 1
RAM:4416 ??                       ds 1
RAM:4417 ??                       ds 1
RAM:4418 ??                       ds 1
RAM:4419 ??                       ds 1
RAM:441A ??                       ds 1
RAM:441B ??                       ds 1
RAM:441C ??                       ds 1
RAM:441D ??                       ds 1
RAM:441E ??                       ds 1
RAM:441F ??                       ds 1
RAM:4420 ??                       ds 1
RAM:4421 ??                       ds 1
RAM:4422 ??                       ds 1
RAM:4423 ??                       ds 1
RAM:4424 ??                       ds 1
RAM:4425 ??                       ds 1
RAM:4426 ??                       ds 1
RAM:4427 ??                       ds 1
RAM:4428 ??                       ds 1
RAM:4429 ??                       ds 1
RAM:442A ??                       ds 1
RAM:442B ??                       ds 1
RAM:442C ??                       ds 1
RAM:442D ??                       ds 1
RAM:442E ??                       ds 1
RAM:442F ??                       ds 1
RAM:4430 ??                       ds 1
RAM:4431 ??                       ds 1
RAM:4432 ??                       ds 1
RAM:4433 ??                       ds 1
RAM:4434 ??                       ds 1
RAM:4435 ??                       ds 1
RAM:4436 ??                       ds 1
RAM:4437 ??                       ds 1
RAM:4438 ??                       ds 1
RAM:4439 ??                       ds 1
RAM:443A ??                       ds 1
RAM:443B ??                       ds 1
RAM:443C ??                       ds 1
RAM:443D ??                       ds 1
RAM:443E ??                       ds 1
RAM:443F ??                       ds 1
RAM:4440 ??                       ds 1
RAM:4441 ??                       ds 1
RAM:4442 ??                       ds 1
RAM:4443 ??                       ds 1
RAM:4444 ??                       ds 1
RAM:4445 ??                       ds 1
RAM:4446 ??                       ds 1
RAM:4447 ??                       ds 1
RAM:4448 ??                       ds 1
RAM:4449 ??                       ds 1
RAM:444A ??                       ds 1
RAM:444B ??                       ds 1
RAM:444C ??                       ds 1
RAM:444D ??                       ds 1
RAM:444E ??                       ds 1
RAM:444F ??                       ds 1
RAM:4450 ??                       ds 1
RAM:4451 ??                       ds 1
RAM:4452 ??                       ds 1
RAM:4453 ??                       ds 1
RAM:4454 ??                       ds 1
RAM:4455 ??                       ds 1
RAM:4456 ??                       ds 1
RAM:4457 ??                       ds 1
RAM:4458 ??                       ds 1
RAM:4459 ??                       ds 1
RAM:445A ??                       ds 1
RAM:445B ??                       ds 1
RAM:445C ??                       ds 1
RAM:445D ??                       ds 1
RAM:445E ??                       ds 1
RAM:445F ??                       ds 1
RAM:4460 ??                       ds 1
RAM:4461 ??                       ds 1
RAM:4462 ??                       ds 1
RAM:4463 ??                       ds 1
RAM:4464 ??                       ds 1
RAM:4465 ??                       ds 1
RAM:4466 ??                       ds 1
RAM:4467 ??                       ds 1
RAM:4468 ??                       ds 1
RAM:4469 ??                       ds 1
RAM:446A ??                       ds 1
RAM:446B ??                       ds 1
RAM:446C ??                       ds 1
RAM:446D ??                       ds 1
RAM:446E ??                       ds 1
RAM:446F ??                       ds 1
RAM:4470 ??                       ds 1
RAM:4471 ??                       ds 1
RAM:4472 ??                       ds 1
RAM:4473 ??                       ds 1
RAM:4474 ??                       ds 1
RAM:4475 ??                       ds 1
RAM:4476 ??                       ds 1
RAM:4477 ??                       ds 1
RAM:4478 ??                       ds 1
RAM:4479 ??                       ds 1
RAM:447A ??                       ds 1
RAM:447B ??                       ds 1
RAM:447C ??                       ds 1
RAM:447D ??                       ds 1
RAM:447E ??                       ds 1
RAM:447F ??                       ds 1
RAM:4480 ??                       ds 1
RAM:4481 ??                       ds 1
RAM:4482 ??                       ds 1
RAM:4483 ??                       ds 1
RAM:4484 ??                       ds 1
RAM:4485 ??                       ds 1
RAM:4486 ??                       ds 1
RAM:4487 ??                       ds 1
RAM:4488 ??                       ds 1
RAM:4489 ??                       ds 1
RAM:448A ??                       ds 1
RAM:448B ??                       ds 1
RAM:448C ??                       ds 1
RAM:448D ??                       ds 1
RAM:448E ??                       ds 1
RAM:448F ??                       ds 1
RAM:4490 ??                       ds 1
RAM:4491 ??                       ds 1
RAM:4492 ??                       ds 1
RAM:4493 ??                       ds 1
RAM:4494 ??                       ds 1
RAM:4495 ??                       ds 1
RAM:4496 ??                       ds 1
RAM:4497 ??                       ds 1
RAM:4498 ??                       ds 1
RAM:4499 ??                       ds 1
RAM:449A ??                       ds 1
RAM:449B ??                       ds 1
RAM:449C ??                       ds 1
RAM:449D ??                       ds 1
RAM:449E ??                       ds 1
RAM:449F ??                       ds 1
RAM:44A0 ??                       ds 1
RAM:44A1 ??                       ds 1
RAM:44A2 ??                       ds 1
RAM:44A3 ??                       ds 1
RAM:44A4 ??                       ds 1
RAM:44A5 ??                       ds 1
RAM:44A6 ??                       ds 1
RAM:44A7 ??                       ds 1
RAM:44A8 ??                       ds 1
RAM:44A9 ??                       ds 1
RAM:44AA ??                       ds 1
RAM:44AB ??                       ds 1
RAM:44AC ??                       ds 1
RAM:44AD ??                       ds 1
RAM:44AE ??                       ds 1
RAM:44AF ??                       ds 1
RAM:44B0 ??                       ds 1
RAM:44B1 ??                       ds 1
RAM:44B2 ??                       ds 1
RAM:44B3 ??                       ds 1
RAM:44B4 ??                       ds 1
RAM:44B5 ??                       ds 1
RAM:44B6 ??                       ds 1
RAM:44B7 ??                       ds 1
RAM:44B8 ??                       ds 1
RAM:44B9 ??                       ds 1
RAM:44BA ??                       ds 1
RAM:44BB ??                       ds 1
RAM:44BC ??                       ds 1
RAM:44BD ??                       ds 1
RAM:44BE ??                       ds 1
RAM:44BF ??                       ds 1
RAM:44C0 ??                       ds 1
RAM:44C1 ??                       ds 1
RAM:44C2 ??                       ds 1
RAM:44C3 ??                       ds 1
RAM:44C4 ??                       ds 1
RAM:44C5 ??                       ds 1
RAM:44C6 ??                       ds 1
RAM:44C7 ??                       ds 1
RAM:44C8 ??                       ds 1
RAM:44C9 ??                       ds 1
RAM:44CA ??                       ds 1
RAM:44CB ??                       ds 1
RAM:44CC ??                       ds 1
RAM:44CD ??                       ds 1
RAM:44CE ??                       ds 1
RAM:44CF ??                       ds 1
RAM:44D0 ??                       ds 1
RAM:44D1 ??                       ds 1
RAM:44D2 ??                       ds 1
RAM:44D3 ??                       ds 1
RAM:44D4 ??                       ds 1
RAM:44D5 ??                       ds 1
RAM:44D6 ??                       ds 1
RAM:44D7 ??                       ds 1
RAM:44D8 ??                       ds 1
RAM:44D9 ??                       ds 1
RAM:44DA ??                       ds 1
RAM:44DB ??                       ds 1
RAM:44DC ??                       ds 1
RAM:44DD ??                       ds 1
RAM:44DE ??                       ds 1
RAM:44DF ??                       ds 1
RAM:44E0 ??                       ds 1
RAM:44E1 ??                       ds 1
RAM:44E2 ??                       ds 1
RAM:44E3 ??                       ds 1
RAM:44E4 ??                       ds 1
RAM:44E5 ??                       ds 1
RAM:44E6 ??                       ds 1
RAM:44E7 ??                       ds 1
RAM:44E8 ??                       ds 1
RAM:44E9 ??                       ds 1
RAM:44EA ??                       ds 1
RAM:44EB ??                       ds 1
RAM:44EC ??                       ds 1
RAM:44ED ??                       ds 1
RAM:44EE ??                       ds 1
RAM:44EF ??                       ds 1
RAM:44F0 ??                       ds 1
RAM:44F1 ??                       ds 1
RAM:44F2 ??                       ds 1
RAM:44F3 ??                       ds 1
RAM:44F4 ??                       ds 1
RAM:44F5 ??                       ds 1
RAM:44F6 ??                       ds 1
RAM:44F7 ??                       ds 1
RAM:44F8 ??                       ds 1
RAM:44F9 ??                       ds 1
RAM:44FA ??                       ds 1
RAM:44FB ??                       ds 1
RAM:44FC ??                       ds 1
RAM:44FD ??                       ds 1
RAM:44FE ??                       ds 1
RAM:44FF ??                       ds 1
RAM:4500 ??                       ds 1
RAM:4501 ??                       ds 1
RAM:4502 ??                       ds 1
RAM:4503 ??                       ds 1
RAM:4504 ??                       ds 1
RAM:4505 ??                       ds 1
RAM:4506 ??                       ds 1
RAM:4507 ??                       ds 1
RAM:4508 ??                       ds 1
RAM:4509 ??                       ds 1
RAM:450A ??                       ds 1
RAM:450B ??                       ds 1
RAM:450C ??                       ds 1
RAM:450D ??                       ds 1
RAM:450E ??                       ds 1
RAM:450F ??                       ds 1
RAM:4510 ??                       ds 1
RAM:4511 ??                       ds 1
RAM:4512 ??                       ds 1
RAM:4513 ??                       ds 1
RAM:4514 ??                       ds 1
RAM:4515 ??                       ds 1
RAM:4516 ??                       ds 1
RAM:4517 ??                       ds 1
RAM:4518 ??                       ds 1
RAM:4519 ??                       ds 1
RAM:451A ??                       ds 1
RAM:451B ??                       ds 1
RAM:451C ??                       ds 1
RAM:451D ??                       ds 1
RAM:451E ??                       ds 1
RAM:451F ??                       ds 1
RAM:4520 ??                       ds 1
RAM:4521 ??                       ds 1
RAM:4522 ??                       ds 1
RAM:4523 ??                       ds 1
RAM:4524 ??                       ds 1
RAM:4525 ??                       ds 1
RAM:4526 ??                       ds 1
RAM:4527 ??                       ds 1
RAM:4528 ??                       ds 1
RAM:4529 ??                       ds 1
RAM:452A ??                       ds 1
RAM:452B ??                       ds 1
RAM:452C ??                       ds 1
RAM:452D ??                       ds 1
RAM:452E ??                       ds 1
RAM:452F ??                       ds 1
RAM:4530 ??                       ds 1
RAM:4531 ??                       ds 1
RAM:4532 ??                       ds 1
RAM:4533 ??                       ds 1
RAM:4534 ??                       ds 1
RAM:4535 ??                       ds 1
RAM:4536 ??                       ds 1
RAM:4537 ??                       ds 1
RAM:4538 ??                       ds 1
RAM:4539 ??                       ds 1
RAM:453A ??                       ds 1
RAM:453B ??                       ds 1
RAM:453C ??                       ds 1
RAM:453D ??                       ds 1
RAM:453E ??                       ds 1
RAM:453F ??                       ds 1
RAM:4540 ??                       ds 1
RAM:4541 ??                       ds 1
RAM:4542 ??                       ds 1
RAM:4543 ??                       ds 1
RAM:4544 ??                       ds 1
RAM:4545 ??                       ds 1
RAM:4546 ??                       ds 1
RAM:4547 ??                       ds 1
RAM:4548 ??                       ds 1
RAM:4549 ??                       ds 1
RAM:454A ??                       ds 1
RAM:454B ??                       ds 1
RAM:454C ??                       ds 1
RAM:454D ??                       ds 1
RAM:454E ??                       ds 1
RAM:454F ??                       ds 1
RAM:4550 ??                       ds 1
RAM:4551 ??                       ds 1
RAM:4552 ??                       ds 1
RAM:4553 ??                       ds 1
RAM:4554 ??                       ds 1
RAM:4555 ??                       ds 1
RAM:4556 ??                       ds 1
RAM:4557 ??                       ds 1
RAM:4558 ??                       ds 1
RAM:4559 ??                       ds 1
RAM:455A ??                       ds 1
RAM:455B ??                       ds 1
RAM:455C ??                       ds 1
RAM:455D ??                       ds 1
RAM:455E ??                       ds 1
RAM:455F ??                       ds 1
RAM:4560 ??                       ds 1
RAM:4561 ??                       ds 1
RAM:4562 ??                       ds 1
RAM:4563 ??                       ds 1
RAM:4564 ??                       ds 1
RAM:4565 ??                       ds 1
RAM:4566 ??                       ds 1
RAM:4567 ??                       ds 1
RAM:4568 ??                       ds 1
RAM:4569 ??                       ds 1
RAM:456A ??                       ds 1
RAM:456B ??                       ds 1
RAM:456C ??                       ds 1
RAM:456D ??                       ds 1
RAM:456E ??                       ds 1
RAM:456F ??                       ds 1
RAM:4570 ??                       ds 1
RAM:4571 ??                       ds 1
RAM:4572 ??                       ds 1
RAM:4573 ??                       ds 1
RAM:4574 ??                       ds 1
RAM:4575 ??                       ds 1
RAM:4576 ??                       ds 1
RAM:4577 ??                       ds 1
RAM:4578 ??                       ds 1
RAM:4579 ??                       ds 1
RAM:457A ??                       ds 1
RAM:457B ??                       ds 1
RAM:457C ??                       ds 1
RAM:457D ??                       ds 1
RAM:457E ??                       ds 1
RAM:457F ??                       ds 1
RAM:4580 ??                       ds 1
RAM:4581 ??                       ds 1
RAM:4582 ??                       ds 1
RAM:4583 ??                       ds 1
RAM:4584 ??                       ds 1
RAM:4585 ??                       ds 1
RAM:4586 ??                       ds 1
RAM:4587 ??                       ds 1
RAM:4588 ??                       ds 1
RAM:4589 ??                       ds 1
RAM:458A ??                       ds 1
RAM:458B ??                       ds 1
RAM:458C ??                       ds 1
RAM:458D ??                       ds 1
RAM:458E ??                       ds 1
RAM:458F ??                       ds 1
RAM:4590 ??                       ds 1
RAM:4591 ??                       ds 1
RAM:4592 ??                       ds 1
RAM:4593 ??                       ds 1
RAM:4594 ??                       ds 1
RAM:4595 ??                       ds 1
RAM:4596 ??                       ds 1
RAM:4597 ??                       ds 1
RAM:4598 ??                       ds 1
RAM:4599 ??                       ds 1
RAM:459A ??                       ds 1
RAM:459B ??                       ds 1
RAM:459C ??                       ds 1
RAM:459D ??                       ds 1
RAM:459E ??                       ds 1
RAM:459F ??                       ds 1
RAM:45A0 ??                       ds 1
RAM:45A1 ??                       ds 1
RAM:45A2 ??                       ds 1
RAM:45A3 ??                       ds 1
RAM:45A4 ??                       ds 1
RAM:45A5 ??                       ds 1
RAM:45A6 ??                       ds 1
RAM:45A7 ??                       ds 1
RAM:45A8 ??                       ds 1
RAM:45A9 ??                       ds 1
RAM:45AA ??                       ds 1
RAM:45AB ??                       ds 1
RAM:45AC ??                       ds 1
RAM:45AD ??                       ds 1
RAM:45AE ??                       ds 1
RAM:45AF ??                       ds 1
RAM:45B0 ??                       ds 1
RAM:45B1 ??                       ds 1
RAM:45B2 ??                       ds 1
RAM:45B3 ??                       ds 1
RAM:45B4 ??                       ds 1
RAM:45B5 ??                       ds 1
RAM:45B6 ??                       ds 1
RAM:45B7 ??                       ds 1
RAM:45B8 ??                       ds 1
RAM:45B9 ??                       ds 1
RAM:45BA ??                       ds 1
RAM:45BB ??                       ds 1
RAM:45BC ??                       ds 1
RAM:45BD ??                       ds 1
RAM:45BE ??                       ds 1
RAM:45BF ??                       ds 1
RAM:45C0 ??                       ds 1
RAM:45C1 ??                       ds 1
RAM:45C2 ??                       ds 1
RAM:45C3 ??                       ds 1
RAM:45C4 ??                       ds 1
RAM:45C5 ??                       ds 1
RAM:45C6 ??                       ds 1
RAM:45C7 ??                       ds 1
RAM:45C8 ??                       ds 1
RAM:45C9 ??                       ds 1
RAM:45CA ??                       ds 1
RAM:45CB ??                       ds 1
RAM:45CC ??                       ds 1
RAM:45CD ??                       ds 1
RAM:45CE ??                       ds 1
RAM:45CF ??                       ds 1
RAM:45D0 ??                       ds 1
RAM:45D1 ??                       ds 1
RAM:45D2 ??                       ds 1
RAM:45D3 ??                       ds 1
RAM:45D4 ??                       ds 1
RAM:45D5 ??                       ds 1
RAM:45D6 ??                       ds 1
RAM:45D7 ??                       ds 1
RAM:45D8 ??                       ds 1
RAM:45D9 ??                       ds 1
RAM:45DA ??                       ds 1
RAM:45DB ??                       ds 1
RAM:45DC ??                       ds 1
RAM:45DD ??                       ds 1
RAM:45DE ??                       ds 1
RAM:45DF ??                       ds 1
RAM:45E0 ??                       ds 1
RAM:45E1 ??                       ds 1
RAM:45E2 ??                       ds 1
RAM:45E3 ??                       ds 1
RAM:45E4 ??                       ds 1
RAM:45E5 ??                       ds 1
RAM:45E6 ??                       ds 1
RAM:45E7 ??                       ds 1
RAM:45E8 ??                       ds 1
RAM:45E9 ??                       ds 1
RAM:45EA ??                       ds 1
RAM:45EB ??                       ds 1
RAM:45EC ??                       ds 1
RAM:45ED ??                       ds 1
RAM:45EE ??                       ds 1
RAM:45EF ??                       ds 1
RAM:45F0 ??                       ds 1
RAM:45F1 ??                       ds 1
RAM:45F2 ??                       ds 1
RAM:45F3 ??                       ds 1
RAM:45F4 ??                       ds 1
RAM:45F5 ??                       ds 1
RAM:45F6 ??                       ds 1
RAM:45F7 ??                       ds 1
RAM:45F8 ??                       ds 1
RAM:45F9 ??                       ds 1
RAM:45FA ??                       ds 1
RAM:45FB ??                       ds 1
RAM:45FC ??                       ds 1
RAM:45FD ??                       ds 1
RAM:45FE ??                       ds 1
RAM:45FF ??                       ds 1
RAM:4600 ??                       ds 1
RAM:4601 ??                       ds 1
RAM:4602 ??                       ds 1
RAM:4603 ??                       ds 1
RAM:4604 ??                       ds 1
RAM:4605 ??                       ds 1
RAM:4606 ??                       ds 1
RAM:4607 ??                       ds 1
RAM:4608 ??                       ds 1
RAM:4609 ??                       ds 1
RAM:460A ??                       ds 1
RAM:460B ??                       ds 1
RAM:460C ??                       ds 1
RAM:460D ??                       ds 1
RAM:460E ??                       ds 1
RAM:460F ??                       ds 1
RAM:4610 ??                       ds 1
RAM:4611 ??                       ds 1
RAM:4612 ??                       ds 1
RAM:4613 ??                       ds 1
RAM:4614 ??                       ds 1
RAM:4615 ??                       ds 1
RAM:4616 ??                       ds 1
RAM:4617 ??                       ds 1
RAM:4618 ??                       ds 1
RAM:4619 ??                       ds 1
RAM:461A ??                       ds 1
RAM:461B ??                       ds 1
RAM:461C ??                       ds 1
RAM:461D ??                       ds 1
RAM:461E ??                       ds 1
RAM:461F ??                       ds 1
RAM:4620 ??                       ds 1
RAM:4621 ??                       ds 1
RAM:4622 ??                       ds 1
RAM:4623 ??                       ds 1
RAM:4624 ??                       ds 1
RAM:4625 ??                       ds 1
RAM:4626 ??                       ds 1
RAM:4627 ??                       ds 1
RAM:4628 ??                       ds 1
RAM:4629 ??                       ds 1
RAM:462A ??                       ds 1
RAM:462B ??                       ds 1
RAM:462C ??                       ds 1
RAM:462D ??                       ds 1
RAM:462E ??                       ds 1
RAM:462F ??                       ds 1
RAM:4630 ??                       ds 1
RAM:4631 ??                       ds 1
RAM:4632 ??                       ds 1
RAM:4633 ??                       ds 1
RAM:4634 ??                       ds 1
RAM:4635 ??                       ds 1
RAM:4636 ??                       ds 1
RAM:4637 ??                       ds 1
RAM:4638 ??                       ds 1
RAM:4639 ??                       ds 1
RAM:463A ??                       ds 1
RAM:463B ??                       ds 1
RAM:463C ??                       ds 1
RAM:463D ??                       ds 1
RAM:463E ??                       ds 1
RAM:463F ??                       ds 1
RAM:4640 ??                       ds 1
RAM:4641 ??                       ds 1
RAM:4642 ??                       ds 1
RAM:4643 ??                       ds 1
RAM:4644 ??                       ds 1
RAM:4645 ??                       ds 1
RAM:4646 ??                       ds 1
RAM:4647 ??                       ds 1
RAM:4648 ??                       ds 1
RAM:4649 ??                       ds 1
RAM:464A ??                       ds 1
RAM:464B ??                       ds 1
RAM:464C ??                       ds 1
RAM:464D ??                       ds 1
RAM:464E ??                       ds 1
RAM:464F ??                       ds 1
RAM:4650 ??                       ds 1
RAM:4651 ??                       ds 1
RAM:4652 ??                       ds 1
RAM:4653 ??                       ds 1
RAM:4654 ??                       ds 1
RAM:4655 ??                       ds 1
RAM:4656 ??                       ds 1
RAM:4657 ??                       ds 1
RAM:4658 ??                       ds 1
RAM:4659 ??                       ds 1
RAM:465A ??                       ds 1
RAM:465B ??                       ds 1
RAM:465C ??                       ds 1
RAM:465D ??                       ds 1
RAM:465E ??                       ds 1
RAM:465F ??                       ds 1
RAM:4660 ??                       ds 1
RAM:4661 ??                       ds 1
RAM:4662 ??                       ds 1
RAM:4663 ??                       ds 1
RAM:4664 ??                       ds 1
RAM:4665 ??                       ds 1
RAM:4666 ??                       ds 1
RAM:4667 ??                       ds 1
RAM:4668 ??                       ds 1
RAM:4669 ??                       ds 1
RAM:466A ??                       ds 1
RAM:466B ??                       ds 1
RAM:466C ??                       ds 1
RAM:466D ??                       ds 1
RAM:466E ??                       ds 1
RAM:466F ??                       ds 1
RAM:4670 ??                       ds 1
RAM:4671 ??                       ds 1
RAM:4672 ??                       ds 1
RAM:4673 ??                       ds 1
RAM:4674 ??                       ds 1
RAM:4675 ??                       ds 1
RAM:4676 ??                       ds 1
RAM:4677 ??                       ds 1
RAM:4678 ??                       ds 1
RAM:4679 ??                       ds 1
RAM:467A ??                       ds 1
RAM:467B ??                       ds 1
RAM:467C ??                       ds 1
RAM:467D ??                       ds 1
RAM:467E ??                       ds 1
RAM:467F ??                       ds 1
RAM:4680 ??                       ds 1
RAM:4681 ??                       ds 1
RAM:4682 ??                       ds 1
RAM:4683 ??                       ds 1
RAM:4684 ??                       ds 1
RAM:4685 ??                       ds 1
RAM:4686 ??                       ds 1
RAM:4687 ??                       ds 1
RAM:4688 ??                       ds 1
RAM:4689 ??                       ds 1
RAM:468A ??                       ds 1
RAM:468B ??                       ds 1
RAM:468C ??                       ds 1
RAM:468D ??                       ds 1
RAM:468E ??                       ds 1
RAM:468F ??                       ds 1
RAM:4690 ??                       ds 1
RAM:4691 ??                       ds 1
RAM:4692 ??                       ds 1
RAM:4693 ??                       ds 1
RAM:4694 ??                       ds 1
RAM:4695 ??                       ds 1
RAM:4696 ??                       ds 1
RAM:4697 ??                       ds 1
RAM:4698 ??                       ds 1
RAM:4699 ??                       ds 1
RAM:469A ??                       ds 1
RAM:469B ??                       ds 1
RAM:469C ??                       ds 1
RAM:469D ??                       ds 1
RAM:469E ??                       ds 1
RAM:469F ??                       ds 1
RAM:46A0 ??                       ds 1
RAM:46A1 ??                       ds 1
RAM:46A2 ??                       ds 1
RAM:46A3 ??                       ds 1
RAM:46A4 ??                       ds 1
RAM:46A5 ??                       ds 1
RAM:46A6 ??                       ds 1
RAM:46A7 ??                       ds 1
RAM:46A8 ??                       ds 1
RAM:46A9 ??                       ds 1
RAM:46AA ??                       ds 1
RAM:46AB ??                       ds 1
RAM:46AC ??                       ds 1
RAM:46AD ??                       ds 1
RAM:46AE ??                       ds 1
RAM:46AF ??                       ds 1
RAM:46B0 ??                       ds 1
RAM:46B1 ??                       ds 1
RAM:46B2 ??                       ds 1
RAM:46B3 ??                       ds 1
RAM:46B4 ??                       ds 1
RAM:46B5 ??                       ds 1
RAM:46B6 ??                       ds 1
RAM:46B7 ??                       ds 1
RAM:46B8 ??                       ds 1
RAM:46B9 ??                       ds 1
RAM:46BA ??                       ds 1
RAM:46BB ??                       ds 1
RAM:46BC ??                       ds 1
RAM:46BD ??                       ds 1
RAM:46BE ??                       ds 1
RAM:46BF ??                       ds 1
RAM:46C0 ??                       ds 1
RAM:46C1 ??                       ds 1
RAM:46C2 ??                       ds 1
RAM:46C3 ??                       ds 1
RAM:46C4 ??                       ds 1
RAM:46C5 ??                       ds 1
RAM:46C6 ??                       ds 1
RAM:46C7 ??                       ds 1
RAM:46C8 ??                       ds 1
RAM:46C9 ??                       ds 1
RAM:46CA ??                       ds 1
RAM:46CB ??                       ds 1
RAM:46CC ??                       ds 1
RAM:46CD ??                       ds 1
RAM:46CE ??                       ds 1
RAM:46CF ??                       ds 1
RAM:46D0 ??                       ds 1
RAM:46D1 ??                       ds 1
RAM:46D2 ??                       ds 1
RAM:46D3 ??                       ds 1
RAM:46D4 ??                       ds 1
RAM:46D5 ??                       ds 1
RAM:46D6 ??                       ds 1
RAM:46D7 ??                       ds 1
RAM:46D8 ??                       ds 1
RAM:46D9 ??                       ds 1
RAM:46DA ??                       ds 1
RAM:46DB ??                       ds 1
RAM:46DC ??                       ds 1
RAM:46DD ??                       ds 1
RAM:46DE ??                       ds 1
RAM:46DF ??                       ds 1
RAM:46E0 ??                       ds 1
RAM:46E1 ??                       ds 1
RAM:46E2 ??                       ds 1
RAM:46E3 ??                       ds 1
RAM:46E4 ??                       ds 1
RAM:46E5 ??                       ds 1
RAM:46E6 ??                       ds 1
RAM:46E7 ??                       ds 1
RAM:46E8 ??                       ds 1
RAM:46E9 ??                       ds 1
RAM:46EA ??                       ds 1
RAM:46EB ??                       ds 1
RAM:46EC ??                       ds 1
RAM:46ED ??                       ds 1
RAM:46EE ??                       ds 1
RAM:46EF ??                       ds 1
RAM:46F0 ??                       ds 1
RAM:46F1 ??                       ds 1
RAM:46F2 ??                       ds 1
RAM:46F3 ??                       ds 1
RAM:46F4 ??                       ds 1
RAM:46F5 ??                       ds 1
RAM:46F6 ??                       ds 1
RAM:46F7 ??                       ds 1
RAM:46F8 ??                       ds 1
RAM:46F9 ??                       ds 1
RAM:46FA ??                       ds 1
RAM:46FB ??                       ds 1
RAM:46FC ??                       ds 1
RAM:46FD ??                       ds 1
RAM:46FE ??                       ds 1
RAM:46FF ??                       ds 1
RAM:4700 ??                       ds 1
RAM:4701 ??                       ds 1
RAM:4702 ??                       ds 1
RAM:4703 ??                       ds 1
RAM:4704 ??                       ds 1
RAM:4705 ??                       ds 1
RAM:4706 ??                       ds 1
RAM:4707 ??                       ds 1
RAM:4708 ??                       ds 1
RAM:4709 ??                       ds 1
RAM:470A ??                       ds 1
RAM:470B ??                       ds 1
RAM:470C ??                       ds 1
RAM:470D ??                       ds 1
RAM:470E ??                       ds 1
RAM:470F ??                       ds 1
RAM:4710 ??                       ds 1
RAM:4711 ??                       ds 1
RAM:4712 ??                       ds 1
RAM:4713 ??                       ds 1
RAM:4714 ??                       ds 1
RAM:4715 ??                       ds 1
RAM:4716 ??                       ds 1
RAM:4717 ??                       ds 1
RAM:4718 ??                       ds 1
RAM:4719 ??                       ds 1
RAM:471A ??                       ds 1
RAM:471B ??                       ds 1
RAM:471C ??                       ds 1
RAM:471D ??                       ds 1
RAM:471E ??                       ds 1
RAM:471F ??                       ds 1
RAM:4720 ??                       ds 1
RAM:4721 ??                       ds 1
RAM:4722 ??                       ds 1
RAM:4723 ??                       ds 1
RAM:4724 ??                       ds 1
RAM:4725 ??                       ds 1
RAM:4726 ??                       ds 1
RAM:4727 ??                       ds 1
RAM:4728 ??                       ds 1
RAM:4729 ??                       ds 1
RAM:472A ??                       ds 1
RAM:472B ??                       ds 1
RAM:472C ??                       ds 1
RAM:472D ??                       ds 1
RAM:472E ??                       ds 1
RAM:472F ??                       ds 1
RAM:4730 ??                       ds 1
RAM:4731 ??                       ds 1
RAM:4732 ??                       ds 1
RAM:4733 ??                       ds 1
RAM:4734 ??                       ds 1
RAM:4735 ??                       ds 1
RAM:4736 ??                       ds 1
RAM:4737 ??                       ds 1
RAM:4738 ??                       ds 1
RAM:4739 ??                       ds 1
RAM:473A ??                       ds 1
RAM:473B ??                       ds 1
RAM:473C ??                       ds 1
RAM:473D ??                       ds 1
RAM:473E ??                       ds 1
RAM:473F ??                       ds 1
RAM:4740 ??                       ds 1
RAM:4741 ??                       ds 1
RAM:4742 ??                       ds 1
RAM:4743 ??                       ds 1
RAM:4744 ??                       ds 1
RAM:4745 ??                       ds 1
RAM:4746 ??                       ds 1
RAM:4747 ??                       ds 1
RAM:4748 ??                       ds 1
RAM:4749 ??                       ds 1
RAM:474A ??                       ds 1
RAM:474B ??                       ds 1
RAM:474C ??                       ds 1
RAM:474D ??                       ds 1
RAM:474E ??                       ds 1
RAM:474F ??                       ds 1
RAM:4750 ??                       ds 1
RAM:4751 ??                       ds 1
RAM:4752 ??                       ds 1
RAM:4753 ??                       ds 1
RAM:4754 ??                       ds 1
RAM:4755 ??                       ds 1
RAM:4756 ??                       ds 1
RAM:4757 ??                       ds 1
RAM:4758 ??                       ds 1
RAM:4759 ??                       ds 1
RAM:475A ??                       ds 1
RAM:475B ??                       ds 1
RAM:475C ??                       ds 1
RAM:475D ??                       ds 1
RAM:475E ??                       ds 1
RAM:475F ??                       ds 1
RAM:4760 ??                       ds 1
RAM:4761 ??                       ds 1
RAM:4762 ??                       ds 1
RAM:4763 ??                       ds 1
RAM:4764 ??                       ds 1
RAM:4765 ??                       ds 1
RAM:4766 ??                       ds 1
RAM:4767 ??                       ds 1
RAM:4768 ??                       ds 1
RAM:4769 ??                       ds 1
RAM:476A ??                       ds 1
RAM:476B ??                       ds 1
RAM:476C ??                       ds 1
RAM:476D ??                       ds 1
RAM:476E ??                       ds 1
RAM:476F ??                       ds 1
RAM:4770 ??                       ds 1
RAM:4771 ??                       ds 1
RAM:4772 ??                       ds 1
RAM:4773 ??                       ds 1
RAM:4774 ??                       ds 1
RAM:4775 ??                       ds 1
RAM:4776 ??                       ds 1
RAM:4777 ??                       ds 1
RAM:4778 ??                       ds 1
RAM:4779 ??                       ds 1
RAM:477A ??                       ds 1
RAM:477B ??                       ds 1
RAM:477C ??                       ds 1
RAM:477D ??                       ds 1
RAM:477E ??                       ds 1
RAM:477F ??                       ds 1
RAM:4780 ??                       ds 1
RAM:4781 ??                       ds 1
RAM:4782 ??                       ds 1
RAM:4783 ??                       ds 1
RAM:4784 ??                       ds 1
RAM:4785 ??                       ds 1
RAM:4786 ??                       ds 1
RAM:4787 ??                       ds 1
RAM:4788 ??                       ds 1
RAM:4789 ??                       ds 1
RAM:478A ??                       ds 1
RAM:478B ??                       ds 1
RAM:478C ??                       ds 1
RAM:478D ??                       ds 1
RAM:478E ??                       ds 1
RAM:478F ??                       ds 1
RAM:4790 ??                       ds 1
RAM:4791 ??                       ds 1
RAM:4792 ??                       ds 1
RAM:4793 ??                       ds 1
RAM:4794 ??                       ds 1
RAM:4795 ??                       ds 1
RAM:4796 ??                       ds 1
RAM:4797 ??                       ds 1
RAM:4798 ??                       ds 1
RAM:4799 ??                       ds 1
RAM:479A ??                       ds 1
RAM:479B ??                       ds 1
RAM:479C ??                       ds 1
RAM:479D ??                       ds 1
RAM:479E ??                       ds 1
RAM:479F ??                       ds 1
RAM:47A0 ??                       ds 1
RAM:47A1 ??                       ds 1
RAM:47A2 ??                       ds 1
RAM:47A3 ??                       ds 1
RAM:47A4 ??                       ds 1
RAM:47A5 ??                       ds 1
RAM:47A6 ??                       ds 1
RAM:47A7 ??                       ds 1
RAM:47A8 ??                       ds 1
RAM:47A9 ??                       ds 1
RAM:47AA ??                       ds 1
RAM:47AB ??                       ds 1
RAM:47AC ??                       ds 1
RAM:47AD ??                       ds 1
RAM:47AE ??                       ds 1
RAM:47AF ??                       ds 1
RAM:47B0 ??                       ds 1
RAM:47B1 ??                       ds 1
RAM:47B2 ??                       ds 1
RAM:47B3 ??                       ds 1
RAM:47B4 ??                       ds 1
RAM:47B5 ??                       ds 1
RAM:47B6 ??                       ds 1
RAM:47B7 ??                       ds 1
RAM:47B8 ??                       ds 1
RAM:47B9 ??                       ds 1
RAM:47BA ??                       ds 1
RAM:47BB ??                       ds 1
RAM:47BC ??                       ds 1
RAM:47BD ??                       ds 1
RAM:47BE ??                       ds 1
RAM:47BF ??                       ds 1
RAM:47C0 ??                       ds 1
RAM:47C1 ??                       ds 1
RAM:47C2 ??                       ds 1
RAM:47C3 ??                       ds 1
RAM:47C4 ??                       ds 1
RAM:47C5 ??                       ds 1
RAM:47C6 ??                       ds 1
RAM:47C7 ??                       ds 1
RAM:47C8 ??                       ds 1
RAM:47C9 ??                       ds 1
RAM:47CA ??                       ds 1
RAM:47CB ??                       ds 1
RAM:47CC ??                       ds 1
RAM:47CD ??                       ds 1
RAM:47CE ??                       ds 1
RAM:47CF ??                       ds 1
RAM:47D0 ??                       ds 1
RAM:47D1 ??                       ds 1
RAM:47D2 ??                       ds 1
RAM:47D3 ??                       ds 1
RAM:47D4 ??                       ds 1
RAM:47D5 ??                       ds 1
RAM:47D6 ??                       ds 1
RAM:47D7 ??                       ds 1
RAM:47D8 ??                       ds 1
RAM:47D9 ??                       ds 1
RAM:47DA ??                       ds 1
RAM:47DB ??                       ds 1
RAM:47DC ??                       ds 1
RAM:47DD ??                       ds 1
RAM:47DE ??                       ds 1
RAM:47DF ??                       ds 1
RAM:47E0 ??                       ds 1
RAM:47E1 ??                       ds 1
RAM:47E2 ??                       ds 1
RAM:47E3 ??                       ds 1
RAM:47E4 ??                       ds 1
RAM:47E5 ??                       ds 1
RAM:47E6 ??                       ds 1
RAM:47E7 ??                       ds 1
RAM:47E8 ??                       ds 1
RAM:47E9 ??                       ds 1
RAM:47EA ??                       ds 1
RAM:47EB ??                       ds 1
RAM:47EC ??                       ds 1
RAM:47ED ??                       ds 1
RAM:47EE ??                       ds 1
RAM:47EF ??                       ds 1
RAM:47F0 ??                       ds 1
RAM:47F1 ??                       ds 1
RAM:47F2 ??                       ds 1
RAM:47F3 ??                       ds 1
RAM:47F4 ??                       ds 1
RAM:47F5 ??                       ds 1
RAM:47F6 ??                       ds 1
RAM:47F7 ??                       ds 1
RAM:47F8 ??                       ds 1
RAM:47F9 ??                       ds 1
RAM:47FA ??                       ds 1
RAM:47FB ??                       ds 1
RAM:47FC ??                       ds 1
RAM:47FD ??                       ds 1
RAM:47FE ??                       ds 1
RAM:47FF ??                       ds 1
RAM:4800 ??                       ds 1
RAM:4801 ??                       ds 1
RAM:4802 ??                       ds 1
RAM:4803 ??                       ds 1
RAM:4804 ??                       ds 1
RAM:4805 ??                       ds 1
RAM:4806 ??                       ds 1
RAM:4807 ??                       ds 1
RAM:4808 ??                       ds 1
RAM:4809 ??                       ds 1
RAM:480A ??                       ds 1
RAM:480B ??                       ds 1
RAM:480C ??                       ds 1
RAM:480D ??                       ds 1
RAM:480E ??                       ds 1
RAM:480F ??                       ds 1
RAM:4810 ??                       ds 1
RAM:4811 ??                       ds 1
RAM:4812 ??                       ds 1
RAM:4813 ??                       ds 1
RAM:4814 ??                       ds 1
RAM:4815 ??                       ds 1
RAM:4816 ??                       ds 1
RAM:4817 ??                       ds 1
RAM:4818 ??                       ds 1
RAM:4819 ??                       ds 1
RAM:481A ??                       ds 1
RAM:481B ??                       ds 1
RAM:481C ??                       ds 1
RAM:481D ??                       ds 1
RAM:481E ??                       ds 1
RAM:481F ??                       ds 1
RAM:4820 ??                       ds 1
RAM:4821 ??                       ds 1
RAM:4822 ??                       ds 1
RAM:4823 ??                       ds 1
RAM:4824 ??                       ds 1
RAM:4825 ??                       ds 1
RAM:4826 ??                       ds 1
RAM:4827 ??                       ds 1
RAM:4828 ??                       ds 1
RAM:4829 ??                       ds 1
RAM:482A ??                       ds 1
RAM:482B ??                       ds 1
RAM:482C ??                       ds 1
RAM:482D ??                       ds 1
RAM:482E ??                       ds 1
RAM:482F ??                       ds 1
RAM:4830 ??                       ds 1
RAM:4831 ??                       ds 1
RAM:4832 ??                       ds 1
RAM:4833 ??                       ds 1
RAM:4834 ??                       ds 1
RAM:4835 ??                       ds 1
RAM:4836 ??                       ds 1
RAM:4837 ??                       ds 1
RAM:4838 ??                       ds 1
RAM:4839 ??                       ds 1
RAM:483A ??                       ds 1
RAM:483B ??                       ds 1
RAM:483C ??                       ds 1
RAM:483D ??                       ds 1
RAM:483E ??                       ds 1
RAM:483F ??                       ds 1
RAM:4840 ??                       ds 1
RAM:4841 ??                       ds 1
RAM:4842 ??                       ds 1
RAM:4843 ??                       ds 1
RAM:4844 ??                       ds 1
RAM:4845 ??                       ds 1
RAM:4846 ??                       ds 1
RAM:4847 ??                       ds 1
RAM:4848 ??                       ds 1
RAM:4849 ??                       ds 1
RAM:484A ??                       ds 1
RAM:484B ??                       ds 1
RAM:484C ??                       ds 1
RAM:484D ??                       ds 1
RAM:484E ??                       ds 1
RAM:484F ??                       ds 1
RAM:4850 ??                       ds 1
RAM:4851 ??                       ds 1
RAM:4852 ??                       ds 1
RAM:4853 ??                       ds 1
RAM:4854 ??                       ds 1
RAM:4855 ??                       ds 1
RAM:4856 ??                       ds 1
RAM:4857 ??                       ds 1
RAM:4858 ??                       ds 1
RAM:4859 ??                       ds 1
RAM:485A ??                       ds 1
RAM:485B ??                       ds 1
RAM:485C ??                       ds 1
RAM:485D ??                       ds 1
RAM:485E ??                       ds 1
RAM:485F ??                       ds 1
RAM:4860 ??                       ds 1
RAM:4861 ??                       ds 1
RAM:4862 ??                       ds 1
RAM:4863 ??                       ds 1
RAM:4864 ??                       ds 1
RAM:4865 ??                       ds 1
RAM:4866 ??                       ds 1
RAM:4867 ??                       ds 1
RAM:4868 ??                       ds 1
RAM:4869 ??                       ds 1
RAM:486A ??                       ds 1
RAM:486B ??                       ds 1
RAM:486C ??                       ds 1
RAM:486D ??                       ds 1
RAM:486E ??                       ds 1
RAM:486F ??                       ds 1
RAM:4870 ??                       ds 1
RAM:4871 ??                       ds 1
RAM:4872 ??                       ds 1
RAM:4873 ??                       ds 1
RAM:4874 ??                       ds 1
RAM:4875 ??                       ds 1
RAM:4876 ??                       ds 1
RAM:4877 ??                       ds 1
RAM:4878 ??                       ds 1
RAM:4879 ??                       ds 1
RAM:487A ??                       ds 1
RAM:487B ??                       ds 1
RAM:487C ??                       ds 1
RAM:487D ??                       ds 1
RAM:487E ??                       ds 1
RAM:487F ??                       ds 1
RAM:4880 ??                       ds 1
RAM:4881 ??                       ds 1
RAM:4882 ??                       ds 1
RAM:4883 ??                       ds 1
RAM:4884 ??                       ds 1
RAM:4885 ??                       ds 1
RAM:4886 ??                       ds 1
RAM:4887 ??                       ds 1
RAM:4888 ??                       ds 1
RAM:4889 ??                       ds 1
RAM:488A ??                       ds 1
RAM:488B ??                       ds 1
RAM:488C ??                       ds 1
RAM:488D ??                       ds 1
RAM:488E ??                       ds 1
RAM:488F ??                       ds 1
RAM:4890 ?? ??                    ds 2
RAM:4892 ??                       ds 1
RAM:4893 ??                       ds 1
RAM:4894 ??                       ds 1
RAM:4895 ??                       ds 1
RAM:4896 ??                       ds 1
RAM:4897 ??                       ds 1
RAM:4898 ??                       ds 1
RAM:4899 ??                       ds 1
RAM:489A ??                       ds 1
RAM:489B ??                       ds 1
RAM:489C ??                       ds 1
RAM:489D ??                       ds 1
RAM:489E ??                       ds 1
RAM:489F ??                       ds 1
RAM:48A0 ??                       ds 1
RAM:48A1 ??                       ds 1
RAM:48A2 ??                       ds 1
RAM:48A3 ??                       ds 1
RAM:48A4 ??                       ds 1
RAM:48A5 ??                       ds 1
RAM:48A6 ??                       ds 1
RAM:48A7 ??                       ds 1
RAM:48A8 ??                       ds 1
RAM:48A9 ??                       ds 1
RAM:48AA ??                       ds 1
RAM:48AB ??                       ds 1
RAM:48AC ??                       ds 1
RAM:48AD ??                       ds 1
RAM:48AE ??                       ds 1
RAM:48AF ??                       ds 1
RAM:48B0 ??                       ds 1
RAM:48B1 ??                       ds 1
RAM:48B2 ??                       ds 1
RAM:48B3 ??                       ds 1
RAM:48B4 ??                       ds 1
RAM:48B5 ??                       ds 1
RAM:48B6 ??                       ds 1
RAM:48B7 ??                       ds 1
RAM:48B8 ??                       ds 1
RAM:48B9 ??                       ds 1
RAM:48BA ??                       ds 1
RAM:48BB ??                       ds 1
RAM:48BC ??                       ds 1
RAM:48BD ??                       ds 1
RAM:48BE ??                       ds 1
RAM:48BF ??                       ds 1
RAM:48C0 ??                       ds 1
RAM:48C1 ??                       ds 1
RAM:48C2 ??                       ds 1
RAM:48C3 ??                       ds 1
RAM:48C4 ??                       ds 1
RAM:48C5 ??                       ds 1
RAM:48C6 ??                       ds 1
RAM:48C7 ??                       ds 1
RAM:48C8 ??                       ds 1
RAM:48C9 ??                       ds 1
RAM:48CA ??                       ds 1
RAM:48CB ??                       ds 1
RAM:48CC ??                       ds 1
RAM:48CD ??                       ds 1
RAM:48CE ??                       ds 1
RAM:48CF ??                       ds 1
RAM:48D0 ??                       ds 1
RAM:48D1 ??                       ds 1
RAM:48D2 ??                       ds 1
RAM:48D3 ??                       ds 1
RAM:48D4 ??                       ds 1
RAM:48D5 ??                       ds 1
RAM:48D6 ??                       ds 1
RAM:48D7 ??                       ds 1
RAM:48D8 ??                       ds 1
RAM:48D9 ??                       ds 1
RAM:48DA ??                       ds 1
RAM:48DB ??                       ds 1
RAM:48DC ??                       ds 1
RAM:48DD ??                       ds 1
RAM:48DE ??                       ds 1
RAM:48DF ??                       ds 1
RAM:48E0 ??                       ds 1
RAM:48E1 ??                       ds 1
RAM:48E2 ??                       ds 1
RAM:48E3 ??                       ds 1
RAM:48E4 ??                       ds 1
RAM:48E5 ??                       ds 1
RAM:48E6 ??                       ds 1
RAM:48E7 ??                       ds 1
RAM:48E8 ??                       ds 1
RAM:48E9 ??                       ds 1
RAM:48EA ??                       ds 1
RAM:48EB ??                       ds 1
RAM:48EC ??                       ds 1
RAM:48ED ??                       ds 1
RAM:48EE ??                       ds 1
RAM:48EF ??                       ds 1
RAM:48F0 ??                       ds 1
RAM:48F1 ??                       ds 1
RAM:48F2 ??                       ds 1
RAM:48F3 ??                       ds 1
RAM:48F4 ??                       ds 1
RAM:48F5 ??                       ds 1
RAM:48F6 ??                       ds 1
RAM:48F7 ??                       ds 1
RAM:48F8 ??                       ds 1
RAM:48F9 ??                       ds 1
RAM:48FA ??                       ds 1
RAM:48FB ??                       ds 1
RAM:48FC ??                       ds 1
RAM:48FD ??                       ds 1
RAM:48FE ??                       ds 1
RAM:48FF ??                       ds 1
RAM:4900 ??                       ds 1
RAM:4901 ??                       ds 1
RAM:4902 ??                       ds 1
RAM:4903 ??                       ds 1
RAM:4904 ??                       ds 1
RAM:4905 ??                       ds 1
RAM:4906 ??                       ds 1
RAM:4907 ??                       ds 1
RAM:4908 ??                       ds 1
RAM:4909 ??                       ds 1
RAM:490A ??                       ds 1
RAM:490B ??                       ds 1
RAM:490C ??                       ds 1
RAM:490D ??                       ds 1
RAM:490E ??                       ds 1
RAM:490F ??                       ds 1
RAM:4910 ??                       ds 1
RAM:4911 ??                       ds 1
RAM:4912 ??                       ds 1
RAM:4913 ??                       ds 1
RAM:4914 ??                       ds 1
RAM:4915 ??                       ds 1
RAM:4916 ??                       ds 1
RAM:4917 ??                       ds 1
RAM:4918 ??                       ds 1
RAM:4919 ??                       ds 1
RAM:491A ??                       ds 1
RAM:491B ??                       ds 1
RAM:491C ??                       ds 1
RAM:491D ??                       ds 1
RAM:491E ??                       ds 1
RAM:491F ??                       ds 1
RAM:4920 ??                       ds 1
RAM:4921 ??                       ds 1
RAM:4922 ??                       ds 1
RAM:4923 ??                       ds 1
RAM:4924 ??                       ds 1
RAM:4925 ??                       ds 1
RAM:4926 ??                       ds 1
RAM:4927 ??                       ds 1
RAM:4928 ??                       ds 1
RAM:4929 ??                       ds 1
RAM:492A ??                       ds 1
RAM:492B ??                       ds 1
RAM:492C ??                       ds 1
RAM:492D ??                       ds 1
RAM:492E ??                       ds 1
RAM:492F ??                       ds 1
RAM:4930 ??                       ds 1
RAM:4931 ??                       ds 1
RAM:4932 ??                       ds 1
RAM:4933 ??                       ds 1
RAM:4934 ??                       ds 1
RAM:4935 ??                       ds 1
RAM:4936 ??                       ds 1
RAM:4937 ??                       ds 1
RAM:4938 ??                       ds 1
RAM:4939 ??                       ds 1
RAM:493A ??                       ds 1
RAM:493B ??                       ds 1
RAM:493C ??                       ds 1
RAM:493D ??                       ds 1
RAM:493E ??                       ds 1
RAM:493F ??                       ds 1
RAM:4940 ??                       ds 1
RAM:4941 ??                       ds 1
RAM:4942 ??                       ds 1
RAM:4943 ??                       ds 1
RAM:4944 ??                       ds 1
RAM:4945 ??                       ds 1
RAM:4946 ??                       ds 1
RAM:4947 ??                       ds 1
RAM:4948 ??                       ds 1
RAM:4949 ??                       ds 1
RAM:494A ??                       ds 1
RAM:494B ??                       ds 1
RAM:494C ??                       ds 1
RAM:494D ??                       ds 1
RAM:494E ??                       ds 1
RAM:494F ??                       ds 1
RAM:4950 ??                       ds 1
RAM:4951 ??                       ds 1
RAM:4952 ??                       ds 1
RAM:4953 ??                       ds 1
RAM:4954 ??                       ds 1
RAM:4955 ??                       ds 1
RAM:4956 ??                       ds 1
RAM:4957 ??                       ds 1
RAM:4958 ??                       ds 1
RAM:4959 ??                       ds 1
RAM:495A ??                       ds 1
RAM:495B ??                       ds 1
RAM:495C ??                       ds 1
RAM:495D ??                       ds 1
RAM:495E ??                       ds 1
RAM:495F ??                       ds 1
RAM:4960 ??                       ds 1
RAM:4961 ??                       ds 1
RAM:4962 ??                       ds 1
RAM:4963 ??                       ds 1
RAM:4964 ??                       ds 1
RAM:4965 ??                       ds 1
RAM:4966 ??                       ds 1
RAM:4967 ??                       ds 1
RAM:4968 ??                       ds 1
RAM:4969 ??                       ds 1
RAM:496A ??                       ds 1
RAM:496B ??                       ds 1
RAM:496C ??                       ds 1
RAM:496D ??                       ds 1
RAM:496E ??                       ds 1
RAM:496F ??                       ds 1
RAM:4970 ??                       ds 1
RAM:4971 ??                       ds 1
RAM:4972 ??                       ds 1
RAM:4973 ??                       ds 1
RAM:4974 ??                       ds 1
RAM:4975 ??                       ds 1
RAM:4976 ??                       ds 1
RAM:4977 ??                       ds 1
RAM:4978 ??                       ds 1
RAM:4979 ??                       ds 1
RAM:497A ??                       ds 1
RAM:497B ??                       ds 1
RAM:497C ??                       ds 1
RAM:497D ??                       ds 1
RAM:497E ??                       ds 1
RAM:497F ??                       ds 1
RAM:4980 ??                       ds 1
RAM:4981 ??                       ds 1
RAM:4982 ??                       ds 1
RAM:4983 ??                       ds 1
RAM:4984 ??                       ds 1
RAM:4985 ??                       ds 1
RAM:4986 ??                       ds 1
RAM:4987 ??                       ds 1
RAM:4988 ??                       ds 1
RAM:4989 ??                       ds 1
RAM:498A ??                       ds 1
RAM:498B ??                       ds 1
RAM:498C ??                       ds 1
RAM:498D ??                       ds 1
RAM:498E ??                       ds 1
RAM:498F ??                       ds 1
RAM:4990 ??                       ds 1
RAM:4991 ??                       ds 1
RAM:4992 ??                       ds 1
RAM:4993 ??                       ds 1
RAM:4994 ??                       ds 1
RAM:4995 ??                       ds 1
RAM:4996 ??                       ds 1
RAM:4997 ??                       ds 1
RAM:4998 ??                       ds 1
RAM:4999 ??                       ds 1
RAM:499A ??                       ds 1
RAM:499B ??                       ds 1
RAM:499C ??                       ds 1
RAM:499D ??                       ds 1
RAM:499E ??                       ds 1
RAM:499F ??                       ds 1
RAM:49A0 ??                       ds 1
RAM:49A1 ??                       ds 1
RAM:49A2 ??                       ds 1
RAM:49A3 ??                       ds 1
RAM:49A4 ??                       ds 1
RAM:49A5 ??                       ds 1
RAM:49A6 ??                       ds 1
RAM:49A7 ??                       ds 1
RAM:49A8 ??                       ds 1
RAM:49A9 ??                       ds 1
RAM:49AA ??                       ds 1
RAM:49AB ??                       ds 1
RAM:49AC ??                       ds 1
RAM:49AD ??                       ds 1
RAM:49AE ??                       ds 1
RAM:49AF ??                       ds 1
RAM:49B0 ??                       ds 1
RAM:49B1 ??                       ds 1
RAM:49B2 ??                       ds 1
RAM:49B3 ??                       ds 1
RAM:49B4 ??                       ds 1
RAM:49B5 ??                       ds 1
RAM:49B6 ??                       ds 1
RAM:49B7 ??                       ds 1
RAM:49B8 ??                       ds 1
RAM:49B9 ??                       ds 1
RAM:49BA ??                       ds 1
RAM:49BB ??                       ds 1
RAM:49BC ??                       ds 1
RAM:49BD ??                       ds 1
RAM:49BE ??                       ds 1
RAM:49BF ??                       ds 1
RAM:49C0 ??                       ds 1
RAM:49C1 ??                       ds 1
RAM:49C2 ??                       ds 1
RAM:49C3 ??                       ds 1
RAM:49C4 ??                       ds 1
RAM:49C5 ??                       ds 1
RAM:49C6 ??                       ds 1
RAM:49C7 ??                       ds 1
RAM:49C8 ??                       ds 1
RAM:49C9 ??                       ds 1
RAM:49CA ??                       ds 1
RAM:49CB ??                       ds 1
RAM:49CC ??                       ds 1
RAM:49CD ??                       ds 1
RAM:49CE ??                       ds 1
RAM:49CF ??                       ds 1
RAM:49D0 ??                       ds 1
RAM:49D1 ??                       ds 1
RAM:49D2 ??                       ds 1
RAM:49D3 ??                       ds 1
RAM:49D4 ??                       ds 1
RAM:49D5 ??                       ds 1
RAM:49D6 ??                       ds 1
RAM:49D7 ??                       ds 1
RAM:49D8 ??                       ds 1
RAM:49D9 ??                       ds 1
RAM:49DA ??                       ds 1
RAM:49DB ??                       ds 1
RAM:49DC ??                       ds 1
RAM:49DD ??                       ds 1
RAM:49DE ??                       ds 1
RAM:49DF ??                       ds 1
RAM:49E0 ??                       ds 1
RAM:49E1 ??                       ds 1
RAM:49E2 ??                       ds 1
RAM:49E3 ??                       ds 1
RAM:49E4 ??                       ds 1
RAM:49E5 ??                       ds 1
RAM:49E6 ??                       ds 1
RAM:49E7 ??                       ds 1
RAM:49E8 ??                       ds 1
RAM:49E9 ??                       ds 1
RAM:49EA ??                       ds 1
RAM:49EB ??                       ds 1
RAM:49EC ??                       ds 1
RAM:49ED ??                       ds 1
RAM:49EE ??                       ds 1
RAM:49EF ??                       ds 1
RAM:49F0 ??                       ds 1
RAM:49F1 ??                       ds 1
RAM:49F2 ??                       ds 1
RAM:49F3 ??                       ds 1
RAM:49F4 ??                       ds 1
RAM:49F5 ??                       ds 1
RAM:49F6 ??                       ds 1
RAM:49F7 ??                       ds 1
RAM:49F8 ??                       ds 1
RAM:49F9 ??                       ds 1
RAM:49FA ??                       ds 1
RAM:49FB ??                       ds 1
RAM:49FC ??                       ds 1
RAM:49FD ??                       ds 1
RAM:49FE ??                       ds 1
RAM:49FF ??                       ds 1
RAM:4A00 ??                       ds 1
RAM:4A01 ??                       ds 1
RAM:4A02 ??                       ds 1
RAM:4A03 ??                       ds 1
RAM:4A04 ??                       ds 1
RAM:4A05 ??                       ds 1
RAM:4A06 ??                       ds 1
RAM:4A07 ??                       ds 1
RAM:4A08 ??                       ds 1
RAM:4A09 ??                       ds 1
RAM:4A0A ??                       ds 1
RAM:4A0B ??                       ds 1
RAM:4A0C ??                       ds 1
RAM:4A0D ??                       ds 1
RAM:4A0E ??                       ds 1
RAM:4A0F ??                       ds 1
RAM:4A10 ??                       ds 1
RAM:4A11 ??                       ds 1
RAM:4A12 ??                       ds 1
RAM:4A13 ??                       ds 1
RAM:4A14 ??                       ds 1
RAM:4A15 ??                       ds 1
RAM:4A16 ??                       ds 1
RAM:4A17 ??                       ds 1
RAM:4A18 ??                       ds 1
RAM:4A19 ??                       ds 1
RAM:4A1A ??                       ds 1
RAM:4A1B ??                       ds 1
RAM:4A1C ??                       ds 1
RAM:4A1D ??                       ds 1
RAM:4A1E ??                       ds 1
RAM:4A1F ??                       ds 1
RAM:4A20 ??                       ds 1
RAM:4A21 ??                       ds 1
RAM:4A22 ??                       ds 1
RAM:4A23 ??                       ds 1
RAM:4A24 ??                       ds 1
RAM:4A25 ??                       ds 1
RAM:4A26 ??                       ds 1
RAM:4A27 ??                       ds 1
RAM:4A28 ??                       ds 1
RAM:4A29 ??                       ds 1
RAM:4A2A ??                       ds 1
RAM:4A2B ??                       ds 1
RAM:4A2C ??                       ds 1
RAM:4A2D ??                       ds 1
RAM:4A2E ??                       ds 1
RAM:4A2F ??                       ds 1
RAM:4A30 ??                       ds 1
RAM:4A31 ??                       ds 1
RAM:4A32 ??                       ds 1
RAM:4A33 ??                       ds 1
RAM:4A34 ??                       ds 1
RAM:4A35 ??                       ds 1
RAM:4A36 ??                       ds 1
RAM:4A37 ??                       ds 1
RAM:4A38 ??                       ds 1
RAM:4A39 ??                       ds 1
RAM:4A3A ??                       ds 1
RAM:4A3B ??                       ds 1
RAM:4A3C ??                       ds 1
RAM:4A3D ??                       ds 1
RAM:4A3E ??                       ds 1
RAM:4A3F ??                       ds 1
RAM:4A40 ??                       ds 1
RAM:4A41 ??                       ds 1
RAM:4A42 ??                       ds 1
RAM:4A43 ??                       ds 1
RAM:4A44 ??                       ds 1
RAM:4A45 ??                       ds 1
RAM:4A46 ??                       ds 1
RAM:4A47 ??                       ds 1
RAM:4A48 ??                       ds 1
RAM:4A49 ??                       ds 1
RAM:4A4A ??                       ds 1
RAM:4A4B ??                       ds 1
RAM:4A4C ??                       ds 1
RAM:4A4D ??                       ds 1
RAM:4A4E ??                       ds 1
RAM:4A4F ??                       ds 1
RAM:4A50 ??                       ds 1
RAM:4A51 ??                       ds 1
RAM:4A52 ??                       ds 1
RAM:4A53 ??                       ds 1
RAM:4A54 ??                       ds 1
RAM:4A55 ??                       ds 1
RAM:4A56 ??                       ds 1
RAM:4A57 ??                       ds 1
RAM:4A58 ??                       ds 1
RAM:4A59 ??                       ds 1
RAM:4A5A ??                       ds 1
RAM:4A5B ??                       ds 1
RAM:4A5C ??                       ds 1
RAM:4A5D ??                       ds 1
RAM:4A5E ??                       ds 1
RAM:4A5F ??                       ds 1
RAM:4A60 ??                       ds 1
RAM:4A61 ??                       ds 1
RAM:4A62 ??                       ds 1
RAM:4A63 ??                       ds 1
RAM:4A64 ??                       ds 1
RAM:4A65 ??                       ds 1
RAM:4A66 ??                       ds 1
RAM:4A67 ??                       ds 1
RAM:4A68 ??                       ds 1
RAM:4A69 ??                       ds 1
RAM:4A6A ??                       ds 1
RAM:4A6B ??                       ds 1
RAM:4A6C ??                       ds 1
RAM:4A6D ??                       ds 1
RAM:4A6E ??                       ds 1
RAM:4A6F ??                       ds 1
RAM:4A70 ??                       ds 1
RAM:4A71 ??                       ds 1
RAM:4A72 ??                       ds 1
RAM:4A73 ??                       ds 1
RAM:4A74 ??                       ds 1
RAM:4A75 ??                       ds 1
RAM:4A76 ??                       ds 1
RAM:4A77 ??                       ds 1
RAM:4A78 ??                       ds 1
RAM:4A79 ??                       ds 1
RAM:4A7A ??                       ds 1
RAM:4A7B ??                       ds 1
RAM:4A7C ??                       ds 1
RAM:4A7D ??                       ds 1
RAM:4A7E ??                       ds 1
RAM:4A7F ??                       ds 1
RAM:4A80 ??                       ds 1
RAM:4A81 ??                       ds 1
RAM:4A82 ??                       ds 1
RAM:4A83 ??                       ds 1
RAM:4A84 ??                       ds 1
RAM:4A85 ??                       ds 1
RAM:4A86 ??                       ds 1
RAM:4A87 ??                       ds 1
RAM:4A88 ??                       ds 1
RAM:4A89 ??                       ds 1
RAM:4A8A ??                       ds 1
RAM:4A8B ??                       ds 1
RAM:4A8C ??                       ds 1
RAM:4A8D ??                       ds 1
RAM:4A8E ??                       ds 1
RAM:4A8F ??                       ds 1
RAM:4A90 ??                       ds 1
RAM:4A91 ??                       ds 1
RAM:4A92 ??                       ds 1
RAM:4A93 ??                       ds 1
RAM:4A94 ??                       ds 1
RAM:4A95 ??                       ds 1
RAM:4A96 ??                       ds 1
RAM:4A97 ??                       ds 1
RAM:4A98 ??                       ds 1
RAM:4A99 ??                       ds 1
RAM:4A9A ??                       ds 1
RAM:4A9B ??                       ds 1
RAM:4A9C ??                       ds 1
RAM:4A9D ??                       ds 1
RAM:4A9E ??                       ds 1
RAM:4A9F ??                       ds 1
RAM:4AA0 ??                       ds 1
RAM:4AA1 ??                       ds 1
RAM:4AA2 ??                       ds 1
RAM:4AA3 ??                       ds 1
RAM:4AA4 ??                       ds 1
RAM:4AA5 ??                       ds 1
RAM:4AA6 ??                       ds 1
RAM:4AA7 ??                       ds 1
RAM:4AA8 ??                       ds 1
RAM:4AA9 ??                       ds 1
RAM:4AAA ??                       ds 1
RAM:4AAB ??                       ds 1
RAM:4AAC ??                       ds 1
RAM:4AAD ??                       ds 1
RAM:4AAE ??                       ds 1
RAM:4AAF ??                       ds 1
RAM:4AB0 ??                       ds 1
RAM:4AB1 ??                       ds 1
RAM:4AB2 ??                       ds 1
RAM:4AB3 ??                       ds 1
RAM:4AB4 ??                       ds 1
RAM:4AB5 ??                       ds 1
RAM:4AB6 ??                       ds 1
RAM:4AB7 ??                       ds 1
RAM:4AB8 ??                       ds 1
RAM:4AB9 ??                       ds 1
RAM:4ABA ??                       ds 1
RAM:4ABB ??                       ds 1
RAM:4ABC ??                       ds 1
RAM:4ABD ??                       ds 1
RAM:4ABE ??                       ds 1
RAM:4ABF ??                       ds 1
RAM:4AC0 ??                       ds 1
RAM:4AC1 ??                       ds 1
RAM:4AC2 ??                       ds 1
RAM:4AC3 ??                       ds 1
RAM:4AC4 ??                       ds 1
RAM:4AC5 ??                       ds 1
RAM:4AC6 ??                       ds 1
RAM:4AC7 ??                       ds 1
RAM:4AC8 ??                       ds 1
RAM:4AC9 ??                       ds 1
RAM:4ACA ??                       ds 1
RAM:4ACB ??                       ds 1
RAM:4ACC ??                       ds 1
RAM:4ACD ??                       ds 1
RAM:4ACE ??                       ds 1
RAM:4ACF ??                       ds 1
RAM:4AD0 ??                       ds 1
RAM:4AD1 ??                       ds 1
RAM:4AD2 ??                       ds 1
RAM:4AD3 ??                       ds 1
RAM:4AD4 ??                       ds 1
RAM:4AD5 ??                       ds 1
RAM:4AD6 ??                       ds 1
RAM:4AD7 ??                       ds 1
RAM:4AD8 ??                       ds 1
RAM:4AD9 ??                       ds 1
RAM:4ADA ??                       ds 1
RAM:4ADB ??                       ds 1
RAM:4ADC ??                       ds 1
RAM:4ADD ??                       ds 1
RAM:4ADE ??                       ds 1
RAM:4ADF ??                       ds 1
RAM:4AE0 ??                       ds 1
RAM:4AE1 ??                       ds 1
RAM:4AE2 ??                       ds 1
RAM:4AE3 ??                       ds 1
RAM:4AE4 ??                       ds 1
RAM:4AE5 ??                       ds 1
RAM:4AE6 ??                       ds 1
RAM:4AE7 ??                       ds 1
RAM:4AE8 ??                       ds 1
RAM:4AE9 ??                       ds 1
RAM:4AEA ??                       ds 1
RAM:4AEB ??                       ds 1
RAM:4AEC ??                       ds 1
RAM:4AED ??                       ds 1
RAM:4AEE ??                       ds 1
RAM:4AEF ??                       ds 1
RAM:4AF0 ??                       ds 1
RAM:4AF1 ??                       ds 1
RAM:4AF2 ??                       ds 1
RAM:4AF3 ??                       ds 1
RAM:4AF4 ??                       ds 1
RAM:4AF5 ??                       ds 1
RAM:4AF6 ??                       ds 1
RAM:4AF7 ??                       ds 1
RAM:4AF8 ??                       ds 1
RAM:4AF9 ??                       ds 1
RAM:4AFA ??                       ds 1
RAM:4AFB ??                       ds 1
RAM:4AFC ??                       ds 1
RAM:4AFD ??                       ds 1
RAM:4AFE ??                       ds 1
RAM:4AFF ??                       ds 1
RAM:4B00 ??                       ds 1
RAM:4B01 ??                       ds 1
RAM:4B02 ??                       ds 1
RAM:4B03 ??                       ds 1
RAM:4B04 ??                       ds 1
RAM:4B05 ??                       ds 1
RAM:4B06 ??                       ds 1
RAM:4B07 ??                       ds 1
RAM:4B08 ??                       ds 1
RAM:4B09 ??                       ds 1
RAM:4B0A ??                       ds 1
RAM:4B0B ??                       ds 1
RAM:4B0C ??                       ds 1
RAM:4B0D ??                       ds 1
RAM:4B0E ??                       ds 1
RAM:4B0F ??                       ds 1
RAM:4B10 ??                       ds 1
RAM:4B11 ??                       ds 1
RAM:4B12 ??                       ds 1
RAM:4B13 ??                       ds 1
RAM:4B14 ??                       ds 1
RAM:4B15 ??                       ds 1
RAM:4B16 ??                       ds 1
RAM:4B17 ??                       ds 1
RAM:4B18 ??                       ds 1
RAM:4B19 ??                       ds 1
RAM:4B1A ??                       ds 1
RAM:4B1B ??                       ds 1
RAM:4B1C ??                       ds 1
RAM:4B1D ??                       ds 1
RAM:4B1E ??                       ds 1
RAM:4B1F ??                       ds 1
RAM:4B20 ??                       ds 1
RAM:4B21 ??                       ds 1
RAM:4B22 ??                       ds 1
RAM:4B23 ??                       ds 1
RAM:4B24 ??                       ds 1
RAM:4B25 ??                       ds 1
RAM:4B26 ??                       ds 1
RAM:4B27 ??                       ds 1
RAM:4B28 ??                       ds 1
RAM:4B29 ??                       ds 1
RAM:4B2A ??                       ds 1
RAM:4B2B ??                       ds 1
RAM:4B2C ??                       ds 1
RAM:4B2D ??                       ds 1
RAM:4B2E ??                       ds 1
RAM:4B2F ??                       ds 1
RAM:4B30 ??                       ds 1
RAM:4B31 ??                       ds 1
RAM:4B32 ??                       ds 1
RAM:4B33 ??                       ds 1
RAM:4B34 ??                       ds 1
RAM:4B35 ??                       ds 1
RAM:4B36 ??                       ds 1
RAM:4B37 ??                       ds 1
RAM:4B38 ??                       ds 1
RAM:4B39 ??                       ds 1
RAM:4B3A ??                       ds 1
RAM:4B3B ??                       ds 1
RAM:4B3C ??                       ds 1
RAM:4B3D ??                       ds 1
RAM:4B3E ??                       ds 1
RAM:4B3F ??                       ds 1
RAM:4B40 ??                       ds 1
RAM:4B41 ??                       ds 1
RAM:4B42 ??                       ds 1
RAM:4B43 ??                       ds 1
RAM:4B44 ??                       ds 1
RAM:4B45 ??                       ds 1
RAM:4B46 ??                       ds 1
RAM:4B47 ??                       ds 1
RAM:4B48 ??                       ds 1
RAM:4B49 ??                       ds 1
RAM:4B4A ??                       ds 1
RAM:4B4B ??                       ds 1
RAM:4B4C ??                       ds 1
RAM:4B4D ??                       ds 1
RAM:4B4E ??                       ds 1
RAM:4B4F ??                       ds 1
RAM:4B50 ??                       ds 1
RAM:4B51 ??                       ds 1
RAM:4B52 ??                       ds 1
RAM:4B53 ??                       ds 1
RAM:4B54 ??                       ds 1
RAM:4B55 ??                       ds 1
RAM:4B56 ??                       ds 1
RAM:4B57 ??                       ds 1
RAM:4B58 ??                       ds 1
RAM:4B59 ??                       ds 1
RAM:4B5A ??                       ds 1
RAM:4B5B ??                       ds 1
RAM:4B5C ??                       ds 1
RAM:4B5D ??                       ds 1
RAM:4B5E ??                       ds 1
RAM:4B5F ??                       ds 1
RAM:4B60 ??                       ds 1
RAM:4B61 ??                       ds 1
RAM:4B62 ??                       ds 1
RAM:4B63 ??                       ds 1
RAM:4B64 ??                       ds 1
RAM:4B65 ??                       ds 1
RAM:4B66 ??                       ds 1
RAM:4B67 ??                       ds 1
RAM:4B68 ??                       ds 1
RAM:4B69 ??                       ds 1
RAM:4B6A ??                       ds 1
RAM:4B6B ??                       ds 1
RAM:4B6C ??                       ds 1
RAM:4B6D ??                       ds 1
RAM:4B6E ??                       ds 1
RAM:4B6F ??                       ds 1
RAM:4B70 ??                       ds 1
RAM:4B71 ??                       ds 1
RAM:4B72 ??                       ds 1
RAM:4B73 ??                       ds 1
RAM:4B74 ??                       ds 1
RAM:4B75 ??                       ds 1
RAM:4B76 ??                       ds 1
RAM:4B77 ??                       ds 1
RAM:4B78 ??                       ds 1
RAM:4B79 ??                       ds 1
RAM:4B7A ??                       ds 1
RAM:4B7B ??                       ds 1
RAM:4B7C ??                       ds 1
RAM:4B7D ??                       ds 1
RAM:4B7E ??                       ds 1
RAM:4B7F ??                       ds 1
RAM:4B80 ??                       ds 1
RAM:4B81 ??                       ds 1
RAM:4B82 ??                       ds 1
RAM:4B83 ??                       ds 1
RAM:4B84 ??                       ds 1
RAM:4B85 ??                       ds 1
RAM:4B86 ??                       ds 1
RAM:4B87 ??                       ds 1
RAM:4B88 ??                       ds 1
RAM:4B89 ??                       ds 1
RAM:4B8A ??                       ds 1
RAM:4B8B ??                       ds 1
RAM:4B8C ??                       ds 1
RAM:4B8D ??                       ds 1
RAM:4B8E ??                       ds 1
RAM:4B8F ??                       ds 1
RAM:4B90 ??                       ds 1
RAM:4B91 ??                       ds 1
RAM:4B92 ??                       ds 1
RAM:4B93 ??                       ds 1
RAM:4B94 ??                       ds 1
RAM:4B95 ??                       ds 1
RAM:4B96 ??                       ds 1
RAM:4B97 ??                       ds 1
RAM:4B98 ??                       ds 1
RAM:4B99 ??                       ds 1
RAM:4B9A ??                       ds 1
RAM:4B9B ??                       ds 1
RAM:4B9C ??                       ds 1
RAM:4B9D ??                       ds 1
RAM:4B9E ??                       ds 1
RAM:4B9F ??                       ds 1
RAM:4BA0 ??                       ds 1
RAM:4BA1 ??                       ds 1
RAM:4BA2 ??                       ds 1
RAM:4BA3 ??                       ds 1
RAM:4BA4 ??                       ds 1
RAM:4BA5 ??                       ds 1
RAM:4BA6 ??                       ds 1
RAM:4BA7 ??                       ds 1
RAM:4BA8 ??                       ds 1
RAM:4BA9 ??                       ds 1
RAM:4BAA ??                       ds 1
RAM:4BAB ??                       ds 1
RAM:4BAC ??                       ds 1
RAM:4BAD ??                       ds 1
RAM:4BAE ??                       ds 1
RAM:4BAF ??                       ds 1
RAM:4BB0 ??                       ds 1
RAM:4BB1 ??                       ds 1
RAM:4BB2 ??                       ds 1
RAM:4BB3 ??                       ds 1
RAM:4BB4 ??                       ds 1
RAM:4BB5 ??                       ds 1
RAM:4BB6 ??                       ds 1
RAM:4BB7 ??                       ds 1
RAM:4BB8 ??                       ds 1
RAM:4BB9 ??                       ds 1
RAM:4BBA ??                       ds 1
RAM:4BBB ??                       ds 1
RAM:4BBC ??                       ds 1
RAM:4BBD ??                       ds 1
RAM:4BBE ??                       ds 1
RAM:4BBF ??                       ds 1
RAM:4BC0 ??                       ds 1
RAM:4BC1 ??                       ds 1
RAM:4BC2 ??                       ds 1
RAM:4BC3 ??                       ds 1
RAM:4BC4 ??                       ds 1
RAM:4BC5 ??                       ds 1
RAM:4BC6 ??                       ds 1
RAM:4BC7 ??                       ds 1
RAM:4BC8 ??                       ds 1
RAM:4BC9 ??                       ds 1
RAM:4BCA ??                       ds 1
RAM:4BCB ??                       ds 1
RAM:4BCC ??                       ds 1
RAM:4BCD ??                       ds 1
RAM:4BCE ??                       ds 1
RAM:4BCF ??                       ds 1
RAM:4BD0 ??                       ds 1
RAM:4BD1 ??                       ds 1
RAM:4BD2 ??                       ds 1
RAM:4BD3 ??                       ds 1
RAM:4BD4 ??                       ds 1
RAM:4BD5 ??                       ds 1
RAM:4BD6 ??                       ds 1
RAM:4BD7 ??                       ds 1
RAM:4BD8 ??                       ds 1
RAM:4BD9 ??                       ds 1
RAM:4BDA ??                       ds 1
RAM:4BDB ??                       ds 1
RAM:4BDC ??                       ds 1
RAM:4BDD ??                       ds 1
RAM:4BDE ??                       ds 1
RAM:4BDF ??                       ds 1
RAM:4BE0 ??                       ds 1
RAM:4BE1 ??                       ds 1
RAM:4BE2 ??                       ds 1
RAM:4BE3 ??                       ds 1
RAM:4BE4 ??                       ds 1
RAM:4BE5 ??                       ds 1
RAM:4BE6 ??                       ds 1
RAM:4BE7 ??                       ds 1
RAM:4BE8 ??                       ds 1
RAM:4BE9 ??                       ds 1
RAM:4BEA ??                       ds 1
RAM:4BEB ??                       ds 1
RAM:4BEC ??                       ds 1
RAM:4BED ??                       ds 1
RAM:4BEE ??                       ds 1
RAM:4BEF ??                       ds 1
RAM:4BF0 ??                       ds 1
RAM:4BF1 ??                       ds 1
RAM:4BF2 ??                       ds 1
RAM:4BF3 ??                       ds 1
RAM:4BF4 ??                       ds 1
RAM:4BF5 ??                       ds 1
RAM:4BF6 ??                       ds 1
RAM:4BF7 ??                       ds 1
RAM:4BF8 ??                       ds 1
RAM:4BF9 ??                       ds 1
RAM:4BFA ??                       ds 1
RAM:4BFB ??                       ds 1
RAM:4BFC ??                       ds 1
RAM:4BFD ??                       ds 1
RAM:4BFE ??                       ds 1
RAM:4BFF ??                       ds 1
RAM:4C00 ??                       ds 1
RAM:4C01 ??                       ds 1
RAM:4C02 ??                       ds 1
RAM:4C03 ??                       ds 1
RAM:4C04 ??                       ds 1
RAM:4C05 ??                       ds 1
RAM:4C06 ??                       ds 1
RAM:4C07 ??                       ds 1
RAM:4C08 ??                       ds 1
RAM:4C09 ??                       ds 1
RAM:4C0A ??                       ds 1
RAM:4C0B ??                       ds 1
RAM:4C0C ??                       ds 1
RAM:4C0D ??                       ds 1
RAM:4C0E ??                       ds 1
RAM:4C0F ??                       ds 1
RAM:4C10 ??                       ds 1
RAM:4C11 ??                       ds 1
RAM:4C12 ??                       ds 1
RAM:4C13 ??                       ds 1
RAM:4C14 ??                       ds 1
RAM:4C15 ??                       ds 1
RAM:4C16 ??                       ds 1
RAM:4C17 ??                       ds 1
RAM:4C18 ??                       ds 1
RAM:4C19 ??                       ds 1
RAM:4C1A ??                       ds 1
RAM:4C1B ??                       ds 1
RAM:4C1C ??                       ds 1
RAM:4C1D ??                       ds 1
RAM:4C1E ??                       ds 1
RAM:4C1F ??                       ds 1
RAM:4C20 ??                       ds 1
RAM:4C21 ??                       ds 1
RAM:4C22 ??                       ds 1
RAM:4C23 ??                       ds 1
RAM:4C24 ??                       ds 1
RAM:4C25 ??                       ds 1
RAM:4C26 ??                       ds 1
RAM:4C27 ??                       ds 1
RAM:4C28 ??                       ds 1
RAM:4C29 ??                       ds 1
RAM:4C2A ??                       ds 1
RAM:4C2B ??                       ds 1
RAM:4C2C ??                       ds 1
RAM:4C2D ??                       ds 1
RAM:4C2E ??                       ds 1
RAM:4C2F ??                       ds 1
RAM:4C30 ??                       ds 1
RAM:4C31 ??                       ds 1
RAM:4C32 ??                       ds 1
RAM:4C33 ??                       ds 1
RAM:4C34 ??                       ds 1
RAM:4C35 ??                       ds 1
RAM:4C36 ??                       ds 1
RAM:4C37 ??                       ds 1
RAM:4C38 ??                       ds 1
RAM:4C39 ??                       ds 1
RAM:4C3A ??                       ds 1
RAM:4C3B ??                       ds 1
RAM:4C3C ??                       ds 1
RAM:4C3D ??                       ds 1
RAM:4C3E ??                       ds 1
RAM:4C3F ??                       ds 1
RAM:4C40 ??                       ds 1
RAM:4C41 ??                       ds 1
RAM:4C42 ??                       ds 1
RAM:4C43 ??                       ds 1
RAM:4C44 ??                       ds 1
RAM:4C45 ??                       ds 1
RAM:4C46 ??                       ds 1
RAM:4C47 ??                       ds 1
RAM:4C48 ??                       ds 1
RAM:4C49 ??                       ds 1
RAM:4C4A ??                       ds 1
RAM:4C4B ??                       ds 1
RAM:4C4C ??                       ds 1
RAM:4C4D ??                       ds 1
RAM:4C4E ??                       ds 1
RAM:4C4F ??                       ds 1
RAM:4C50 ??                       ds 1
RAM:4C51 ??                       ds 1
RAM:4C52 ??                       ds 1
RAM:4C53 ??                       ds 1
RAM:4C54 ??                       ds 1
RAM:4C55 ??                       ds 1
RAM:4C56 ??                       ds 1
RAM:4C57 ??                       ds 1
RAM:4C58 ??                       ds 1
RAM:4C59 ??                       ds 1
RAM:4C5A ??                       ds 1
RAM:4C5B ??                       ds 1
RAM:4C5C ??                       ds 1
RAM:4C5D ??                       ds 1
RAM:4C5E ??                       ds 1
RAM:4C5F ??                       ds 1
RAM:4C60 ??                       ds 1
RAM:4C61 ??                       ds 1
RAM:4C62 ??                       ds 1
RAM:4C63 ??                       ds 1
RAM:4C64 ??                       ds 1
RAM:4C65 ??                       ds 1
RAM:4C66 ??                       ds 1
RAM:4C67 ??                       ds 1
RAM:4C68 ??                       ds 1
RAM:4C69 ??                       ds 1
RAM:4C6A ??                       ds 1
RAM:4C6B ??                       ds 1
RAM:4C6C ??                       ds 1
RAM:4C6D ??                       ds 1
RAM:4C6E ??                       ds 1
RAM:4C6F ??                       ds 1
RAM:4C70 ??                       ds 1
RAM:4C71 ??                       ds 1
RAM:4C72 ??                       ds 1
RAM:4C73 ??                       ds 1
RAM:4C74 ??                       ds 1
RAM:4C75 ??                       ds 1
RAM:4C76 ??                       ds 1
RAM:4C77 ??                       ds 1
RAM:4C78 ??                       ds 1
RAM:4C79 ??                       ds 1
RAM:4C7A ??                       ds 1
RAM:4C7B ??                       ds 1
RAM:4C7C ??                       ds 1
RAM:4C7D ??                       ds 1
RAM:4C7E ??                       ds 1
RAM:4C7F ??                       ds 1
RAM:4C80 ??                       ds 1
RAM:4C81 ??                       ds 1
RAM:4C82 ??                       ds 1
RAM:4C83 ??                       ds 1
RAM:4C84 ??                       ds 1
RAM:4C85 ??                       ds 1
RAM:4C86 ??                       ds 1
RAM:4C87 ??                       ds 1
RAM:4C88 ??                       ds 1
RAM:4C89 ??                       ds 1
RAM:4C8A ??                       ds 1
RAM:4C8B ??                       ds 1
RAM:4C8C ??                       ds 1
RAM:4C8D ??                       ds 1
RAM:4C8E ??                       ds 1
RAM:4C8F ??                       ds 1
RAM:4C90 ??                       ds 1
RAM:4C91 ??                       ds 1
RAM:4C92 ??                       ds 1
RAM:4C93 ??                       ds 1
RAM:4C94 ??                       ds 1
RAM:4C95 ??                       ds 1
RAM:4C96 ??                       ds 1
RAM:4C97 ??                       ds 1
RAM:4C98 ??                       ds 1
RAM:4C99 ??                       ds 1
RAM:4C9A ??                       ds 1
RAM:4C9B ??                       ds 1
RAM:4C9C ??                       ds 1
RAM:4C9D ??                       ds 1
RAM:4C9E ??                       ds 1
RAM:4C9F ??                       ds 1
RAM:4CA0 ??                       ds 1
RAM:4CA1 ??                       ds 1
RAM:4CA2 ??                       ds 1
RAM:4CA3 ??                       ds 1
RAM:4CA4 ??                       ds 1
RAM:4CA5 ??                       ds 1
RAM:4CA6 ??                       ds 1
RAM:4CA7 ??                       ds 1
RAM:4CA8 ??                       ds 1
RAM:4CA9 ??                       ds 1
RAM:4CAA ??                       ds 1
RAM:4CAB ??                       ds 1
RAM:4CAC ??                       ds 1
RAM:4CAD ??                       ds 1
RAM:4CAE ??                       ds 1
RAM:4CAF ??                       ds 1
RAM:4CB0 ??                       ds 1
RAM:4CB1 ??                       ds 1
RAM:4CB2 ??                       ds 1
RAM:4CB3 ??                       ds 1
RAM:4CB4 ??                       ds 1
RAM:4CB5 ??                       ds 1
RAM:4CB6 ??                       ds 1
RAM:4CB7 ??                       ds 1
RAM:4CB8 ??                       ds 1
RAM:4CB9 ??                       ds 1
RAM:4CBA ??                       ds 1
RAM:4CBB ??                       ds 1
RAM:4CBC ??                       ds 1
RAM:4CBD ??                       ds 1
RAM:4CBE ??                       ds 1
RAM:4CBF ??                       ds 1
RAM:4CC0 ??                       ds 1
RAM:4CC1 ??                       ds 1
RAM:4CC2 ??                       ds 1
RAM:4CC3 ??                       ds 1
RAM:4CC4 ??                       ds 1
RAM:4CC5 ??                       ds 1
RAM:4CC6 ??                       ds 1
RAM:4CC7 ??                       ds 1
RAM:4CC8 ??                       ds 1
RAM:4CC9 ??                       ds 1
RAM:4CCA ??                       ds 1
RAM:4CCB ??                       ds 1
RAM:4CCC ??                       ds 1
RAM:4CCD ??                       ds 1
RAM:4CCE ??                       ds 1
RAM:4CCF ??                       ds 1
RAM:4CD0 ??                       ds 1
RAM:4CD1 ??                       ds 1
RAM:4CD2 ??                       ds 1
RAM:4CD3 ??                       ds 1
RAM:4CD4 ??                       ds 1
RAM:4CD5 ??                       ds 1
RAM:4CD6 ??                       ds 1
RAM:4CD7 ??                       ds 1
RAM:4CD8 ??                       ds 1
RAM:4CD9 ??                       ds 1
RAM:4CDA ??                       ds 1
RAM:4CDB ??                       ds 1
RAM:4CDC ??                       ds 1
RAM:4CDD ??                       ds 1
RAM:4CDE ??                       ds 1
RAM:4CDF ??                       ds 1
RAM:4CE0 ??                       ds 1
RAM:4CE1 ??                       ds 1
RAM:4CE2 ??                       ds 1
RAM:4CE3 ??                       ds 1
RAM:4CE4 ??                       ds 1
RAM:4CE5 ??                       ds 1
RAM:4CE6 ??                       ds 1
RAM:4CE7 ??                       ds 1
RAM:4CE8 ??                       ds 1
RAM:4CE9 ??                       ds 1
RAM:4CEA ??                       ds 1
RAM:4CEB ??                       ds 1
RAM:4CEC ??                       ds 1
RAM:4CED ??                       ds 1
RAM:4CEE ??                       ds 1
RAM:4CEF ??                       ds 1
RAM:4CF0 ??                       ds 1
RAM:4CF1 ??                       ds 1
RAM:4CF2 ??                       ds 1
RAM:4CF3 ??                       ds 1
RAM:4CF4 ??                       ds 1
RAM:4CF5 ??                       ds 1
RAM:4CF6 ??                       ds 1
RAM:4CF7 ??                       ds 1
RAM:4CF8 ??                       ds 1
RAM:4CF9 ??                       ds 1
RAM:4CFA ??                       ds 1
RAM:4CFB ??                       ds 1
RAM:4CFC ??                       ds 1
RAM:4CFD ??                       ds 1
RAM:4CFE ??                       ds 1
RAM:4CFF ??                       ds 1
RAM:4D00 ??                       ds 1
RAM:4D01 ??                       ds 1
RAM:4D02 ??                       ds 1
RAM:4D03 ??                       ds 1
RAM:4D04 ??                       ds 1
RAM:4D05 ??                       ds 1
RAM:4D06 ??                       ds 1
RAM:4D07 ??                       ds 1
RAM:4D08 ??                       ds 1
RAM:4D09 ??                       ds 1
RAM:4D0A ??                       ds 1
RAM:4D0B ??                       ds 1
RAM:4D0C ??                       ds 1
RAM:4D0D ??                       ds 1
RAM:4D0E ??                       ds 1
RAM:4D0F ??                       ds 1
RAM:4D10 ??                       ds 1
RAM:4D11 ??                       ds 1
RAM:4D12 ??                       ds 1
RAM:4D13 ??                       ds 1
RAM:4D14 ??                       ds 1
RAM:4D15 ??                       ds 1
RAM:4D16 ??                       ds 1
RAM:4D17 ??                       ds 1
RAM:4D18 ??                       ds 1
RAM:4D19 ??                       ds 1
RAM:4D1A ??                       ds 1
RAM:4D1B ??                       ds 1
RAM:4D1C ??                       ds 1
RAM:4D1D ??                       ds 1
RAM:4D1E ??                       ds 1
RAM:4D1F ??                       ds 1
RAM:4D20 ??                       ds 1
RAM:4D21 ??                       ds 1
RAM:4D22 ??                       ds 1
RAM:4D23 ??                       ds 1
RAM:4D24 ??                       ds 1
RAM:4D25 ??                       ds 1
RAM:4D26 ??                       ds 1
RAM:4D27 ??                       ds 1
RAM:4D28 ??                       ds 1
RAM:4D29 ??                       ds 1
RAM:4D2A ??                       ds 1
RAM:4D2B ??                       ds 1
RAM:4D2C ??                       ds 1
RAM:4D2D ??                       ds 1
RAM:4D2E ??                       ds 1
RAM:4D2F ??                       ds 1
RAM:4D30 ??                       ds 1
RAM:4D31 ??                       ds 1
RAM:4D32 ??                       ds 1
RAM:4D33 ??                       ds 1
RAM:4D34 ??                       ds 1
RAM:4D35 ??                       ds 1
RAM:4D36 ??                       ds 1
RAM:4D37 ??                       ds 1
RAM:4D38 ??                       ds 1
RAM:4D39 ??                       ds 1
RAM:4D3A ??                       ds 1
RAM:4D3B ??                       ds 1
RAM:4D3C ??                       ds 1
RAM:4D3D ??                       ds 1
RAM:4D3E ??                       ds 1
RAM:4D3F ??                       ds 1
RAM:4D40 ??                       ds 1
RAM:4D41 ??                       ds 1
RAM:4D42 ??                       ds 1
RAM:4D43 ??                       ds 1
RAM:4D44 ??                       ds 1
RAM:4D45 ??                       ds 1
RAM:4D46 ??                       ds 1
RAM:4D47 ??                       ds 1
RAM:4D48 ??                       ds 1
RAM:4D49 ??                       ds 1
RAM:4D4A ??                       ds 1
RAM:4D4B ??                       ds 1
RAM:4D4C ??                       ds 1
RAM:4D4D ??                       ds 1
RAM:4D4E ??                       ds 1
RAM:4D4F ??                       ds 1
RAM:4D50 ??                       ds 1
RAM:4D51 ??                       ds 1
RAM:4D52 ??                       ds 1
RAM:4D53 ??                       ds 1
RAM:4D54 ??                       ds 1
RAM:4D55 ??                       ds 1
RAM:4D56 ??                       ds 1
RAM:4D57 ??                       ds 1
RAM:4D58 ??                       ds 1
RAM:4D59 ??                       ds 1
RAM:4D5A ??                       ds 1
RAM:4D5B ??                       ds 1
RAM:4D5C ??                       ds 1
RAM:4D5D ??                       ds 1
RAM:4D5E ??                       ds 1
RAM:4D5F ??                       ds 1
RAM:4D60 ??                       ds 1
RAM:4D61 ??                       ds 1
RAM:4D62 ??                       ds 1
RAM:4D63 ??                       ds 1
RAM:4D64 ??                       ds 1
RAM:4D65 ??                       ds 1
RAM:4D66 ??                       ds 1
RAM:4D67 ??                       ds 1
RAM:4D68 ??                       ds 1
RAM:4D69 ??                       ds 1
RAM:4D6A ??                       ds 1
RAM:4D6B ??                       ds 1
RAM:4D6C ??                       ds 1
RAM:4D6D ??                       ds 1
RAM:4D6E ??                       ds 1
RAM:4D6F ??                       ds 1
RAM:4D70 ??                       ds 1
RAM:4D71 ??                       ds 1
RAM:4D72 ??                       ds 1
RAM:4D73 ??                       ds 1
RAM:4D74 ??                       ds 1
RAM:4D75 ??                       ds 1
RAM:4D76 ??                       ds 1
RAM:4D77 ??                       ds 1
RAM:4D78 ??                       ds 1
RAM:4D79 ??                       ds 1
RAM:4D7A ??                       ds 1
RAM:4D7B ??                       ds 1
RAM:4D7C ??                       ds 1
RAM:4D7D ??                       ds 1
RAM:4D7E ??                       ds 1
RAM:4D7F ??                       ds 1
RAM:4D80 ??                       ds 1
RAM:4D81 ??                       ds 1
RAM:4D82 ??                       ds 1
RAM:4D83 ??                       ds 1
RAM:4D84 ??                       ds 1
RAM:4D85 ??                       ds 1
RAM:4D86 ??                       ds 1
RAM:4D87 ??                       ds 1
RAM:4D88 ??                       ds 1
RAM:4D89 ??                       ds 1
RAM:4D8A ??                       ds 1
RAM:4D8B ??                       ds 1
RAM:4D8C ??                       ds 1
RAM:4D8D ??                       ds 1
RAM:4D8E ??                       ds 1
RAM:4D8F ??                       ds 1
RAM:4D90 ??                       ds 1
RAM:4D91 ??                       ds 1
RAM:4D92 ??                       ds 1
RAM:4D93 ??                       ds 1
RAM:4D94 ??                       ds 1
RAM:4D95 ??                       ds 1
RAM:4D96 ??                       ds 1
RAM:4D97 ??                       ds 1
RAM:4D98 ??                       ds 1
RAM:4D99 ??                       ds 1
RAM:4D9A ??                       ds 1
RAM:4D9B ??                       ds 1
RAM:4D9C ??                       ds 1
RAM:4D9D ??                       ds 1
RAM:4D9E ??                       ds 1
RAM:4D9F ??                       ds 1
RAM:4DA0 ??                       ds 1
RAM:4DA1 ??                       ds 1
RAM:4DA2 ??                       ds 1
RAM:4DA3 ??                       ds 1
RAM:4DA4 ??                       ds 1
RAM:4DA5 ??                       ds 1
RAM:4DA6 ??                       ds 1
RAM:4DA7 ??                       ds 1
RAM:4DA8 ??                       ds 1
RAM:4DA9 ??                       ds 1
RAM:4DAA ??                       ds 1
RAM:4DAB ??                       ds 1
RAM:4DAC ??                       ds 1
RAM:4DAD ??                       ds 1
RAM:4DAE ??                       ds 1
RAM:4DAF ??                       ds 1
RAM:4DB0 ??                       ds 1
RAM:4DB1 ??                       ds 1
RAM:4DB2 ??                       ds 1
RAM:4DB3 ??                       ds 1
RAM:4DB4 ??                       ds 1
RAM:4DB5 ??                       ds 1
RAM:4DB6 ??                       ds 1
RAM:4DB7 ??                       ds 1
RAM:4DB8 ??                       ds 1
RAM:4DB9 ??                       ds 1
RAM:4DBA ??                       ds 1
RAM:4DBB ??                       ds 1
RAM:4DBC ??                       ds 1
RAM:4DBD ??                       ds 1
RAM:4DBE ??                       ds 1
RAM:4DBF ??                       ds 1
RAM:4DC0 ??                       ds 1
RAM:4DC1 ??                       ds 1
RAM:4DC2 ??                       ds 1
RAM:4DC3 ??                       ds 1
RAM:4DC4 ??                       ds 1
RAM:4DC5 ??                       ds 1
RAM:4DC6 ??                       ds 1
RAM:4DC7 ??                       ds 1
RAM:4DC8 ??                       ds 1
RAM:4DC9 ??                       ds 1
RAM:4DCA ??                       ds 1
RAM:4DCB ??                       ds 1
RAM:4DCC ??                       ds 1
RAM:4DCD ??                       ds 1
RAM:4DCE ??                       ds 1
RAM:4DCF ??                       ds 1
RAM:4DD0 ??                       ds 1
RAM:4DD1 ??                       ds 1
RAM:4DD2 ??                       ds 1
RAM:4DD3 ??                       ds 1
RAM:4DD4 ??                       ds 1
RAM:4DD5 ??                       ds 1
RAM:4DD6 ??                       ds 1
RAM:4DD7 ??                       ds 1
RAM:4DD8 ??                       ds 1
RAM:4DD9 ??                       ds 1
RAM:4DDA ??                       ds 1
RAM:4DDB ??                       ds 1
RAM:4DDC ??                       ds 1
RAM:4DDD ??                       ds 1
RAM:4DDE ??                       ds 1
RAM:4DDF ??                       ds 1
RAM:4DE0 ??                       ds 1
RAM:4DE1 ??                       ds 1
RAM:4DE2 ??                       ds 1
RAM:4DE3 ??                       ds 1
RAM:4DE4 ??                       ds 1
RAM:4DE5 ??                       ds 1
RAM:4DE6 ??                       ds 1
RAM:4DE7 ??                       ds 1
RAM:4DE8 ??                       ds 1
RAM:4DE9 ??                       ds 1
RAM:4DEA ??                       ds 1
RAM:4DEB ??                       ds 1
RAM:4DEC ??                       ds 1
RAM:4DED ??                       ds 1
RAM:4DEE ??                       ds 1
RAM:4DEF ??                       ds 1
RAM:4DF0 ??                       ds 1
RAM:4DF1 ??                       ds 1
RAM:4DF2 ??                       ds 1
RAM:4DF3 ??                       ds 1
RAM:4DF4 ??                       ds 1
RAM:4DF5 ??                       ds 1
RAM:4DF6 ??                       ds 1
RAM:4DF7 ??                       ds 1
RAM:4DF8 ??                       ds 1
RAM:4DF9 ??                       ds 1
RAM:4DFA ??                       ds 1
RAM:4DFB ??                       ds 1
RAM:4DFC ??                       ds 1
RAM:4DFD ??                       ds 1
RAM:4DFE ??                       ds 1
RAM:4DFF ??                       ds 1
RAM:4E00 ??                       ds 1
RAM:4E01 ??                       ds 1
RAM:4E02 ??                       ds 1
RAM:4E03 ??                       ds 1
RAM:4E04 ??                       ds 1
RAM:4E05 ??                       ds 1
RAM:4E06 ??                       ds 1
RAM:4E07 ??                       ds 1
RAM:4E08 ??                       ds 1
RAM:4E09 ??                       ds 1
RAM:4E0A ??                       ds 1
RAM:4E0B ??                       ds 1
RAM:4E0C ??                       ds 1
RAM:4E0D ??                       ds 1
RAM:4E0E ??                       ds 1
RAM:4E0F ??                       ds 1
RAM:4E10 ??                       ds 1
RAM:4E11 ??                       ds 1
RAM:4E12 ??                       ds 1
RAM:4E13 ??                       ds 1
RAM:4E14 ??                       ds 1
RAM:4E15 ??                       ds 1
RAM:4E16 ??                       ds 1
RAM:4E17 ??                       ds 1
RAM:4E18 ??                       ds 1
RAM:4E19 ??                       ds 1
RAM:4E1A ??                       ds 1
RAM:4E1B ??                       ds 1
RAM:4E1C ??                       ds 1
RAM:4E1D ??                       ds 1
RAM:4E1E ??                       ds 1
RAM:4E1F ??                       ds 1
RAM:4E20 ??                       ds 1
RAM:4E21 ??                       ds 1
RAM:4E22 ??                       ds 1
RAM:4E23 ??                       ds 1
RAM:4E24 ??                       ds 1
RAM:4E25 ??                       ds 1
RAM:4E26 ??                       ds 1
RAM:4E27 ??                       ds 1
RAM:4E28 ??                       ds 1
RAM:4E29 ??                       ds 1
RAM:4E2A ??                       ds 1
RAM:4E2B ??                       ds 1
RAM:4E2C ??                       ds 1
RAM:4E2D ??                       ds 1
RAM:4E2E ??                       ds 1
RAM:4E2F ??                       ds 1
RAM:4E30 ??                       ds 1
RAM:4E31 ??                       ds 1
RAM:4E32 ??                       ds 1
RAM:4E33 ??                       ds 1
RAM:4E34 ??                       ds 1
RAM:4E35 ??                       ds 1
RAM:4E36 ??                       ds 1
RAM:4E37 ??                       ds 1
RAM:4E38 ??                       ds 1
RAM:4E39 ??                       ds 1
RAM:4E3A ??                       ds 1
RAM:4E3B ??                       ds 1
RAM:4E3C ??                       ds 1
RAM:4E3D ??                       ds 1
RAM:4E3E ??                       ds 1
RAM:4E3F ??                       ds 1
RAM:4E40 ??                       ds 1
RAM:4E41 ??                       ds 1
RAM:4E42 ??                       ds 1
RAM:4E43 ??                       ds 1
RAM:4E44 ??                       ds 1
RAM:4E45 ??                       ds 1
RAM:4E46 ??                       ds 1
RAM:4E47 ??                       ds 1
RAM:4E48 ??                       ds 1
RAM:4E49 ??                       ds 1
RAM:4E4A ??                       ds 1
RAM:4E4B ??                       ds 1
RAM:4E4C ??                       ds 1
RAM:4E4D ??                       ds 1
RAM:4E4E ??                       ds 1
RAM:4E4F ??                       ds 1
RAM:4E50 ??                       ds 1
RAM:4E51 ??                       ds 1
RAM:4E52 ??                       ds 1
RAM:4E53 ??                       ds 1
RAM:4E54 ??                       ds 1
RAM:4E55 ??                       ds 1
RAM:4E56 ??                       ds 1
RAM:4E57 ??                       ds 1
RAM:4E58 ??                       ds 1
RAM:4E59 ??                       ds 1
RAM:4E5A ??                       ds 1
RAM:4E5B ??                       ds 1
RAM:4E5C ??                       ds 1
RAM:4E5D ??                       ds 1
RAM:4E5E ??                       ds 1
RAM:4E5F ??                       ds 1
RAM:4E60 ??                       ds 1
RAM:4E61 ??                       ds 1
RAM:4E62 ??                       ds 1
RAM:4E63 ??                       ds 1
RAM:4E64 ??                       ds 1
RAM:4E65 ??                       ds 1
RAM:4E66 ??                       ds 1
RAM:4E67 ??                       ds 1
RAM:4E68 ??                       ds 1
RAM:4E69 ??                       ds 1
RAM:4E6A ??                       ds 1
RAM:4E6B ??                       ds 1
RAM:4E6C ??                       ds 1
RAM:4E6D ??                       ds 1
RAM:4E6E ??                       ds 1
RAM:4E6F ??                       ds 1
RAM:4E70 ??                       ds 1
RAM:4E71 ??                       ds 1
RAM:4E72 ??                       ds 1
RAM:4E73 ??                       ds 1
RAM:4E74 ??                       ds 1
RAM:4E75 ??                       ds 1
RAM:4E76 ??                       ds 1
RAM:4E77 ??                       ds 1
RAM:4E78 ??                       ds 1
RAM:4E79 ??                       ds 1
RAM:4E7A ??                       ds 1
RAM:4E7B ??                       ds 1
RAM:4E7C ??                       ds 1
RAM:4E7D ??                       ds 1
RAM:4E7E ??                       ds 1
RAM:4E7F ??                       ds 1
RAM:4E80 ??                       ds 1
RAM:4E81 ??                       ds 1
RAM:4E82 ??                       ds 1
RAM:4E83 ??                       ds 1
RAM:4E84 ??                       ds 1
RAM:4E85 ??                       ds 1
RAM:4E86 ??                       ds 1
RAM:4E87 ??                       ds 1
RAM:4E88 ??                       ds 1
RAM:4E89 ??                       ds 1
RAM:4E8A ??                       ds 1
RAM:4E8B ??                       ds 1
RAM:4E8C ??                       ds 1
RAM:4E8D ??                       ds 1
RAM:4E8E ??                       ds 1
RAM:4E8F ??                       ds 1
RAM:4E90 ??                       ds 1
RAM:4E91 ??                       ds 1
RAM:4E92 ??                       ds 1
RAM:4E93 ??                       ds 1
RAM:4E94 ??                       ds 1
RAM:4E95 ??                       ds 1
RAM:4E96 ??                       ds 1
RAM:4E97 ??                       ds 1
RAM:4E98 ??                       ds 1
RAM:4E99 ??                       ds 1
RAM:4E9A ??                       ds 1
RAM:4E9B ??                       ds 1
RAM:4E9C ??                       ds 1
RAM:4E9D ??                       ds 1
RAM:4E9E ??                       ds 1
RAM:4E9F ??                       ds 1
RAM:4EA0 ??                       ds 1
RAM:4EA1 ??                       ds 1
RAM:4EA2 ??                       ds 1
RAM:4EA3 ??                       ds 1
RAM:4EA4 ??                       ds 1
RAM:4EA5 ??                       ds 1
RAM:4EA6 ??                       ds 1
RAM:4EA7 ??                       ds 1
RAM:4EA8 ??                       ds 1
RAM:4EA9 ??                       ds 1
RAM:4EAA ??                       ds 1
RAM:4EAB ??                       ds 1
RAM:4EAC ??                       ds 1
RAM:4EAD ??                       ds 1
RAM:4EAE ??                       ds 1
RAM:4EAF ??                       ds 1
RAM:4EB0 ??                       ds 1
RAM:4EB1 ??                       ds 1
RAM:4EB2 ??                       ds 1
RAM:4EB3 ??                       ds 1
RAM:4EB4 ??                       ds 1
RAM:4EB5 ??                       ds 1
RAM:4EB6 ??                       ds 1
RAM:4EB7 ??                       ds 1
RAM:4EB8 ??                       ds 1
RAM:4EB9 ??                       ds 1
RAM:4EBA ??                       ds 1
RAM:4EBB ??                       ds 1
RAM:4EBC ??                       ds 1
RAM:4EBD ??                       ds 1
RAM:4EBE ??                       ds 1
RAM:4EBF ??                       ds 1
RAM:4EC0 ??                       ds 1
RAM:4EC1 ??                       ds 1
RAM:4EC2 ??                       ds 1
RAM:4EC3 ??                       ds 1
RAM:4EC4 ??                       ds 1
RAM:4EC5 ??                       ds 1
RAM:4EC6 ??                       ds 1
RAM:4EC7 ??                       ds 1
RAM:4EC8 ??                       ds 1
RAM:4EC9 ??                       ds 1
RAM:4ECA ??                       ds 1
RAM:4ECB ??                       ds 1
RAM:4ECC ??                       ds 1
RAM:4ECD ??                       ds 1
RAM:4ECE ??                       ds 1
RAM:4ECF ??                       ds 1
RAM:4ED0 ??                       ds 1
RAM:4ED1 ??                       ds 1
RAM:4ED2 ??                       ds 1
RAM:4ED3 ??                       ds 1
RAM:4ED4 ??                       ds 1
RAM:4ED5 ??                       ds 1
RAM:4ED6 ??                       ds 1
RAM:4ED7 ??                       ds 1
RAM:4ED8 ??                       ds 1
RAM:4ED9 ??                       ds 1
RAM:4EDA ??                       ds 1
RAM:4EDB ??                       ds 1
RAM:4EDC ??                       ds 1
RAM:4EDD ??                       ds 1
RAM:4EDE ??                       ds 1
RAM:4EDF ??                       ds 1
RAM:4EE0 ??                       ds 1
RAM:4EE1 ??                       ds 1
RAM:4EE2 ??                       ds 1
RAM:4EE3 ??                       ds 1
RAM:4EE4 ??                       ds 1
RAM:4EE5 ??                       ds 1
RAM:4EE6 ??                       ds 1
RAM:4EE7 ??                       ds 1
RAM:4EE8 ??                       ds 1
RAM:4EE9 ??                       ds 1
RAM:4EEA ??                       ds 1
RAM:4EEB ??                       ds 1
RAM:4EEC ??                       ds 1
RAM:4EED ??                       ds 1
RAM:4EEE ??                       ds 1
RAM:4EEF ??                       ds 1
RAM:4EF0 ??                       ds 1
RAM:4EF1 ??                       ds 1
RAM:4EF2 ??                       ds 1
RAM:4EF3 ??                       ds 1
RAM:4EF4 ??                       ds 1
RAM:4EF5 ??                       ds 1
RAM:4EF6 ??                       ds 1
RAM:4EF7 ??                       ds 1
RAM:4EF8 ??                       ds 1
RAM:4EF9 ??                       ds 1
RAM:4EFA ??                       ds 1
RAM:4EFB ??                       ds 1
RAM:4EFC ??                       ds 1
RAM:4EFD ??                       ds 1
RAM:4EFE ??                       ds 1
RAM:4EFF ??                       ds 1
RAM:4F00 ??                       ds 1
RAM:4F01 ??                       ds 1
RAM:4F02 ??                       ds 1
RAM:4F03 ??                       ds 1
RAM:4F04 ??                       ds 1
RAM:4F05 ??                       ds 1
RAM:4F06 ??                       ds 1
RAM:4F07 ??                       ds 1
RAM:4F08 ??                       ds 1
RAM:4F09 ??                       ds 1
RAM:4F0A ??                       ds 1
RAM:4F0B ??                       ds 1
RAM:4F0C ??                       ds 1
RAM:4F0D ??                       ds 1
RAM:4F0E ??                       ds 1
RAM:4F0F ??                       ds 1
RAM:4F10 ??                       ds 1
RAM:4F11 ??                       ds 1
RAM:4F12 ??                       ds 1
RAM:4F13 ??                       ds 1
RAM:4F14 ??                       ds 1
RAM:4F15 ??                       ds 1
RAM:4F16 ??                       ds 1
RAM:4F17 ??                       ds 1
RAM:4F18 ??                       ds 1
RAM:4F19 ??                       ds 1
RAM:4F1A ??                       ds 1
RAM:4F1B ??                       ds 1
RAM:4F1C ??                       ds 1
RAM:4F1D ??                       ds 1
RAM:4F1E ??                       ds 1
RAM:4F1F ??                       ds 1
RAM:4F20 ??                       ds 1
RAM:4F21 ??                       ds 1
RAM:4F22 ??                       ds 1
RAM:4F23 ??                       ds 1
RAM:4F24 ??                       ds 1
RAM:4F25 ??                       ds 1
RAM:4F26 ??                       ds 1
RAM:4F27 ??                       ds 1
RAM:4F28 ??                       ds 1
RAM:4F29 ??                       ds 1
RAM:4F2A ??                       ds 1
RAM:4F2B ??                       ds 1
RAM:4F2C ??                       ds 1
RAM:4F2D ??                       ds 1
RAM:4F2E ??                       ds 1
RAM:4F2F ??                       ds 1
RAM:4F30 ??                       ds 1
RAM:4F31 ??                       ds 1
RAM:4F32 ??                       ds 1
RAM:4F33 ??                       ds 1
RAM:4F34 ??                       ds 1
RAM:4F35 ??                       ds 1
RAM:4F36 ??                       ds 1
RAM:4F37 ??                       ds 1
RAM:4F38 ??                       ds 1
RAM:4F39 ??                       ds 1
RAM:4F3A ??                       ds 1
RAM:4F3B ??                       ds 1
RAM:4F3C ??                       ds 1
RAM:4F3D ??                       ds 1
RAM:4F3E ??                       ds 1
RAM:4F3F ??                       ds 1
RAM:4F40 ??                       ds 1
RAM:4F41 ??                       ds 1
RAM:4F42 ??                       ds 1
RAM:4F43 ??                       ds 1
RAM:4F44 ??                       ds 1
RAM:4F45 ??                       ds 1
RAM:4F46 ??                       ds 1
RAM:4F47 ??                       ds 1
RAM:4F48 ??                       ds 1
RAM:4F49 ??                       ds 1
RAM:4F4A ??                       ds 1
RAM:4F4B ??                       ds 1
RAM:4F4C ??                       ds 1
RAM:4F4D ??                       ds 1
RAM:4F4E ??                       ds 1
RAM:4F4F ??                       ds 1
RAM:4F50 ??                       ds 1
RAM:4F51 ??                       ds 1
RAM:4F52 ??                       ds 1
RAM:4F53 ??                       ds 1
RAM:4F54 ??                       ds 1
RAM:4F55 ??                       ds 1
RAM:4F56 ??                       ds 1
RAM:4F57 ??                       ds 1
RAM:4F58 ??                       ds 1
RAM:4F59 ??                       ds 1
RAM:4F5A ??                       ds 1
RAM:4F5B ??                       ds 1
RAM:4F5C ??                       ds 1
RAM:4F5D ??                       ds 1
RAM:4F5E ??                       ds 1
RAM:4F5F ??                       ds 1
RAM:4F60 ??                       ds 1
RAM:4F61 ??                       ds 1
RAM:4F62 ??                       ds 1
RAM:4F63 ??                       ds 1
RAM:4F64 ??                       ds 1
RAM:4F65 ??                       ds 1
RAM:4F66 ??                       ds 1
RAM:4F67 ??                       ds 1
RAM:4F68 ??                       ds 1
RAM:4F69 ??                       ds 1
RAM:4F6A ??                       ds 1
RAM:4F6B ??                       ds 1
RAM:4F6C ??                       ds 1
RAM:4F6D ??                       ds 1
RAM:4F6E ??                       ds 1
RAM:4F6F ??                       ds 1
RAM:4F70 ??                       ds 1
RAM:4F71 ??                       ds 1
RAM:4F72 ??                       ds 1
RAM:4F73 ??                       ds 1
RAM:4F74 ??                       ds 1
RAM:4F75 ??                       ds 1
RAM:4F76 ??                       ds 1
RAM:4F77 ??                       ds 1
RAM:4F78 ??                       ds 1
RAM:4F79 ??                       ds 1
RAM:4F7A ??                       ds 1
RAM:4F7B ??                       ds 1
RAM:4F7C ??                       ds 1
RAM:4F7D ??                       ds 1
RAM:4F7E ??                       ds 1
RAM:4F7F ??                       ds 1
RAM:4F80 ??                       ds 1
RAM:4F81 ??                       ds 1
RAM:4F82 ??                       ds 1
RAM:4F83 ??                       ds 1
RAM:4F84 ??                       ds 1
RAM:4F85 ??                       ds 1
RAM:4F86 ??                       ds 1
RAM:4F87 ??                       ds 1
RAM:4F88 ??                       ds 1
RAM:4F89 ??                       ds 1
RAM:4F8A ??                       ds 1
RAM:4F8B ??                       ds 1
RAM:4F8C ??                       ds 1
RAM:4F8D ??                       ds 1
RAM:4F8E ??                       ds 1
RAM:4F8F ??                       ds 1
RAM:4F90 ??                       ds 1
RAM:4F91 ??                       ds 1
RAM:4F92 ??                       ds 1
RAM:4F93 ??                       ds 1
RAM:4F94 ??                       ds 1
RAM:4F95 ??                       ds 1
RAM:4F96 ??                       ds 1
RAM:4F97 ??                       ds 1
RAM:4F98 ??                       ds 1
RAM:4F99 ??                       ds 1
RAM:4F9A ??                       ds 1
RAM:4F9B ??                       ds 1
RAM:4F9C ??                       ds 1
RAM:4F9D ??                       ds 1
RAM:4F9E ??                       ds 1
RAM:4F9F ??                       ds 1
RAM:4FA0 ??                       ds 1
RAM:4FA1 ??                       ds 1
RAM:4FA2 ??                       ds 1
RAM:4FA3 ??                       ds 1
RAM:4FA4 ??                       ds 1
RAM:4FA5 ??                       ds 1
RAM:4FA6 ??                       ds 1
RAM:4FA7 ??                       ds 1
RAM:4FA8 ??                       ds 1
RAM:4FA9 ??                       ds 1
RAM:4FAA ??                       ds 1
RAM:4FAB ??                       ds 1
RAM:4FAC ??                       ds 1
RAM:4FAD ??                       ds 1
RAM:4FAE ??                       ds 1
RAM:4FAF ??                       ds 1
RAM:4FB0 ??                       ds 1
RAM:4FB1 ??                       ds 1
RAM:4FB2 ??                       ds 1
RAM:4FB3 ??                       ds 1
RAM:4FB4 ??                       ds 1
RAM:4FB5 ??                       ds 1
RAM:4FB6 ??                       ds 1
RAM:4FB7 ??                       ds 1
RAM:4FB8 ??                       ds 1
RAM:4FB9 ??                       ds 1
RAM:4FBA ??                       ds 1
RAM:4FBB ??                       ds 1
RAM:4FBC ??                       ds 1
RAM:4FBD ??                       ds 1
RAM:4FBE ??                       ds 1
RAM:4FBF ??                       ds 1
RAM:4FC0 ??                       ds 1
RAM:4FC1 ??                       ds 1
RAM:4FC2 ??                       ds 1
RAM:4FC3 ??                       ds 1
RAM:4FC4 ??                       ds 1
RAM:4FC5 ??                       ds 1
RAM:4FC6 ??                       ds 1
RAM:4FC7 ??                       ds 1
RAM:4FC8 ??                       ds 1
RAM:4FC9 ??                       ds 1
RAM:4FCA ??                       ds 1
RAM:4FCB ??                       ds 1
RAM:4FCC ??                       ds 1
RAM:4FCD ??                       ds 1
RAM:4FCE ??                       ds 1
RAM:4FCF ??                       ds 1
RAM:4FD0 ??                       ds 1
RAM:4FD1 ??                       ds 1
RAM:4FD2 ??                       ds 1
RAM:4FD3 ??                       ds 1
RAM:4FD4 ??                       ds 1
RAM:4FD5 ??                       ds 1
RAM:4FD6 ??                       ds 1
RAM:4FD7 ??                       ds 1
RAM:4FD8 ??                       ds 1
RAM:4FD9 ??                       ds 1
RAM:4FDA ??                       ds 1
RAM:4FDB ??                       ds 1
RAM:4FDC ??                       ds 1
RAM:4FDD ??                       ds 1
RAM:4FDE ??                       ds 1
RAM:4FDF ??                       ds 1
RAM:4FE0 ??                       ds 1
RAM:4FE1 ??                       ds 1
RAM:4FE2 ??                       ds 1
RAM:4FE3 ??                       ds 1
RAM:4FE4 ??                       ds 1
RAM:4FE5 ??                       ds 1
RAM:4FE6 ??                       ds 1
RAM:4FE7 ??                       ds 1
RAM:4FE8 ??                       ds 1
RAM:4FE9 ??                       ds 1
RAM:4FEA ??                       ds 1
RAM:4FEB ??                       ds 1
RAM:4FEC ??                       ds 1
RAM:4FED ??                       ds 1
RAM:4FEE ??                       ds 1
RAM:4FEF ??                       ds 1
RAM:4FF0 ??                       ds 1
RAM:4FF1 ??                       ds 1
RAM:4FF2 ??                       ds 1
RAM:4FF3 ??                       ds 1
RAM:4FF4 ??                       ds 1
RAM:4FF5 ??                       ds 1
RAM:4FF6 ??                       ds 1
RAM:4FF7 ??                       ds 1
RAM:4FF8 ??                       ds 1
RAM:4FF9 ??                       ds 1
RAM:4FFA ??                       ds 1
RAM:4FFB ??                       ds 1
RAM:4FFC ??                       ds 1
RAM:4FFD ??                       ds 1
RAM:4FFE ??                       ds 1
RAM:4FFF ??                       ds 1
RAM:5000 ??                       ds 1
RAM:5001 ??                       ds 1
RAM:5002 ??                       ds 1
RAM:5003 ??                       ds 1
RAM:5004 ??                       ds 1
RAM:5005 ??                       ds 1
RAM:5006 ??                       ds 1
RAM:5007 ??                       ds 1
RAM:5008 ??                       ds 1
RAM:5009 ??                       ds 1
RAM:500A ??                       ds 1
RAM:500B ??                       ds 1
RAM:500C ??                       ds 1
RAM:500D ??                       ds 1
RAM:500E ??                       ds 1
RAM:500F ??                       ds 1
RAM:5010 ??                       ds 1
RAM:5011 ??                       ds 1
RAM:5012 ??                       ds 1
RAM:5013 ??                       ds 1
RAM:5014 ??                       ds 1
RAM:5015 ??                       ds 1
RAM:5016 ??                       ds 1
RAM:5017 ??                       ds 1
RAM:5018 ??                       ds 1
RAM:5019 ??                       ds 1
RAM:501A ??                       ds 1
RAM:501B ??                       ds 1
RAM:501C ??                       ds 1
RAM:501D ??                       ds 1
RAM:501E ??                       ds 1
RAM:501F ??                       ds 1
RAM:5020 ??                       ds 1
RAM:5021 ??                       ds 1
RAM:5022 ??                       ds 1
RAM:5023 ??                       ds 1
RAM:5024 ??                       ds 1
RAM:5025 ??                       ds 1
RAM:5026 ??                       ds 1
RAM:5027 ??                       ds 1
RAM:5028 ??                       ds 1
RAM:5029 ??                       ds 1
RAM:502A ??                       ds 1
RAM:502B ??                       ds 1
RAM:502C ??                       ds 1
RAM:502D ??                       ds 1
RAM:502E ??                       ds 1
RAM:502F ??                       ds 1
RAM:5030 ??                       ds 1
RAM:5031 ??                       ds 1
RAM:5032 ??                       ds 1
RAM:5033 ??                       ds 1
RAM:5034 ??                       ds 1
RAM:5035 ??                       ds 1
RAM:5036 ??                       ds 1
RAM:5037 ??                       ds 1
RAM:5038 ??                       ds 1
RAM:5039 ??                       ds 1
RAM:503A ??                       ds 1
RAM:503B ??                       ds 1
RAM:503C ??                       ds 1
RAM:503D ??                       ds 1
RAM:503E ??                       ds 1
RAM:503F ??                       ds 1
RAM:5040 ??                       ds 1
RAM:5041 ??                       ds 1
RAM:5042 ??                       ds 1
RAM:5043 ??                       ds 1
RAM:5044 ??                       ds 1
RAM:5045 ??                       ds 1
RAM:5046 ??                       ds 1
RAM:5047 ??                       ds 1
RAM:5048 ??                       ds 1
RAM:5049 ??                       ds 1
RAM:504A ??                       ds 1
RAM:504B ??                       ds 1
RAM:504C ??                       ds 1
RAM:504D ??                       ds 1
RAM:504E ??                       ds 1
RAM:504F ??                       ds 1
RAM:5050 ??                       ds 1
RAM:5051 ??                       ds 1
RAM:5052 ??                       ds 1
RAM:5053 ??                       ds 1
RAM:5054 ??                       ds 1
RAM:5055 ??                       ds 1
RAM:5056 ??                       ds 1
RAM:5057 ??                       ds 1
RAM:5058 ??                       ds 1
RAM:5059 ??                       ds 1
RAM:505A ??                       ds 1
RAM:505B ??                       ds 1
RAM:505C ??                       ds 1
RAM:505D ??                       ds 1
RAM:505E ??                       ds 1
RAM:505F ??                       ds 1
RAM:5060 ??                       ds 1
RAM:5061 ??                       ds 1
RAM:5062 ??                       ds 1
RAM:5063 ??                       ds 1
RAM:5064 ??                       ds 1
RAM:5065 ??                       ds 1
RAM:5066 ??                       ds 1
RAM:5067 ??                       ds 1
RAM:5068 ??                       ds 1
RAM:5069 ??                       ds 1
RAM:506A ??                       ds 1
RAM:506B ??                       ds 1
RAM:506C ??                       ds 1
RAM:506D ??                       ds 1
RAM:506E ??                       ds 1
RAM:506F ??                       ds 1
RAM:5070 ??                       ds 1
RAM:5071 ??                       ds 1
RAM:5072 ??                       ds 1
RAM:5073 ??                       ds 1
RAM:5074 ??                       ds 1
RAM:5075 ??                       ds 1
RAM:5076 ??                       ds 1
RAM:5077 ??                       ds 1
RAM:5078 ??                       ds 1
RAM:5079 ??                       ds 1
RAM:507A ??                       ds 1
RAM:507B ??                       ds 1
RAM:507C ??                       ds 1
RAM:507D ??                       ds 1
RAM:507E ??                       ds 1
RAM:507F ??                       ds 1
RAM:5080 ??                       ds 1
RAM:5081 ??                       ds 1
RAM:5082 ??                       ds 1
RAM:5083 ??                       ds 1
RAM:5084 ??                       ds 1
RAM:5085 ??                       ds 1
RAM:5086 ??                       ds 1
RAM:5087 ??                       ds 1
RAM:5088 ??                       ds 1
RAM:5089 ??                       ds 1
RAM:508A ??                       ds 1
RAM:508B ??                       ds 1
RAM:508C ??                       ds 1
RAM:508D ??                       ds 1
RAM:508E ??                       ds 1
RAM:508F ??                       ds 1
RAM:5090 ??                       ds 1
RAM:5091 ??                       ds 1
RAM:5092 ??                       ds 1
RAM:5093 ??                       ds 1
RAM:5094 ??                       ds 1
RAM:5095 ??                       ds 1
RAM:5096 ??                       ds 1
RAM:5097 ??                       ds 1
RAM:5098 ??                       ds 1
RAM:5099 ??                       ds 1
RAM:509A ??                       ds 1
RAM:509B ??                       ds 1
RAM:509C ??                       ds 1
RAM:509D ??                       ds 1
RAM:509E ??                       ds 1
RAM:509F ??                       ds 1
RAM:50A0 ??                       ds 1
RAM:50A1 ??                       ds 1
RAM:50A2 ??                       ds 1
RAM:50A3 ??                       ds 1
RAM:50A4 ??                       ds 1
RAM:50A5 ??                       ds 1
RAM:50A6 ??                       ds 1
RAM:50A7 ??                       ds 1
RAM:50A8 ??                       ds 1
RAM:50A9 ??                       ds 1
RAM:50AA ??                       ds 1
RAM:50AB ??                       ds 1
RAM:50AC ??                       ds 1
RAM:50AD ??                       ds 1
RAM:50AE ??                       ds 1
RAM:50AF ??                       ds 1
RAM:50B0 ??                       ds 1
RAM:50B1 ??                       ds 1
RAM:50B2 ??                       ds 1
RAM:50B3 ??                       ds 1
RAM:50B4 ??                       ds 1
RAM:50B5 ??                       ds 1
RAM:50B6 ??                       ds 1
RAM:50B7 ??                       ds 1
RAM:50B8 ??                       ds 1
RAM:50B9 ??                       ds 1
RAM:50BA ??                       ds 1
RAM:50BB ??                       ds 1
RAM:50BC ??                       ds 1
RAM:50BD ??                       ds 1
RAM:50BE ??                       ds 1
RAM:50BF ??                       ds 1
RAM:50C0 ??                       ds 1
RAM:50C1 ??                       ds 1
RAM:50C2 ??                       ds 1
RAM:50C3 ??                       ds 1
RAM:50C4 ??                       ds 1
RAM:50C5 ??                       ds 1
RAM:50C6 ??                       ds 1
RAM:50C7 ??                       ds 1
RAM:50C8 ??                       ds 1
RAM:50C9 ??                       ds 1
RAM:50CA ??                       ds 1
RAM:50CB ??                       ds 1
RAM:50CC ??                       ds 1
RAM:50CD ??                       ds 1
RAM:50CE ??                       ds 1
RAM:50CF ??                       ds 1
RAM:50D0 ??                       ds 1
RAM:50D1 ??                       ds 1
RAM:50D2 ??                       ds 1
RAM:50D3 ??                       ds 1
RAM:50D4 ??                       ds 1
RAM:50D5 ??                       ds 1
RAM:50D6 ??                       ds 1
RAM:50D7 ??                       ds 1
RAM:50D8 ??                       ds 1
RAM:50D9 ??                       ds 1
RAM:50DA ??                       ds 1
RAM:50DB ??                       ds 1
RAM:50DC ??                       ds 1
RAM:50DD ??                       ds 1
RAM:50DE ??                       ds 1
RAM:50DF ??                       ds 1
RAM:50E0 ??                       ds 1
RAM:50E1 ??                       ds 1
RAM:50E2 ??                       ds 1
RAM:50E3 ??                       ds 1
RAM:50E4 ??                       ds 1
RAM:50E5 ??                       ds 1
RAM:50E6 ??                       ds 1
RAM:50E7 ??                       ds 1
RAM:50E8 ??                       ds 1
RAM:50E9 ??                       ds 1
RAM:50EA ??                       ds 1
RAM:50EB ??                       ds 1
RAM:50EC ??                       ds 1
RAM:50ED ??                       ds 1
RAM:50EE ??                       ds 1
RAM:50EF ??                       ds 1
RAM:50F0 ??                       ds 1
RAM:50F1 ??                       ds 1
RAM:50F2 ??                       ds 1
RAM:50F3 ??                       ds 1
RAM:50F4 ??                       ds 1
RAM:50F5 ??                       ds 1
RAM:50F6 ??                       ds 1
RAM:50F7 ??                       ds 1
RAM:50F8 ??                       ds 1
RAM:50F9 ??                       ds 1
RAM:50FA ??                       ds 1
RAM:50FB ??                       ds 1
RAM:50FC ??                       ds 1
RAM:50FD ??                       ds 1
RAM:50FE ??                       ds 1
RAM:50FF ??                       ds 1
RAM:5100 ??                       ds 1
RAM:5101 ??                       ds 1
RAM:5102 ??                       ds 1
RAM:5103 ??                       ds 1
RAM:5104 ??                       ds 1
RAM:5105 ??                       ds 1
RAM:5106 ??                       ds 1
RAM:5107 ??                       ds 1
RAM:5108 ??                       ds 1
RAM:5109 ??                       ds 1
RAM:510A ??                       ds 1
RAM:510B ??                       ds 1
RAM:510C ??                       ds 1
RAM:510D ??                       ds 1
RAM:510E ??                       ds 1
RAM:510F ??                       ds 1
RAM:5110 ??                       ds 1
RAM:5111 ??                       ds 1
RAM:5112 ??                       ds 1
RAM:5113 ??                       ds 1
RAM:5114 ??                       ds 1
RAM:5115 ??                       ds 1
RAM:5116 ??                       ds 1
RAM:5117 ??                       ds 1
RAM:5118 ??                       ds 1
RAM:5119 ??                       ds 1
RAM:511A ??                       ds 1
RAM:511B ??                       ds 1
RAM:511C ??                       ds 1
RAM:511D ??                       ds 1
RAM:511E ??                       ds 1
RAM:511F ??                       ds 1
RAM:5120 ??                       ds 1
RAM:5121 ??                       ds 1
RAM:5122 ??                       ds 1
RAM:5123 ??                       ds 1
RAM:5124 ??                       ds 1
RAM:5125 ??                       ds 1
RAM:5126 ??                       ds 1
RAM:5127 ??                       ds 1
RAM:5128 ??                       ds 1
RAM:5129 ??                       ds 1
RAM:512A ??                       ds 1
RAM:512B ??                       ds 1
RAM:512C ??                       ds 1
RAM:512D ??                       ds 1
RAM:512E ??                       ds 1
RAM:512F ??                       ds 1
RAM:5130 ??                       ds 1
RAM:5131 ??                       ds 1
RAM:5132 ??                       ds 1
RAM:5133 ??                       ds 1
RAM:5134 ??                       ds 1
RAM:5135 ??                       ds 1
RAM:5136 ??                       ds 1
RAM:5137 ??                       ds 1
RAM:5138 ??                       ds 1
RAM:5139 ??                       ds 1
RAM:513A ??                       ds 1
RAM:513B ??                       ds 1
RAM:513C ??                       ds 1
RAM:513D ??                       ds 1
RAM:513E ??                       ds 1
RAM:513F ??                       ds 1
RAM:5140 ??                       ds 1
RAM:5141 ??                       ds 1
RAM:5142 ??                       ds 1
RAM:5143 ??                       ds 1
RAM:5144 ??                       ds 1
RAM:5145 ??                       ds 1
RAM:5146 ??                       ds 1
RAM:5147 ??                       ds 1
RAM:5148 ??                       ds 1
RAM:5149 ??                       ds 1
RAM:514A ??                       ds 1
RAM:514B ??                       ds 1
RAM:514C ??                       ds 1
RAM:514D ??                       ds 1
RAM:514E ??                       ds 1
RAM:514F ??                       ds 1
RAM:5150 ??                       ds 1
RAM:5151 ??                       ds 1
RAM:5152 ??                       ds 1
RAM:5153 ??                       ds 1
RAM:5154 ??                       ds 1
RAM:5155 ??                       ds 1
RAM:5156 ??                       ds 1
RAM:5157 ??                       ds 1
RAM:5158 ??                       ds 1
RAM:5159 ??                       ds 1
RAM:515A ??                       ds 1
RAM:515B ??                       ds 1
RAM:515C ??                       ds 1
RAM:515D ??                       ds 1
RAM:515E ??                       ds 1
RAM:515F ??                       ds 1
RAM:5160 ??                       ds 1
RAM:5161 ??                       ds 1
RAM:5162 ??                       ds 1
RAM:5163 ??                       ds 1
RAM:5164 ??                       ds 1
RAM:5165 ??                       ds 1
RAM:5166 ??                       ds 1
RAM:5167 ??                       ds 1
RAM:5168 ??                       ds 1
RAM:5169 ??                       ds 1
RAM:516A ??                       ds 1
RAM:516B ??                       ds 1
RAM:516C ??                       ds 1
RAM:516D ??                       ds 1
RAM:516E ??                       ds 1
RAM:516F ??                       ds 1
RAM:5170 ??                       ds 1
RAM:5171 ??                       ds 1
RAM:5172 ??                       ds 1
RAM:5173 ??                       ds 1
RAM:5174 ??                       ds 1
RAM:5175 ??                       ds 1
RAM:5176 ??                       ds 1
RAM:5177 ??                       ds 1
RAM:5178 ??                       ds 1
RAM:5179 ??                       ds 1
RAM:517A ??                       ds 1
RAM:517B ??                       ds 1
RAM:517C ??                       ds 1
RAM:517D ??                       ds 1
RAM:517E ??                       ds 1
RAM:517F ??                       ds 1
RAM:5180 ??                       ds 1
RAM:5181 ??                       ds 1
RAM:5182 ??                       ds 1
RAM:5183 ??                       ds 1
RAM:5184 ??                       ds 1
RAM:5185 ??                       ds 1
RAM:5186 ??                       ds 1
RAM:5187 ??                       ds 1
RAM:5188 ??                       ds 1
RAM:5189 ??                       ds 1
RAM:518A ??                       ds 1
RAM:518B ??                       ds 1
RAM:518C ??                       ds 1
RAM:518D ??                       ds 1
RAM:518E ??                       ds 1
RAM:518F ??                       ds 1
RAM:5190 ??                       ds 1
RAM:5191 ??                       ds 1
RAM:5192 ??                       ds 1
RAM:5193 ??                       ds 1
RAM:5194 ??                       ds 1
RAM:5195 ??                       ds 1
RAM:5196 ??                       ds 1
RAM:5197 ??                       ds 1
RAM:5198 ??                       ds 1
RAM:5199 ??                       ds 1
RAM:519A ??                       ds 1
RAM:519B ??                       ds 1
RAM:519C ??                       ds 1
RAM:519D ??                       ds 1
RAM:519E ??                       ds 1
RAM:519F ??                       ds 1
RAM:51A0 ??                       ds 1
RAM:51A1 ??                       ds 1
RAM:51A2 ??                       ds 1
RAM:51A3 ??                       ds 1
RAM:51A4 ??                       ds 1
RAM:51A5 ??                       ds 1
RAM:51A6 ??                       ds 1
RAM:51A7 ??                       ds 1
RAM:51A8 ??                       ds 1
RAM:51A9 ??                       ds 1
RAM:51AA ??                       ds 1
RAM:51AB ??                       ds 1
RAM:51AC ??                       ds 1
RAM:51AD ??                       ds 1
RAM:51AE ??                       ds 1
RAM:51AF ??                       ds 1
RAM:51B0 ??                       ds 1
RAM:51B1 ??                       ds 1
RAM:51B2 ??                       ds 1
RAM:51B3 ??                       ds 1
RAM:51B4 ??                       ds 1
RAM:51B5 ??                       ds 1
RAM:51B6 ??                       ds 1
RAM:51B7 ??                       ds 1
RAM:51B8 ??                       ds 1
RAM:51B9 ??                       ds 1
RAM:51BA ??                       ds 1
RAM:51BB ??                       ds 1
RAM:51BC ??                       ds 1
RAM:51BD ??                       ds 1
RAM:51BE ??                       ds 1
RAM:51BF ??                       ds 1
RAM:51C0 ??                       ds 1
RAM:51C1 ??                       ds 1
RAM:51C2 ??                       ds 1
RAM:51C3 ??                       ds 1
RAM:51C4 ??                       ds 1
RAM:51C5 ??                       ds 1
RAM:51C6 ??                       ds 1
RAM:51C7 ??                       ds 1
RAM:51C8 ??                       ds 1
RAM:51C9 ??                       ds 1
RAM:51CA ??                       ds 1
RAM:51CB ??                       ds 1
RAM:51CC ??                       ds 1
RAM:51CD ??                       ds 1
RAM:51CE ??                       ds 1
RAM:51CF ??                       ds 1
RAM:51D0 ??                       ds 1
RAM:51D1 ??                       ds 1
RAM:51D2 ??                       ds 1
RAM:51D3 ??                       ds 1
RAM:51D4 ??                       ds 1
RAM:51D5 ??                       ds 1
RAM:51D6 ??                       ds 1
RAM:51D7 ??                       ds 1
RAM:51D8 ??                       ds 1
RAM:51D9 ??                       ds 1
RAM:51DA ??                       ds 1
RAM:51DB ??                       ds 1
RAM:51DC ??                       ds 1
RAM:51DD ??                       ds 1
RAM:51DE ??                       ds 1
RAM:51DF ??                       ds 1
RAM:51E0 ??                       ds 1
RAM:51E1 ??                       ds 1
RAM:51E2 ??                       ds 1
RAM:51E3 ??                       ds 1
RAM:51E4 ??                       ds 1
RAM:51E5 ??                       ds 1
RAM:51E6 ??                       ds 1
RAM:51E7 ??                       ds 1
RAM:51E8 ??                       ds 1
RAM:51E9 ??                       ds 1
RAM:51EA ??                       ds 1
RAM:51EB ??                       ds 1
RAM:51EC ??                       ds 1
RAM:51ED ??                       ds 1
RAM:51EE ??                       ds 1
RAM:51EF ??                       ds 1
RAM:51F0 ??                       ds 1
RAM:51F1 ??                       ds 1
RAM:51F2 ??                       ds 1
RAM:51F3 ??                       ds 1
RAM:51F4 ??                       ds 1
RAM:51F5 ??                       ds 1
RAM:51F6 ??                       ds 1
RAM:51F7 ??                       ds 1
RAM:51F8 ??                       ds 1
RAM:51F9 ??                       ds 1
RAM:51FA ??                       ds 1
RAM:51FB ??                       ds 1
RAM:51FC ??                       ds 1
RAM:51FD ??                       ds 1
RAM:51FE ??                       ds 1
RAM:51FF ??                       ds 1
RAM:5200 ??                       ds 1
RAM:5201 ??                       ds 1
RAM:5202 ??                       ds 1
RAM:5203 ??                       ds 1
RAM:5204 ??                       ds 1
RAM:5205 ??                       ds 1
RAM:5206 ??                       ds 1
RAM:5207 ??                       ds 1
RAM:5208 ??                       ds 1
RAM:5209 ??                       ds 1
RAM:520A ??                       ds 1
RAM:520B ??                       ds 1
RAM:520C ??                       ds 1
RAM:520D ??                       ds 1
RAM:520E ??                       ds 1
RAM:520F ??                       ds 1
RAM:5210 ??                       ds 1
RAM:5211 ??                       ds 1
RAM:5212 ??                       ds 1
RAM:5213 ??                       ds 1
RAM:5214 ??                       ds 1
RAM:5215 ??                       ds 1
RAM:5216 ??                       ds 1
RAM:5217 ??                       ds 1
RAM:5218 ??                       ds 1
RAM:5219 ??                       ds 1
RAM:521A ??                       ds 1
RAM:521B ??                       ds 1
RAM:521C ??                       ds 1
RAM:521D ??                       ds 1
RAM:521E ??                       ds 1
RAM:521F ??                       ds 1
RAM:5220 ??                       ds 1
RAM:5221 ??                       ds 1
RAM:5222 ??                       ds 1
RAM:5223 ??                       ds 1
RAM:5224 ??                       ds 1
RAM:5225 ??                       ds 1
RAM:5226 ??                       ds 1
RAM:5227 ??                       ds 1
RAM:5228 ??                       ds 1
RAM:5229 ??                       ds 1
RAM:522A ??                       ds 1
RAM:522B ??                       ds 1
RAM:522C ??                       ds 1
RAM:522D ??                       ds 1
RAM:522E ??                       ds 1
RAM:522F ??                       ds 1
RAM:5230 ??                       ds 1
RAM:5231 ??                       ds 1
RAM:5232 ??                       ds 1
RAM:5233 ??                       ds 1
RAM:5234 ??                       ds 1
RAM:5235 ??                       ds 1
RAM:5236 ??                       ds 1
RAM:5237 ??                       ds 1
RAM:5238 ??                       ds 1
RAM:5239 ??                       ds 1
RAM:523A ??                       ds 1
RAM:523B ??                       ds 1
RAM:523C ??                       ds 1
RAM:523D ??                       ds 1
RAM:523E ??                       ds 1
RAM:523F ??                       ds 1
RAM:5240 ??                       ds 1
RAM:5241 ??                       ds 1
RAM:5242 ??                       ds 1
RAM:5243 ??                       ds 1
RAM:5244 ??                       ds 1
RAM:5245 ??                       ds 1
RAM:5246 ??                       ds 1
RAM:5247 ??                       ds 1
RAM:5248 ??                       ds 1
RAM:5249 ??                       ds 1
RAM:524A ??                       ds 1
RAM:524B ??                       ds 1
RAM:524C ??                       ds 1
RAM:524D ??                       ds 1
RAM:524E ??                       ds 1
RAM:524F ??                       ds 1
RAM:5250 ??                       ds 1
RAM:5251 ??                       ds 1
RAM:5252 ??                       ds 1
RAM:5253 ??                       ds 1
RAM:5254 ??                       ds 1
RAM:5255 ??                       ds 1
RAM:5256 ??                       ds 1
RAM:5257 ??                       ds 1
RAM:5258 ??                       ds 1
RAM:5259 ??                       ds 1
RAM:525A ??                       ds 1
RAM:525B ??                       ds 1
RAM:525C ??                       ds 1
RAM:525D ??                       ds 1
RAM:525E ??                       ds 1
RAM:525F ??                       ds 1
RAM:5260 ??                       ds 1
RAM:5261 ??                       ds 1
RAM:5262 ??                       ds 1
RAM:5263 ??                       ds 1
RAM:5264 ??                       ds 1
RAM:5265 ??                       ds 1
RAM:5266 ??                       ds 1
RAM:5267 ??                       ds 1
RAM:5268 ??                       ds 1
RAM:5269 ??                       ds 1
RAM:526A ??                       ds 1
RAM:526B ??                       ds 1
RAM:526C ??                       ds 1
RAM:526D ??                       ds 1
RAM:526E ??                       ds 1
RAM:526F ??                       ds 1
RAM:5270 ??                       ds 1
RAM:5271 ??                       ds 1
RAM:5272 ??                       ds 1
RAM:5273 ??                       ds 1
RAM:5274 ??                       ds 1
RAM:5275 ??                       ds 1
RAM:5276 ??                       ds 1
RAM:5277 ??                       ds 1
RAM:5278 ??                       ds 1
RAM:5279 ??                       ds 1
RAM:527A ??                       ds 1
RAM:527B ??                       ds 1
RAM:527C ??                       ds 1
RAM:527D ??                       ds 1
RAM:527E ??                       ds 1
RAM:527F ??                       ds 1
RAM:5280 ??                       ds 1
RAM:5281 ??                       ds 1
RAM:5282 ??                       ds 1
RAM:5283 ??                       ds 1
RAM:5284 ??                       ds 1
RAM:5285 ??                       ds 1
RAM:5286 ??                       ds 1
RAM:5287 ??                       ds 1
RAM:5288 ??                       ds 1
RAM:5289 ??                       ds 1
RAM:528A ??                       ds 1
RAM:528B ??                       ds 1
RAM:528C ??                       ds 1
RAM:528D ??                       ds 1
RAM:528E ??                       ds 1
RAM:528F ??                       ds 1
RAM:5290 ??                       ds 1
RAM:5291 ??                       ds 1
RAM:5292 ??                       ds 1
RAM:5293 ??                       ds 1
RAM:5294 ??                       ds 1
RAM:5295 ??                       ds 1
RAM:5296 ??                       ds 1
RAM:5297 ??                       ds 1
RAM:5298 ??                       ds 1
RAM:5299 ??                       ds 1
RAM:529A ??                       ds 1
RAM:529B ??                       ds 1
RAM:529C ??                       ds 1
RAM:529D ??                       ds 1
RAM:529E ??                       ds 1
RAM:529F ??                       ds 1
RAM:52A0 ??                       ds 1
RAM:52A1 ??                       ds 1
RAM:52A2 ??                       ds 1
RAM:52A3 ??                       ds 1
RAM:52A4 ??                       ds 1
RAM:52A5 ??                       ds 1
RAM:52A6 ??                       ds 1
RAM:52A7 ??                       ds 1
RAM:52A8 ??                       ds 1
RAM:52A9 ??                       ds 1
RAM:52AA ??                       ds 1
RAM:52AB ??                       ds 1
RAM:52AC ??                       ds 1
RAM:52AD ??                       ds 1
RAM:52AE ??                       ds 1
RAM:52AF ??                       ds 1
RAM:52B0 ??                       ds 1
RAM:52B1 ??                       ds 1
RAM:52B2 ??                       ds 1
RAM:52B3 ??                       ds 1
RAM:52B4 ??                       ds 1
RAM:52B5 ??                       ds 1
RAM:52B6 ??                       ds 1
RAM:52B7 ??                       ds 1
RAM:52B8 ??                       ds 1
RAM:52B9 ??                       ds 1
RAM:52BA ??                       ds 1
RAM:52BB ??                       ds 1
RAM:52BC ??                       ds 1
RAM:52BD ??                       ds 1
RAM:52BE ??                       ds 1
RAM:52BF ??                       ds 1
RAM:52C0 ??                       ds 1
RAM:52C1 ??                       ds 1
RAM:52C2 ??                       ds 1
RAM:52C3 ??                       ds 1
RAM:52C4 ??                       ds 1
RAM:52C5 ??                       ds 1
RAM:52C6 ??                       ds 1
RAM:52C7 ??                       ds 1
RAM:52C8 ??                       ds 1
RAM:52C9 ??                       ds 1
RAM:52CA ??                       ds 1
RAM:52CB ??                       ds 1
RAM:52CC ??                       ds 1
RAM:52CD ??                       ds 1
RAM:52CE ??                       ds 1
RAM:52CF ??                       ds 1
RAM:52D0 ??                       ds 1
RAM:52D1 ??                       ds 1
RAM:52D2 ??                       ds 1
RAM:52D3 ??                       ds 1
RAM:52D4 ??                       ds 1
RAM:52D5 ??                       ds 1
RAM:52D6 ??                       ds 1
RAM:52D7 ??                       ds 1
RAM:52D8 ??                       ds 1
RAM:52D9 ??                       ds 1
RAM:52DA ??                       ds 1
RAM:52DB ??                       ds 1
RAM:52DC ??                       ds 1
RAM:52DD ??                       ds 1
RAM:52DE ??                       ds 1
RAM:52DF ??                       ds 1
RAM:52E0 ??                       ds 1
RAM:52E1 ??                       ds 1
RAM:52E2 ??                       ds 1
RAM:52E3 ??                       ds 1
RAM:52E4 ??                       ds 1
RAM:52E5 ??                       ds 1
RAM:52E6 ??                       ds 1
RAM:52E7 ??                       ds 1
RAM:52E8 ??                       ds 1
RAM:52E9 ??                       ds 1
RAM:52EA ??                       ds 1
RAM:52EB ??                       ds 1
RAM:52EC ??                       ds 1
RAM:52ED ??                       ds 1
RAM:52EE ??                       ds 1
RAM:52EF ??                       ds 1
RAM:52F0 ??                       ds 1
RAM:52F1 ??                       ds 1
RAM:52F2 ??                       ds 1
RAM:52F3 ??                       ds 1
RAM:52F4 ??                       ds 1
RAM:52F5 ??                       ds 1
RAM:52F6 ??                       ds 1
RAM:52F7 ??                       ds 1
RAM:52F8 ??                       ds 1
RAM:52F9 ??                       ds 1
RAM:52FA ??                       ds 1
RAM:52FB ??                       ds 1
RAM:52FC ??                       ds 1
RAM:52FD ??                       ds 1
RAM:52FE ??                       ds 1
RAM:52FF ??                       ds 1
RAM:5300 ??                       ds 1
RAM:5301 ??                       ds 1
RAM:5302 ??                       ds 1
RAM:5303 ??                       ds 1
RAM:5304 ??                       ds 1
RAM:5305 ??                       ds 1
RAM:5306 ??                       ds 1
RAM:5307 ??                       ds 1
RAM:5308 ??                       ds 1
RAM:5309 ??                       ds 1
RAM:530A ??                       ds 1
RAM:530B ??                       ds 1
RAM:530C ??                       ds 1
RAM:530D ??                       ds 1
RAM:530E ??                       ds 1
RAM:530F ??                       ds 1
RAM:5310 ??                       ds 1
RAM:5311 ??                       ds 1
RAM:5312 ??                       ds 1
RAM:5313 ??                       ds 1
RAM:5314 ??                       ds 1
RAM:5315 ??                       ds 1
RAM:5316 ??                       ds 1
RAM:5317 ??                       ds 1
RAM:5318 ??                       ds 1
RAM:5319 ??                       ds 1
RAM:531A ??                       ds 1
RAM:531B ??                       ds 1
RAM:531C ??                       ds 1
RAM:531D ??                       ds 1
RAM:531E ??                       ds 1
RAM:531F ??                       ds 1
RAM:5320 ??                       ds 1
RAM:5321 ??                       ds 1
RAM:5322 ??                       ds 1
RAM:5323 ??                       ds 1
RAM:5324 ??                       ds 1
RAM:5325 ??                       ds 1
RAM:5326 ??                       ds 1
RAM:5327 ??                       ds 1
RAM:5328 ??                       ds 1
RAM:5329 ??                       ds 1
RAM:532A ??                       ds 1
RAM:532B ??                       ds 1
RAM:532C ??                       ds 1
RAM:532D ??                       ds 1
RAM:532E ??                       ds 1
RAM:532F ??                       ds 1
RAM:5330 ??                       ds 1
RAM:5331 ??                       ds 1
RAM:5332 ??                       ds 1
RAM:5333 ??                       ds 1
RAM:5334 ??                       ds 1
RAM:5335 ??                       ds 1
RAM:5336 ??                       ds 1
RAM:5337 ??                       ds 1
RAM:5338 ??                       ds 1
RAM:5339 ??                       ds 1
RAM:533A ??                       ds 1
RAM:533B ??                       ds 1
RAM:533C ??                       ds 1
RAM:533D ??                       ds 1
RAM:533E ??                       ds 1
RAM:533F ??                       ds 1
RAM:5340 ??                       ds 1
RAM:5341 ??                       ds 1
RAM:5342 ??                       ds 1
RAM:5343 ??                       ds 1
RAM:5344 ??                       ds 1
RAM:5345 ??                       ds 1
RAM:5346 ??                       ds 1
RAM:5347 ??                       ds 1
RAM:5348 ??                       ds 1
RAM:5349 ??                       ds 1
RAM:534A ??                       ds 1
RAM:534B ??                       ds 1
RAM:534C ??                       ds 1
RAM:534D ??                       ds 1
RAM:534E ??                       ds 1
RAM:534F ??                       ds 1
RAM:5350 ??                       ds 1
RAM:5351 ??                       ds 1
RAM:5352 ??                       ds 1
RAM:5353 ??                       ds 1
RAM:5354 ??                       ds 1
RAM:5355 ??                       ds 1
RAM:5356 ??                       ds 1
RAM:5357 ??                       ds 1
RAM:5358 ??                       ds 1
RAM:5359 ??                       ds 1
RAM:535A ??                       ds 1
RAM:535B ??                       ds 1
RAM:535C ??                       ds 1
RAM:535D ??                       ds 1
RAM:535E ??                       ds 1
RAM:535F ??                       ds 1
RAM:5360 ??                       ds 1
RAM:5361 ??                       ds 1
RAM:5362 ??                       ds 1
RAM:5363 ??                       ds 1
RAM:5364 ??                       ds 1
RAM:5365 ??                       ds 1
RAM:5366 ??                       ds 1
RAM:5367 ??                       ds 1
RAM:5368 ??                       ds 1
RAM:5369 ??                       ds 1
RAM:536A ??                       ds 1
RAM:536B ??                       ds 1
RAM:536C ??                       ds 1
RAM:536D ??                       ds 1
RAM:536E ??                       ds 1
RAM:536F ??                       ds 1
RAM:5370 ??                       ds 1
RAM:5371 ??                       ds 1
RAM:5372 ??                       ds 1
RAM:5373 ??                       ds 1
RAM:5374 ??                       ds 1
RAM:5375 ??                       ds 1
RAM:5376 ??                       ds 1
RAM:5377 ??                       ds 1
RAM:5378 ??                       ds 1
RAM:5379 ??                       ds 1
RAM:537A ??                       ds 1
RAM:537B ??                       ds 1
RAM:537C ??                       ds 1
RAM:537D ??                       ds 1
RAM:537E ??                       ds 1
RAM:537F ??                       ds 1
RAM:5380 ??                       ds 1
RAM:5381 ??                       ds 1
RAM:5382 ??                       ds 1
RAM:5383 ??                       ds 1
RAM:5384 ??                       ds 1
RAM:5385 ??                       ds 1
RAM:5386 ??                       ds 1
RAM:5387 ??                       ds 1
RAM:5388 ??                       ds 1
RAM:5389 ??                       ds 1
RAM:538A ??                       ds 1
RAM:538B ??                       ds 1
RAM:538C ??                       ds 1
RAM:538D ??                       ds 1
RAM:538E ??                       ds 1
RAM:538F ??                       ds 1
RAM:5390 ??                       ds 1
RAM:5391 ??                       ds 1
RAM:5392 ??                       ds 1
RAM:5393 ??                       ds 1
RAM:5394 ??                       ds 1
RAM:5395 ??                       ds 1
RAM:5396 ??                       ds 1
RAM:5397 ??                       ds 1
RAM:5398 ??                       ds 1
RAM:5399 ??                       ds 1
RAM:539A ??                       ds 1
RAM:539B ??                       ds 1
RAM:539C ??                       ds 1
RAM:539D ??                       ds 1
RAM:539E ??                       ds 1
RAM:539F ??                       ds 1
RAM:53A0 ??                       ds 1
RAM:53A1 ??                       ds 1
RAM:53A2 ??                       ds 1
RAM:53A3 ??                       ds 1
RAM:53A4 ??                       ds 1
RAM:53A5 ??                       ds 1
RAM:53A6 ??                       ds 1
RAM:53A7 ??                       ds 1
RAM:53A8 ??                       ds 1
RAM:53A9 ??                       ds 1
RAM:53AA ??                       ds 1
RAM:53AB ??                       ds 1
RAM:53AC ??                       ds 1
RAM:53AD ??                       ds 1
RAM:53AE ??                       ds 1
RAM:53AF ??                       ds 1
RAM:53B0 ??                       ds 1
RAM:53B1 ??                       ds 1
RAM:53B2 ??                       ds 1
RAM:53B3 ??                       ds 1
RAM:53B4 ??                       ds 1
RAM:53B5 ??                       ds 1
RAM:53B6 ??                       ds 1
RAM:53B7 ??                       ds 1
RAM:53B8 ??                       ds 1
RAM:53B9 ??                       ds 1
RAM:53BA ??                       ds 1
RAM:53BB ??                       ds 1
RAM:53BC ??                       ds 1
RAM:53BD ??                       ds 1
RAM:53BE ??                       ds 1
RAM:53BF ??                       ds 1
RAM:53C0 ??                       ds 1
RAM:53C1 ??                       ds 1
RAM:53C2 ??                       ds 1
RAM:53C3 ??                       ds 1
RAM:53C4 ??                       ds 1
RAM:53C5 ??                       ds 1
RAM:53C6 ??                       ds 1
RAM:53C7 ??                       ds 1
RAM:53C8 ??                       ds 1
RAM:53C9 ??                       ds 1
RAM:53CA ??                       ds 1
RAM:53CB ??                       ds 1
RAM:53CC ??                       ds 1
RAM:53CD ??                       ds 1
RAM:53CE ??                       ds 1
RAM:53CF ??                       ds 1
RAM:53D0 ??                       ds 1
RAM:53D1 ??                       ds 1
RAM:53D2 ??                       ds 1
RAM:53D3 ??                       ds 1
RAM:53D4 ??                       ds 1
RAM:53D5 ??                       ds 1
RAM:53D6 ??                       ds 1
RAM:53D7 ??                       ds 1
RAM:53D8 ??                       ds 1
RAM:53D9 ??                       ds 1
RAM:53DA ??                       ds 1
RAM:53DB ??                       ds 1
RAM:53DC ??                       ds 1
RAM:53DD ??                       ds 1
RAM:53DE ??                       ds 1
RAM:53DF ??                       ds 1
RAM:53E0 ??                       ds 1
RAM:53E1 ??                       ds 1
RAM:53E2 ??                       ds 1
RAM:53E3 ??                       ds 1
RAM:53E4 ??                       ds 1
RAM:53E5 ??                       ds 1
RAM:53E6 ??                       ds 1
RAM:53E7 ??                       ds 1
RAM:53E8 ??                       ds 1
RAM:53E9 ??                       ds 1
RAM:53EA ??                       ds 1
RAM:53EB ??                       ds 1
RAM:53EC ??                       ds 1
RAM:53ED ??                       ds 1
RAM:53EE ??                       ds 1
RAM:53EF ??                       ds 1
RAM:53F0 ??                       ds 1
RAM:53F1 ??                       ds 1
RAM:53F2 ??                       ds 1
RAM:53F3 ??                       ds 1
RAM:53F4 ??                       ds 1
RAM:53F5 ??                       ds 1
RAM:53F6 ??                       ds 1
RAM:53F7 ??                       ds 1
RAM:53F8 ??                       ds 1
RAM:53F9 ??                       ds 1
RAM:53FA ??                       ds 1
RAM:53FB ??                       ds 1
RAM:53FC ??                       ds 1
RAM:53FD ??                       ds 1
RAM:53FE ??                       ds 1
RAM:53FF ??                       ds 1
RAM:5400 ??                       ds 1
RAM:5401 ??                       ds 1
RAM:5402 ??                       ds 1
RAM:5403 ??                       ds 1
RAM:5404 ??                       ds 1
RAM:5405 ??                       ds 1
RAM:5406 ??                       ds 1
RAM:5407 ??                       ds 1
RAM:5408 ??                       ds 1
RAM:5409 ??                       ds 1
RAM:540A ??                       ds 1
RAM:540B ??                       ds 1
RAM:540C ??                       ds 1
RAM:540D ??                       ds 1
RAM:540E ??                       ds 1
RAM:540F ??                       ds 1
RAM:5410 ??                       ds 1
RAM:5411 ??                       ds 1
RAM:5412 ??                       ds 1
RAM:5413 ??                       ds 1
RAM:5414 ??                       ds 1
RAM:5415 ??                       ds 1
RAM:5416 ??                       ds 1
RAM:5417 ??                       ds 1
RAM:5418 ??                       ds 1
RAM:5419 ??                       ds 1
RAM:541A ??                       ds 1
RAM:541B ??                       ds 1
RAM:541C ??                       ds 1
RAM:541D ??                       ds 1
RAM:541E ??                       ds 1
RAM:541F ??                       ds 1
RAM:5420 ??                       ds 1
RAM:5421 ??                       ds 1
RAM:5422 ??                       ds 1
RAM:5423 ??                       ds 1
RAM:5424 ??                       ds 1
RAM:5425 ??                       ds 1
RAM:5426 ??                       ds 1
RAM:5427 ??                       ds 1
RAM:5428 ??                       ds 1
RAM:5429 ??                       ds 1
RAM:542A ??                       ds 1
RAM:542B ??                       ds 1
RAM:542C ??                       ds 1
RAM:542D ??                       ds 1
RAM:542E ??                       ds 1
RAM:542F ??                       ds 1
RAM:5430 ??                       ds 1
RAM:5431 ??                       ds 1
RAM:5432 ??                       ds 1
RAM:5433 ??                       ds 1
RAM:5434 ??                       ds 1
RAM:5435 ??                       ds 1
RAM:5436 ??                       ds 1
RAM:5437 ??                       ds 1
RAM:5438 ??                       ds 1
RAM:5439 ??                       ds 1
RAM:543A ??                       ds 1
RAM:543B ??                       ds 1
RAM:543C ??                       ds 1
RAM:543D ??                       ds 1
RAM:543E ??                       ds 1
RAM:543F ??                       ds 1
RAM:5440 ??                       ds 1
RAM:5441 ??                       ds 1
RAM:5442 ??                       ds 1
RAM:5443 ??                       ds 1
RAM:5444 ??                       ds 1
RAM:5445 ??                       ds 1
RAM:5446 ??                       ds 1
RAM:5447 ??                       ds 1
RAM:5448 ??                       ds 1
RAM:5449 ??                       ds 1
RAM:544A ??                       ds 1
RAM:544B ??                       ds 1
RAM:544C ??                       ds 1
RAM:544D ??                       ds 1
RAM:544E ??                       ds 1
RAM:544F ??                       ds 1
RAM:5450 ??                       ds 1
RAM:5451 ??                       ds 1
RAM:5452 ??                       ds 1
RAM:5453 ??                       ds 1
RAM:5454 ??                       ds 1
RAM:5455 ??                       ds 1
RAM:5456 ??                       ds 1
RAM:5457 ??                       ds 1
RAM:5458 ??                       ds 1
RAM:5459 ??                       ds 1
RAM:545A ??                       ds 1
RAM:545B ??                       ds 1
RAM:545C ??                       ds 1
RAM:545D ??                       ds 1
RAM:545E ??                       ds 1
RAM:545F ??                       ds 1
RAM:5460 ??                       ds 1
RAM:5461 ??                       ds 1
RAM:5462 ??                       ds 1
RAM:5463 ??                       ds 1
RAM:5464 ??                       ds 1
RAM:5465 ??                       ds 1
RAM:5466 ??                       ds 1
RAM:5467 ??                       ds 1
RAM:5468 ??                       ds 1
RAM:5469 ??                       ds 1
RAM:546A ??                       ds 1
RAM:546B ??                       ds 1
RAM:546C ??                       ds 1
RAM:546D ??                       ds 1
RAM:546E ??                       ds 1
RAM:546F ??                       ds 1
RAM:5470 ??                       ds 1
RAM:5471 ??                       ds 1
RAM:5472 ??                       ds 1
RAM:5473 ??                       ds 1
RAM:5474 ??                       ds 1
RAM:5475 ??                       ds 1
RAM:5476 ??                       ds 1
RAM:5477 ??                       ds 1
RAM:5478 ??                       ds 1
RAM:5479 ??                       ds 1
RAM:547A ??                       ds 1
RAM:547B ??                       ds 1
RAM:547C ??                       ds 1
RAM:547D ??                       ds 1
RAM:547E ??                       ds 1
RAM:547F ??                       ds 1
RAM:5480 ??                       ds 1
RAM:5481 ??                       ds 1
RAM:5482 ??                       ds 1
RAM:5483 ??                       ds 1
RAM:5484 ??                       ds 1
RAM:5485 ??                       ds 1
RAM:5486 ??                       ds 1
RAM:5487 ??                       ds 1
RAM:5488 ??                       ds 1
RAM:5489 ??                       ds 1
RAM:548A ??                       ds 1
RAM:548B ??                       ds 1
RAM:548C ??                       ds 1
RAM:548D ??                       ds 1
RAM:548E ??                       ds 1
RAM:548F ??                       ds 1
RAM:5490 ??                       ds 1
RAM:5491 ??                       ds 1
RAM:5492 ??                       ds 1
RAM:5493 ??                       ds 1
RAM:5494 ??                       ds 1
RAM:5495 ??                       ds 1
RAM:5496 ??                       ds 1
RAM:5497 ??                       ds 1
RAM:5498 ??                       ds 1
RAM:5499 ??                       ds 1
RAM:549A ??                       ds 1
RAM:549B ??                       ds 1
RAM:549C ??                       ds 1
RAM:549D ??                       ds 1
RAM:549E ??                       ds 1
RAM:549F ??                       ds 1
RAM:54A0 ??                       ds 1
RAM:54A1 ??                       ds 1
RAM:54A2 ??                       ds 1
RAM:54A3 ??                       ds 1
RAM:54A4 ??                       ds 1
RAM:54A5 ??                       ds 1
RAM:54A6 ??                       ds 1
RAM:54A7 ??                       ds 1
RAM:54A8 ??                       ds 1
RAM:54A9 ??                       ds 1
RAM:54AA ??                       ds 1
RAM:54AB ??                       ds 1
RAM:54AC ??                       ds 1
RAM:54AD ??                       ds 1
RAM:54AE ??                       ds 1
RAM:54AF ??                       ds 1
RAM:54B0 ??                       ds 1
RAM:54B1 ??                       ds 1
RAM:54B2 ??                       ds 1
RAM:54B3 ??                       ds 1
RAM:54B4 ??                       ds 1
RAM:54B5 ??                       ds 1
RAM:54B6 ??                       ds 1
RAM:54B7 ??                       ds 1
RAM:54B8 ??                       ds 1
RAM:54B9 ??                       ds 1
RAM:54BA ??                       ds 1
RAM:54BB ??                       ds 1
RAM:54BC ??                       ds 1
RAM:54BD ??                       ds 1
RAM:54BE ??                       ds 1
RAM:54BF ??                       ds 1
RAM:54C0 ??                       ds 1
RAM:54C1 ??                       ds 1
RAM:54C2 ??                       ds 1
RAM:54C3 ??                       ds 1
RAM:54C4 ??                       ds 1
RAM:54C5 ??                       ds 1
RAM:54C6 ??                       ds 1
RAM:54C7 ??                       ds 1
RAM:54C8 ??                       ds 1
RAM:54C9 ??                       ds 1
RAM:54CA ??                       ds 1
RAM:54CB ??                       ds 1
RAM:54CC ??                       ds 1
RAM:54CD ??                       ds 1
RAM:54CE ??                       ds 1
RAM:54CF ??                       ds 1
RAM:54D0 ??                       ds 1
RAM:54D1 ??                       ds 1
RAM:54D2 ??                       ds 1
RAM:54D3 ??                       ds 1
RAM:54D4 ??                       ds 1
RAM:54D5 ??                       ds 1
RAM:54D6 ??                       ds 1
RAM:54D7 ??                       ds 1
RAM:54D8 ??                       ds 1
RAM:54D9 ??                       ds 1
RAM:54DA ??                       ds 1
RAM:54DB ??                       ds 1
RAM:54DC ??                       ds 1
RAM:54DD ??                       ds 1
RAM:54DE ??                       ds 1
RAM:54DF ??                       ds 1
RAM:54E0 ??                       ds 1
RAM:54E1 ??                       ds 1
RAM:54E2 ??                       ds 1
RAM:54E3 ??                       ds 1
RAM:54E4 ??                       ds 1
RAM:54E5 ??                       ds 1
RAM:54E6 ??                       ds 1
RAM:54E7 ??                       ds 1
RAM:54E8 ??                       ds 1
RAM:54E9 ??                       ds 1
RAM:54EA ??                       ds 1
RAM:54EB ??                       ds 1
RAM:54EC ??                       ds 1
RAM:54ED ??                       ds 1
RAM:54EE ??                       ds 1
RAM:54EF ??                       ds 1
RAM:54F0 ??                       ds 1
RAM:54F1 ??                       ds 1
RAM:54F2 ??                       ds 1
RAM:54F3 ??                       ds 1
RAM:54F4 ??                       ds 1
RAM:54F5 ??                       ds 1
RAM:54F6 ??                       ds 1
RAM:54F7 ??                       ds 1
RAM:54F8 ??                       ds 1
RAM:54F9 ??                       ds 1
RAM:54FA ??                       ds 1
RAM:54FB ??                       ds 1
RAM:54FC ??                       ds 1
RAM:54FD ??                       ds 1
RAM:54FE ??                       ds 1
RAM:54FF ??                       ds 1
RAM:5500 ??                       ds 1
RAM:5501 ??                       ds 1
RAM:5502 ??                       ds 1
RAM:5503 ??                       ds 1
RAM:5504 ??                       ds 1
RAM:5505 ??                       ds 1
RAM:5506 ??                       ds 1
RAM:5507 ??                       ds 1
RAM:5508 ??                       ds 1
RAM:5509 ??                       ds 1
RAM:550A ??                       ds 1
RAM:550B ??                       ds 1
RAM:550C ??                       ds 1
RAM:550D ??                       ds 1
RAM:550E ??                       ds 1
RAM:550F ??                       ds 1
RAM:5510 ??                       ds 1
RAM:5511 ??                       ds 1
RAM:5512 ??                       ds 1
RAM:5513 ??                       ds 1
RAM:5514 ??                       ds 1
RAM:5515 ??                       ds 1
RAM:5516 ??                       ds 1
RAM:5517 ??                       ds 1
RAM:5518 ??                       ds 1
RAM:5519 ??                       ds 1
RAM:551A ??                       ds 1
RAM:551B ??                       ds 1
RAM:551C ??                       ds 1
RAM:551D ??                       ds 1
RAM:551E ??                       ds 1
RAM:551F ??                       ds 1
RAM:5520 ??                       ds 1
RAM:5521 ??                       ds 1
RAM:5522 ??                       ds 1
RAM:5523 ??                       ds 1
RAM:5524 ??                       ds 1
RAM:5525 ??                       ds 1
RAM:5526 ??                       ds 1
RAM:5527 ??                       ds 1
RAM:5528 ??                       ds 1
RAM:5529 ??                       ds 1
RAM:552A ??                       ds 1
RAM:552B ??                       ds 1
RAM:552C ??                       ds 1
RAM:552D ??                       ds 1
RAM:552E ??                       ds 1
RAM:552F ??                       ds 1
RAM:5530 ??                       ds 1
RAM:5531 ??                       ds 1
RAM:5532 ??                       ds 1
RAM:5533 ??                       ds 1
RAM:5534 ??                       ds 1
RAM:5535 ??                       ds 1
RAM:5536 ??                       ds 1
RAM:5537 ??                       ds 1
RAM:5538 ??                       ds 1
RAM:5539 ??                       ds 1
RAM:553A ??                       ds 1
RAM:553B ??                       ds 1
RAM:553C ??                       ds 1
RAM:553D ??                       ds 1
RAM:553E ??                       ds 1
RAM:553F ??                       ds 1
RAM:5540 ??                       ds 1
RAM:5541 ??                       ds 1
RAM:5542 ??                       ds 1
RAM:5543 ??                       ds 1
RAM:5544 ??                       ds 1
RAM:5545 ??                       ds 1
RAM:5546 ??                       ds 1
RAM:5547 ??                       ds 1
RAM:5548 ??                       ds 1
RAM:5549 ??                       ds 1
RAM:554A ??                       ds 1
RAM:554B ??                       ds 1
RAM:554C ??                       ds 1
RAM:554D ??                       ds 1
RAM:554E ??                       ds 1
RAM:554F ??                       ds 1
RAM:5550 ??                       ds 1
RAM:5551 ??                       ds 1
RAM:5552 ??                       ds 1
RAM:5553 ??                       ds 1
RAM:5554 ??                       ds 1
RAM:5555 ??                       ds 1
RAM:5556 ??                       ds 1
RAM:5557 ??                       ds 1
RAM:5558 ??                       ds 1
RAM:5559 ??                       ds 1
RAM:555A ??                       ds 1
RAM:555B ??                       ds 1
RAM:555C ??                       ds 1
RAM:555D ??                       ds 1
RAM:555E ??                       ds 1
RAM:555F ??                       ds 1
RAM:5560 ??                       ds 1
RAM:5561 ??                       ds 1
RAM:5562 ??                       ds 1
RAM:5563 ??                       ds 1
RAM:5564 ??                       ds 1
RAM:5565 ??                       ds 1
RAM:5566 ??                       ds 1
RAM:5567 ??                       ds 1
RAM:5568 ??                       ds 1
RAM:5569 ??                       ds 1
RAM:556A ??                       ds 1
RAM:556B ??                       ds 1
RAM:556C ??                       ds 1
RAM:556D ??                       ds 1
RAM:556E ??                       ds 1
RAM:556F ??                       ds 1
RAM:5570 ??                       ds 1
RAM:5571 ??                       ds 1
RAM:5572 ??                       ds 1
RAM:5573 ??                       ds 1
RAM:5574 ??                       ds 1
RAM:5575 ??                       ds 1
RAM:5576 ??                       ds 1
RAM:5577 ??                       ds 1
RAM:5578 ??                       ds 1
RAM:5579 ??                       ds 1
RAM:557A ??                       ds 1
RAM:557B ??                       ds 1
RAM:557C ??                       ds 1
RAM:557D ??                       ds 1
RAM:557E ??                       ds 1
RAM:557F ??                       ds 1
RAM:5580 ??                       ds 1
RAM:5581 ??                       ds 1
RAM:5582 ??                       ds 1
RAM:5583 ??                       ds 1
RAM:5584 ??                       ds 1
RAM:5585 ??                       ds 1
RAM:5586 ??                       ds 1
RAM:5587 ??                       ds 1
RAM:5588 ??                       ds 1
RAM:5589 ??                       ds 1
RAM:558A ??                       ds 1
RAM:558B ??                       ds 1
RAM:558C ??                       ds 1
RAM:558D ??                       ds 1
RAM:558E ??                       ds 1
RAM:558F ??                       ds 1
RAM:5590 ??                       ds 1
RAM:5591 ??                       ds 1
RAM:5592 ??                       ds 1
RAM:5593 ??                       ds 1
RAM:5594 ??                       ds 1
RAM:5595 ??                       ds 1
RAM:5596 ??                       ds 1
RAM:5597 ??                       ds 1
RAM:5598 ??                       ds 1
RAM:5599 ??                       ds 1
RAM:559A ??                       ds 1
RAM:559B ??                       ds 1
RAM:559C ??                       ds 1
RAM:559D ??                       ds 1
RAM:559E ??                       ds 1
RAM:559F ??                       ds 1
RAM:55A0 ??                       ds 1
RAM:55A1 ??                       ds 1
RAM:55A2 ??                       ds 1
RAM:55A3 ??                       ds 1
RAM:55A4 ??                       ds 1
RAM:55A5 ??                       ds 1
RAM:55A6 ??                       ds 1
RAM:55A7 ??                       ds 1
RAM:55A8 ??                       ds 1
RAM:55A9 ??                       ds 1
RAM:55AA ??                       ds 1
RAM:55AB ??                       ds 1
RAM:55AC ??                       ds 1
RAM:55AD ??                       ds 1
RAM:55AE ??                       ds 1
RAM:55AF ??                       ds 1
RAM:55B0 ??                       ds 1
RAM:55B1 ??                       ds 1
RAM:55B2 ??                       ds 1
RAM:55B3 ??                       ds 1
RAM:55B4 ??                       ds 1
RAM:55B5 ??                       ds 1
RAM:55B6 ??                       ds 1
RAM:55B7 ??                       ds 1
RAM:55B8 ??                       ds 1
RAM:55B9 ??                       ds 1
RAM:55BA ??                       ds 1
RAM:55BB ??                       ds 1
RAM:55BC ??                       ds 1
RAM:55BD ??                       ds 1
RAM:55BE ??                       ds 1
RAM:55BF ??                       ds 1
RAM:55C0 ??                       ds 1
RAM:55C1 ??                       ds 1
RAM:55C2 ??                       ds 1
RAM:55C3 ??                       ds 1
RAM:55C4 ??                       ds 1
RAM:55C5 ??                       ds 1
RAM:55C6 ??                       ds 1
RAM:55C7 ??                       ds 1
RAM:55C8 ??                       ds 1
RAM:55C9 ??                       ds 1
RAM:55CA ??                       ds 1
RAM:55CB ??                       ds 1
RAM:55CC ??                       ds 1
RAM:55CD ??                       ds 1
RAM:55CE ??                       ds 1
RAM:55CF ??                       ds 1
RAM:55D0 ??                       ds 1
RAM:55D1 ??                       ds 1
RAM:55D2 ??                       ds 1
RAM:55D3 ??                       ds 1
RAM:55D4 ??                       ds 1
RAM:55D5 ??                       ds 1
RAM:55D6 ??                       ds 1
RAM:55D7 ??                       ds 1
RAM:55D8 ??                       ds 1
RAM:55D9 ??                       ds 1
RAM:55DA ??                       ds 1
RAM:55DB ??                       ds 1
RAM:55DC ??                       ds 1
RAM:55DD ??                       ds 1
RAM:55DE ??                       ds 1
RAM:55DF ??                       ds 1
RAM:55E0 ??                       ds 1
RAM:55E1 ??                       ds 1
RAM:55E2 ??                       ds 1
RAM:55E3 ??                       ds 1
RAM:55E4 ??                       ds 1
RAM:55E5 ??                       ds 1
RAM:55E6 ??                       ds 1
RAM:55E7 ??                       ds 1
RAM:55E8 ??                       ds 1
RAM:55E9 ??                       ds 1
RAM:55EA ??                       ds 1
RAM:55EB ??                       ds 1
RAM:55EC ??                       ds 1
RAM:55ED ??                       ds 1
RAM:55EE ??                       ds 1
RAM:55EF ??                       ds 1
RAM:55F0 ??                       ds 1
RAM:55F1 ??                       ds 1
RAM:55F2 ??                       ds 1
RAM:55F3 ??                       ds 1
RAM:55F4 ??                       ds 1
RAM:55F5 ??                       ds 1
RAM:55F6 ??                       ds 1
RAM:55F7 ??                       ds 1
RAM:55F8 ??                       ds 1
RAM:55F9 ??                       ds 1
RAM:55FA ??                       ds 1
RAM:55FB ??                       ds 1
RAM:55FC ??                       ds 1
RAM:55FD ??                       ds 1
RAM:55FE ??                       ds 1
RAM:55FF ??                       ds 1
RAM:5600 ??                       ds 1
RAM:5601 ??                       ds 1
RAM:5602 ??                       ds 1
RAM:5603 ??                       ds 1
RAM:5604 ??                       ds 1
RAM:5605 ??                       ds 1
RAM:5606 ??                       ds 1
RAM:5607 ??                       ds 1
RAM:5608 ??                       ds 1
RAM:5609 ??                       ds 1
RAM:560A ??                       ds 1
RAM:560B ??                       ds 1
RAM:560C ??                       ds 1
RAM:560D ??                       ds 1
RAM:560E ??                       ds 1
RAM:560F ??                       ds 1
RAM:5610 ??                       ds 1
RAM:5611 ??                       ds 1
RAM:5612 ??                       ds 1
RAM:5613 ??                       ds 1
RAM:5614 ??                       ds 1
RAM:5615 ??                       ds 1
RAM:5616 ??                       ds 1
RAM:5617 ??                       ds 1
RAM:5618 ??                       ds 1
RAM:5619 ??                       ds 1
RAM:561A ??                       ds 1
RAM:561B ??                       ds 1
RAM:561C ??                       ds 1
RAM:561D ??                       ds 1
RAM:561E ??                       ds 1
RAM:561F ??                       ds 1
RAM:5620 ??                       ds 1
RAM:5621 ??                       ds 1
RAM:5622 ??                       ds 1
RAM:5623 ??                       ds 1
RAM:5624 ??                       ds 1
RAM:5625 ??                       ds 1
RAM:5626 ??                       ds 1
RAM:5627 ??                       ds 1
RAM:5628 ??                       ds 1
RAM:5629 ??                       ds 1
RAM:562A ??                       ds 1
RAM:562B ??                       ds 1
RAM:562C ??                       ds 1
RAM:562D ??                       ds 1
RAM:562E ??                       ds 1
RAM:562F ??                       ds 1
RAM:5630 ??                       ds 1
RAM:5631 ??                       ds 1
RAM:5632 ??                       ds 1
RAM:5633 ??                       ds 1
RAM:5634 ??                       ds 1
RAM:5635 ??                       ds 1
RAM:5636 ??                       ds 1
RAM:5637 ??                       ds 1
RAM:5638 ??                       ds 1
RAM:5639 ??                       ds 1
RAM:563A ??                       ds 1
RAM:563B ??                       ds 1
RAM:563C ??                       ds 1
RAM:563D ??                       ds 1
RAM:563E ??                       ds 1
RAM:563F ??                       ds 1
RAM:5640 ??                       ds 1
RAM:5641 ??                       ds 1
RAM:5642 ??                       ds 1
RAM:5643 ??                       ds 1
RAM:5644 ??                       ds 1
RAM:5645 ??                       ds 1
RAM:5646 ??                       ds 1
RAM:5647 ??                       ds 1
RAM:5648 ??                       ds 1
RAM:5649 ??                       ds 1
RAM:564A ??                       ds 1
RAM:564B ??                       ds 1
RAM:564C ??                       ds 1
RAM:564D ??                       ds 1
RAM:564E ??                       ds 1
RAM:564F ??                       ds 1
RAM:5650 ??                       ds 1
RAM:5651 ??                       ds 1
RAM:5652 ??                       ds 1
RAM:5653 ??                       ds 1
RAM:5654 ??                       ds 1
RAM:5655 ??                       ds 1
RAM:5656 ??                       ds 1
RAM:5657 ??                       ds 1
RAM:5658 ??                       ds 1
RAM:5659 ??                       ds 1
RAM:565A ??                       ds 1
RAM:565B ??                       ds 1
RAM:565C ??                       ds 1
RAM:565D ??                       ds 1
RAM:565E ??                       ds 1
RAM:565F ??                       ds 1
RAM:5660 ??                       ds 1
RAM:5661 ??                       ds 1
RAM:5662 ??                       ds 1
RAM:5663 ??                       ds 1
RAM:5664 ??                       ds 1
RAM:5665 ??                       ds 1
RAM:5666 ??                       ds 1
RAM:5667 ??                       ds 1
RAM:5668 ??                       ds 1
RAM:5669 ??                       ds 1
RAM:566A ??                       ds 1
RAM:566B ??                       ds 1
RAM:566C ??                       ds 1
RAM:566D ??                       ds 1
RAM:566E ??                       ds 1
RAM:566F ??                       ds 1
RAM:5670 ??                       ds 1
RAM:5671 ??                       ds 1
RAM:5672 ??                       ds 1
RAM:5673 ??                       ds 1
RAM:5674 ??                       ds 1
RAM:5675 ??                       ds 1
RAM:5676 ??                       ds 1
RAM:5677 ??                       ds 1
RAM:5678 ??                       ds 1
RAM:5679 ??                       ds 1
RAM:567A ??                       ds 1
RAM:567B ??                       ds 1
RAM:567C ??                       ds 1
RAM:567D ??                       ds 1
RAM:567E ??                       ds 1
RAM:567F ??                       ds 1
RAM:5680 ??                       ds 1
RAM:5681 ??                       ds 1
RAM:5682 ??                       ds 1
RAM:5683 ??                       ds 1
RAM:5684 ??                       ds 1
RAM:5685 ??                       ds 1
RAM:5686 ??                       ds 1
RAM:5687 ??                       ds 1
RAM:5688 ??                       ds 1
RAM:5689 ??                       ds 1
RAM:568A ??                       ds 1
RAM:568B ??                       ds 1
RAM:568C ??                       ds 1
RAM:568D ??                       ds 1
RAM:568E ??                       ds 1
RAM:568F ??                       ds 1
RAM:5690 ??                       ds 1
RAM:5691 ??                       ds 1
RAM:5692 ??                       ds 1
RAM:5693 ??                       ds 1
RAM:5694 ??                       ds 1
RAM:5695 ??                       ds 1
RAM:5696 ??                       ds 1
RAM:5697 ??                       ds 1
RAM:5698 ??                       ds 1
RAM:5699 ??                       ds 1
RAM:569A ??                       ds 1
RAM:569B ??                       ds 1
RAM:569C ??                       ds 1
RAM:569D ??                       ds 1
RAM:569E ??                       ds 1
RAM:569F ??                       ds 1
RAM:56A0 ??                       ds 1
RAM:56A1 ??                       ds 1
RAM:56A2 ??                       ds 1
RAM:56A3 ??                       ds 1
RAM:56A4 ??                       ds 1
RAM:56A5 ??                       ds 1
RAM:56A6 ??                       ds 1
RAM:56A7 ??                       ds 1
RAM:56A8 ??                       ds 1
RAM:56A9 ??                       ds 1
RAM:56AA ??                       ds 1
RAM:56AB ??                       ds 1
RAM:56AC ??                       ds 1
RAM:56AD ??                       ds 1
RAM:56AE ??                       ds 1
RAM:56AF ??                       ds 1
RAM:56B0 ??                       ds 1
RAM:56B1 ??                       ds 1
RAM:56B2 ??                       ds 1
RAM:56B3 ??                       ds 1
RAM:56B4 ??                       ds 1
RAM:56B5 ??                       ds 1
RAM:56B6 ??                       ds 1
RAM:56B7 ??                       ds 1
RAM:56B8 ??                       ds 1
RAM:56B9 ??                       ds 1
RAM:56BA ??                       ds 1
RAM:56BB ??                       ds 1
RAM:56BC ??                       ds 1
RAM:56BD ??                       ds 1
RAM:56BE ??                       ds 1
RAM:56BF ??                       ds 1
RAM:56C0 ??                       ds 1
RAM:56C1 ??                       ds 1
RAM:56C2 ??                       ds 1
RAM:56C3 ??                       ds 1
RAM:56C4 ??                       ds 1
RAM:56C5 ??                       ds 1
RAM:56C6 ??                       ds 1
RAM:56C7 ??                       ds 1
RAM:56C8 ??                       ds 1
RAM:56C9 ??                       ds 1
RAM:56CA ??                       ds 1
RAM:56CB ??                       ds 1
RAM:56CC ??                       ds 1
RAM:56CD ??                       ds 1
RAM:56CE ??                       ds 1
RAM:56CF ??                       ds 1
RAM:56D0 ??                       ds 1
RAM:56D1 ??                       ds 1
RAM:56D2 ??                       ds 1
RAM:56D3 ??                       ds 1
RAM:56D4 ??                       ds 1
RAM:56D5 ??                       ds 1
RAM:56D6 ??                       ds 1
RAM:56D7 ??                       ds 1
RAM:56D8 ??                       ds 1
RAM:56D9 ??                       ds 1
RAM:56DA ??                       ds 1
RAM:56DB ??                       ds 1
RAM:56DC ??                       ds 1
RAM:56DD ??                       ds 1
RAM:56DE ??                       ds 1
RAM:56DF ??                       ds 1
RAM:56E0 ??                       ds 1
RAM:56E1 ??                       ds 1
RAM:56E2 ??                       ds 1
RAM:56E3 ??                       ds 1
RAM:56E4 ??                       ds 1
RAM:56E5 ??                       ds 1
RAM:56E6 ??                       ds 1
RAM:56E7 ??                       ds 1
RAM:56E8 ??                       ds 1
RAM:56E9 ??                       ds 1
RAM:56EA ??                       ds 1
RAM:56EB ??                       ds 1
RAM:56EC ??                       ds 1
RAM:56ED ??                       ds 1
RAM:56EE ??                       ds 1
RAM:56EF ??                       ds 1
RAM:56F0 ??                       ds 1
RAM:56F1 ??                       ds 1
RAM:56F2 ??                       ds 1
RAM:56F3 ??                       ds 1
RAM:56F4 ??                       ds 1
RAM:56F5 ??                       ds 1
RAM:56F6 ??                       ds 1
RAM:56F7 ??                       ds 1
RAM:56F8 ??                       ds 1
RAM:56F9 ??                       ds 1
RAM:56FA ??                       ds 1
RAM:56FB ??                       ds 1
RAM:56FC ??                       ds 1
RAM:56FD ??                       ds 1
RAM:56FE ??                       ds 1
RAM:56FF ??                       ds 1
RAM:5700 ??                       ds 1
RAM:5701 ??                       ds 1
RAM:5702 ??                       ds 1
RAM:5703 ??                       ds 1
RAM:5704 ??                       ds 1
RAM:5705 ??                       ds 1
RAM:5706 ??                       ds 1
RAM:5707 ??                       ds 1
RAM:5708 ??                       ds 1
RAM:5709 ??                       ds 1
RAM:570A ??                       ds 1
RAM:570B ??                       ds 1
RAM:570C ??                       ds 1
RAM:570D ??                       ds 1
RAM:570E ??                       ds 1
RAM:570F ??                       ds 1
RAM:5710 ??                       ds 1
RAM:5711 ??                       ds 1
RAM:5712 ??                       ds 1
RAM:5713 ??                       ds 1
RAM:5714 ??                       ds 1
RAM:5715 ??                       ds 1
RAM:5716 ??                       ds 1
RAM:5717 ??                       ds 1
RAM:5718 ??                       ds 1
RAM:5719 ??                       ds 1
RAM:571A ??                       ds 1
RAM:571B ??                       ds 1
RAM:571C ??                       ds 1
RAM:571D ??                       ds 1
RAM:571E ??                       ds 1
RAM:571F ??                       ds 1
RAM:5720 ??                       ds 1
RAM:5721 ??                       ds 1
RAM:5722 ??                       ds 1
RAM:5723 ??                       ds 1
RAM:5724 ??                       ds 1
RAM:5725 ??                       ds 1
RAM:5726 ??                       ds 1
RAM:5727 ??                       ds 1
RAM:5728 ??                       ds 1
RAM:5729 ??                       ds 1
RAM:572A ??                       ds 1
RAM:572B ??                       ds 1
RAM:572C ??                       ds 1
RAM:572D ??                       ds 1
RAM:572E ??                       ds 1
RAM:572F ??                       ds 1
RAM:5730 ??                       ds 1
RAM:5731 ??                       ds 1
RAM:5732 ??                       ds 1
RAM:5733 ??                       ds 1
RAM:5734 ??                       ds 1
RAM:5735 ??                       ds 1
RAM:5736 ??                       ds 1
RAM:5737 ??                       ds 1
RAM:5738 ??                       ds 1
RAM:5739 ??                       ds 1
RAM:573A ??                       ds 1
RAM:573B ??                       ds 1
RAM:573C ??                       ds 1
RAM:573D ??                       ds 1
RAM:573E ??                       ds 1
RAM:573F ??                       ds 1
RAM:5740 ??                       ds 1
RAM:5741 ??                       ds 1
RAM:5742 ??                       ds 1
RAM:5743 ??                       ds 1
RAM:5744 ??                       ds 1
RAM:5745 ??                       ds 1
RAM:5746 ??                       ds 1
RAM:5747 ??                       ds 1
RAM:5748 ??                       ds 1
RAM:5749 ??                       ds 1
RAM:574A ??                       ds 1
RAM:574B ??                       ds 1
RAM:574C ??                       ds 1
RAM:574D ??                       ds 1
RAM:574E ??                       ds 1
RAM:574F ??                       ds 1
RAM:5750 ??                       ds 1
RAM:5751 ??                       ds 1
RAM:5752 ??                       ds 1
RAM:5753 ??                       ds 1
RAM:5754 ??                       ds 1
RAM:5755 ??                       ds 1
RAM:5756 ??                       ds 1
RAM:5757 ??                       ds 1
RAM:5758 ??                       ds 1
RAM:5759 ??                       ds 1
RAM:575A ??                       ds 1
RAM:575B ??                       ds 1
RAM:575C ??                       ds 1
RAM:575D ??                       ds 1
RAM:575E ??                       ds 1
RAM:575F ??                       ds 1
RAM:5760 ??                       ds 1
RAM:5761 ??                       ds 1
RAM:5762 ??                       ds 1
RAM:5763 ??                       ds 1
RAM:5764 ??                       ds 1
RAM:5765 ??                       ds 1
RAM:5766 ??                       ds 1
RAM:5767 ??                       ds 1
RAM:5768 ??                       ds 1
RAM:5769 ??                       ds 1
RAM:576A ??                       ds 1
RAM:576B ??                       ds 1
RAM:576C ??                       ds 1
RAM:576D ??                       ds 1
RAM:576E ??                       ds 1
RAM:576F ??                       ds 1
RAM:5770 ??                       ds 1
RAM:5771 ??                       ds 1
RAM:5772 ??                       ds 1
RAM:5773 ??                       ds 1
RAM:5774 ??                       ds 1
RAM:5775 ??                       ds 1
RAM:5776 ??                       ds 1
RAM:5777 ??                       ds 1
RAM:5778 ??                       ds 1
RAM:5779 ??                       ds 1
RAM:577A ??                       ds 1
RAM:577B ??                       ds 1
RAM:577C ??                       ds 1
RAM:577D ??                       ds 1
RAM:577E ??                       ds 1
RAM:577F ??                       ds 1
RAM:5780 ??                       ds 1
RAM:5781 ??                       ds 1
RAM:5782 ??                       ds 1
RAM:5783 ??                       ds 1
RAM:5784 ??                       ds 1
RAM:5785 ??                       ds 1
RAM:5786 ??                       ds 1
RAM:5787 ??                       ds 1
RAM:5788 ??                       ds 1
RAM:5789 ??                       ds 1
RAM:578A ??                       ds 1
RAM:578B ??                       ds 1
RAM:578C ??                       ds 1
RAM:578D ??                       ds 1
RAM:578E ??                       ds 1
RAM:578F ??                       ds 1
RAM:5790 ??                       ds 1
RAM:5791 ??                       ds 1
RAM:5792 ??                       ds 1
RAM:5793 ??                       ds 1
RAM:5794 ??                       ds 1
RAM:5795 ??                       ds 1
RAM:5796 ??                       ds 1
RAM:5797 ??                       ds 1
RAM:5798 ??                       ds 1
RAM:5799 ??                       ds 1
RAM:579A ??                       ds 1
RAM:579B ??                       ds 1
RAM:579C ??                       ds 1
RAM:579D ??                       ds 1
RAM:579E ??                       ds 1
RAM:579F ??                       ds 1
RAM:57A0 ??                       ds 1
RAM:57A1 ??                       ds 1
RAM:57A2 ??                       ds 1
RAM:57A3 ??                       ds 1
RAM:57A4 ??                       ds 1
RAM:57A5 ??                       ds 1
RAM:57A6 ??                       ds 1
RAM:57A7 ??                       ds 1
RAM:57A8 ??                       ds 1
RAM:57A9 ??                       ds 1
RAM:57AA ??                       ds 1
RAM:57AB ??                       ds 1
RAM:57AC ??                       ds 1
RAM:57AD ??                       ds 1
RAM:57AE ??                       ds 1
RAM:57AF ??                       ds 1
RAM:57B0 ??                       ds 1
RAM:57B1 ??                       ds 1
RAM:57B2 ??                       ds 1
RAM:57B3 ??                       ds 1
RAM:57B4 ??                       ds 1
RAM:57B5 ??                       ds 1
RAM:57B6 ??                       ds 1
RAM:57B7 ??                       ds 1
RAM:57B8 ??                       ds 1
RAM:57B9 ??                       ds 1
RAM:57BA ??                       ds 1
RAM:57BB ??                       ds 1
RAM:57BC ??                       ds 1
RAM:57BD ??                       ds 1
RAM:57BE ??                       ds 1
RAM:57BF ??                       ds 1
RAM:57C0 ??                       ds 1
RAM:57C1 ??                       ds 1
RAM:57C2 ??                       ds 1
RAM:57C3 ??                       ds 1
RAM:57C4 ??                       ds 1
RAM:57C5 ??                       ds 1
RAM:57C6 ??                       ds 1
RAM:57C7 ??                       ds 1
RAM:57C8 ??                       ds 1
RAM:57C9 ??                       ds 1
RAM:57CA ??                       ds 1
RAM:57CB ??                       ds 1
RAM:57CC ??                       ds 1
RAM:57CD ??                       ds 1
RAM:57CE ??                       ds 1
RAM:57CF ??                       ds 1
RAM:57D0 ??                       ds 1
RAM:57D1 ??                       ds 1
RAM:57D2 ??                       ds 1
RAM:57D3 ??                       ds 1
RAM:57D4 ??                       ds 1
RAM:57D5 ??                       ds 1
RAM:57D6 ??                       ds 1
RAM:57D7 ??                       ds 1
RAM:57D8 ??                       ds 1
RAM:57D9 ??                       ds 1
RAM:57DA ??                       ds 1
RAM:57DB ??                       ds 1
RAM:57DC ??                       ds 1
RAM:57DD ??                       ds 1
RAM:57DE ??                       ds 1
RAM:57DF ??                       ds 1
RAM:57E0 ??                       ds 1
RAM:57E1 ??                       ds 1
RAM:57E2 ??                       ds 1
RAM:57E3 ??                       ds 1
RAM:57E4 ??                       ds 1
RAM:57E5 ??                       ds 1
RAM:57E6 ??                       ds 1
RAM:57E7 ??                       ds 1
RAM:57E8 ??                       ds 1
RAM:57E9 ??                       ds 1
RAM:57EA ??                       ds 1
RAM:57EB ??                       ds 1
RAM:57EC ??                       ds 1
RAM:57ED ??                       ds 1
RAM:57EE ??                       ds 1
RAM:57EF ??                       ds 1
RAM:57F0 ??                       ds 1
RAM:57F1 ??                       ds 1
RAM:57F2 ??                       ds 1
RAM:57F3 ??                       ds 1
RAM:57F4 ??                       ds 1
RAM:57F5 ??                       ds 1
RAM:57F6 ??                       ds 1
RAM:57F7 ??                       ds 1
RAM:57F8 ??                       ds 1
RAM:57F9 ??                       ds 1
RAM:57FA ??                       ds 1
RAM:57FB ??                       ds 1
RAM:57FC ??                       ds 1
RAM:57FD ??                       ds 1
RAM:57FE ??                       ds 1
RAM:57FF ??                       ds 1
RAM:5800 ??                       ds 1
RAM:5801 ??                       ds 1
RAM:5802 ??                       ds 1
RAM:5803 ??                       ds 1
RAM:5804 ??                       ds 1
RAM:5805 ??                       ds 1
RAM:5806 ??                       ds 1
RAM:5807 ??                       ds 1
RAM:5808 ??                       ds 1
RAM:5809 ??                       ds 1
RAM:580A ??                       ds 1
RAM:580B ??                       ds 1
RAM:580C ??                       ds 1
RAM:580D ??                       ds 1
RAM:580E ??                       ds 1
RAM:580F ??                       ds 1
RAM:5810 ??                       ds 1
RAM:5811 ??                       ds 1
RAM:5812 ??                       ds 1
RAM:5813 ??                       ds 1
RAM:5814 ??                       ds 1
RAM:5815 ??                       ds 1
RAM:5816 ??                       ds 1
RAM:5817 ??                       ds 1
RAM:5818 ??                       ds 1
RAM:5819 ??                       ds 1
RAM:581A ??                       ds 1
RAM:581B ??                       ds 1
RAM:581C ??                       ds 1
RAM:581D ??                       ds 1
RAM:581E ??                       ds 1
RAM:581F ??                       ds 1
RAM:5820 ??                       ds 1
RAM:5821 ??                       ds 1
RAM:5822 ??                       ds 1
RAM:5823 ??                       ds 1
RAM:5824 ??                       ds 1
RAM:5825 ??                       ds 1
RAM:5826 ??                       ds 1
RAM:5827 ??                       ds 1
RAM:5828 ??                       ds 1
RAM:5829 ??                       ds 1
RAM:582A ??                       ds 1
RAM:582B ??                       ds 1
RAM:582C ??                       ds 1
RAM:582D ??                       ds 1
RAM:582E ??                       ds 1
RAM:582F ??                       ds 1
RAM:5830 ??                       ds 1
RAM:5831 ??                       ds 1
RAM:5832 ??                       ds 1
RAM:5833 ??                       ds 1
RAM:5834 ??                       ds 1
RAM:5835 ??                       ds 1
RAM:5836 ??                       ds 1
RAM:5837 ??                       ds 1
RAM:5838 ??                       ds 1
RAM:5839 ??                       ds 1
RAM:583A ??                       ds 1
RAM:583B ??                       ds 1
RAM:583C ??                       ds 1
RAM:583D ??                       ds 1
RAM:583E ??                       ds 1
RAM:583F ??                       ds 1
RAM:5840 ??                       ds 1
RAM:5841 ??                       ds 1
RAM:5842 ??                       ds 1
RAM:5843 ??                       ds 1
RAM:5844 ??                       ds 1
RAM:5845 ??                       ds 1
RAM:5846 ??                       ds 1
RAM:5847 ??                       ds 1
RAM:5848 ??                       ds 1
RAM:5849 ??                       ds 1
RAM:584A ??                       ds 1
RAM:584B ??                       ds 1
RAM:584C ??                       ds 1
RAM:584D ??                       ds 1
RAM:584E ??                       ds 1
RAM:584F ??                       ds 1
RAM:5850 ??                       ds 1
RAM:5851 ??                       ds 1
RAM:5852 ??                       ds 1
RAM:5853 ??                       ds 1
RAM:5854 ??                       ds 1
RAM:5855 ??                       ds 1
RAM:5856 ??                       ds 1
RAM:5857 ??                       ds 1
RAM:5858 ??                       ds 1
RAM:5859 ??                       ds 1
RAM:585A ??                       ds 1
RAM:585B ??                       ds 1
RAM:585C ??                       ds 1
RAM:585D ??                       ds 1
RAM:585E ??                       ds 1
RAM:585F ??                       ds 1
RAM:5860 ??                       ds 1
RAM:5861 ??                       ds 1
RAM:5862 ??                       ds 1
RAM:5863 ??                       ds 1
RAM:5864 ??                       ds 1
RAM:5865 ??                       ds 1
RAM:5866 ??                       ds 1
RAM:5867 ??                       ds 1
RAM:5868 ??                       ds 1
RAM:5869 ??                       ds 1
RAM:586A ??                       ds 1
RAM:586B ??                       ds 1
RAM:586C ??                       ds 1
RAM:586D ??                       ds 1
RAM:586E ??                       ds 1
RAM:586F ??                       ds 1
RAM:5870 ??                       ds 1
RAM:5871 ??                       ds 1
RAM:5872 ??                       ds 1
RAM:5873 ??                       ds 1
RAM:5874 ??                       ds 1
RAM:5875 ??                       ds 1
RAM:5876 ??                       ds 1
RAM:5877 ??                       ds 1
RAM:5878 ??                       ds 1
RAM:5879 ??                       ds 1
RAM:587A ??                       ds 1
RAM:587B ??                       ds 1
RAM:587C ??                       ds 1
RAM:587D ??                       ds 1
RAM:587E ??                       ds 1
RAM:587F ??                       ds 1
RAM:5880 ??                       ds 1
RAM:5881 ??                       ds 1
RAM:5882 ??                       ds 1
RAM:5883 ??                       ds 1
RAM:5884 ??                       ds 1
RAM:5885 ??                       ds 1
RAM:5886 ??                       ds 1
RAM:5887 ??                       ds 1
RAM:5888 ??                       ds 1
RAM:5889 ??                       ds 1
RAM:588A ??                       ds 1
RAM:588B ??                       ds 1
RAM:588C ??                       ds 1
RAM:588D ??                       ds 1
RAM:588E ??                       ds 1
RAM:588F ??                       ds 1
RAM:5890 ??                       ds 1
RAM:5891 ??                       ds 1
RAM:5892 ??                       ds 1
RAM:5893 ??                       ds 1
RAM:5894 ??                       ds 1
RAM:5895 ??                       ds 1
RAM:5896 ??                       ds 1
RAM:5897 ??                       ds 1
RAM:5898 ??                       ds 1
RAM:5899 ??                       ds 1
RAM:589A ??                       ds 1
RAM:589B ??                       ds 1
RAM:589C ??                       ds 1
RAM:589D ??                       ds 1
RAM:589E ??                       ds 1
RAM:589F ??                       ds 1
RAM:58A0 ??                       ds 1
RAM:58A1 ??                       ds 1
RAM:58A2 ??                       ds 1
RAM:58A3 ??                       ds 1
RAM:58A4 ??                       ds 1
RAM:58A5 ??                       ds 1
RAM:58A6 ??                       ds 1
RAM:58A7 ??                       ds 1
RAM:58A8 ??                       ds 1
RAM:58A9 ??                       ds 1
RAM:58AA ??                       ds 1
RAM:58AB ??                       ds 1
RAM:58AC ??                       ds 1
RAM:58AD ??                       ds 1
RAM:58AE ??                       ds 1
RAM:58AF ??                       ds 1
RAM:58B0 ??                       ds 1
RAM:58B1 ??                       ds 1
RAM:58B2 ??                       ds 1
RAM:58B3 ??                       ds 1
RAM:58B4 ??                       ds 1
RAM:58B5 ??                       ds 1
RAM:58B6 ??                       ds 1
RAM:58B7 ??                       ds 1
RAM:58B8 ??                       ds 1
RAM:58B9 ??                       ds 1
RAM:58BA ??                       ds 1
RAM:58BB ??                       ds 1
RAM:58BC ??                       ds 1
RAM:58BD ??                       ds 1
RAM:58BE ??                       ds 1
RAM:58BF ??                       ds 1
RAM:58C0 ??                       ds 1
RAM:58C1 ??                       ds 1
RAM:58C2 ??                       ds 1
RAM:58C3 ??                       ds 1
RAM:58C4 ??                       ds 1
RAM:58C5 ??                       ds 1
RAM:58C6 ??                       ds 1
RAM:58C7 ??                       ds 1
RAM:58C8 ??                       ds 1
RAM:58C9 ??                       ds 1
RAM:58CA ??                       ds 1
RAM:58CB ??                       ds 1
RAM:58CC ??                       ds 1
RAM:58CD ??                       ds 1
RAM:58CE ??                       ds 1
RAM:58CF ??                       ds 1
RAM:58D0 ??                       ds 1
RAM:58D1 ??                       ds 1
RAM:58D2 ??                       ds 1
RAM:58D3 ??                       ds 1
RAM:58D4 ??                       ds 1
RAM:58D5 ??                       ds 1
RAM:58D6 ??                       ds 1
RAM:58D7 ??                       ds 1
RAM:58D8 ??                       ds 1
RAM:58D9 ??                       ds 1
RAM:58DA ??                       ds 1
RAM:58DB ??                       ds 1
RAM:58DC ??                       ds 1
RAM:58DD ??                       ds 1
RAM:58DE ??                       ds 1
RAM:58DF ??                       ds 1
RAM:58E0 ??                       ds 1
RAM:58E1 ??                       ds 1
RAM:58E2 ??                       ds 1
RAM:58E3 ??                       ds 1
RAM:58E4 ??                       ds 1
RAM:58E5 ??                       ds 1
RAM:58E6 ??                       ds 1
RAM:58E7 ??                       ds 1
RAM:58E8 ??                       ds 1
RAM:58E9 ??                       ds 1
RAM:58EA ??                       ds 1
RAM:58EB ??                       ds 1
RAM:58EC ??                       ds 1
RAM:58ED ??                       ds 1
RAM:58EE ??                       ds 1
RAM:58EF ??                       ds 1
RAM:58F0 ??                       ds 1
RAM:58F1 ??                       ds 1
RAM:58F2 ??                       ds 1
RAM:58F3 ??                       ds 1
RAM:58F4 ??                       ds 1
RAM:58F5 ??                       ds 1
RAM:58F6 ??                       ds 1
RAM:58F7 ??                       ds 1
RAM:58F8 ??                       ds 1
RAM:58F9 ??                       ds 1
RAM:58FA ??                       ds 1
RAM:58FB ??                       ds 1
RAM:58FC ??                       ds 1
RAM:58FD ??                       ds 1
RAM:58FE ??                       ds 1
RAM:58FF ??                       ds 1
RAM:5900 ??                       ds 1
RAM:5901 ??                       ds 1
RAM:5902 ??                       ds 1
RAM:5903 ??                       ds 1
RAM:5904 ??                       ds 1
RAM:5905 ??                       ds 1
RAM:5906 ??                       ds 1
RAM:5907 ??                       ds 1
RAM:5908 ??                       ds 1
RAM:5909 ??                       ds 1
RAM:590A ??                       ds 1
RAM:590B ??                       ds 1
RAM:590C ??                       ds 1
RAM:590D ??                       ds 1
RAM:590E ??                       ds 1
RAM:590F ??                       ds 1
RAM:5910 ??                       ds 1
RAM:5911 ??                       ds 1
RAM:5912 ??                       ds 1
RAM:5913 ??                       ds 1
RAM:5914 ??                       ds 1
RAM:5915 ??                       ds 1
RAM:5916 ??                       ds 1
RAM:5917 ??                       ds 1
RAM:5918 ??                       ds 1
RAM:5919 ??                       ds 1
RAM:591A ??                       ds 1
RAM:591B ??                       ds 1
RAM:591C ??                       ds 1
RAM:591D ??                       ds 1
RAM:591E ??                       ds 1
RAM:591F ??                       ds 1
RAM:5920 ??                       ds 1
RAM:5921 ??                       ds 1
RAM:5922 ??                       ds 1
RAM:5923 ??                       ds 1
RAM:5924 ??                       ds 1
RAM:5925 ??                       ds 1
RAM:5926 ??                       ds 1
RAM:5927 ??                       ds 1
RAM:5928 ??                       ds 1
RAM:5929 ??                       ds 1
RAM:592A ??                       ds 1
RAM:592B ??                       ds 1
RAM:592C ??                       ds 1
RAM:592D ??                       ds 1
RAM:592E ??                       ds 1
RAM:592F ??                       ds 1
RAM:5930 ??                       ds 1
RAM:5931 ??                       ds 1
RAM:5932 ??                       ds 1
RAM:5933 ??                       ds 1
RAM:5934 ??                       ds 1
RAM:5935 ??                       ds 1
RAM:5936 ??                       ds 1
RAM:5937 ??                       ds 1
RAM:5938 ??                       ds 1
RAM:5939 ??                       ds 1
RAM:593A ??                       ds 1
RAM:593B ??                       ds 1
RAM:593C ??                       ds 1
RAM:593D ??                       ds 1
RAM:593E ??                       ds 1
RAM:593F ??                       ds 1
RAM:5940 ??                       ds 1
RAM:5941 ??                       ds 1
RAM:5942 ??                       ds 1
RAM:5943 ??                       ds 1
RAM:5944 ??                       ds 1
RAM:5945 ??                       ds 1
RAM:5946 ??                       ds 1
RAM:5947 ??                       ds 1
RAM:5948 ??                       ds 1
RAM:5949 ??                       ds 1
RAM:594A ??                       ds 1
RAM:594B ??                       ds 1
RAM:594C ??                       ds 1
RAM:594D ??                       ds 1
RAM:594E ??                       ds 1
RAM:594F ??                       ds 1
RAM:5950 ??                       ds 1
RAM:5951 ??                       ds 1
RAM:5952 ??                       ds 1
RAM:5953 ??                       ds 1
RAM:5954 ??                       ds 1
RAM:5955 ??                       ds 1
RAM:5956 ??                       ds 1
RAM:5957 ??                       ds 1
RAM:5958 ??                       ds 1
RAM:5959 ??                       ds 1
RAM:595A ??                       ds 1
RAM:595B ??                       ds 1
RAM:595C ??                       ds 1
RAM:595D ??                       ds 1
RAM:595E ??                       ds 1
RAM:595F ??                       ds 1
RAM:5960 ??                       ds 1
RAM:5961 ??                       ds 1
RAM:5962 ??                       ds 1
RAM:5963 ??                       ds 1
RAM:5964 ??                       ds 1
RAM:5965 ??                       ds 1
RAM:5966 ??                       ds 1
RAM:5967 ??                       ds 1
RAM:5968 ??                       ds 1
RAM:5969 ??                       ds 1
RAM:596A ??                       ds 1
RAM:596B ??                       ds 1
RAM:596C ??                       ds 1
RAM:596D ??                       ds 1
RAM:596E ??                       ds 1
RAM:596F ??                       ds 1
RAM:5970 ??                       ds 1
RAM:5971 ??                       ds 1
RAM:5972 ??                       ds 1
RAM:5973 ??                       ds 1
RAM:5974 ??                       ds 1
RAM:5975 ??                       ds 1
RAM:5976 ??                       ds 1
RAM:5977 ??                       ds 1
RAM:5978 ??                       ds 1
RAM:5979 ??                       ds 1
RAM:597A ??                       ds 1
RAM:597B ??                       ds 1
RAM:597C ??                       ds 1
RAM:597D ??                       ds 1
RAM:597E ??                       ds 1
RAM:597F ??                       ds 1
RAM:5980 ??                       ds 1
RAM:5981 ??                       ds 1
RAM:5982 ??                       ds 1
RAM:5983 ??                       ds 1
RAM:5984 ??                       ds 1
RAM:5985 ??                       ds 1
RAM:5986 ??                       ds 1
RAM:5987 ??                       ds 1
RAM:5988 ??                       ds 1
RAM:5989 ??                       ds 1
RAM:598A ??                       ds 1
RAM:598B ??                       ds 1
RAM:598C ??                       ds 1
RAM:598D ??                       ds 1
RAM:598E ??                       ds 1
RAM:598F ??                       ds 1
RAM:5990 ??                       ds 1
RAM:5991 ??                       ds 1
RAM:5992 ??                       ds 1
RAM:5993 ??                       ds 1
RAM:5994 ??                       ds 1
RAM:5995 ??                       ds 1
RAM:5996 ??                       ds 1
RAM:5997 ??                       ds 1
RAM:5998 ??                       ds 1
RAM:5999 ??                       ds 1
RAM:599A ??                       ds 1
RAM:599B ??                       ds 1
RAM:599C ??                       ds 1
RAM:599D ??                       ds 1
RAM:599E ??                       ds 1
RAM:599F ??                       ds 1
RAM:59A0 ??                       ds 1
RAM:59A1 ??                       ds 1
RAM:59A2 ??                       ds 1
RAM:59A3 ??                       ds 1
RAM:59A4 ??                       ds 1
RAM:59A5 ??                       ds 1
RAM:59A6 ??                       ds 1
RAM:59A7 ??                       ds 1
RAM:59A8 ??                       ds 1
RAM:59A9 ??                       ds 1
RAM:59AA ??                       ds 1
RAM:59AB ??                       ds 1
RAM:59AC ??                       ds 1
RAM:59AD ??                       ds 1
RAM:59AE ??                       ds 1
RAM:59AF ??                       ds 1
RAM:59B0 ??                       ds 1
RAM:59B1 ??                       ds 1
RAM:59B2 ??                       ds 1
RAM:59B3 ??                       ds 1
RAM:59B4 ??                       ds 1
RAM:59B5 ??                       ds 1
RAM:59B6 ??                       ds 1
RAM:59B7 ??                       ds 1
RAM:59B8 ??                       ds 1
RAM:59B9 ??                       ds 1
RAM:59BA ??                       ds 1
RAM:59BB ??                       ds 1
RAM:59BC ??                       ds 1
RAM:59BD ??                       ds 1
RAM:59BE ??                       ds 1
RAM:59BF ??                       ds 1
RAM:59C0 ??                       ds 1
RAM:59C1 ??                       ds 1
RAM:59C2 ??                       ds 1
RAM:59C3 ??                       ds 1
RAM:59C4 ??                       ds 1
RAM:59C5 ??                       ds 1
RAM:59C6 ??                       ds 1
RAM:59C7 ??                       ds 1
RAM:59C8 ??                       ds 1
RAM:59C9 ??                       ds 1
RAM:59CA ??                       ds 1
RAM:59CB ??                       ds 1
RAM:59CC ??                       ds 1
RAM:59CD ??                       ds 1
RAM:59CE ??                       ds 1
RAM:59CF ??                       ds 1
RAM:59D0 ??                       ds 1
RAM:59D1 ??                       ds 1
RAM:59D2 ??                       ds 1
RAM:59D3 ??                       ds 1
RAM:59D4 ??                       ds 1
RAM:59D5 ??                       ds 1
RAM:59D6 ??                       ds 1
RAM:59D7 ??                       ds 1
RAM:59D8 ??                       ds 1
RAM:59D9 ??                       ds 1
RAM:59DA ??                       ds 1
RAM:59DB ??                       ds 1
RAM:59DC ??                       ds 1
RAM:59DD ??                       ds 1
RAM:59DE ??                       ds 1
RAM:59DF ??                       ds 1
RAM:59E0 ??                       ds 1
RAM:59E1 ??                       ds 1
RAM:59E2 ??                       ds 1
RAM:59E3 ??                       ds 1
RAM:59E4 ??                       ds 1
RAM:59E5 ??                       ds 1
RAM:59E6 ??                       ds 1
RAM:59E7 ??                       ds 1
RAM:59E8 ??                       ds 1
RAM:59E9 ??                       ds 1
RAM:59EA ??                       ds 1
RAM:59EB ??                       ds 1
RAM:59EC ??                       ds 1
RAM:59ED ??                       ds 1
RAM:59EE ??                       ds 1
RAM:59EF ??                       ds 1
RAM:59F0 ??                       ds 1
RAM:59F1 ??                       ds 1
RAM:59F2 ??                       ds 1
RAM:59F3 ??                       ds 1
RAM:59F4 ??                       ds 1
RAM:59F5 ??                       ds 1
RAM:59F6 ??                       ds 1
RAM:59F7 ??                       ds 1
RAM:59F8 ??                       ds 1
RAM:59F9 ??                       ds 1
RAM:59FA ??                       ds 1
RAM:59FB ??                       ds 1
RAM:59FC ??                       ds 1
RAM:59FD ??                       ds 1
RAM:59FE ??                       ds 1
RAM:59FF ??                       ds 1
RAM:5A00 ??                       ds 1
RAM:5A01 ??                       ds 1
RAM:5A02 ??                       ds 1
RAM:5A03 ??                       ds 1
RAM:5A04 ??                       ds 1
RAM:5A05 ??                       ds 1
RAM:5A06 ??                       ds 1
RAM:5A07 ??                       ds 1
RAM:5A08 ??                       ds 1
RAM:5A09 ??                       ds 1
RAM:5A0A ??                       ds 1
RAM:5A0B ??                       ds 1
RAM:5A0C ??                       ds 1
RAM:5A0D ??                       ds 1
RAM:5A0E ??                       ds 1
RAM:5A0F ??                       ds 1
RAM:5A10 ??                       ds 1
RAM:5A11 ??                       ds 1
RAM:5A12 ??                       ds 1
RAM:5A13 ??                       ds 1
RAM:5A14 ??                       ds 1
RAM:5A15 ??                       ds 1
RAM:5A16 ??                       ds 1
RAM:5A17 ??                       ds 1
RAM:5A18 ??                       ds 1
RAM:5A19 ??                       ds 1
RAM:5A1A ??                       ds 1
RAM:5A1B ??                       ds 1
RAM:5A1C ??                       ds 1
RAM:5A1D ??                       ds 1
RAM:5A1E ??                       ds 1
RAM:5A1F ??                       ds 1
RAM:5A20 ??                       ds 1
RAM:5A21 ??                       ds 1
RAM:5A22 ??                       ds 1
RAM:5A23 ??                       ds 1
RAM:5A24 ??                       ds 1
RAM:5A25 ??                       ds 1
RAM:5A26 ??                       ds 1
RAM:5A27 ??                       ds 1
RAM:5A28 ??                       ds 1
RAM:5A29 ??                       ds 1
RAM:5A2A ??                       ds 1
RAM:5A2B ??                       ds 1
RAM:5A2C ??                       ds 1
RAM:5A2D ??                       ds 1
RAM:5A2E ??                       ds 1
RAM:5A2F ??                       ds 1
RAM:5A30 ??                       ds 1
RAM:5A31 ??                       ds 1
RAM:5A32 ??                       ds 1
RAM:5A33 ??                       ds 1
RAM:5A34 ??                       ds 1
RAM:5A35 ??                       ds 1
RAM:5A36 ??                       ds 1
RAM:5A37 ??                       ds 1
RAM:5A38 ??                       ds 1
RAM:5A39 ??                       ds 1
RAM:5A3A ??                       ds 1
RAM:5A3B ??                       ds 1
RAM:5A3C ??                       ds 1
RAM:5A3D ??                       ds 1
RAM:5A3E ??                       ds 1
RAM:5A3F ??                       ds 1
RAM:5A40 ??                       ds 1
RAM:5A41 ??                       ds 1
RAM:5A42 ??                       ds 1
RAM:5A43 ??                       ds 1
RAM:5A44 ??                       ds 1
RAM:5A45 ??                       ds 1
RAM:5A46 ??                       ds 1
RAM:5A47 ??                       ds 1
RAM:5A48 ??                       ds 1
RAM:5A49 ??                       ds 1
RAM:5A4A ??                       ds 1
RAM:5A4B ??                       ds 1
RAM:5A4C ??                       ds 1
RAM:5A4D ??                       ds 1
RAM:5A4E ??                       ds 1
RAM:5A4F ??                       ds 1
RAM:5A50 ??                       ds 1
RAM:5A51 ??                       ds 1
RAM:5A52 ??                       ds 1
RAM:5A53 ??                       ds 1
RAM:5A54 ??                       ds 1
RAM:5A55 ??                       ds 1
RAM:5A56 ??                       ds 1
RAM:5A57 ??                       ds 1
RAM:5A58 ??                       ds 1
RAM:5A59 ??                       ds 1
RAM:5A5A ??                       ds 1
RAM:5A5B ??                       ds 1
RAM:5A5C ??                       ds 1
RAM:5A5D ??                       ds 1
RAM:5A5E ??                       ds 1
RAM:5A5F ??                       ds 1
RAM:5A60 ??                       ds 1
RAM:5A61 ??                       ds 1
RAM:5A62 ??                       ds 1
RAM:5A63 ??                       ds 1
RAM:5A64 ??                       ds 1
RAM:5A65 ??                       ds 1
RAM:5A66 ??                       ds 1
RAM:5A67 ??                       ds 1
RAM:5A68 ??                       ds 1
RAM:5A69 ??                       ds 1
RAM:5A6A ??                       ds 1
RAM:5A6B ??                       ds 1
RAM:5A6C ??                       ds 1
RAM:5A6D ??                       ds 1
RAM:5A6E ??                       ds 1
RAM:5A6F ??                       ds 1
RAM:5A70 ??                       ds 1
RAM:5A71 ??                       ds 1
RAM:5A72 ??                       ds 1
RAM:5A73 ??                       ds 1
RAM:5A74 ??                       ds 1
RAM:5A75 ??                       ds 1
RAM:5A76 ??                       ds 1
RAM:5A77 ??                       ds 1
RAM:5A78 ??                       ds 1
RAM:5A79 ??                       ds 1
RAM:5A7A ??                       ds 1
RAM:5A7B ??                       ds 1
RAM:5A7C ??                       ds 1
RAM:5A7D ??                       ds 1
RAM:5A7E ??                       ds 1
RAM:5A7F ??                       ds 1
RAM:5A80 ??                       ds 1
RAM:5A81 ??                       ds 1
RAM:5A82 ??                       ds 1
RAM:5A83 ??                       ds 1
RAM:5A84 ??                       ds 1
RAM:5A85 ??                       ds 1
RAM:5A86 ??                       ds 1
RAM:5A87 ??                       ds 1
RAM:5A88 ??                       ds 1
RAM:5A89 ??                       ds 1
RAM:5A8A ??                       ds 1
RAM:5A8B ??                       ds 1
RAM:5A8C ??                       ds 1
RAM:5A8D ??                       ds 1
RAM:5A8E ??                       ds 1
RAM:5A8F ??                       ds 1
RAM:5A90 ??                       ds 1
RAM:5A91 ??                       ds 1
RAM:5A92 ??                       ds 1
RAM:5A93 ??                       ds 1
RAM:5A94 ??                       ds 1
RAM:5A95 ??                       ds 1
RAM:5A96 ??                       ds 1
RAM:5A97 ??                       ds 1
RAM:5A98 ??                       ds 1
RAM:5A99 ??                       ds 1
RAM:5A9A ??                       ds 1
RAM:5A9B ??                       ds 1
RAM:5A9C ??                       ds 1
RAM:5A9D ??                       ds 1
RAM:5A9E ??                       ds 1
RAM:5A9F ??                       ds 1
RAM:5AA0 ??                       ds 1
RAM:5AA1 ??                       ds 1
RAM:5AA2 ??                       ds 1
RAM:5AA3 ??                       ds 1
RAM:5AA4 ??                       ds 1
RAM:5AA5 ??                       ds 1
RAM:5AA6 ??                       ds 1
RAM:5AA7 ??                       ds 1
RAM:5AA8 ??                       ds 1
RAM:5AA9 ??                       ds 1
RAM:5AAA ??                       ds 1
RAM:5AAB ??                       ds 1
RAM:5AAC ??                       ds 1
RAM:5AAD ??                       ds 1
RAM:5AAE ??                       ds 1
RAM:5AAF ??                       ds 1
RAM:5AB0 ??                       ds 1
RAM:5AB1 ??                       ds 1
RAM:5AB2 ??                       ds 1
RAM:5AB3 ??                       ds 1
RAM:5AB4 ??                       ds 1
RAM:5AB5 ??                       ds 1
RAM:5AB6 ??                       ds 1
RAM:5AB7 ??                       ds 1
RAM:5AB8 ??                       ds 1
RAM:5AB9 ??                       ds 1
RAM:5ABA ??                       ds 1
RAM:5ABB ??                       ds 1
RAM:5ABC ??                       ds 1
RAM:5ABD ??                       ds 1
RAM:5ABE ??                       ds 1
RAM:5ABF ??                       ds 1
RAM:5AC0 ??                       ds 1
RAM:5AC1 ??                       ds 1
RAM:5AC2 ??                       ds 1
RAM:5AC3 ??                       ds 1
RAM:5AC4 ??                       ds 1
RAM:5AC5 ??                       ds 1
RAM:5AC6 ??                       ds 1
RAM:5AC7 ??                       ds 1
RAM:5AC8 ??                       ds 1
RAM:5AC9 ??                       ds 1
RAM:5ACA ??                       ds 1
RAM:5ACB ??                       ds 1
RAM:5ACC ??                       ds 1
RAM:5ACD ??                       ds 1
RAM:5ACE ??                       ds 1
RAM:5ACF ??                       ds 1
RAM:5AD0 ??                       ds 1
RAM:5AD1 ??                       ds 1
RAM:5AD2 ??                       ds 1
RAM:5AD3 ??                       ds 1
RAM:5AD4 ??                       ds 1
RAM:5AD5 ??                       ds 1
RAM:5AD6 ??                       ds 1
RAM:5AD7 ??                       ds 1
RAM:5AD8 ??                       ds 1
RAM:5AD9 ??                       ds 1
RAM:5ADA ??                       ds 1
RAM:5ADB ??                       ds 1
RAM:5ADC ??                       ds 1
RAM:5ADD ??                       ds 1
RAM:5ADE ??                       ds 1
RAM:5ADF ??                       ds 1
RAM:5AE0 ??                       ds 1
RAM:5AE1 ??                       ds 1
RAM:5AE2 ??                       ds 1
RAM:5AE3 ??                       ds 1
RAM:5AE4 ??                       ds 1
RAM:5AE5 ??                       ds 1
RAM:5AE6 ??                       ds 1
RAM:5AE7 ??                       ds 1
RAM:5AE8 ??                       ds 1
RAM:5AE9 ??                       ds 1
RAM:5AEA ??                       ds 1
RAM:5AEB ??                       ds 1
RAM:5AEC ??                       ds 1
RAM:5AED ??                       ds 1
RAM:5AEE ??                       ds 1
RAM:5AEF ??                       ds 1
RAM:5AF0 ??                       ds 1
RAM:5AF1 ??                       ds 1
RAM:5AF2 ??                       ds 1
RAM:5AF3 ??                       ds 1
RAM:5AF4 ??                       ds 1
RAM:5AF5 ??                       ds 1
RAM:5AF6 ??                       ds 1
RAM:5AF7 ??                       ds 1
RAM:5AF8 ??                       ds 1
RAM:5AF9 ??                       ds 1
RAM:5AFA ??                       ds 1
RAM:5AFB ??                       ds 1
RAM:5AFC ??                       ds 1
RAM:5AFD ??                       ds 1
RAM:5AFE ??                       ds 1
RAM:5AFF ??                       ds 1
RAM:5B00 ??                       ds 1
RAM:5B01 ??                       ds 1
RAM:5B02 ??                       ds 1
RAM:5B03 ??                       ds 1
RAM:5B04 ??                       ds 1
RAM:5B05 ??                       ds 1
RAM:5B06 ??                       ds 1
RAM:5B07 ??                       ds 1
RAM:5B08 ??                       ds 1
RAM:5B09 ??                       ds 1
RAM:5B0A ??                       ds 1
RAM:5B0B ??                       ds 1
RAM:5B0C ??                       ds 1
RAM:5B0D ??                       ds 1
RAM:5B0E ??                       ds 1
RAM:5B0F ??                       ds 1
RAM:5B10 ??                       ds 1
RAM:5B11 ??                       ds 1
RAM:5B12 ??                       ds 1
RAM:5B13 ??                       ds 1
RAM:5B14 ??                       ds 1
RAM:5B15 ??                       ds 1
RAM:5B16 ??                       ds 1
RAM:5B17 ??                       ds 1
RAM:5B18 ??                       ds 1
RAM:5B19 ??                       ds 1
RAM:5B1A ??                       ds 1
RAM:5B1B ??                       ds 1
RAM:5B1C ??                       ds 1
RAM:5B1D ??                       ds 1
RAM:5B1E ??                       ds 1
RAM:5B1F ??                       ds 1
RAM:5B20 ??                       ds 1
RAM:5B21 ??                       ds 1
RAM:5B22 ??                       ds 1
RAM:5B23 ??                       ds 1
RAM:5B24 ??                       ds 1
RAM:5B25 ??                       ds 1
RAM:5B26 ??                       ds 1
RAM:5B27 ??                       ds 1
RAM:5B28 ??                       ds 1
RAM:5B29 ??                       ds 1
RAM:5B2A ??                       ds 1
RAM:5B2B ??                       ds 1
RAM:5B2C ??                       ds 1
RAM:5B2D ??                       ds 1
RAM:5B2E ??                       ds 1
RAM:5B2F ??                       ds 1
RAM:5B30 ??                       ds 1
RAM:5B31 ??                       ds 1
RAM:5B32 ??                       ds 1
RAM:5B33 ??                       ds 1
RAM:5B34 ??                       ds 1
RAM:5B35 ??                       ds 1
RAM:5B36 ??                       ds 1
RAM:5B37 ??                       ds 1
RAM:5B38 ??                       ds 1
RAM:5B39 ??                       ds 1
RAM:5B3A ??                       ds 1
RAM:5B3B ??                       ds 1
RAM:5B3C ??                       ds 1
RAM:5B3D ??                       ds 1
RAM:5B3E ??                       ds 1
RAM:5B3F ??                       ds 1
RAM:5B40 ??                       ds 1
RAM:5B41 ??                       ds 1
RAM:5B42 ??                       ds 1
RAM:5B43 ??                       ds 1
RAM:5B44 ??                       ds 1
RAM:5B45 ??                       ds 1
RAM:5B46 ??                       ds 1
RAM:5B47 ??                       ds 1
RAM:5B48 ??                       ds 1
RAM:5B49 ??                       ds 1
RAM:5B4A ??                       ds 1
RAM:5B4B ??                       ds 1
RAM:5B4C ??                       ds 1
RAM:5B4D ??                       ds 1
RAM:5B4E ??                       ds 1
RAM:5B4F ??                       ds 1
RAM:5B50 ??                       ds 1
RAM:5B51 ??                       ds 1
RAM:5B52 ??                       ds 1
RAM:5B53 ??                       ds 1
RAM:5B54 ??                       ds 1
RAM:5B55 ??                       ds 1
RAM:5B56 ??                       ds 1
RAM:5B57 ??                       ds 1
RAM:5B58 ??                       ds 1
RAM:5B59 ??                       ds 1
RAM:5B5A ??                       ds 1
RAM:5B5B ??                       ds 1
RAM:5B5C ??                       ds 1
RAM:5B5D ??                       ds 1
RAM:5B5E ??                       ds 1
RAM:5B5F ??                       ds 1
RAM:5B60 ??                       ds 1
RAM:5B61 ??                       ds 1
RAM:5B62 ??                       ds 1
RAM:5B63 ??                       ds 1
RAM:5B64 ??                       ds 1
RAM:5B65 ??                       ds 1
RAM:5B66 ??                       ds 1
RAM:5B67 ??                       ds 1
RAM:5B68 ??                       ds 1
RAM:5B69 ??                       ds 1
RAM:5B6A ??                       ds 1
RAM:5B6B ??                       ds 1
RAM:5B6C ??                       ds 1
RAM:5B6D ??                       ds 1
RAM:5B6E ??                       ds 1
RAM:5B6F ??                       ds 1
RAM:5B70 ??                       ds 1
RAM:5B71 ??                       ds 1
RAM:5B72 ??                       ds 1
RAM:5B73 ??                       ds 1
RAM:5B74 ??                       ds 1
RAM:5B75 ??                       ds 1
RAM:5B76 ??                       ds 1
RAM:5B77 ??                       ds 1
RAM:5B78 ??                       ds 1
RAM:5B79 ??                       ds 1
RAM:5B7A ??                       ds 1
RAM:5B7B ??                       ds 1
RAM:5B7C ??                       ds 1
RAM:5B7D ??                       ds 1
RAM:5B7E ??                       ds 1
RAM:5B7F ??                       ds 1
RAM:5B80 ??                       ds 1
RAM:5B81 ??                       ds 1
RAM:5B82 ??                       ds 1
RAM:5B83 ??                       ds 1
RAM:5B84 ??                       ds 1
RAM:5B85 ??                       ds 1
RAM:5B86 ??                       ds 1
RAM:5B87 ??                       ds 1
RAM:5B88 ??                       ds 1
RAM:5B89 ??                       ds 1
RAM:5B8A ??                       ds 1
RAM:5B8B ??                       ds 1
RAM:5B8C ??                       ds 1
RAM:5B8D ??                       ds 1
RAM:5B8E ??                       ds 1
RAM:5B8F ??                       ds 1
RAM:5B90 ??                       ds 1
RAM:5B91 ??                       ds 1
RAM:5B92 ??                       ds 1
RAM:5B93 ??                       ds 1
RAM:5B94 ??                       ds 1
RAM:5B95 ??                       ds 1
RAM:5B96 ??                       ds 1
RAM:5B97 ??                       ds 1
RAM:5B98 ??                       ds 1
RAM:5B99 ??                       ds 1
RAM:5B9A ??                       ds 1
RAM:5B9B ??                       ds 1
RAM:5B9C ??                       ds 1
RAM:5B9D ??                       ds 1
RAM:5B9E ??                       ds 1
RAM:5B9F ??                       ds 1
RAM:5BA0 ??                       ds 1
RAM:5BA1 ??                       ds 1
RAM:5BA2 ??                       ds 1
RAM:5BA3 ??                       ds 1
RAM:5BA4 ??                       ds 1
RAM:5BA5 ??                       ds 1
RAM:5BA6 ??                       ds 1
RAM:5BA7 ??                       ds 1
RAM:5BA8 ??                       ds 1
RAM:5BA9 ??                       ds 1
RAM:5BAA ??                       ds 1
RAM:5BAB ??                       ds 1
RAM:5BAC ??                       ds 1
RAM:5BAD ??                       ds 1
RAM:5BAE ??                       ds 1
RAM:5BAF ??                       ds 1
RAM:5BB0 ??                       ds 1
RAM:5BB1 ??                       ds 1
RAM:5BB2 ??                       ds 1
RAM:5BB3 ??                       ds 1
RAM:5BB4 ??                       ds 1
RAM:5BB5 ??                       ds 1
RAM:5BB6 ??                       ds 1
RAM:5BB7 ??                       ds 1
RAM:5BB8 ??                       ds 1
RAM:5BB9 ??                       ds 1
RAM:5BBA ??                       ds 1
RAM:5BBB ??                       ds 1
RAM:5BBC ??                       ds 1
RAM:5BBD ??                       ds 1
RAM:5BBE ??                       ds 1
RAM:5BBF ??                       ds 1
RAM:5BC0 ??                       ds 1
RAM:5BC1 ??                       ds 1
RAM:5BC2 ??                       ds 1
RAM:5BC3 ??                       ds 1
RAM:5BC4 ??                       ds 1
RAM:5BC5 ??                       ds 1
RAM:5BC6 ??                       ds 1
RAM:5BC7 ??                       ds 1
RAM:5BC8 ??                       ds 1
RAM:5BC9 ??                       ds 1
RAM:5BCA ??                       ds 1
RAM:5BCB ??                       ds 1
RAM:5BCC ??                       ds 1
RAM:5BCD ??                       ds 1
RAM:5BCE ??                       ds 1
RAM:5BCF ??                       ds 1
RAM:5BD0 ??                       ds 1
RAM:5BD1 ??                       ds 1
RAM:5BD2 ??                       ds 1
RAM:5BD3 ??                       ds 1
RAM:5BD4 ??                       ds 1
RAM:5BD5 ??                       ds 1
RAM:5BD6 ??                       ds 1
RAM:5BD7 ??                       ds 1
RAM:5BD8 ??                       ds 1
RAM:5BD9 ??                       ds 1
RAM:5BDA ??                       ds 1
RAM:5BDB ??                       ds 1
RAM:5BDC ??                       ds 1
RAM:5BDD ??                       ds 1
RAM:5BDE ??                       ds 1
RAM:5BDF ??                       ds 1
RAM:5BE0 ??                       ds 1
RAM:5BE1 ??                       ds 1
RAM:5BE2 ??                       ds 1
RAM:5BE3 ??                       ds 1
RAM:5BE4 ??                       ds 1
RAM:5BE5 ??                       ds 1
RAM:5BE6 ??                       ds 1
RAM:5BE7 ??                       ds 1
RAM:5BE8 ??                       ds 1
RAM:5BE9 ??                       ds 1
RAM:5BEA ??                       ds 1
RAM:5BEB ??                       ds 1
RAM:5BEC ??                       ds 1
RAM:5BED ??                       ds 1
RAM:5BEE ??                       ds 1
RAM:5BEF ??                       ds 1
RAM:5BF0 ??                       ds 1
RAM:5BF1 ??                       ds 1
RAM:5BF2 ??                       ds 1
RAM:5BF3 ??                       ds 1
RAM:5BF4 ??                       ds 1
RAM:5BF5 ??                       ds 1
RAM:5BF6 ??                       ds 1
RAM:5BF7 ??                       ds 1
RAM:5BF8 ??                       ds 1
RAM:5BF9 ??                       ds 1
RAM:5BFA ??                       ds 1
RAM:5BFB ??                       ds 1
RAM:5BFC ??                       ds 1
RAM:5BFD ??                       ds 1
RAM:5BFE ??                       ds 1
RAM:5BFF ??                       ds 1
RAM:5C00 ??                       ds 1
RAM:5C01 ??                       ds 1
RAM:5C02 ??                       ds 1
RAM:5C03 ??                       ds 1
RAM:5C04 ??                       ds 1
RAM:5C05 ??                       ds 1
RAM:5C06 ??                       ds 1
RAM:5C07 ??                       ds 1
RAM:5C08 ??                       ds 1
RAM:5C09 ??                       ds 1
RAM:5C0A ??                       ds 1
RAM:5C0B ??                       ds 1
RAM:5C0C ??                       ds 1
RAM:5C0D ??                       ds 1
RAM:5C0E ??                       ds 1
RAM:5C0F ??                       ds 1
RAM:5C10 ??                       ds 1
RAM:5C11 ??                       ds 1
RAM:5C12 ??                       ds 1
RAM:5C13 ??                       ds 1
RAM:5C14 ??                       ds 1
RAM:5C15 ??                       ds 1
RAM:5C16 ??                       ds 1
RAM:5C17 ??                       ds 1
RAM:5C18 ??                       ds 1
RAM:5C19 ??                       ds 1
RAM:5C1A ??                       ds 1
RAM:5C1B ??                       ds 1
RAM:5C1C ??                       ds 1
RAM:5C1D ??                       ds 1
RAM:5C1E ??                       ds 1
RAM:5C1F ??                       ds 1
RAM:5C20 ??                       ds 1
RAM:5C21 ??                       ds 1
RAM:5C22 ??                       ds 1
RAM:5C23 ??                       ds 1
RAM:5C24 ??                       ds 1
RAM:5C25 ??                       ds 1
RAM:5C26 ??                       ds 1
RAM:5C27 ??                       ds 1
RAM:5C28 ??                       ds 1
RAM:5C29 ??                       ds 1
RAM:5C2A ??                       ds 1
RAM:5C2B ??                       ds 1
RAM:5C2C ??                       ds 1
RAM:5C2D ??                       ds 1
RAM:5C2E ??                       ds 1
RAM:5C2F ??                       ds 1
RAM:5C30 ??                       ds 1
RAM:5C31 ??                       ds 1
RAM:5C32 ??                       ds 1
RAM:5C33 ??                       ds 1
RAM:5C34 ??                       ds 1
RAM:5C35 ??                       ds 1
RAM:5C36 ??                       ds 1
RAM:5C37 ??                       ds 1
RAM:5C38 ??                       ds 1
RAM:5C39 ??                       ds 1
RAM:5C3A ??                       ds 1
RAM:5C3B ??                       ds 1
RAM:5C3C ??                       ds 1
RAM:5C3D ??                       ds 1
RAM:5C3E ??                       ds 1
RAM:5C3F ??                       ds 1
RAM:5C40 ??                       ds 1
RAM:5C41 ??                       ds 1
RAM:5C42 ??                       ds 1
RAM:5C43 ??                       ds 1
RAM:5C44 ??                       ds 1
RAM:5C45 ??                       ds 1
RAM:5C46 ??                       ds 1
RAM:5C47 ??                       ds 1
RAM:5C48 ??                       ds 1
RAM:5C49 ??                       ds 1
RAM:5C4A ??                       ds 1
RAM:5C4B ??                       ds 1
RAM:5C4C ??                       ds 1
RAM:5C4D ??                       ds 1
RAM:5C4E ??                       ds 1
RAM:5C4F ??                       ds 1
RAM:5C50 ??                       ds 1
RAM:5C51 ??                       ds 1
RAM:5C52 ??                       ds 1
RAM:5C53 ??                       ds 1
RAM:5C54 ??                       ds 1
RAM:5C55 ??                       ds 1
RAM:5C56 ??                       ds 1
RAM:5C57 ??                       ds 1
RAM:5C58 ??                       ds 1
RAM:5C59 ??                       ds 1
RAM:5C5A ??                       ds 1
RAM:5C5B ??                       ds 1
RAM:5C5C ??                       ds 1
RAM:5C5D ??                       ds 1
RAM:5C5E ??                       ds 1
RAM:5C5F ??                       ds 1
RAM:5C60 ??                       ds 1
RAM:5C61 ??                       ds 1
RAM:5C62 ??                       ds 1
RAM:5C63 ??                       ds 1
RAM:5C64 ??                       ds 1
RAM:5C65 ??                       ds 1
RAM:5C66 ??                       ds 1
RAM:5C67 ??                       ds 1
RAM:5C68 ??                       ds 1
RAM:5C69 ??                       ds 1
RAM:5C6A ??                       ds 1
RAM:5C6B ??                       ds 1
RAM:5C6C ??                       ds 1
RAM:5C6D ??                       ds 1
RAM:5C6E ??                       ds 1
RAM:5C6F ??                       ds 1
RAM:5C70 ??                       ds 1
RAM:5C71 ??                       ds 1
RAM:5C72 ??                       ds 1
RAM:5C73 ??                       ds 1
RAM:5C74 ??                       ds 1
RAM:5C75 ??                       ds 1
RAM:5C76 ??                       ds 1
RAM:5C77 ??                       ds 1
RAM:5C78 ??                       ds 1
RAM:5C79 ??                       ds 1
RAM:5C7A ??                       ds 1
RAM:5C7B ??                       ds 1
RAM:5C7C ??                       ds 1
RAM:5C7D ??                       ds 1
RAM:5C7E ??                       ds 1
RAM:5C7F ??                       ds 1
RAM:5C80 ??                       ds 1
RAM:5C81 ??                       ds 1
RAM:5C82 ??                       ds 1
RAM:5C83 ??                       ds 1
RAM:5C84 ??                       ds 1
RAM:5C85 ??                       ds 1
RAM:5C86 ??                       ds 1
RAM:5C87 ??                       ds 1
RAM:5C88 ??                       ds 1
RAM:5C89 ??                       ds 1
RAM:5C8A ??                       ds 1
RAM:5C8B ??                       ds 1
RAM:5C8C ??                       ds 1
RAM:5C8D ??                       ds 1
RAM:5C8E ??                       ds 1
RAM:5C8F ??                       ds 1
RAM:5C90 ??                       ds 1
RAM:5C91 ??                       ds 1
RAM:5C92 ??                       ds 1
RAM:5C93 ??                       ds 1
RAM:5C94 ??                       ds 1
RAM:5C95 ??                       ds 1
RAM:5C96 ??                       ds 1
RAM:5C97 ??                       ds 1
RAM:5C98 ??                       ds 1
RAM:5C99 ??                       ds 1
RAM:5C9A ??                       ds 1
RAM:5C9B ??                       ds 1
RAM:5C9C ??                       ds 1
RAM:5C9D ??                       ds 1
RAM:5C9E ??                       ds 1
RAM:5C9F ??                       ds 1
RAM:5CA0 ??                       ds 1
RAM:5CA1 ??                       ds 1
RAM:5CA2 ??                       ds 1
RAM:5CA3 ??                       ds 1
RAM:5CA4 ??                       ds 1
RAM:5CA5 ??                       ds 1
RAM:5CA6 ??                       ds 1
RAM:5CA7 ??                       ds 1
RAM:5CA8 ??                       ds 1
RAM:5CA9 ??                       ds 1
RAM:5CAA ??                       ds 1
RAM:5CAB ??                       ds 1
RAM:5CAC ??                       ds 1
RAM:5CAD ??                       ds 1
RAM:5CAE ??                       ds 1
RAM:5CAF ??                       ds 1
RAM:5CB0 ??                       ds 1
RAM:5CB1 ??                       ds 1
RAM:5CB2 ??                       ds 1
RAM:5CB3 ??                       ds 1
RAM:5CB4 ??                       ds 1
RAM:5CB5 ??                       ds 1
RAM:5CB6 ??                       ds 1
RAM:5CB7 ??                       ds 1
RAM:5CB8 ??                       ds 1
RAM:5CB9 ??                       ds 1
RAM:5CBA ??                       ds 1
RAM:5CBB ??                       ds 1
RAM:5CBC ??                       ds 1
RAM:5CBD ??                       ds 1
RAM:5CBE ??                       ds 1
RAM:5CBF ??                       ds 1
RAM:5CC0 ??                       ds 1
RAM:5CC1 ??                       ds 1
RAM:5CC2 ??                       ds 1
RAM:5CC3 ??                       ds 1
RAM:5CC4 ??                       ds 1
RAM:5CC5 ??                       ds 1
RAM:5CC6 ??                       ds 1
RAM:5CC7 ??                       ds 1
RAM:5CC8 ??                       ds 1
RAM:5CC9 ??                       ds 1
RAM:5CCA ??                       ds 1
RAM:5CCB ??                       ds 1
RAM:5CCC ??                       ds 1
RAM:5CCD ??                       ds 1
RAM:5CCE ??                       ds 1
RAM:5CCF ??                       ds 1
RAM:5CD0 ??                       ds 1
RAM:5CD1 ??                       ds 1
RAM:5CD2 ??                       ds 1
RAM:5CD3 ??                       ds 1
RAM:5CD4 ??                       ds 1
RAM:5CD5 ??                       ds 1
RAM:5CD6 ??                       ds 1
RAM:5CD7 ??                       ds 1
RAM:5CD8 ??                       ds 1
RAM:5CD9 ??                       ds 1
RAM:5CDA ??                       ds 1
RAM:5CDB ??                       ds 1
RAM:5CDC ??                       ds 1
RAM:5CDD ??                       ds 1
RAM:5CDE ??                       ds 1
RAM:5CDF ??                       ds 1
RAM:5CE0 ??                       ds 1
RAM:5CE1 ??                       ds 1
RAM:5CE2 ??                       ds 1
RAM:5CE3 ??                       ds 1
RAM:5CE4 ??                       ds 1
RAM:5CE5 ??                       ds 1
RAM:5CE6 ??                       ds 1
RAM:5CE7 ??                       ds 1
RAM:5CE8 ??                       ds 1
RAM:5CE9 ??                       ds 1
RAM:5CEA ??                       ds 1
RAM:5CEB ??                       ds 1
RAM:5CEC ??                       ds 1
RAM:5CED ??                       ds 1
RAM:5CEE ??                       ds 1
RAM:5CEF ??                       ds 1
RAM:5CF0 ??                       ds 1
RAM:5CF1 ??                       ds 1
RAM:5CF2 ??                       ds 1
RAM:5CF3 ??                       ds 1
RAM:5CF4 ??                       ds 1
RAM:5CF5 ??                       ds 1
RAM:5CF6 ??                       ds 1
RAM:5CF7 ??                       ds 1
RAM:5CF8 ??                       ds 1
RAM:5CF9 ??                       ds 1
RAM:5CFA ??                       ds 1
RAM:5CFB ??                       ds 1
RAM:5CFC ??                       ds 1
RAM:5CFD ??                       ds 1
RAM:5CFE ??                       ds 1
RAM:5CFF ??                       ds 1
RAM:5D00 ??                       ds 1
RAM:5D01 ??                       ds 1
RAM:5D02 ??                       ds 1
RAM:5D03 ??                       ds 1
RAM:5D04 ??                       ds 1
RAM:5D05 ??                       ds 1
RAM:5D06 ??                       ds 1
RAM:5D07 ??                       ds 1
RAM:5D08 ??                       ds 1
RAM:5D09 ??                       ds 1
RAM:5D0A ??                       ds 1
RAM:5D0B ??                       ds 1
RAM:5D0C ??                       ds 1
RAM:5D0D ??                       ds 1
RAM:5D0E ??                       ds 1
RAM:5D0F ??                       ds 1
RAM:5D10 ??                       ds 1
RAM:5D11 ??                       ds 1
RAM:5D12 ??                       ds 1
RAM:5D13 ??                       ds 1
RAM:5D14 ??                       ds 1
RAM:5D15 ??                       ds 1
RAM:5D16 ??                       ds 1
RAM:5D17 ??                       ds 1
RAM:5D18 ??                       ds 1
RAM:5D19 ??                       ds 1
RAM:5D1A ??                       ds 1
RAM:5D1B ??                       ds 1
RAM:5D1C ??                       ds 1
RAM:5D1D ??                       ds 1
RAM:5D1E ??                       ds 1
RAM:5D1F ??                       ds 1
RAM:5D20 ??                       ds 1
RAM:5D21 ??                       ds 1
RAM:5D22 ??                       ds 1
RAM:5D23 ??                       ds 1
RAM:5D24 ??                       ds 1
RAM:5D25 ??                       ds 1
RAM:5D26 ??                       ds 1
RAM:5D27 ??                       ds 1
RAM:5D28 ??                       ds 1
RAM:5D29 ??                       ds 1
RAM:5D2A ??                       ds 1
RAM:5D2B ??                       ds 1
RAM:5D2C ??                       ds 1
RAM:5D2D ??                       ds 1
RAM:5D2E ??                       ds 1
RAM:5D2F ??                       ds 1
RAM:5D30 ??                       ds 1
RAM:5D31 ??                       ds 1
RAM:5D32 ??                       ds 1
RAM:5D33 ??                       ds 1
RAM:5D34 ??                       ds 1
RAM:5D35 ??                       ds 1
RAM:5D36 ??                       ds 1
RAM:5D37 ??                       ds 1
RAM:5D38 ??                       ds 1
RAM:5D39 ??                       ds 1
RAM:5D3A ??                       ds 1
RAM:5D3B ??                       ds 1
RAM:5D3C ??                       ds 1
RAM:5D3D ??                       ds 1
RAM:5D3E ??                       ds 1
RAM:5D3F ??                       ds 1
RAM:5D40 ??                       ds 1
RAM:5D41 ??                       ds 1
RAM:5D42 ??                       ds 1
RAM:5D43 ??                       ds 1
RAM:5D44 ??                       ds 1
RAM:5D45 ??                       ds 1
RAM:5D46 ??                       ds 1
RAM:5D47 ??                       ds 1
RAM:5D48 ??                       ds 1
RAM:5D49 ??                       ds 1
RAM:5D4A ??                       ds 1
RAM:5D4B ??                       ds 1
RAM:5D4C ??                       ds 1
RAM:5D4D ??                       ds 1
RAM:5D4E ??                       ds 1
RAM:5D4F ??                       ds 1
RAM:5D50 ??                       ds 1
RAM:5D51 ??                       ds 1
RAM:5D52 ??                       ds 1
RAM:5D53 ??                       ds 1
RAM:5D54 ??                       ds 1
RAM:5D55 ??                       ds 1
RAM:5D56 ??                       ds 1
RAM:5D57 ??                       ds 1
RAM:5D58 ??                       ds 1
RAM:5D59 ??                       ds 1
RAM:5D5A ??                       ds 1
RAM:5D5B ??                       ds 1
RAM:5D5C ??                       ds 1
RAM:5D5D ??                       ds 1
RAM:5D5E ??                       ds 1
RAM:5D5F ??                       ds 1
RAM:5D60 ??                       ds 1
RAM:5D61 ??                       ds 1
RAM:5D62 ??                       ds 1
RAM:5D63 ??                       ds 1
RAM:5D64 ??                       ds 1
RAM:5D65 ??                       ds 1
RAM:5D66 ??                       ds 1
RAM:5D67 ??                       ds 1
RAM:5D68 ??                       ds 1
RAM:5D69 ??                       ds 1
RAM:5D6A ??                       ds 1
RAM:5D6B ??                       ds 1
RAM:5D6C ??                       ds 1
RAM:5D6D ??                       ds 1
RAM:5D6E ??                       ds 1
RAM:5D6F ??                       ds 1
RAM:5D70 ??                       ds 1
RAM:5D71 ??                       ds 1
RAM:5D72 ??                       ds 1
RAM:5D73 ??                       ds 1
RAM:5D74 ??                       ds 1
RAM:5D75 ??                       ds 1
RAM:5D76 ??                       ds 1
RAM:5D77 ??                       ds 1
RAM:5D78 ??                       ds 1
RAM:5D79 ??                       ds 1
RAM:5D7A ??                       ds 1
RAM:5D7B ??                       ds 1
RAM:5D7C ??                       ds 1
RAM:5D7D ??                       ds 1
RAM:5D7E ??                       ds 1
RAM:5D7F ??                       ds 1
RAM:5D80 ??                       ds 1
RAM:5D81 ??                       ds 1
RAM:5D82 ??                       ds 1
RAM:5D83 ??                       ds 1
RAM:5D84 ??                       ds 1
RAM:5D85 ??                       ds 1
RAM:5D86 ??                       ds 1
RAM:5D87 ??                       ds 1
RAM:5D88 ??                       ds 1
RAM:5D89 ??                       ds 1
RAM:5D8A ??                       ds 1
RAM:5D8B ??                       ds 1
RAM:5D8C ??                       ds 1
RAM:5D8D ??                       ds 1
RAM:5D8E ??                       ds 1
RAM:5D8F ??                       ds 1
RAM:5D90 ??                       ds 1
RAM:5D91 ??                       ds 1
RAM:5D92 ??                       ds 1
RAM:5D93 ??                       ds 1
RAM:5D94 ??                       ds 1
RAM:5D95 ??                       ds 1
RAM:5D96 ??                       ds 1
RAM:5D97 ??                       ds 1
RAM:5D98 ??                       ds 1
RAM:5D99 ??                       ds 1
RAM:5D9A ??                       ds 1
RAM:5D9B ??                       ds 1
RAM:5D9C ??                       ds 1
RAM:5D9D ??                       ds 1
RAM:5D9E ??                       ds 1
RAM:5D9F ??                       ds 1
RAM:5DA0 ??                       ds 1
RAM:5DA1 ??                       ds 1
RAM:5DA2 ??                       ds 1
RAM:5DA3 ??                       ds 1
RAM:5DA4 ??                       ds 1
RAM:5DA5 ??                       ds 1
RAM:5DA6 ??                       ds 1
RAM:5DA7 ??                       ds 1
RAM:5DA8 ??                       ds 1
RAM:5DA9 ??                       ds 1
RAM:5DAA ??                       ds 1
RAM:5DAB ??                       ds 1
RAM:5DAC ??                       ds 1
RAM:5DAD ??                       ds 1
RAM:5DAE ??                       ds 1
RAM:5DAF ??                       ds 1
RAM:5DB0 ??                       ds 1
RAM:5DB1 ??                       ds 1
RAM:5DB2 ??                       ds 1
RAM:5DB3 ??                       ds 1
RAM:5DB4 ??                       ds 1
RAM:5DB5 ??                       ds 1
RAM:5DB6 ??                       ds 1
RAM:5DB7 ??                       ds 1
RAM:5DB8 ??                       ds 1
RAM:5DB9 ??                       ds 1
RAM:5DBA ??                       ds 1
RAM:5DBB ??                       ds 1
RAM:5DBC ??                       ds 1
RAM:5DBD ??                       ds 1
RAM:5DBE ??                       ds 1
RAM:5DBF ??                       ds 1
RAM:5DC0 ??                       ds 1
RAM:5DC1 ??                       ds 1
RAM:5DC2 ??                       ds 1
RAM:5DC3 ??                       ds 1
RAM:5DC4 ??                       ds 1
RAM:5DC5 ??                       ds 1
RAM:5DC6 ??                       ds 1
RAM:5DC7 ??                       ds 1
RAM:5DC8 ??                       ds 1
RAM:5DC9 ??                       ds 1
RAM:5DCA ??                       ds 1
RAM:5DCB ??                       ds 1
RAM:5DCC ??                       ds 1
RAM:5DCD ??                       ds 1
RAM:5DCE ??                       ds 1
RAM:5DCF ??                       ds 1
RAM:5DD0 ??                       ds 1
RAM:5DD1 ??                       ds 1
RAM:5DD2 ??                       ds 1
RAM:5DD3 ??                       ds 1
RAM:5DD4 ??                       ds 1
RAM:5DD5 ??                       ds 1
RAM:5DD6 ??                       ds 1
RAM:5DD7 ??                       ds 1
RAM:5DD8 ??                       ds 1
RAM:5DD9 ??                       ds 1
RAM:5DDA ??                       ds 1
RAM:5DDB ??                       ds 1
RAM:5DDC ??                       ds 1
RAM:5DDD ??                       ds 1
RAM:5DDE ??                       ds 1
RAM:5DDF ??                       ds 1
RAM:5DE0 ??                       ds 1
RAM:5DE1 ??                       ds 1
RAM:5DE2 ??                       ds 1
RAM:5DE3 ??                       ds 1
RAM:5DE4 ??                       ds 1
RAM:5DE5 ??                       ds 1
RAM:5DE6 ??                       ds 1
RAM:5DE7 ??                       ds 1
RAM:5DE8 ??                       ds 1
RAM:5DE9 ??                       ds 1
RAM:5DEA ??                       ds 1
RAM:5DEB ??                       ds 1
RAM:5DEC ??                       ds 1
RAM:5DED ??                       ds 1
RAM:5DEE ??                       ds 1
RAM:5DEF ??                       ds 1
RAM:5DF0 ??                       ds 1
RAM:5DF1 ??                       ds 1
RAM:5DF2 ??                       ds 1
RAM:5DF3 ??                       ds 1
RAM:5DF4 ??                       ds 1
RAM:5DF5 ??                       ds 1
RAM:5DF6 ??                       ds 1
RAM:5DF7 ??                       ds 1
RAM:5DF8 ??                       ds 1
RAM:5DF9 ??                       ds 1
RAM:5DFA ??                       ds 1
RAM:5DFB ??                       ds 1
RAM:5DFC ??                       ds 1
RAM:5DFD ??                       ds 1
RAM:5DFE ??                       ds 1
RAM:5DFF ??                       ds 1
RAM:5E00 ??                       ds 1
RAM:5E01 ??                       ds 1
RAM:5E02 ??                       ds 1
RAM:5E03 ??                       ds 1
RAM:5E04 ??                       ds 1
RAM:5E05 ??                       ds 1
RAM:5E06 ??                       ds 1
RAM:5E07 ??                       ds 1
RAM:5E08 ??                       ds 1
RAM:5E09 ??                       ds 1
RAM:5E0A ??                       ds 1
RAM:5E0B ??                       ds 1
RAM:5E0C ??                       ds 1
RAM:5E0D ??                       ds 1
RAM:5E0E ??                       ds 1
RAM:5E0F ??                       ds 1
RAM:5E10 ??                       ds 1
RAM:5E11 ??                       ds 1
RAM:5E12 ??                       ds 1
RAM:5E13 ??                       ds 1
RAM:5E14 ??                       ds 1
RAM:5E15 ??                       ds 1
RAM:5E16 ??                       ds 1
RAM:5E17 ??                       ds 1
RAM:5E18 ??                       ds 1
RAM:5E19 ??                       ds 1
RAM:5E1A ??                       ds 1
RAM:5E1B ??                       ds 1
RAM:5E1C ??                       ds 1
RAM:5E1D ??                       ds 1
RAM:5E1E ??                       ds 1
RAM:5E1F ??                       ds 1
RAM:5E20 ??                       ds 1
RAM:5E21 ??                       ds 1
RAM:5E22 ??                       ds 1
RAM:5E23 ??                       ds 1
RAM:5E24 ??                       ds 1
RAM:5E25 ??                       ds 1
RAM:5E26 ??                       ds 1
RAM:5E27 ??                       ds 1
RAM:5E28 ??                       ds 1
RAM:5E29 ??                       ds 1
RAM:5E2A ??                       ds 1
RAM:5E2B ??                       ds 1
RAM:5E2C ??                       ds 1
RAM:5E2D ??                       ds 1
RAM:5E2E ??                       ds 1
RAM:5E2F ??                       ds 1
RAM:5E30 ??                       ds 1
RAM:5E31 ??                       ds 1
RAM:5E32 ??                       ds 1
RAM:5E33 ??                       ds 1
RAM:5E34 ??                       ds 1
RAM:5E35 ??                       ds 1
RAM:5E36 ??                       ds 1
RAM:5E37 ??                       ds 1
RAM:5E38 ??                       ds 1
RAM:5E39 ??                       ds 1
RAM:5E3A ??                       ds 1
RAM:5E3B ??                       ds 1
RAM:5E3C ??                       ds 1
RAM:5E3D ??                       ds 1
RAM:5E3E ??                       ds 1
RAM:5E3F ??                       ds 1
RAM:5E40 ??                       ds 1
RAM:5E41 ??                       ds 1
RAM:5E42 ??                       ds 1
RAM:5E43 ??                       ds 1
RAM:5E44 ??                       ds 1
RAM:5E45 ??                       ds 1
RAM:5E46 ??                       ds 1
RAM:5E47 ??                       ds 1
RAM:5E48 ??                       ds 1
RAM:5E49 ??                       ds 1
RAM:5E4A ??                       ds 1
RAM:5E4B ??                       ds 1
RAM:5E4C ??                       ds 1
RAM:5E4D ??                       ds 1
RAM:5E4E ??                       ds 1
RAM:5E4F ??                       ds 1
RAM:5E50 ??                       ds 1
RAM:5E51 ??                       ds 1
RAM:5E52 ??                       ds 1
RAM:5E53 ??                       ds 1
RAM:5E54 ??                       ds 1
RAM:5E55 ??                       ds 1
RAM:5E56 ??                       ds 1
RAM:5E57 ??                       ds 1
RAM:5E58 ??                       ds 1
RAM:5E59 ??                       ds 1
RAM:5E5A ??                       ds 1
RAM:5E5B ??                       ds 1
RAM:5E5C ??                       ds 1
RAM:5E5D ??                       ds 1
RAM:5E5E ??                       ds 1
RAM:5E5F ??                       ds 1
RAM:5E60 ??                       ds 1
RAM:5E61 ??                       ds 1
RAM:5E62 ??                       ds 1
RAM:5E63 ??                       ds 1
RAM:5E64 ??                       ds 1
RAM:5E65 ??                       ds 1
RAM:5E66 ??                       ds 1
RAM:5E67 ??                       ds 1
RAM:5E68 ??                       ds 1
RAM:5E69 ??                       ds 1
RAM:5E6A ??                       ds 1
RAM:5E6B ??                       ds 1
RAM:5E6C ??                       ds 1
RAM:5E6D ??                       ds 1
RAM:5E6E ??                       ds 1
RAM:5E6F ??                       ds 1
RAM:5E70 ??                       ds 1
RAM:5E71 ??                       ds 1
RAM:5E72 ??                       ds 1
RAM:5E73 ??                       ds 1
RAM:5E74 ??                       ds 1
RAM:5E75 ??                       ds 1
RAM:5E76 ??                       ds 1
RAM:5E77 ??                       ds 1
RAM:5E78 ??                       ds 1
RAM:5E79 ??                       ds 1
RAM:5E7A ??                       ds 1
RAM:5E7B ??                       ds 1
RAM:5E7C ??                       ds 1
RAM:5E7D ??                       ds 1
RAM:5E7E ??                       ds 1
RAM:5E7F ??                       ds 1
RAM:5E80 ??                       ds 1
RAM:5E81 ??                       ds 1
RAM:5E82 ??                       ds 1
RAM:5E83 ??                       ds 1
RAM:5E84 ??                       ds 1
RAM:5E85 ??                       ds 1
RAM:5E86 ??                       ds 1
RAM:5E87 ??                       ds 1
RAM:5E88 ??                       ds 1
RAM:5E89 ??                       ds 1
RAM:5E8A ??                       ds 1
RAM:5E8B ??                       ds 1
RAM:5E8C ??                       ds 1
RAM:5E8D ??                       ds 1
RAM:5E8E ??                       ds 1
RAM:5E8F ??                       ds 1
RAM:5E90 ??                       ds 1
RAM:5E91 ??                       ds 1
RAM:5E92 ??                       ds 1
RAM:5E93 ??                       ds 1
RAM:5E94 ??                       ds 1
RAM:5E95 ??                       ds 1
RAM:5E96 ??                       ds 1
RAM:5E97 ??                       ds 1
RAM:5E98 ??                       ds 1
RAM:5E99 ??                       ds 1
RAM:5E9A ??                       ds 1
RAM:5E9B ??                       ds 1
RAM:5E9C ??                       ds 1
RAM:5E9D ??                       ds 1
RAM:5E9E ??                       ds 1
RAM:5E9F ??                       ds 1
RAM:5EA0 ??                       ds 1
RAM:5EA1 ??                       ds 1
RAM:5EA2 ??                       ds 1
RAM:5EA3 ??                       ds 1
RAM:5EA4 ??                       ds 1
RAM:5EA5 ??                       ds 1
RAM:5EA6 ??                       ds 1
RAM:5EA7 ??                       ds 1
RAM:5EA8 ??                       ds 1
RAM:5EA9 ??                       ds 1
RAM:5EAA ??                       ds 1
RAM:5EAB ??                       ds 1
RAM:5EAC ??                       ds 1
RAM:5EAD ??                       ds 1
RAM:5EAE ??                       ds 1
RAM:5EAF ??                       ds 1
RAM:5EB0 ??                       ds 1
RAM:5EB1 ??                       ds 1
RAM:5EB2 ??                       ds 1
RAM:5EB3 ??                       ds 1
RAM:5EB4 ??                       ds 1
RAM:5EB5 ??                       ds 1
RAM:5EB6 ??                       ds 1
RAM:5EB7 ??                       ds 1
RAM:5EB8 ??                       ds 1
RAM:5EB9 ??                       ds 1
RAM:5EBA ??                       ds 1
RAM:5EBB ??                       ds 1
RAM:5EBC ??                       ds 1
RAM:5EBD ??                       ds 1
RAM:5EBE ??                       ds 1
RAM:5EBF ??                       ds 1
RAM:5EC0 ??                       ds 1
RAM:5EC1 ??                       ds 1
RAM:5EC2 ??                       ds 1
RAM:5EC3 ??                       ds 1
RAM:5EC4 ??                       ds 1
RAM:5EC5 ??                       ds 1
RAM:5EC6 ??                       ds 1
RAM:5EC7 ??                       ds 1
RAM:5EC8 ??                       ds 1
RAM:5EC9 ??                       ds 1
RAM:5ECA ??                       ds 1
RAM:5ECB ??                       ds 1
RAM:5ECC ??                       ds 1
RAM:5ECD ??                       ds 1
RAM:5ECE ??                       ds 1
RAM:5ECF ??                       ds 1
RAM:5ED0 ??                       ds 1
RAM:5ED1 ??                       ds 1
RAM:5ED2 ??                       ds 1
RAM:5ED3 ??                       ds 1
RAM:5ED4 ??                       ds 1
RAM:5ED5 ??                       ds 1
RAM:5ED6 ??                       ds 1
RAM:5ED7 ??                       ds 1
RAM:5ED8 ??                       ds 1
RAM:5ED9 ??                       ds 1
RAM:5EDA ??                       ds 1
RAM:5EDB ??                       ds 1
RAM:5EDC ??                       ds 1
RAM:5EDD ??                       ds 1
RAM:5EDE ??                       ds 1
RAM:5EDF ??                       ds 1
RAM:5EE0 ??                       ds 1
RAM:5EE1 ??                       ds 1
RAM:5EE2 ??                       ds 1
RAM:5EE3 ??                       ds 1
RAM:5EE4 ??                       ds 1
RAM:5EE5 ??                       ds 1
RAM:5EE6 ??                       ds 1
RAM:5EE7 ??                       ds 1
RAM:5EE8 ??                       ds 1
RAM:5EE9 ??                       ds 1
RAM:5EEA ??                       ds 1
RAM:5EEB ??                       ds 1
RAM:5EEC ??                       ds 1
RAM:5EED ??                       ds 1
RAM:5EEE ??                       ds 1
RAM:5EEF ??                       ds 1
RAM:5EF0 ??                       ds 1
RAM:5EF1 ??                       ds 1
RAM:5EF2 ??                       ds 1
RAM:5EF3 ??                       ds 1
RAM:5EF4 ??                       ds 1
RAM:5EF5 ??                       ds 1
RAM:5EF6 ??                       ds 1
RAM:5EF7 ??                       ds 1
RAM:5EF8 ??                       ds 1
RAM:5EF9 ??                       ds 1
RAM:5EFA ??                       ds 1
RAM:5EFB ??                       ds 1
RAM:5EFC ??                       ds 1
RAM:5EFD ??                       ds 1
RAM:5EFE ??                       ds 1
RAM:5EFF ??                       ds 1
RAM:5F00 ??                       ds 1
RAM:5F01 ??                       ds 1
RAM:5F02 ??                       ds 1
RAM:5F03 ??                       ds 1
RAM:5F04 ??                       ds 1
RAM:5F05 ??                       ds 1
RAM:5F06 ??                       ds 1
RAM:5F07 ??                       ds 1
RAM:5F08 ??                       ds 1
RAM:5F09 ??                       ds 1
RAM:5F0A ??                       ds 1
RAM:5F0B ??                       ds 1
RAM:5F0C ??                       ds 1
RAM:5F0D ??                       ds 1
RAM:5F0E ??                       ds 1
RAM:5F0F ??                       ds 1
RAM:5F10 ??                       ds 1
RAM:5F11 ??                       ds 1
RAM:5F12 ??                       ds 1
RAM:5F13 ??                       ds 1
RAM:5F14 ??                       ds 1
RAM:5F15 ??                       ds 1
RAM:5F16 ??                       ds 1
RAM:5F17 ??                       ds 1
RAM:5F18 ??                       ds 1
RAM:5F19 ??                       ds 1
RAM:5F1A ??                       ds 1
RAM:5F1B ??                       ds 1
RAM:5F1C ??                       ds 1
RAM:5F1D ??                       ds 1
RAM:5F1E ??                       ds 1
RAM:5F1F ??                       ds 1
RAM:5F20 ??                       ds 1
RAM:5F21 ??                       ds 1
RAM:5F22 ??                       ds 1
RAM:5F23 ??                       ds 1
RAM:5F24 ??                       ds 1
RAM:5F25 ??                       ds 1
RAM:5F26 ??                       ds 1
RAM:5F27 ??                       ds 1
RAM:5F28 ??                       ds 1
RAM:5F29 ??                       ds 1
RAM:5F2A ??                       ds 1
RAM:5F2B ??                       ds 1
RAM:5F2C ??                       ds 1
RAM:5F2D ??                       ds 1
RAM:5F2E ??                       ds 1
RAM:5F2F ??                       ds 1
RAM:5F30 ??                       ds 1
RAM:5F31 ??                       ds 1
RAM:5F32 ??                       ds 1
RAM:5F33 ??                       ds 1
RAM:5F34 ??                       ds 1
RAM:5F35 ??                       ds 1
RAM:5F36 ??                       ds 1
RAM:5F37 ??                       ds 1
RAM:5F38 ??                       ds 1
RAM:5F39 ??                       ds 1
RAM:5F3A ??                       ds 1
RAM:5F3B ??                       ds 1
RAM:5F3C ??                       ds 1
RAM:5F3D ??                       ds 1
RAM:5F3E ??                       ds 1
RAM:5F3F ??                       ds 1
RAM:5F40 ??                       ds 1
RAM:5F41 ??                       ds 1
RAM:5F42 ??                       ds 1
RAM:5F43 ??                       ds 1
RAM:5F44 ??                       ds 1
RAM:5F45 ??                       ds 1
RAM:5F46 ??                       ds 1
RAM:5F47 ??                       ds 1
RAM:5F48 ??                       ds 1
RAM:5F49 ??                       ds 1
RAM:5F4A ??                       ds 1
RAM:5F4B ??                       ds 1
RAM:5F4C ??                       ds 1
RAM:5F4D ??                       ds 1
RAM:5F4E ??                       ds 1
RAM:5F4F ??                       ds 1
RAM:5F50 ??                       ds 1
RAM:5F51 ??                       ds 1
RAM:5F52 ??                       ds 1
RAM:5F53 ??                       ds 1
RAM:5F54 ??                       ds 1
RAM:5F55 ??                       ds 1
RAM:5F56 ??                       ds 1
RAM:5F57 ??                       ds 1
RAM:5F58 ??                       ds 1
RAM:5F59 ??                       ds 1
RAM:5F5A ??                       ds 1
RAM:5F5B ??                       ds 1
RAM:5F5C ??                       ds 1
RAM:5F5D ??                       ds 1
RAM:5F5E ??                       ds 1
RAM:5F5F ??                       ds 1
RAM:5F60 ??                       ds 1
RAM:5F61 ??                       ds 1
RAM:5F62 ??                       ds 1
RAM:5F63 ??                       ds 1
RAM:5F64 ??                       ds 1
RAM:5F65 ??                       ds 1
RAM:5F66 ??                       ds 1
RAM:5F67 ??                       ds 1
RAM:5F68 ??                       ds 1
RAM:5F69 ??                       ds 1
RAM:5F6A ??                       ds 1
RAM:5F6B ??                       ds 1
RAM:5F6C ??                       ds 1
RAM:5F6D ??                       ds 1
RAM:5F6E ??                       ds 1
RAM:5F6F ??                       ds 1
RAM:5F70 ??                       ds 1
RAM:5F71 ??                       ds 1
RAM:5F72 ??                       ds 1
RAM:5F73 ??                       ds 1
RAM:5F74 ??                       ds 1
RAM:5F75 ??                       ds 1
RAM:5F76 ??                       ds 1
RAM:5F77 ??                       ds 1
RAM:5F78 ??                       ds 1
RAM:5F79 ??                       ds 1
RAM:5F7A ??                       ds 1
RAM:5F7B ??                       ds 1
RAM:5F7C ??                       ds 1
RAM:5F7D ??                       ds 1
RAM:5F7E ??                       ds 1
RAM:5F7F ??                       ds 1
RAM:5F80 ??                       ds 1
RAM:5F81 ??                       ds 1
RAM:5F82 ??                       ds 1
RAM:5F83 ??                       ds 1
RAM:5F84 ??                       ds 1
RAM:5F85 ??                       ds 1
RAM:5F86 ??                       ds 1
RAM:5F87 ??                       ds 1
RAM:5F88 ??                       ds 1
RAM:5F89 ??                       ds 1
RAM:5F8A ??                       ds 1
RAM:5F8B ??                       ds 1
RAM:5F8C ??                       ds 1
RAM:5F8D ??                       ds 1
RAM:5F8E ??                       ds 1
RAM:5F8F ??                       ds 1
RAM:5F90 ??                       ds 1
RAM:5F91 ??                       ds 1
RAM:5F92 ??                       ds 1
RAM:5F93 ??                       ds 1
RAM:5F94 ??                       ds 1
RAM:5F95 ??                       ds 1
RAM:5F96 ??                       ds 1
RAM:5F97 ??                       ds 1
RAM:5F98 ??                       ds 1
RAM:5F99 ??                       ds 1
RAM:5F9A ??                       ds 1
RAM:5F9B ??                       ds 1
RAM:5F9C ??                       ds 1
RAM:5F9D ??                       ds 1
RAM:5F9E ??                       ds 1
RAM:5F9F ??                       ds 1
RAM:5FA0 ??                       ds 1
RAM:5FA1 ??                       ds 1
RAM:5FA2 ??                       ds 1
RAM:5FA3 ??                       ds 1
RAM:5FA4 ??                       ds 1
RAM:5FA5 ??                       ds 1
RAM:5FA6 ??                       ds 1
RAM:5FA7 ??                       ds 1
RAM:5FA8 ??                       ds 1
RAM:5FA9 ??                       ds 1
RAM:5FAA ??                       ds 1
RAM:5FAB ??                       ds 1
RAM:5FAC ??                       ds 1
RAM:5FAD ??                       ds 1
RAM:5FAE ??                       ds 1
RAM:5FAF ??                       ds 1
RAM:5FB0 ??                       ds 1
RAM:5FB1 ??                       ds 1
RAM:5FB2 ??                       ds 1
RAM:5FB3 ??                       ds 1
RAM:5FB4 ??                       ds 1
RAM:5FB5 ??                       ds 1
RAM:5FB6 ??                       ds 1
RAM:5FB7 ??                       ds 1
RAM:5FB8 ??                       ds 1
RAM:5FB9 ??                       ds 1
RAM:5FBA ??                       ds 1
RAM:5FBB ??                       ds 1
RAM:5FBC ??                       ds 1
RAM:5FBD ??                       ds 1
RAM:5FBE ??                       ds 1
RAM:5FBF ??                       ds 1
RAM:5FC0 ??                       ds 1
RAM:5FC1 ??                       ds 1
RAM:5FC2 ??                       ds 1
RAM:5FC3 ??                       ds 1
RAM:5FC4 ??                       ds 1
RAM:5FC5 ??                       ds 1
RAM:5FC6 ??                       ds 1
RAM:5FC7 ??                       ds 1
RAM:5FC8 ??                       ds 1
RAM:5FC9 ??                       ds 1
RAM:5FCA ??                       ds 1
RAM:5FCB ??                       ds 1
RAM:5FCC ??                       ds 1
RAM:5FCD ??                       ds 1
RAM:5FCE ??                       ds 1
RAM:5FCF ??                       ds 1
RAM:5FD0 ??                       ds 1
RAM:5FD1 ??                       ds 1
RAM:5FD2 ??                       ds 1
RAM:5FD3 ??                       ds 1
RAM:5FD4 ??                       ds 1
RAM:5FD5 ??                       ds 1
RAM:5FD6 ??                       ds 1
RAM:5FD7 ??                       ds 1
RAM:5FD8 ??                       ds 1
RAM:5FD9 ??                       ds 1
RAM:5FDA ??                       ds 1
RAM:5FDB ??                       ds 1
RAM:5FDC ??                       ds 1
RAM:5FDD ??                       ds 1
RAM:5FDE ??                       ds 1
RAM:5FDF ??                       ds 1
RAM:5FE0 ??                       ds 1
RAM:5FE1 ??                       ds 1
RAM:5FE2 ??                       ds 1
RAM:5FE3 ??                       ds 1
RAM:5FE4 ??                       ds 1
RAM:5FE5 ??                       ds 1
RAM:5FE6 ??                       ds 1
RAM:5FE7 ??                       ds 1
RAM:5FE8 ??                       ds 1
RAM:5FE9 ??                       ds 1
RAM:5FEA ??                       ds 1
RAM:5FEB ??                       ds 1
RAM:5FEC ??                       ds 1
RAM:5FED ??                       ds 1
RAM:5FEE ??                       ds 1
RAM:5FEF ??                       ds 1
RAM:5FF0 ??                       ds 1
RAM:5FF1 ??                       ds 1
RAM:5FF2 ??                       ds 1
RAM:5FF3 ??                       ds 1
RAM:5FF4 ??                       ds 1
RAM:5FF5 ??                       ds 1
RAM:5FF6 ??                       ds 1
RAM:5FF7 ??                       ds 1
RAM:5FF8 ??                       ds 1
RAM:5FF9 ??                       ds 1
RAM:5FFA ??                       ds 1
RAM:5FFB ??                       ds 1
RAM:5FFC ??                       ds 1
RAM:5FFD ??       NMI_hdlr:       ds 1                    ; CODE XREF: ROM:NMI↑j
RAM:5FFE ??                       ds 1
RAM:5FFF ??                       ds 1
RAM:5FFF          ; end of 'RAM'
RAM:5FFF
RAM:5FFF
RAM:5FFF                          end